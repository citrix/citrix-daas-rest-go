/*
WEM Public API Guide

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package devicemanagement

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// SystemOptimizationDAASService SystemOptimizationDAAS service
type SystemOptimizationDAASService service

type ApiSystemUtilitySettingQueryRequest struct {
	ctx                 context.Context
	ApiService          *SystemOptimizationDAASService
	accept              *string
	authorization       *string
	citrixCustomerId    *string
	citrixTransactionId *string
}

// Only \&quot;application/json\&quot; is supported.
func (r ApiSystemUtilitySettingQueryRequest) Accept(accept string) ApiSystemUtilitySettingQueryRequest {
	r.accept = &accept
	return r
}

// Citrix Cloud authorization token.
func (r ApiSystemUtilitySettingQueryRequest) Authorization(authorization string) ApiSystemUtilitySettingQueryRequest {
	r.authorization = &authorization
	return r
}

// Citrix Cloud customer ID.
func (r ApiSystemUtilitySettingQueryRequest) CitrixCustomerId(citrixCustomerId string) ApiSystemUtilitySettingQueryRequest {
	r.citrixCustomerId = &citrixCustomerId
	return r
}

// Transaction ID that will be used to track this request.
func (r ApiSystemUtilitySettingQueryRequest) CitrixTransactionId(citrixTransactionId string) ApiSystemUtilitySettingQueryRequest {
	r.citrixTransactionId = &citrixTransactionId
	return r
}

func (r ApiSystemUtilitySettingQueryRequest) Execute() (*SystemUtilitySettingQuery200Response, *http.Response, error) {
	return r.ApiService.SystemUtilitySettingQueryExecute(r)
}

/*
SystemUtilitySettingQuery Query System Optimization Configurations

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiSystemUtilitySettingQueryRequest
*/
func (a *SystemOptimizationDAASService) SystemUtilitySettingQuery(ctx context.Context) ApiSystemUtilitySettingQueryRequest {
	return ApiSystemUtilitySettingQueryRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return SystemUtilitySettingQuery200Response
func (a *SystemOptimizationDAASService) SystemUtilitySettingQueryExecute(r ApiSystemUtilitySettingQueryRequest) (*SystemUtilitySettingQuery200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SystemUtilitySettingQuery200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SystemOptimizationDAASService.SystemUtilitySettingQuery")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/services/wem/systemOptimizations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.accept == nil {
		return localVarReturnValue, nil, reportError("accept is required and must be specified")
	}
	if r.authorization == nil {
		return localVarReturnValue, nil, reportError("authorization is required and must be specified")
	}
	if r.citrixCustomerId == nil {
		return localVarReturnValue, nil, reportError("citrixCustomerId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json; charset=utf-8", "items"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept", r.accept, "", "")
	parameterAddToHeaderOrQuery(localVarHeaderParams, "Authorization", r.authorization, "", "")
	if r.citrixTransactionId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-TransactionId", r.citrixTransactionId, "", "")
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-CustomerId", r.citrixCustomerId, "", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v RestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v RestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 406 {
			var v RestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 415 {
			var v RestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSystemUtilitySettingQueryByIdRequest struct {
	ctx                 context.Context
	ApiService          *SystemOptimizationDAASService
	id                  int64
	accept              *string
	authorization       *string
	citrixCustomerId    *string
	citrixTransactionId *string
}

// Only \&quot;application/json\&quot; is supported.
func (r ApiSystemUtilitySettingQueryByIdRequest) Accept(accept string) ApiSystemUtilitySettingQueryByIdRequest {
	r.accept = &accept
	return r
}

// Citrix Cloud authorization token.
func (r ApiSystemUtilitySettingQueryByIdRequest) Authorization(authorization string) ApiSystemUtilitySettingQueryByIdRequest {
	r.authorization = &authorization
	return r
}

// Citrix Cloud customer ID.
func (r ApiSystemUtilitySettingQueryByIdRequest) CitrixCustomerId(citrixCustomerId string) ApiSystemUtilitySettingQueryByIdRequest {
	r.citrixCustomerId = &citrixCustomerId
	return r
}

// Transaction ID that will be used to track this request.
func (r ApiSystemUtilitySettingQueryByIdRequest) CitrixTransactionId(citrixTransactionId string) ApiSystemUtilitySettingQueryByIdRequest {
	r.citrixTransactionId = &citrixTransactionId
	return r
}

func (r ApiSystemUtilitySettingQueryByIdRequest) Execute() (*SystemOptimizationModel, *http.Response, error) {
	return r.ApiService.SystemUtilitySettingQueryByIdExecute(r)
}

/*
SystemUtilitySettingQueryById Query System Optimization Configurations by Identity

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The ID of the resource you want to query.
	@return ApiSystemUtilitySettingQueryByIdRequest
*/
func (a *SystemOptimizationDAASService) SystemUtilitySettingQueryById(ctx context.Context, id int64) ApiSystemUtilitySettingQueryByIdRequest {
	return ApiSystemUtilitySettingQueryByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return SystemOptimizationModel
func (a *SystemOptimizationDAASService) SystemUtilitySettingQueryByIdExecute(r ApiSystemUtilitySettingQueryByIdRequest) (*SystemOptimizationModel, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SystemOptimizationModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SystemOptimizationDAASService.SystemUtilitySettingQueryById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/services/wem/systemOptimizations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.accept == nil {
		return localVarReturnValue, nil, reportError("accept is required and must be specified")
	}
	if r.authorization == nil {
		return localVarReturnValue, nil, reportError("authorization is required and must be specified")
	}
	if r.citrixCustomerId == nil {
		return localVarReturnValue, nil, reportError("citrixCustomerId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json; charset=utf-8", "id", "enableCpuSpikeProtection", "enableCpuAutoProtection", "cpuUsageLimitOfSpikeProtection", "cpuUsageLimitSampleTimeOfSpikeProtection", "idlePriorityTimeOfSpikeProtection", "enableLimitCpuCoreUsage", "cpuCoreLimitOfSpikeProtection", "enableIntelligentCpuOptimization", "enableIntelligentIoOptimization", "excludeProcessesFromCpuSpikeProtection", "processesExcludedFromCpuSpikeProtection", "enableProcessCpuPriority", "processesOfCpuPriority", "enableProcessAffinity", "processesOfCpuAffinity", "enableProcessClamping", "processesOfCpuClamping", "enableMemoryWorkingSetOptimization", "idleSampleTimeOfMemoryWorkingSetOptimization", "idleStateLimitOfMemoryWorkingSetOptimization", "excludeProcessesFromMemoryWorkingSetOptimization", "processesExcludedFromMemoryWorkingSetOptimization", "enableProcessIoPriority", "processesOfIoPriority", "enableFastLogoff", "excludeGroupsFromFastLogoff", "groupsExcludedFromFastLogoff"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept", r.accept, "", "")
	parameterAddToHeaderOrQuery(localVarHeaderParams, "Authorization", r.authorization, "", "")
	if r.citrixTransactionId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-TransactionId", r.citrixTransactionId, "", "")
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-CustomerId", r.citrixCustomerId, "", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v RestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v RestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 406 {
			var v RestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 415 {
			var v RestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSystemUtilitySettingUpdateRequest struct {
	ctx                 context.Context
	ApiService          *SystemOptimizationDAASService
	accept              *string
	authorization       *string
	citrixCustomerId    *string
	citrixTransactionId *string
	body                *SystemOptimizationModel
}

// Only \&quot;application/json\&quot; is supported.
func (r ApiSystemUtilitySettingUpdateRequest) Accept(accept string) ApiSystemUtilitySettingUpdateRequest {
	r.accept = &accept
	return r
}

// Citrix Cloud authorization token.
func (r ApiSystemUtilitySettingUpdateRequest) Authorization(authorization string) ApiSystemUtilitySettingUpdateRequest {
	r.authorization = &authorization
	return r
}

// Citrix Cloud customer ID.
func (r ApiSystemUtilitySettingUpdateRequest) CitrixCustomerId(citrixCustomerId string) ApiSystemUtilitySettingUpdateRequest {
	r.citrixCustomerId = &citrixCustomerId
	return r
}

// Transaction ID that will be used to track this request.
func (r ApiSystemUtilitySettingUpdateRequest) CitrixTransactionId(citrixTransactionId string) ApiSystemUtilitySettingUpdateRequest {
	r.citrixTransactionId = &citrixTransactionId
	return r
}

func (r ApiSystemUtilitySettingUpdateRequest) Body(body SystemOptimizationModel) ApiSystemUtilitySettingUpdateRequest {
	r.body = &body
	return r
}

func (r ApiSystemUtilitySettingUpdateRequest) Execute() (*http.Response, error) {
	return r.ApiService.SystemUtilitySettingUpdateExecute(r)
}

/*
SystemUtilitySettingUpdate Update a System Optimization Configuration

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiSystemUtilitySettingUpdateRequest
*/
func (a *SystemOptimizationDAASService) SystemUtilitySettingUpdate(ctx context.Context) ApiSystemUtilitySettingUpdateRequest {
	return ApiSystemUtilitySettingUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *SystemOptimizationDAASService) SystemUtilitySettingUpdateExecute(r ApiSystemUtilitySettingUpdateRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SystemOptimizationDAASService.SystemUtilitySettingUpdate")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/services/wem/systemOptimizations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.accept == nil {
		return nil, reportError("accept is required and must be specified")
	}
	if r.authorization == nil {
		return nil, reportError("authorization is required and must be specified")
	}
	if r.citrixCustomerId == nil {
		return nil, reportError("citrixCustomerId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json; charset=utf-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json; charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept", r.accept, "", "")
	parameterAddToHeaderOrQuery(localVarHeaderParams, "Authorization", r.authorization, "", "")
	if r.citrixTransactionId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-TransactionId", r.citrixTransactionId, "", "")
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-CustomerId", r.citrixCustomerId, "", "")
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v RestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v RestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 406 {
			var v RestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v RestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 415 {
			var v RestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
