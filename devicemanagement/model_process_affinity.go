/*
WEM Public API Guide

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package devicemanagement

import (
	"encoding/json"
)

// checks if the ProcessAffinity type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProcessAffinity{}

// ProcessAffinity struct for ProcessAffinity
type ProcessAffinity struct {
	ProcessName *string `json:"processName,omitempty"`
	Affinity    *int32  `json:"affinity,omitempty"`
}

// NewProcessAffinity instantiates a new ProcessAffinity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProcessAffinity() *ProcessAffinity {
	this := ProcessAffinity{}
	return &this
}

// NewProcessAffinityWithDefaults instantiates a new ProcessAffinity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProcessAffinityWithDefaults() *ProcessAffinity {
	this := ProcessAffinity{}
	return &this
}

// GetProcessName returns the ProcessName field value if set, zero value otherwise.
func (o *ProcessAffinity) GetProcessName() string {
	if o == nil || IsNil(o.ProcessName) {
		var ret string
		return ret
	}
	return *o.ProcessName
}

// GetProcessNameOk returns a tuple with the ProcessName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessAffinity) GetProcessNameOk() (*string, bool) {
	if o == nil || IsNil(o.ProcessName) {
		return nil, false
	}
	return o.ProcessName, true
}

// HasProcessName returns a boolean if a field has been set.
func (o *ProcessAffinity) HasProcessName() bool {
	if o != nil && !IsNil(o.ProcessName) {
		return true
	}

	return false
}

// SetProcessName gets a reference to the given string and assigns it to the ProcessName field.
func (o *ProcessAffinity) SetProcessName(v string) {
	o.ProcessName = &v
}

// GetAffinity returns the Affinity field value if set, zero value otherwise.
func (o *ProcessAffinity) GetAffinity() int32 {
	if o == nil || IsNil(o.Affinity) {
		var ret int32
		return ret
	}
	return *o.Affinity
}

// GetAffinityOk returns a tuple with the Affinity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessAffinity) GetAffinityOk() (*int32, bool) {
	if o == nil || IsNil(o.Affinity) {
		return nil, false
	}
	return o.Affinity, true
}

// HasAffinity returns a boolean if a field has been set.
func (o *ProcessAffinity) HasAffinity() bool {
	if o != nil && !IsNil(o.Affinity) {
		return true
	}

	return false
}

// SetAffinity gets a reference to the given int32 and assigns it to the Affinity field.
func (o *ProcessAffinity) SetAffinity(v int32) {
	o.Affinity = &v
}

func (o ProcessAffinity) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProcessAffinity) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ProcessName) {
		toSerialize["processName"] = o.ProcessName
	}
	if !IsNil(o.Affinity) {
		toSerialize["affinity"] = o.Affinity
	}
	return toSerialize, nil
}

type NullableProcessAffinity struct {
	value *ProcessAffinity
	isSet bool
}

func (v NullableProcessAffinity) Get() *ProcessAffinity {
	return v.value
}

func (v *NullableProcessAffinity) Set(val *ProcessAffinity) {
	v.value = val
	v.isSet = true
}

func (v NullableProcessAffinity) IsSet() bool {
	return v.isSet
}

func (v *NullableProcessAffinity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProcessAffinity(val *ProcessAffinity) *NullableProcessAffinity {
	return &NullableProcessAffinity{value: val, isSet: true}
}

func (v NullableProcessAffinity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProcessAffinity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
