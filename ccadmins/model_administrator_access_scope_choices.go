/*
Administrators APIs

APIs for managing CC administrators.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ccadmins

import (
	"encoding/json"
)

// checks if the AdministratorAccessScopeChoices type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdministratorAccessScopeChoices{}

// AdministratorAccessScopeChoices struct for AdministratorAccessScopeChoices
type AdministratorAccessScopeChoices struct {
	AllScopesSelected *bool                                  `json:"allScopesSelected,omitempty"`
	Choices           []AdministratorAccessScopeChoicesModel `json:"choices,omitempty"`
}

// NewAdministratorAccessScopeChoices instantiates a new AdministratorAccessScopeChoices object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdministratorAccessScopeChoices() *AdministratorAccessScopeChoices {
	this := AdministratorAccessScopeChoices{}
	return &this
}

// NewAdministratorAccessScopeChoicesWithDefaults instantiates a new AdministratorAccessScopeChoices object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdministratorAccessScopeChoicesWithDefaults() *AdministratorAccessScopeChoices {
	this := AdministratorAccessScopeChoices{}
	return &this
}

// GetAllScopesSelected returns the AllScopesSelected field value if set, zero value otherwise.
func (o *AdministratorAccessScopeChoices) GetAllScopesSelected() bool {
	if o == nil || IsNil(o.AllScopesSelected) {
		var ret bool
		return ret
	}
	return *o.AllScopesSelected
}

// GetAllScopesSelectedOk returns a tuple with the AllScopesSelected field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdministratorAccessScopeChoices) GetAllScopesSelectedOk() (*bool, bool) {
	if o == nil || IsNil(o.AllScopesSelected) {
		return nil, false
	}
	return o.AllScopesSelected, true
}

// HasAllScopesSelected returns a boolean if a field has been set.
func (o *AdministratorAccessScopeChoices) HasAllScopesSelected() bool {
	if o != nil && !IsNil(o.AllScopesSelected) {
		return true
	}

	return false
}

// SetAllScopesSelected gets a reference to the given bool and assigns it to the AllScopesSelected field.
func (o *AdministratorAccessScopeChoices) SetAllScopesSelected(v bool) {
	o.AllScopesSelected = &v
}

// GetChoices returns the Choices field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AdministratorAccessScopeChoices) GetChoices() []AdministratorAccessScopeChoicesModel {
	if o == nil {
		var ret []AdministratorAccessScopeChoicesModel
		return ret
	}
	return o.Choices
}

// GetChoicesOk returns a tuple with the Choices field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AdministratorAccessScopeChoices) GetChoicesOk() ([]AdministratorAccessScopeChoicesModel, bool) {
	if o == nil || IsNil(o.Choices) {
		return nil, false
	}
	return o.Choices, true
}

// HasChoices returns a boolean if a field has been set.
func (o *AdministratorAccessScopeChoices) HasChoices() bool {
	if o != nil && !IsNil(o.Choices) {
		return true
	}

	return false
}

// SetChoices gets a reference to the given []AdministratorAccessScopeChoicesModel and assigns it to the Choices field.
func (o *AdministratorAccessScopeChoices) SetChoices(v []AdministratorAccessScopeChoicesModel) {
	o.Choices = v
}

func (o AdministratorAccessScopeChoices) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdministratorAccessScopeChoices) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AllScopesSelected) {
		toSerialize["allScopesSelected"] = o.AllScopesSelected
	}
	if o.Choices != nil {
		toSerialize["choices"] = o.Choices
	}
	return toSerialize, nil
}

type NullableAdministratorAccessScopeChoices struct {
	value *AdministratorAccessScopeChoices
	isSet bool
}

func (v NullableAdministratorAccessScopeChoices) Get() *AdministratorAccessScopeChoices {
	return v.value
}

func (v *NullableAdministratorAccessScopeChoices) Set(val *AdministratorAccessScopeChoices) {
	v.value = val
	v.isSet = true
}

func (v NullableAdministratorAccessScopeChoices) IsSet() bool {
	return v.isSet
}

func (v *NullableAdministratorAccessScopeChoices) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdministratorAccessScopeChoices(val *AdministratorAccessScopeChoices) *NullableAdministratorAccessScopeChoices {
	return &NullableAdministratorAccessScopeChoices{value: val, isSet: true}
}

func (v NullableAdministratorAccessScopeChoices) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdministratorAccessScopeChoices) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
