/*
Administrators APIs

APIs for managing CC administrators.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ccadmins

import (
	"encoding/json"
)

// checks if the PendingAdministratorInvite type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PendingAdministratorInvite{}

// PendingAdministratorInvite struct for PendingAdministratorInvite
type PendingAdministratorInvite struct {
	Email          string                    `json:"email"`
	RequestorEmail NullableString            `json:"requestorEmail,omitempty"`
	FirstName      NullableString            `json:"firstName,omitempty"`
	LastName       NullableString            `json:"lastName,omitempty"`
	Access         *AdministratorAccessModel `json:"access,omitempty"`
}

type _PendingAdministratorInvite PendingAdministratorInvite

// NewPendingAdministratorInvite instantiates a new PendingAdministratorInvite object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPendingAdministratorInvite(email string) *PendingAdministratorInvite {
	this := PendingAdministratorInvite{}
	this.Email = email
	return &this
}

// NewPendingAdministratorInviteWithDefaults instantiates a new PendingAdministratorInvite object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPendingAdministratorInviteWithDefaults() *PendingAdministratorInvite {
	this := PendingAdministratorInvite{}
	return &this
}

// GetEmail returns the Email field value
func (o *PendingAdministratorInvite) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *PendingAdministratorInvite) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *PendingAdministratorInvite) SetEmail(v string) {
	o.Email = v
}

// GetRequestorEmail returns the RequestorEmail field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PendingAdministratorInvite) GetRequestorEmail() string {
	if o == nil || IsNil(o.RequestorEmail.Get()) {
		var ret string
		return ret
	}
	return *o.RequestorEmail.Get()
}

// GetRequestorEmailOk returns a tuple with the RequestorEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PendingAdministratorInvite) GetRequestorEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RequestorEmail.Get(), o.RequestorEmail.IsSet()
}

// HasRequestorEmail returns a boolean if a field has been set.
func (o *PendingAdministratorInvite) HasRequestorEmail() bool {
	if o != nil && o.RequestorEmail.IsSet() {
		return true
	}

	return false
}

// SetRequestorEmail gets a reference to the given NullableString and assigns it to the RequestorEmail field.
func (o *PendingAdministratorInvite) SetRequestorEmail(v string) {
	o.RequestorEmail.Set(&v)
}

// SetRequestorEmailNil sets the value for RequestorEmail to be an explicit nil
func (o *PendingAdministratorInvite) SetRequestorEmailNil() {
	o.RequestorEmail.Set(nil)
}

// UnsetRequestorEmail ensures that no value is present for RequestorEmail, not even an explicit nil
func (o *PendingAdministratorInvite) UnsetRequestorEmail() {
	o.RequestorEmail.Unset()
}

// GetFirstName returns the FirstName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PendingAdministratorInvite) GetFirstName() string {
	if o == nil || IsNil(o.FirstName.Get()) {
		var ret string
		return ret
	}
	return *o.FirstName.Get()
}

// GetFirstNameOk returns a tuple with the FirstName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PendingAdministratorInvite) GetFirstNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FirstName.Get(), o.FirstName.IsSet()
}

// HasFirstName returns a boolean if a field has been set.
func (o *PendingAdministratorInvite) HasFirstName() bool {
	if o != nil && o.FirstName.IsSet() {
		return true
	}

	return false
}

// SetFirstName gets a reference to the given NullableString and assigns it to the FirstName field.
func (o *PendingAdministratorInvite) SetFirstName(v string) {
	o.FirstName.Set(&v)
}

// SetFirstNameNil sets the value for FirstName to be an explicit nil
func (o *PendingAdministratorInvite) SetFirstNameNil() {
	o.FirstName.Set(nil)
}

// UnsetFirstName ensures that no value is present for FirstName, not even an explicit nil
func (o *PendingAdministratorInvite) UnsetFirstName() {
	o.FirstName.Unset()
}

// GetLastName returns the LastName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PendingAdministratorInvite) GetLastName() string {
	if o == nil || IsNil(o.LastName.Get()) {
		var ret string
		return ret
	}
	return *o.LastName.Get()
}

// GetLastNameOk returns a tuple with the LastName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PendingAdministratorInvite) GetLastNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastName.Get(), o.LastName.IsSet()
}

// HasLastName returns a boolean if a field has been set.
func (o *PendingAdministratorInvite) HasLastName() bool {
	if o != nil && o.LastName.IsSet() {
		return true
	}

	return false
}

// SetLastName gets a reference to the given NullableString and assigns it to the LastName field.
func (o *PendingAdministratorInvite) SetLastName(v string) {
	o.LastName.Set(&v)
}

// SetLastNameNil sets the value for LastName to be an explicit nil
func (o *PendingAdministratorInvite) SetLastNameNil() {
	o.LastName.Set(nil)
}

// UnsetLastName ensures that no value is present for LastName, not even an explicit nil
func (o *PendingAdministratorInvite) UnsetLastName() {
	o.LastName.Unset()
}

// GetAccess returns the Access field value if set, zero value otherwise.
func (o *PendingAdministratorInvite) GetAccess() AdministratorAccessModel {
	if o == nil || IsNil(o.Access) {
		var ret AdministratorAccessModel
		return ret
	}
	return *o.Access
}

// GetAccessOk returns a tuple with the Access field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PendingAdministratorInvite) GetAccessOk() (*AdministratorAccessModel, bool) {
	if o == nil || IsNil(o.Access) {
		return nil, false
	}
	return o.Access, true
}

// HasAccess returns a boolean if a field has been set.
func (o *PendingAdministratorInvite) HasAccess() bool {
	if o != nil && !IsNil(o.Access) {
		return true
	}

	return false
}

// SetAccess gets a reference to the given AdministratorAccessModel and assigns it to the Access field.
func (o *PendingAdministratorInvite) SetAccess(v AdministratorAccessModel) {
	o.Access = &v
}

func (o PendingAdministratorInvite) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PendingAdministratorInvite) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["email"] = o.Email
	if o.RequestorEmail.IsSet() {
		toSerialize["requestorEmail"] = o.RequestorEmail.Get()
	}
	if o.FirstName.IsSet() {
		toSerialize["firstName"] = o.FirstName.Get()
	}
	if o.LastName.IsSet() {
		toSerialize["lastName"] = o.LastName.Get()
	}
	if !IsNil(o.Access) {
		toSerialize["access"] = o.Access
	}
	return toSerialize, nil
}

type NullablePendingAdministratorInvite struct {
	value *PendingAdministratorInvite
	isSet bool
}

func (v NullablePendingAdministratorInvite) Get() *PendingAdministratorInvite {
	return v.value
}

func (v *NullablePendingAdministratorInvite) Set(val *PendingAdministratorInvite) {
	v.value = val
	v.isSet = true
}

func (v NullablePendingAdministratorInvite) IsSet() bool {
	return v.isSet
}

func (v *NullablePendingAdministratorInvite) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePendingAdministratorInvite(val *PendingAdministratorInvite) *NullablePendingAdministratorInvite {
	return &NullablePendingAdministratorInvite{value: val, isSet: true}
}

func (v NullablePendingAdministratorInvite) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePendingAdministratorInvite) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
