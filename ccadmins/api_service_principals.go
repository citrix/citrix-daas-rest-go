/*
Citrix.CloudServices.Administrators.Api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ccadmins

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ServicePrincipalsAPIService ServicePrincipalsAPI service
type ServicePrincipalsAPIService service

type ApiCustomerServicePrincipalsDeleteRequest struct {
	ctx context.Context
	ApiService *ServicePrincipalsAPIService
	customer string
	citrixConsistencyToken *string
	xCwsTransactionId *string
	citrixTimeoutMs *float64
}

// CosmosDB consistency token.
func (r ApiCustomerServicePrincipalsDeleteRequest) CitrixConsistencyToken(citrixConsistencyToken string) ApiCustomerServicePrincipalsDeleteRequest {
	r.citrixConsistencyToken = &citrixConsistencyToken
	return r
}

// Used for Citrix Cloud telemetry correlation.
func (r ApiCustomerServicePrincipalsDeleteRequest) XCwsTransactionId(xCwsTransactionId string) ApiCustomerServicePrincipalsDeleteRequest {
	r.xCwsTransactionId = &xCwsTransactionId
	return r
}

// Maximum time caller is willing to wait for a response before timing out the request, in milliseconds
func (r ApiCustomerServicePrincipalsDeleteRequest) CitrixTimeoutMs(citrixTimeoutMs float64) ApiCustomerServicePrincipalsDeleteRequest {
	r.citrixTimeoutMs = &citrixTimeoutMs
	return r
}

func (r ApiCustomerServicePrincipalsDeleteRequest) Execute() (bool, *http.Response, error) {
	return r.ApiService.CustomerServicePrincipalsDeleteExecute(r)
}

/*
CustomerServicePrincipalsDelete Delete all Service Principals in a customer [BearerToken]

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param customer
 @return ApiCustomerServicePrincipalsDeleteRequest
*/
func (a *ServicePrincipalsAPIService) CustomerServicePrincipalsDelete(ctx context.Context, customer string) ApiCustomerServicePrincipalsDeleteRequest {
	return ApiCustomerServicePrincipalsDeleteRequest{
		ApiService: a,
		ctx: ctx,
		customer: customer,
	}
}

// Execute executes the request
//  @return bool
func (a *ServicePrincipalsAPIService) CustomerServicePrincipalsDeleteExecute(r ApiCustomerServicePrincipalsDeleteRequest) (bool, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  bool
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServicePrincipalsAPIService.CustomerServicePrincipalsDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{customer}/ServicePrincipals"
	localVarPath = strings.Replace(localVarPath, "{"+"customer"+"}", url.PathEscape(parameterValueToString(r.customer, "customer")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.citrixConsistencyToken != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-ConsistencyToken", r.citrixConsistencyToken, "")
	}
	if r.xCwsTransactionId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Cws-TransactionId", r.xCwsTransactionId, "")
	}
	if r.citrixTimeoutMs != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-Timeout-ms", r.citrixTimeoutMs, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCustomerServicePrincipalsGetRequest struct {
	ctx context.Context
	ApiService *ServicePrincipalsAPIService
	customer string
	take *int32
	continuation *string
	name *string
	citrixConsistencyToken *string
	xCwsTransactionId *string
	citrixTimeoutMs *float64
}

func (r ApiCustomerServicePrincipalsGetRequest) Take(take int32) ApiCustomerServicePrincipalsGetRequest {
	r.take = &take
	return r
}

func (r ApiCustomerServicePrincipalsGetRequest) Continuation(continuation string) ApiCustomerServicePrincipalsGetRequest {
	r.continuation = &continuation
	return r
}

func (r ApiCustomerServicePrincipalsGetRequest) Name(name string) ApiCustomerServicePrincipalsGetRequest {
	r.name = &name
	return r
}

// CosmosDB consistency token.
func (r ApiCustomerServicePrincipalsGetRequest) CitrixConsistencyToken(citrixConsistencyToken string) ApiCustomerServicePrincipalsGetRequest {
	r.citrixConsistencyToken = &citrixConsistencyToken
	return r
}

// Used for Citrix Cloud telemetry correlation.
func (r ApiCustomerServicePrincipalsGetRequest) XCwsTransactionId(xCwsTransactionId string) ApiCustomerServicePrincipalsGetRequest {
	r.xCwsTransactionId = &xCwsTransactionId
	return r
}

// Maximum time caller is willing to wait for a response before timing out the request, in milliseconds
func (r ApiCustomerServicePrincipalsGetRequest) CitrixTimeoutMs(citrixTimeoutMs float64) ApiCustomerServicePrincipalsGetRequest {
	r.citrixTimeoutMs = &citrixTimeoutMs
	return r
}

func (r ApiCustomerServicePrincipalsGetRequest) Execute() (*CitrixCloudServicesApiModelsSegmentResult, *http.Response, error) {
	return r.ApiService.CustomerServicePrincipalsGetExecute(r)
}

/*
CustomerServicePrincipalsGet Fetches all Service Principals [BearerToken]

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param customer
 @return ApiCustomerServicePrincipalsGetRequest
*/
func (a *ServicePrincipalsAPIService) CustomerServicePrincipalsGet(ctx context.Context, customer string) ApiCustomerServicePrincipalsGetRequest {
	return ApiCustomerServicePrincipalsGetRequest{
		ApiService: a,
		ctx: ctx,
		customer: customer,
	}
}

// Execute executes the request
//  @return CitrixCloudServicesApiModelsSegmentResult
func (a *ServicePrincipalsAPIService) CustomerServicePrincipalsGetExecute(r ApiCustomerServicePrincipalsGetRequest) (*CitrixCloudServicesApiModelsSegmentResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CitrixCloudServicesApiModelsSegmentResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServicePrincipalsAPIService.CustomerServicePrincipalsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{customer}/ServicePrincipals"
	localVarPath = strings.Replace(localVarPath, "{"+"customer"+"}", url.PathEscape(parameterValueToString(r.customer, "customer")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.take != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "take", r.take, "")
	}
	if r.continuation != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "continuation", r.continuation, "")
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.citrixConsistencyToken != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-ConsistencyToken", r.citrixConsistencyToken, "")
	}
	if r.xCwsTransactionId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Cws-TransactionId", r.xCwsTransactionId, "")
	}
	if r.citrixTimeoutMs != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-Timeout-ms", r.citrixTimeoutMs, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCustomerServicePrincipalsIdAccessPutRequest struct {
	ctx context.Context
	ApiService *ServicePrincipalsAPIService
	id string
	customer string
	citrixConsistencyToken *string
	xCwsTransactionId *string
	citrixTimeoutMs *float64
	citrixCloudServicesServiceRuntimePolicySetsModelsAdministratorAccessModel *CitrixCloudServicesServiceRuntimePolicySetsModelsAdministratorAccessModel
}

// CosmosDB consistency token.
func (r ApiCustomerServicePrincipalsIdAccessPutRequest) CitrixConsistencyToken(citrixConsistencyToken string) ApiCustomerServicePrincipalsIdAccessPutRequest {
	r.citrixConsistencyToken = &citrixConsistencyToken
	return r
}

// Used for Citrix Cloud telemetry correlation.
func (r ApiCustomerServicePrincipalsIdAccessPutRequest) XCwsTransactionId(xCwsTransactionId string) ApiCustomerServicePrincipalsIdAccessPutRequest {
	r.xCwsTransactionId = &xCwsTransactionId
	return r
}

// Maximum time caller is willing to wait for a response before timing out the request, in milliseconds
func (r ApiCustomerServicePrincipalsIdAccessPutRequest) CitrixTimeoutMs(citrixTimeoutMs float64) ApiCustomerServicePrincipalsIdAccessPutRequest {
	r.citrixTimeoutMs = &citrixTimeoutMs
	return r
}

func (r ApiCustomerServicePrincipalsIdAccessPutRequest) CitrixCloudServicesServiceRuntimePolicySetsModelsAdministratorAccessModel(citrixCloudServicesServiceRuntimePolicySetsModelsAdministratorAccessModel CitrixCloudServicesServiceRuntimePolicySetsModelsAdministratorAccessModel) ApiCustomerServicePrincipalsIdAccessPutRequest {
	r.citrixCloudServicesServiceRuntimePolicySetsModelsAdministratorAccessModel = &citrixCloudServicesServiceRuntimePolicySetsModelsAdministratorAccessModel
	return r
}

func (r ApiCustomerServicePrincipalsIdAccessPutRequest) Execute() (*CitrixCloudServicesServiceRuntimePolicySetsModelsAdministratorAccessModel, *http.Response, error) {
	return r.ApiService.CustomerServicePrincipalsIdAccessPutExecute(r)
}

/*
CustomerServicePrincipalsIdAccessPut Updates service principal access and policies. [BearerToken]

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @param customer
 @return ApiCustomerServicePrincipalsIdAccessPutRequest
*/
func (a *ServicePrincipalsAPIService) CustomerServicePrincipalsIdAccessPut(ctx context.Context, id string, customer string) ApiCustomerServicePrincipalsIdAccessPutRequest {
	return ApiCustomerServicePrincipalsIdAccessPutRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		customer: customer,
	}
}

// Execute executes the request
//  @return CitrixCloudServicesServiceRuntimePolicySetsModelsAdministratorAccessModel
func (a *ServicePrincipalsAPIService) CustomerServicePrincipalsIdAccessPutExecute(r ApiCustomerServicePrincipalsIdAccessPutRequest) (*CitrixCloudServicesServiceRuntimePolicySetsModelsAdministratorAccessModel, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CitrixCloudServicesServiceRuntimePolicySetsModelsAdministratorAccessModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServicePrincipalsAPIService.CustomerServicePrincipalsIdAccessPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{customer}/ServicePrincipals/{id}/access"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"customer"+"}", url.PathEscape(parameterValueToString(r.customer, "customer")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.citrixConsistencyToken != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-ConsistencyToken", r.citrixConsistencyToken, "")
	}
	if r.xCwsTransactionId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Cws-TransactionId", r.xCwsTransactionId, "")
	}
	if r.citrixTimeoutMs != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-Timeout-ms", r.citrixTimeoutMs, "")
	}
	// body params
	localVarPostBody = r.citrixCloudServicesServiceRuntimePolicySetsModelsAdministratorAccessModel
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCustomerServicePrincipalsIdDeleteRequest struct {
	ctx context.Context
	ApiService *ServicePrincipalsAPIService
	id string
	customer string
	citrixConsistencyToken *string
	xCwsTransactionId *string
	citrixTimeoutMs *float64
}

// CosmosDB consistency token.
func (r ApiCustomerServicePrincipalsIdDeleteRequest) CitrixConsistencyToken(citrixConsistencyToken string) ApiCustomerServicePrincipalsIdDeleteRequest {
	r.citrixConsistencyToken = &citrixConsistencyToken
	return r
}

// Used for Citrix Cloud telemetry correlation.
func (r ApiCustomerServicePrincipalsIdDeleteRequest) XCwsTransactionId(xCwsTransactionId string) ApiCustomerServicePrincipalsIdDeleteRequest {
	r.xCwsTransactionId = &xCwsTransactionId
	return r
}

// Maximum time caller is willing to wait for a response before timing out the request, in milliseconds
func (r ApiCustomerServicePrincipalsIdDeleteRequest) CitrixTimeoutMs(citrixTimeoutMs float64) ApiCustomerServicePrincipalsIdDeleteRequest {
	r.citrixTimeoutMs = &citrixTimeoutMs
	return r
}

func (r ApiCustomerServicePrincipalsIdDeleteRequest) Execute() (bool, *http.Response, error) {
	return r.ApiService.CustomerServicePrincipalsIdDeleteExecute(r)
}

/*
CustomerServicePrincipalsIdDelete Delete a Service Principal [BearerToken]

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @param customer
 @return ApiCustomerServicePrincipalsIdDeleteRequest
*/
func (a *ServicePrincipalsAPIService) CustomerServicePrincipalsIdDelete(ctx context.Context, id string, customer string) ApiCustomerServicePrincipalsIdDeleteRequest {
	return ApiCustomerServicePrincipalsIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		customer: customer,
	}
}

// Execute executes the request
//  @return bool
func (a *ServicePrincipalsAPIService) CustomerServicePrincipalsIdDeleteExecute(r ApiCustomerServicePrincipalsIdDeleteRequest) (bool, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  bool
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServicePrincipalsAPIService.CustomerServicePrincipalsIdDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{customer}/ServicePrincipals/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"customer"+"}", url.PathEscape(parameterValueToString(r.customer, "customer")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.citrixConsistencyToken != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-ConsistencyToken", r.citrixConsistencyToken, "")
	}
	if r.xCwsTransactionId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Cws-TransactionId", r.xCwsTransactionId, "")
	}
	if r.citrixTimeoutMs != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-Timeout-ms", r.citrixTimeoutMs, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCustomerServicePrincipalsIdGetRequest struct {
	ctx context.Context
	ApiService *ServicePrincipalsAPIService
	id string
	customer string
	citrixConsistencyToken *string
	xCwsTransactionId *string
	citrixTimeoutMs *float64
}

// CosmosDB consistency token.
func (r ApiCustomerServicePrincipalsIdGetRequest) CitrixConsistencyToken(citrixConsistencyToken string) ApiCustomerServicePrincipalsIdGetRequest {
	r.citrixConsistencyToken = &citrixConsistencyToken
	return r
}

// Used for Citrix Cloud telemetry correlation.
func (r ApiCustomerServicePrincipalsIdGetRequest) XCwsTransactionId(xCwsTransactionId string) ApiCustomerServicePrincipalsIdGetRequest {
	r.xCwsTransactionId = &xCwsTransactionId
	return r
}

// Maximum time caller is willing to wait for a response before timing out the request, in milliseconds
func (r ApiCustomerServicePrincipalsIdGetRequest) CitrixTimeoutMs(citrixTimeoutMs float64) ApiCustomerServicePrincipalsIdGetRequest {
	r.citrixTimeoutMs = &citrixTimeoutMs
	return r
}

func (r ApiCustomerServicePrincipalsIdGetRequest) Execute() (*CitrixCloudServicesServicePrincipalsModelsServicePrincipal, *http.Response, error) {
	return r.ApiService.CustomerServicePrincipalsIdGetExecute(r)
}

/*
CustomerServicePrincipalsIdGet Fetches a Service Principal [BearerToken]

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @param customer
 @return ApiCustomerServicePrincipalsIdGetRequest
*/
func (a *ServicePrincipalsAPIService) CustomerServicePrincipalsIdGet(ctx context.Context, id string, customer string) ApiCustomerServicePrincipalsIdGetRequest {
	return ApiCustomerServicePrincipalsIdGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		customer: customer,
	}
}

// Execute executes the request
//  @return CitrixCloudServicesServicePrincipalsModelsServicePrincipal
func (a *ServicePrincipalsAPIService) CustomerServicePrincipalsIdGetExecute(r ApiCustomerServicePrincipalsIdGetRequest) (*CitrixCloudServicesServicePrincipalsModelsServicePrincipal, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CitrixCloudServicesServicePrincipalsModelsServicePrincipal
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServicePrincipalsAPIService.CustomerServicePrincipalsIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{customer}/ServicePrincipals/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"customer"+"}", url.PathEscape(parameterValueToString(r.customer, "customer")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.citrixConsistencyToken != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-ConsistencyToken", r.citrixConsistencyToken, "")
	}
	if r.xCwsTransactionId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Cws-TransactionId", r.xCwsTransactionId, "")
	}
	if r.citrixTimeoutMs != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-Timeout-ms", r.citrixTimeoutMs, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCustomerServicePrincipalsIdRotatePostRequest struct {
	ctx context.Context
	ApiService *ServicePrincipalsAPIService
	customer string
	id string
	citrixConsistencyToken *string
	xCwsTransactionId *string
	citrixTimeoutMs *float64
	citrixCloudServicesServicePrincipalsModelsSecretRotationRequest *CitrixCloudServicesServicePrincipalsModelsSecretRotationRequest
}

// CosmosDB consistency token.
func (r ApiCustomerServicePrincipalsIdRotatePostRequest) CitrixConsistencyToken(citrixConsistencyToken string) ApiCustomerServicePrincipalsIdRotatePostRequest {
	r.citrixConsistencyToken = &citrixConsistencyToken
	return r
}

// Used for Citrix Cloud telemetry correlation.
func (r ApiCustomerServicePrincipalsIdRotatePostRequest) XCwsTransactionId(xCwsTransactionId string) ApiCustomerServicePrincipalsIdRotatePostRequest {
	r.xCwsTransactionId = &xCwsTransactionId
	return r
}

// Maximum time caller is willing to wait for a response before timing out the request, in milliseconds
func (r ApiCustomerServicePrincipalsIdRotatePostRequest) CitrixTimeoutMs(citrixTimeoutMs float64) ApiCustomerServicePrincipalsIdRotatePostRequest {
	r.citrixTimeoutMs = &citrixTimeoutMs
	return r
}

func (r ApiCustomerServicePrincipalsIdRotatePostRequest) CitrixCloudServicesServicePrincipalsModelsSecretRotationRequest(citrixCloudServicesServicePrincipalsModelsSecretRotationRequest CitrixCloudServicesServicePrincipalsModelsSecretRotationRequest) ApiCustomerServicePrincipalsIdRotatePostRequest {
	r.citrixCloudServicesServicePrincipalsModelsSecretRotationRequest = &citrixCloudServicesServicePrincipalsModelsSecretRotationRequest
	return r
}

func (r ApiCustomerServicePrincipalsIdRotatePostRequest) Execute() (*CitrixCloudServicesServicePrincipalsModelsSecretRotationResponse, *http.Response, error) {
	return r.ApiService.CustomerServicePrincipalsIdRotatePostExecute(r)
}

/*
CustomerServicePrincipalsIdRotatePost Rotates primary secret of a service principal. [BearerToken]

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param customer
 @param id
 @return ApiCustomerServicePrincipalsIdRotatePostRequest
*/
func (a *ServicePrincipalsAPIService) CustomerServicePrincipalsIdRotatePost(ctx context.Context, customer string, id string) ApiCustomerServicePrincipalsIdRotatePostRequest {
	return ApiCustomerServicePrincipalsIdRotatePostRequest{
		ApiService: a,
		ctx: ctx,
		customer: customer,
		id: id,
	}
}

// Execute executes the request
//  @return CitrixCloudServicesServicePrincipalsModelsSecretRotationResponse
func (a *ServicePrincipalsAPIService) CustomerServicePrincipalsIdRotatePostExecute(r ApiCustomerServicePrincipalsIdRotatePostRequest) (*CitrixCloudServicesServicePrincipalsModelsSecretRotationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CitrixCloudServicesServicePrincipalsModelsSecretRotationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServicePrincipalsAPIService.CustomerServicePrincipalsIdRotatePost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{customer}/ServicePrincipals/{id}/$rotate"
	localVarPath = strings.Replace(localVarPath, "{"+"customer"+"}", url.PathEscape(parameterValueToString(r.customer, "customer")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.citrixConsistencyToken != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-ConsistencyToken", r.citrixConsistencyToken, "")
	}
	if r.xCwsTransactionId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Cws-TransactionId", r.xCwsTransactionId, "")
	}
	if r.citrixTimeoutMs != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-Timeout-ms", r.citrixTimeoutMs, "")
	}
	// body params
	localVarPostBody = r.citrixCloudServicesServicePrincipalsModelsSecretRotationRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCustomerServicePrincipalsIdSecondarySecretDeleteRequest struct {
	ctx context.Context
	ApiService *ServicePrincipalsAPIService
	id string
	customer string
	citrixConsistencyToken *string
	xCwsTransactionId *string
	citrixTimeoutMs *float64
}

// CosmosDB consistency token.
func (r ApiCustomerServicePrincipalsIdSecondarySecretDeleteRequest) CitrixConsistencyToken(citrixConsistencyToken string) ApiCustomerServicePrincipalsIdSecondarySecretDeleteRequest {
	r.citrixConsistencyToken = &citrixConsistencyToken
	return r
}

// Used for Citrix Cloud telemetry correlation.
func (r ApiCustomerServicePrincipalsIdSecondarySecretDeleteRequest) XCwsTransactionId(xCwsTransactionId string) ApiCustomerServicePrincipalsIdSecondarySecretDeleteRequest {
	r.xCwsTransactionId = &xCwsTransactionId
	return r
}

// Maximum time caller is willing to wait for a response before timing out the request, in milliseconds
func (r ApiCustomerServicePrincipalsIdSecondarySecretDeleteRequest) CitrixTimeoutMs(citrixTimeoutMs float64) ApiCustomerServicePrincipalsIdSecondarySecretDeleteRequest {
	r.citrixTimeoutMs = &citrixTimeoutMs
	return r
}

func (r ApiCustomerServicePrincipalsIdSecondarySecretDeleteRequest) Execute() (bool, *http.Response, error) {
	return r.ApiService.CustomerServicePrincipalsIdSecondarySecretDeleteExecute(r)
}

/*
CustomerServicePrincipalsIdSecondarySecretDelete Delete a Service Principal Secondary Secret [BearerToken]

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @param customer
 @return ApiCustomerServicePrincipalsIdSecondarySecretDeleteRequest
*/
func (a *ServicePrincipalsAPIService) CustomerServicePrincipalsIdSecondarySecretDelete(ctx context.Context, id string, customer string) ApiCustomerServicePrincipalsIdSecondarySecretDeleteRequest {
	return ApiCustomerServicePrincipalsIdSecondarySecretDeleteRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		customer: customer,
	}
}

// Execute executes the request
//  @return bool
func (a *ServicePrincipalsAPIService) CustomerServicePrincipalsIdSecondarySecretDeleteExecute(r ApiCustomerServicePrincipalsIdSecondarySecretDeleteRequest) (bool, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  bool
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServicePrincipalsAPIService.CustomerServicePrincipalsIdSecondarySecretDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{customer}/ServicePrincipals/{id}/secondarySecret"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"customer"+"}", url.PathEscape(parameterValueToString(r.customer, "customer")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.citrixConsistencyToken != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-ConsistencyToken", r.citrixConsistencyToken, "")
	}
	if r.xCwsTransactionId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Cws-TransactionId", r.xCwsTransactionId, "")
	}
	if r.citrixTimeoutMs != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-Timeout-ms", r.citrixTimeoutMs, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCustomerServicePrincipalsIdUpdateLastAccessedDatePostRequest struct {
	ctx context.Context
	ApiService *ServicePrincipalsAPIService
	customer string
	id string
	citrixConsistencyToken *string
	xCwsTransactionId *string
	citrixTimeoutMs *float64
}

// CosmosDB consistency token.
func (r ApiCustomerServicePrincipalsIdUpdateLastAccessedDatePostRequest) CitrixConsistencyToken(citrixConsistencyToken string) ApiCustomerServicePrincipalsIdUpdateLastAccessedDatePostRequest {
	r.citrixConsistencyToken = &citrixConsistencyToken
	return r
}

// Used for Citrix Cloud telemetry correlation.
func (r ApiCustomerServicePrincipalsIdUpdateLastAccessedDatePostRequest) XCwsTransactionId(xCwsTransactionId string) ApiCustomerServicePrincipalsIdUpdateLastAccessedDatePostRequest {
	r.xCwsTransactionId = &xCwsTransactionId
	return r
}

// Maximum time caller is willing to wait for a response before timing out the request, in milliseconds
func (r ApiCustomerServicePrincipalsIdUpdateLastAccessedDatePostRequest) CitrixTimeoutMs(citrixTimeoutMs float64) ApiCustomerServicePrincipalsIdUpdateLastAccessedDatePostRequest {
	r.citrixTimeoutMs = &citrixTimeoutMs
	return r
}

func (r ApiCustomerServicePrincipalsIdUpdateLastAccessedDatePostRequest) Execute() (*http.Response, error) {
	return r.ApiService.CustomerServicePrincipalsIdUpdateLastAccessedDatePostExecute(r)
}

/*
CustomerServicePrincipalsIdUpdateLastAccessedDatePost Update the LastAccessedDate property for a ServicePrincipal [BearerToken]

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param customer
 @param id
 @return ApiCustomerServicePrincipalsIdUpdateLastAccessedDatePostRequest
*/
func (a *ServicePrincipalsAPIService) CustomerServicePrincipalsIdUpdateLastAccessedDatePost(ctx context.Context, customer string, id string) ApiCustomerServicePrincipalsIdUpdateLastAccessedDatePostRequest {
	return ApiCustomerServicePrincipalsIdUpdateLastAccessedDatePostRequest{
		ApiService: a,
		ctx: ctx,
		customer: customer,
		id: id,
	}
}

// Execute executes the request
func (a *ServicePrincipalsAPIService) CustomerServicePrincipalsIdUpdateLastAccessedDatePostExecute(r ApiCustomerServicePrincipalsIdUpdateLastAccessedDatePostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServicePrincipalsAPIService.CustomerServicePrincipalsIdUpdateLastAccessedDatePost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{customer}/ServicePrincipals/{id}/$updateLastAccessedDate"
	localVarPath = strings.Replace(localVarPath, "{"+"customer"+"}", url.PathEscape(parameterValueToString(r.customer, "customer")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.citrixConsistencyToken != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-ConsistencyToken", r.citrixConsistencyToken, "")
	}
	if r.xCwsTransactionId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Cws-TransactionId", r.xCwsTransactionId, "")
	}
	if r.citrixTimeoutMs != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-Timeout-ms", r.citrixTimeoutMs, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCustomerServicePrincipalsMigratePostRequest struct {
	ctx context.Context
	ApiService *ServicePrincipalsAPIService
	customer string
	citrixConsistencyToken *string
	xCwsTransactionId *string
	citrixTimeoutMs *float64
	citrixCloudServicesServicePrincipalsModelsMigrateRequest *CitrixCloudServicesServicePrincipalsModelsMigrateRequest
}

// CosmosDB consistency token.
func (r ApiCustomerServicePrincipalsMigratePostRequest) CitrixConsistencyToken(citrixConsistencyToken string) ApiCustomerServicePrincipalsMigratePostRequest {
	r.citrixConsistencyToken = &citrixConsistencyToken
	return r
}

// Used for Citrix Cloud telemetry correlation.
func (r ApiCustomerServicePrincipalsMigratePostRequest) XCwsTransactionId(xCwsTransactionId string) ApiCustomerServicePrincipalsMigratePostRequest {
	r.xCwsTransactionId = &xCwsTransactionId
	return r
}

// Maximum time caller is willing to wait for a response before timing out the request, in milliseconds
func (r ApiCustomerServicePrincipalsMigratePostRequest) CitrixTimeoutMs(citrixTimeoutMs float64) ApiCustomerServicePrincipalsMigratePostRequest {
	r.citrixTimeoutMs = &citrixTimeoutMs
	return r
}

func (r ApiCustomerServicePrincipalsMigratePostRequest) CitrixCloudServicesServicePrincipalsModelsMigrateRequest(citrixCloudServicesServicePrincipalsModelsMigrateRequest CitrixCloudServicesServicePrincipalsModelsMigrateRequest) ApiCustomerServicePrincipalsMigratePostRequest {
	r.citrixCloudServicesServicePrincipalsModelsMigrateRequest = &citrixCloudServicesServicePrincipalsModelsMigrateRequest
	return r
}

func (r ApiCustomerServicePrincipalsMigratePostRequest) Execute() (*http.Response, error) {
	return r.ApiService.CustomerServicePrincipalsMigratePostExecute(r)
}

/*
CustomerServicePrincipalsMigratePost Update the LastAccessedDate property for a ServicePrincipal [BearerToken]

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param customer
 @return ApiCustomerServicePrincipalsMigratePostRequest
*/
func (a *ServicePrincipalsAPIService) CustomerServicePrincipalsMigratePost(ctx context.Context, customer string) ApiCustomerServicePrincipalsMigratePostRequest {
	return ApiCustomerServicePrincipalsMigratePostRequest{
		ApiService: a,
		ctx: ctx,
		customer: customer,
	}
}

// Execute executes the request
func (a *ServicePrincipalsAPIService) CustomerServicePrincipalsMigratePostExecute(r ApiCustomerServicePrincipalsMigratePostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServicePrincipalsAPIService.CustomerServicePrincipalsMigratePost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{customer}/ServicePrincipals/$migrate"
	localVarPath = strings.Replace(localVarPath, "{"+"customer"+"}", url.PathEscape(parameterValueToString(r.customer, "customer")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.citrixConsistencyToken != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-ConsistencyToken", r.citrixConsistencyToken, "")
	}
	if r.xCwsTransactionId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Cws-TransactionId", r.xCwsTransactionId, "")
	}
	if r.citrixTimeoutMs != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-Timeout-ms", r.citrixTimeoutMs, "")
	}
	// body params
	localVarPostBody = r.citrixCloudServicesServicePrincipalsModelsMigrateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCustomerServicePrincipalsPostRequest struct {
	ctx context.Context
	ApiService *ServicePrincipalsAPIService
	customer string
	citrixConsistencyToken *string
	xCwsTransactionId *string
	citrixTimeoutMs *float64
	citrixCloudServicesServicePrincipalsModelsCreationRequest *CitrixCloudServicesServicePrincipalsModelsCreationRequest
}

// CosmosDB consistency token.
func (r ApiCustomerServicePrincipalsPostRequest) CitrixConsistencyToken(citrixConsistencyToken string) ApiCustomerServicePrincipalsPostRequest {
	r.citrixConsistencyToken = &citrixConsistencyToken
	return r
}

// Used for Citrix Cloud telemetry correlation.
func (r ApiCustomerServicePrincipalsPostRequest) XCwsTransactionId(xCwsTransactionId string) ApiCustomerServicePrincipalsPostRequest {
	r.xCwsTransactionId = &xCwsTransactionId
	return r
}

// Maximum time caller is willing to wait for a response before timing out the request, in milliseconds
func (r ApiCustomerServicePrincipalsPostRequest) CitrixTimeoutMs(citrixTimeoutMs float64) ApiCustomerServicePrincipalsPostRequest {
	r.citrixTimeoutMs = &citrixTimeoutMs
	return r
}

func (r ApiCustomerServicePrincipalsPostRequest) CitrixCloudServicesServicePrincipalsModelsCreationRequest(citrixCloudServicesServicePrincipalsModelsCreationRequest CitrixCloudServicesServicePrincipalsModelsCreationRequest) ApiCustomerServicePrincipalsPostRequest {
	r.citrixCloudServicesServicePrincipalsModelsCreationRequest = &citrixCloudServicesServicePrincipalsModelsCreationRequest
	return r
}

func (r ApiCustomerServicePrincipalsPostRequest) Execute() (*CitrixCloudServicesServicePrincipalsModelsCreationResponse, *http.Response, error) {
	return r.ApiService.CustomerServicePrincipalsPostExecute(r)
}

/*
CustomerServicePrincipalsPost Create a Service Principal [BearerToken]

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param customer
 @return ApiCustomerServicePrincipalsPostRequest
*/
func (a *ServicePrincipalsAPIService) CustomerServicePrincipalsPost(ctx context.Context, customer string) ApiCustomerServicePrincipalsPostRequest {
	return ApiCustomerServicePrincipalsPostRequest{
		ApiService: a,
		ctx: ctx,
		customer: customer,
	}
}

// Execute executes the request
//  @return CitrixCloudServicesServicePrincipalsModelsCreationResponse
func (a *ServicePrincipalsAPIService) CustomerServicePrincipalsPostExecute(r ApiCustomerServicePrincipalsPostRequest) (*CitrixCloudServicesServicePrincipalsModelsCreationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CitrixCloudServicesServicePrincipalsModelsCreationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServicePrincipalsAPIService.CustomerServicePrincipalsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{customer}/ServicePrincipals"
	localVarPath = strings.Replace(localVarPath, "{"+"customer"+"}", url.PathEscape(parameterValueToString(r.customer, "customer")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.citrixConsistencyToken != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-ConsistencyToken", r.citrixConsistencyToken, "")
	}
	if r.xCwsTransactionId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Cws-TransactionId", r.xCwsTransactionId, "")
	}
	if r.citrixTimeoutMs != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-Timeout-ms", r.citrixTimeoutMs, "")
	}
	// body params
	localVarPostBody = r.citrixCloudServicesServicePrincipalsModelsCreationRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
