/*
Citrix.CloudServices.Administrators.Api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ccadmins

import (
	"encoding/json"
	"fmt"
)

// CitrixCloudServicesServicePrincipalsModelsSecretType the model 'CitrixCloudServicesServicePrincipalsModelsSecretType'
type CitrixCloudServicesServicePrincipalsModelsSecretType string

// List of Citrix.CloudServices.ServicePrincipals.Models.SecretType
const (
	CITRIXCLOUDSERVICESSERVICEPRINCIPALSMODELSSECRETTYPE_PASSWORD CitrixCloudServicesServicePrincipalsModelsSecretType = "Password"
	CITRIXCLOUDSERVICESSERVICEPRINCIPALSMODELSSECRETTYPE_CERTIFICATE CitrixCloudServicesServicePrincipalsModelsSecretType = "Certificate"
)

// All allowed values of CitrixCloudServicesServicePrincipalsModelsSecretType enum
var AllowedCitrixCloudServicesServicePrincipalsModelsSecretTypeEnumValues = []CitrixCloudServicesServicePrincipalsModelsSecretType{
	"Password",
	"Certificate",
}

func (v *CitrixCloudServicesServicePrincipalsModelsSecretType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CitrixCloudServicesServicePrincipalsModelsSecretType(value)
	for _, existing := range AllowedCitrixCloudServicesServicePrincipalsModelsSecretTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CitrixCloudServicesServicePrincipalsModelsSecretType", value)
}

// NewCitrixCloudServicesServicePrincipalsModelsSecretTypeFromValue returns a pointer to a valid CitrixCloudServicesServicePrincipalsModelsSecretType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCitrixCloudServicesServicePrincipalsModelsSecretTypeFromValue(v string) (*CitrixCloudServicesServicePrincipalsModelsSecretType, error) {
	ev := CitrixCloudServicesServicePrincipalsModelsSecretType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CitrixCloudServicesServicePrincipalsModelsSecretType: valid values are %v", v, AllowedCitrixCloudServicesServicePrincipalsModelsSecretTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CitrixCloudServicesServicePrincipalsModelsSecretType) IsValid() bool {
	for _, existing := range AllowedCitrixCloudServicesServicePrincipalsModelsSecretTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Citrix.CloudServices.ServicePrincipals.Models.SecretType value
func (v CitrixCloudServicesServicePrincipalsModelsSecretType) Ptr() *CitrixCloudServicesServicePrincipalsModelsSecretType {
	return &v
}

type NullableCitrixCloudServicesServicePrincipalsModelsSecretType struct {
	value *CitrixCloudServicesServicePrincipalsModelsSecretType
	isSet bool
}

func (v NullableCitrixCloudServicesServicePrincipalsModelsSecretType) Get() *CitrixCloudServicesServicePrincipalsModelsSecretType {
	return v.value
}

func (v *NullableCitrixCloudServicesServicePrincipalsModelsSecretType) Set(val *CitrixCloudServicesServicePrincipalsModelsSecretType) {
	v.value = val
	v.isSet = true
}

func (v NullableCitrixCloudServicesServicePrincipalsModelsSecretType) IsSet() bool {
	return v.isSet
}

func (v *NullableCitrixCloudServicesServicePrincipalsModelsSecretType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCitrixCloudServicesServicePrincipalsModelsSecretType(val *CitrixCloudServicesServicePrincipalsModelsSecretType) *NullableCitrixCloudServicesServicePrincipalsModelsSecretType {
	return &NullableCitrixCloudServicesServicePrincipalsModelsSecretType{value: val, isSet: true}
}

func (v NullableCitrixCloudServicesServicePrincipalsModelsSecretType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCitrixCloudServicesServicePrincipalsModelsSecretType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

