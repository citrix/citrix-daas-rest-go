/*
Citrix.CloudServices.Administrators.Api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ccadmins

import (
	"encoding/json"
	"fmt"
)

// SystemNetHttpHttpVersionPolicy the model 'SystemNetHttpHttpVersionPolicy'
type SystemNetHttpHttpVersionPolicy string

// List of System.Net.Http.HttpVersionPolicy
const (
	SYSTEMNETHTTPHTTPVERSIONPOLICY_REQUEST_VERSION_OR_LOWER SystemNetHttpHttpVersionPolicy = "RequestVersionOrLower"
	SYSTEMNETHTTPHTTPVERSIONPOLICY_REQUEST_VERSION_OR_HIGHER SystemNetHttpHttpVersionPolicy = "RequestVersionOrHigher"
	SYSTEMNETHTTPHTTPVERSIONPOLICY_REQUEST_VERSION_EXACT SystemNetHttpHttpVersionPolicy = "RequestVersionExact"
)

// All allowed values of SystemNetHttpHttpVersionPolicy enum
var AllowedSystemNetHttpHttpVersionPolicyEnumValues = []SystemNetHttpHttpVersionPolicy{
	"RequestVersionOrLower",
	"RequestVersionOrHigher",
	"RequestVersionExact",
}

func (v *SystemNetHttpHttpVersionPolicy) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SystemNetHttpHttpVersionPolicy(value)
	for _, existing := range AllowedSystemNetHttpHttpVersionPolicyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SystemNetHttpHttpVersionPolicy", value)
}

// NewSystemNetHttpHttpVersionPolicyFromValue returns a pointer to a valid SystemNetHttpHttpVersionPolicy
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSystemNetHttpHttpVersionPolicyFromValue(v string) (*SystemNetHttpHttpVersionPolicy, error) {
	ev := SystemNetHttpHttpVersionPolicy(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SystemNetHttpHttpVersionPolicy: valid values are %v", v, AllowedSystemNetHttpHttpVersionPolicyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SystemNetHttpHttpVersionPolicy) IsValid() bool {
	for _, existing := range AllowedSystemNetHttpHttpVersionPolicyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to System.Net.Http.HttpVersionPolicy value
func (v SystemNetHttpHttpVersionPolicy) Ptr() *SystemNetHttpHttpVersionPolicy {
	return &v
}

type NullableSystemNetHttpHttpVersionPolicy struct {
	value *SystemNetHttpHttpVersionPolicy
	isSet bool
}

func (v NullableSystemNetHttpHttpVersionPolicy) Get() *SystemNetHttpHttpVersionPolicy {
	return v.value
}

func (v *NullableSystemNetHttpHttpVersionPolicy) Set(val *SystemNetHttpHttpVersionPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableSystemNetHttpHttpVersionPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableSystemNetHttpHttpVersionPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSystemNetHttpHttpVersionPolicy(val *SystemNetHttpHttpVersionPolicy) *NullableSystemNetHttpHttpVersionPolicy {
	return &NullableSystemNetHttpHttpVersionPolicy{value: val, isSet: true}
}

func (v NullableSystemNetHttpHttpVersionPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSystemNetHttpHttpVersionPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

