/*
Administrators APIs

APIs for managing CC administrators.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ccadmins

import (
	"encoding/json"
)

// checks if the EmbargoedPersonId type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmbargoedPersonId{}

// EmbargoedPersonId struct for EmbargoedPersonId
type EmbargoedPersonId struct {
	Embargoed NullableBool   `json:"embargoed,omitempty"`
	PersonId  NullableString `json:"personId,omitempty"`
}

// NewEmbargoedPersonId instantiates a new EmbargoedPersonId object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmbargoedPersonId() *EmbargoedPersonId {
	this := EmbargoedPersonId{}
	return &this
}

// NewEmbargoedPersonIdWithDefaults instantiates a new EmbargoedPersonId object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmbargoedPersonIdWithDefaults() *EmbargoedPersonId {
	this := EmbargoedPersonId{}
	return &this
}

// GetEmbargoed returns the Embargoed field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmbargoedPersonId) GetEmbargoed() bool {
	if o == nil || IsNil(o.Embargoed.Get()) {
		var ret bool
		return ret
	}
	return *o.Embargoed.Get()
}

// GetEmbargoedOk returns a tuple with the Embargoed field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmbargoedPersonId) GetEmbargoedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Embargoed.Get(), o.Embargoed.IsSet()
}

// HasEmbargoed returns a boolean if a field has been set.
func (o *EmbargoedPersonId) HasEmbargoed() bool {
	if o != nil && o.Embargoed.IsSet() {
		return true
	}

	return false
}

// SetEmbargoed gets a reference to the given NullableBool and assigns it to the Embargoed field.
func (o *EmbargoedPersonId) SetEmbargoed(v bool) {
	o.Embargoed.Set(&v)
}

// SetEmbargoedNil sets the value for Embargoed to be an explicit nil
func (o *EmbargoedPersonId) SetEmbargoedNil() {
	o.Embargoed.Set(nil)
}

// UnsetEmbargoed ensures that no value is present for Embargoed, not even an explicit nil
func (o *EmbargoedPersonId) UnsetEmbargoed() {
	o.Embargoed.Unset()
}

// GetPersonId returns the PersonId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmbargoedPersonId) GetPersonId() string {
	if o == nil || IsNil(o.PersonId.Get()) {
		var ret string
		return ret
	}
	return *o.PersonId.Get()
}

// GetPersonIdOk returns a tuple with the PersonId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmbargoedPersonId) GetPersonIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PersonId.Get(), o.PersonId.IsSet()
}

// HasPersonId returns a boolean if a field has been set.
func (o *EmbargoedPersonId) HasPersonId() bool {
	if o != nil && o.PersonId.IsSet() {
		return true
	}

	return false
}

// SetPersonId gets a reference to the given NullableString and assigns it to the PersonId field.
func (o *EmbargoedPersonId) SetPersonId(v string) {
	o.PersonId.Set(&v)
}

// SetPersonIdNil sets the value for PersonId to be an explicit nil
func (o *EmbargoedPersonId) SetPersonIdNil() {
	o.PersonId.Set(nil)
}

// UnsetPersonId ensures that no value is present for PersonId, not even an explicit nil
func (o *EmbargoedPersonId) UnsetPersonId() {
	o.PersonId.Unset()
}

func (o EmbargoedPersonId) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmbargoedPersonId) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Embargoed.IsSet() {
		toSerialize["embargoed"] = o.Embargoed.Get()
	}
	if o.PersonId.IsSet() {
		toSerialize["personId"] = o.PersonId.Get()
	}
	return toSerialize, nil
}

type NullableEmbargoedPersonId struct {
	value *EmbargoedPersonId
	isSet bool
}

func (v NullableEmbargoedPersonId) Get() *EmbargoedPersonId {
	return v.value
}

func (v *NullableEmbargoedPersonId) Set(val *EmbargoedPersonId) {
	v.value = val
	v.isSet = true
}

func (v NullableEmbargoedPersonId) IsSet() bool {
	return v.isSet
}

func (v *NullableEmbargoedPersonId) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmbargoedPersonId(val *EmbargoedPersonId) *NullableEmbargoedPersonId {
	return &NullableEmbargoedPersonId{value: val, isSet: true}
}

func (v NullableEmbargoedPersonId) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmbargoedPersonId) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
