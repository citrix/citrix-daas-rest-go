/*
Administrators APIs

APIs for managing CC administrators.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ccadmins

import (
	"encoding/json"
	"fmt"
)

// AdministratorExternalProviderType the model 'AdministratorExternalProviderType'
type AdministratorExternalProviderType string

// List of AdministratorExternalProviderType
const (
	ADMINISTRATOREXTERNALPROVIDERTYPE_AZURE_AD AdministratorExternalProviderType = "AzureAd"
	ADMINISTRATOREXTERNALPROVIDERTYPE_AD       AdministratorExternalProviderType = "Ad"
	ADMINISTRATOREXTERNALPROVIDERTYPE_OKTA     AdministratorExternalProviderType = "Okta"
	ADMINISTRATOREXTERNALPROVIDERTYPE_GOOGLE   AdministratorExternalProviderType = "Google"
)

// All allowed values of AdministratorExternalProviderType enum
var AllowedAdministratorExternalProviderTypeEnumValues = []AdministratorExternalProviderType{
	"AzureAd",
	"Ad",
	"Okta",
	"Google",
}

func (v *AdministratorExternalProviderType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AdministratorExternalProviderType(value)
	for _, existing := range AllowedAdministratorExternalProviderTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AdministratorExternalProviderType", value)
}

// NewAdministratorExternalProviderTypeFromValue returns a pointer to a valid AdministratorExternalProviderType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAdministratorExternalProviderTypeFromValue(v string) (*AdministratorExternalProviderType, error) {
	ev := AdministratorExternalProviderType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AdministratorExternalProviderType: valid values are %v", v, AllowedAdministratorExternalProviderTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AdministratorExternalProviderType) IsValid() bool {
	for _, existing := range AllowedAdministratorExternalProviderTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AdministratorExternalProviderType value
func (v AdministratorExternalProviderType) Ptr() *AdministratorExternalProviderType {
	return &v
}

type NullableAdministratorExternalProviderType struct {
	value *AdministratorExternalProviderType
	isSet bool
}

func (v NullableAdministratorExternalProviderType) Get() *AdministratorExternalProviderType {
	return v.value
}

func (v *NullableAdministratorExternalProviderType) Set(val *AdministratorExternalProviderType) {
	v.value = val
	v.isSet = true
}

func (v NullableAdministratorExternalProviderType) IsSet() bool {
	return v.isSet
}

func (v *NullableAdministratorExternalProviderType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdministratorExternalProviderType(val *AdministratorExternalProviderType) *NullableAdministratorExternalProviderType {
	return &NullableAdministratorExternalProviderType{value: val, isSet: true}
}

func (v NullableAdministratorExternalProviderType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdministratorExternalProviderType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
