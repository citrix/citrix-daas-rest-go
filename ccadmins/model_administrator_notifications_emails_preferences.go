/*
Administrators APIs

APIs for managing CC administrators.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ccadmins

import (
	"encoding/json"
)

// checks if the AdministratorNotificationsEmailsPreferences type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdministratorNotificationsEmailsPreferences{}

// AdministratorNotificationsEmailsPreferences struct for AdministratorNotificationsEmailsPreferences
type AdministratorNotificationsEmailsPreferences struct {
	SendNotificationEmails  bool                        `json:"sendNotificationEmails"`
	NotificationsSubscribed []AdministratorNotification `json:"notificationsSubscribed,omitempty"`
	EnabledDate             NullableString              `json:"enabledDate,omitempty"`
}

type _AdministratorNotificationsEmailsPreferences AdministratorNotificationsEmailsPreferences

// NewAdministratorNotificationsEmailsPreferences instantiates a new AdministratorNotificationsEmailsPreferences object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdministratorNotificationsEmailsPreferences(sendNotificationEmails bool) *AdministratorNotificationsEmailsPreferences {
	this := AdministratorNotificationsEmailsPreferences{}
	this.SendNotificationEmails = sendNotificationEmails
	return &this
}

// NewAdministratorNotificationsEmailsPreferencesWithDefaults instantiates a new AdministratorNotificationsEmailsPreferences object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdministratorNotificationsEmailsPreferencesWithDefaults() *AdministratorNotificationsEmailsPreferences {
	this := AdministratorNotificationsEmailsPreferences{}
	return &this
}

// GetSendNotificationEmails returns the SendNotificationEmails field value
func (o *AdministratorNotificationsEmailsPreferences) GetSendNotificationEmails() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.SendNotificationEmails
}

// GetSendNotificationEmailsOk returns a tuple with the SendNotificationEmails field value
// and a boolean to check if the value has been set.
func (o *AdministratorNotificationsEmailsPreferences) GetSendNotificationEmailsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SendNotificationEmails, true
}

// SetSendNotificationEmails sets field value
func (o *AdministratorNotificationsEmailsPreferences) SetSendNotificationEmails(v bool) {
	o.SendNotificationEmails = v
}

// GetNotificationsSubscribed returns the NotificationsSubscribed field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AdministratorNotificationsEmailsPreferences) GetNotificationsSubscribed() []AdministratorNotification {
	if o == nil {
		var ret []AdministratorNotification
		return ret
	}
	return o.NotificationsSubscribed
}

// GetNotificationsSubscribedOk returns a tuple with the NotificationsSubscribed field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AdministratorNotificationsEmailsPreferences) GetNotificationsSubscribedOk() ([]AdministratorNotification, bool) {
	if o == nil || IsNil(o.NotificationsSubscribed) {
		return nil, false
	}
	return o.NotificationsSubscribed, true
}

// HasNotificationsSubscribed returns a boolean if a field has been set.
func (o *AdministratorNotificationsEmailsPreferences) HasNotificationsSubscribed() bool {
	if o != nil && !IsNil(o.NotificationsSubscribed) {
		return true
	}

	return false
}

// SetNotificationsSubscribed gets a reference to the given []AdministratorNotification and assigns it to the NotificationsSubscribed field.
func (o *AdministratorNotificationsEmailsPreferences) SetNotificationsSubscribed(v []AdministratorNotification) {
	o.NotificationsSubscribed = v
}

// GetEnabledDate returns the EnabledDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AdministratorNotificationsEmailsPreferences) GetEnabledDate() string {
	if o == nil || IsNil(o.EnabledDate.Get()) {
		var ret string
		return ret
	}
	return *o.EnabledDate.Get()
}

// GetEnabledDateOk returns a tuple with the EnabledDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AdministratorNotificationsEmailsPreferences) GetEnabledDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EnabledDate.Get(), o.EnabledDate.IsSet()
}

// HasEnabledDate returns a boolean if a field has been set.
func (o *AdministratorNotificationsEmailsPreferences) HasEnabledDate() bool {
	if o != nil && o.EnabledDate.IsSet() {
		return true
	}

	return false
}

// SetEnabledDate gets a reference to the given NullableString and assigns it to the EnabledDate field.
func (o *AdministratorNotificationsEmailsPreferences) SetEnabledDate(v string) {
	o.EnabledDate.Set(&v)
}

// SetEnabledDateNil sets the value for EnabledDate to be an explicit nil
func (o *AdministratorNotificationsEmailsPreferences) SetEnabledDateNil() {
	o.EnabledDate.Set(nil)
}

// UnsetEnabledDate ensures that no value is present for EnabledDate, not even an explicit nil
func (o *AdministratorNotificationsEmailsPreferences) UnsetEnabledDate() {
	o.EnabledDate.Unset()
}

func (o AdministratorNotificationsEmailsPreferences) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdministratorNotificationsEmailsPreferences) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["sendNotificationEmails"] = o.SendNotificationEmails
	if o.NotificationsSubscribed != nil {
		toSerialize["notificationsSubscribed"] = o.NotificationsSubscribed
	}
	if o.EnabledDate.IsSet() {
		toSerialize["enabledDate"] = o.EnabledDate.Get()
	}
	return toSerialize, nil
}

type NullableAdministratorNotificationsEmailsPreferences struct {
	value *AdministratorNotificationsEmailsPreferences
	isSet bool
}

func (v NullableAdministratorNotificationsEmailsPreferences) Get() *AdministratorNotificationsEmailsPreferences {
	return v.value
}

func (v *NullableAdministratorNotificationsEmailsPreferences) Set(val *AdministratorNotificationsEmailsPreferences) {
	v.value = val
	v.isSet = true
}

func (v NullableAdministratorNotificationsEmailsPreferences) IsSet() bool {
	return v.isSet
}

func (v *NullableAdministratorNotificationsEmailsPreferences) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdministratorNotificationsEmailsPreferences(val *AdministratorNotificationsEmailsPreferences) *NullableAdministratorNotificationsEmailsPreferences {
	return &NullableAdministratorNotificationsEmailsPreferences{value: val, isSet: true}
}

func (v NullableAdministratorNotificationsEmailsPreferences) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdministratorNotificationsEmailsPreferences) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
