/*
Administrators APIs

APIs for managing CC administrators.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ccadmins

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// AdministratorsAPIService AdministratorsAPI service
type AdministratorsAPIService service

type ApiCreateAdministratorRequest struct {
	ctx                           context.Context
	ApiService                    *AdministratorsAPIService
	authorization                 *string
	citrixCustomerId              *string
	createAdministratorInputModel *CreateAdministratorInputModel
}

// Access token.
func (r ApiCreateAdministratorRequest) Authorization(authorization string) ApiCreateAdministratorRequest {
	r.authorization = &authorization
	return r
}

// Customer ID.
func (r ApiCreateAdministratorRequest) CitrixCustomerId(citrixCustomerId string) ApiCreateAdministratorRequest {
	r.citrixCustomerId = &citrixCustomerId
	return r
}

// Administrator to be added.
func (r ApiCreateAdministratorRequest) CreateAdministratorInputModel(createAdministratorInputModel CreateAdministratorInputModel) ApiCreateAdministratorRequest {
	r.createAdministratorInputModel = &createAdministratorInputModel
	return r
}

func (r ApiCreateAdministratorRequest) Execute() (*AdministratorResult, *http.Response, error) {
	return r.ApiService.CreateAdministratorExecute(r)
}

/*
CreateAdministrator Create a new CC administrator.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateAdministratorRequest
*/
func (a *AdministratorsAPIService) CreateAdministrator(ctx context.Context) ApiCreateAdministratorRequest {
	return ApiCreateAdministratorRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return AdministratorResult
func (a *AdministratorsAPIService) CreateAdministratorExecute(r ApiCreateAdministratorRequest) (*AdministratorResult, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AdministratorResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdministratorsAPIService.CreateAdministrator")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/$create"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {
		return localVarReturnValue, nil, reportError("authorization is required and must be specified")
	}
	if r.citrixCustomerId == nil {
		return localVarReturnValue, nil, reportError("citrixCustomerId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "Authorization", r.authorization, "simple", "")
	parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-CustomerId", r.citrixCustomerId, "simple", "")
	// body params
	localVarPostBody = r.createAdministratorInputModel
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteAdministratorRequest struct {
	ctx              context.Context
	ApiService       *AdministratorsAPIService
	id               string
	authorization    *string
	citrixCustomerId *string
}

// Access token.
func (r ApiDeleteAdministratorRequest) Authorization(authorization string) ApiDeleteAdministratorRequest {
	r.authorization = &authorization
	return r
}

// Customer ID.
func (r ApiDeleteAdministratorRequest) CitrixCustomerId(citrixCustomerId string) ApiDeleteAdministratorRequest {
	r.citrixCustomerId = &citrixCustomerId
	return r
}

func (r ApiDeleteAdministratorRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteAdministratorExecute(r)
}

/*
DeleteAdministrator Remove a CC administrator.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id CC administrator ID.
	@return ApiDeleteAdministratorRequest
*/
func (a *AdministratorsAPIService) DeleteAdministrator(ctx context.Context, id string) ApiDeleteAdministratorRequest {
	return ApiDeleteAdministratorRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *AdministratorsAPIService) DeleteAdministratorExecute(r ApiDeleteAdministratorRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdministratorsAPIService.DeleteAdministrator")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.id) < 0 {
		return nil, reportError("id must have at least 0 elements")
	}
	if strlen(r.id) > 100 {
		return nil, reportError("id must have less than 100 elements")
	}
	if r.authorization == nil {
		return nil, reportError("authorization is required and must be specified")
	}
	if r.citrixCustomerId == nil {
		return nil, reportError("citrixCustomerId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "Authorization", r.authorization, "simple", "")
	parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-CustomerId", r.citrixCustomerId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteInvitationRequest struct {
	ctx              context.Context
	ApiService       *AdministratorsAPIService
	email            *string
	authorization    *string
	citrixCustomerId *string
}

// Pending user administrator invitation email.
func (r ApiDeleteInvitationRequest) Email(email string) ApiDeleteInvitationRequest {
	r.email = &email
	return r
}

// Access token.
func (r ApiDeleteInvitationRequest) Authorization(authorization string) ApiDeleteInvitationRequest {
	r.authorization = &authorization
	return r
}

// Customer ID.
func (r ApiDeleteInvitationRequest) CitrixCustomerId(citrixCustomerId string) ApiDeleteInvitationRequest {
	r.citrixCustomerId = &citrixCustomerId
	return r
}

func (r ApiDeleteInvitationRequest) Execute() (bool, *http.Response, error) {
	return r.ApiService.DeleteInvitationExecute(r)
}

/*
DeleteInvitation Remove a CC pending user administrator invitation.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDeleteInvitationRequest
*/
func (a *AdministratorsAPIService) DeleteInvitation(ctx context.Context) ApiDeleteInvitationRequest {
	return ApiDeleteInvitationRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return bool
func (a *AdministratorsAPIService) DeleteInvitationExecute(r ApiDeleteInvitationRequest) (bool, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodDelete
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue bool
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdministratorsAPIService.DeleteInvitation")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/invitations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.email == nil {
		return localVarReturnValue, nil, reportError("email is required and must be specified")
	}
	if strlen(*r.email) < 0 {
		return localVarReturnValue, nil, reportError("email must have at least 0 elements")
	}
	if strlen(*r.email) > 256 {
		return localVarReturnValue, nil, reportError("email must have less than 256 elements")
	}
	if r.authorization == nil {
		return localVarReturnValue, nil, reportError("authorization is required and must be specified")
	}
	if r.citrixCustomerId == nil {
		return localVarReturnValue, nil, reportError("citrixCustomerId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "email", r.email, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "Authorization", r.authorization, "simple", "")
	parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-CustomerId", r.citrixCustomerId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFetchAdministratorsRequest struct {
	ctx                 context.Context
	ApiService          *AdministratorsAPIService
	authorization       *string
	citrixCustomerId    *string
	type_               *string
	providerType        *AdministratorProviderType
	maxItemCount        *string
	requestContinuation *string
	id                  *string
}

// Access token.
func (r ApiFetchAdministratorsRequest) Authorization(authorization string) ApiFetchAdministratorsRequest {
	r.authorization = &authorization
	return r
}

// Customer ID.
func (r ApiFetchAdministratorsRequest) CitrixCustomerId(citrixCustomerId string) ApiFetchAdministratorsRequest {
	r.citrixCustomerId = &citrixCustomerId
	return r
}

// Optional administrator type filter.
func (r ApiFetchAdministratorsRequest) Type_(type_ string) ApiFetchAdministratorsRequest {
	r.type_ = &type_
	return r
}

// Optional provider type.
func (r ApiFetchAdministratorsRequest) ProviderType(providerType AdministratorProviderType) ApiFetchAdministratorsRequest {
	r.providerType = &providerType
	return r
}

// Optional item count.
func (r ApiFetchAdministratorsRequest) MaxItemCount(maxItemCount string) ApiFetchAdministratorsRequest {
	r.maxItemCount = &maxItemCount
	return r
}

// Optional continuation token.
func (r ApiFetchAdministratorsRequest) RequestContinuation(requestContinuation string) ApiFetchAdministratorsRequest {
	r.requestContinuation = &requestContinuation
	return r
}

// User ID corresponding to a user administrator. (Note: Exclusive with other parameters on this endpoint.)
func (r ApiFetchAdministratorsRequest) Id(id string) ApiFetchAdministratorsRequest {
	r.id = &id
	return r
}

func (r ApiFetchAdministratorsRequest) Execute() (*AdministratorsResult, *http.Response, error) {
	return r.ApiService.FetchAdministratorsExecute(r)
}

/*
FetchAdministrators Fetch all CC administrators.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiFetchAdministratorsRequest
*/
func (a *AdministratorsAPIService) FetchAdministrators(ctx context.Context) ApiFetchAdministratorsRequest {
	return ApiFetchAdministratorsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return AdministratorsResult
func (a *AdministratorsAPIService) FetchAdministratorsExecute(r ApiFetchAdministratorsRequest) (*AdministratorsResult, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AdministratorsResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdministratorsAPIService.FetchAdministrators")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {
		return localVarReturnValue, nil, reportError("authorization is required and must be specified")
	}
	if r.citrixCustomerId == nil {
		return localVarReturnValue, nil, reportError("citrixCustomerId is required and must be specified")
	}

	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "form", "")
	}
	if r.providerType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "providerType", r.providerType, "form", "")
	}
	if r.maxItemCount != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxItemCount", r.maxItemCount, "form", "")
	}
	if r.requestContinuation != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "requestContinuation", r.requestContinuation, "form", "")
	}
	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "Authorization", r.authorization, "simple", "")
	parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-CustomerId", r.citrixCustomerId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetAdministratorAccessRequest struct {
	ctx        context.Context
	ApiService *AdministratorsAPIService
	id         string
}

func (r ApiGetAdministratorAccessRequest) Execute() (*AdministratorAccessModel, *http.Response, error) {
	return r.ApiService.GetAdministratorAccessExecute(r)
}

/*
GetAdministratorAccess Fetch the access of an administrator.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id UserId for AzureAd and Citrix User Administrators. UcOid for all others.
	@return ApiGetAdministratorAccessRequest
*/
func (a *AdministratorsAPIService) GetAdministratorAccess(ctx context.Context, id string) ApiGetAdministratorAccessRequest {
	return ApiGetAdministratorAccessRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return AdministratorAccessModel
func (a *AdministratorsAPIService) GetAdministratorAccessExecute(r ApiGetAdministratorAccessRequest) (*AdministratorAccessModel, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AdministratorAccessModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdministratorsAPIService.GetAdministratorAccess")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{id}/access"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateAdministratorAccessRequest struct {
	ctx                      context.Context
	ApiService               *AdministratorsAPIService
	id                       *string
	authorization            *string
	citrixCustomerId         *string
	administratorAccessModel *AdministratorAccessModel
}

// CC administrator ID.
func (r ApiUpdateAdministratorAccessRequest) Id(id string) ApiUpdateAdministratorAccessRequest {
	r.id = &id
	return r
}

// Access token.
func (r ApiUpdateAdministratorAccessRequest) Authorization(authorization string) ApiUpdateAdministratorAccessRequest {
	r.authorization = &authorization
	return r
}

// Customer ID.
func (r ApiUpdateAdministratorAccessRequest) CitrixCustomerId(citrixCustomerId string) ApiUpdateAdministratorAccessRequest {
	r.citrixCustomerId = &citrixCustomerId
	return r
}

func (r ApiUpdateAdministratorAccessRequest) AdministratorAccessModel(administratorAccessModel AdministratorAccessModel) ApiUpdateAdministratorAccessRequest {
	r.administratorAccessModel = &administratorAccessModel
	return r
}

func (r ApiUpdateAdministratorAccessRequest) Execute() (*http.Response, error) {
	return r.ApiService.UpdateAdministratorAccessExecute(r)
}

/*
UpdateAdministratorAccess Update roles and permissions of an existing CC administrator.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiUpdateAdministratorAccessRequest
*/
func (a *AdministratorsAPIService) UpdateAdministratorAccess(ctx context.Context) ApiUpdateAdministratorAccessRequest {
	return ApiUpdateAdministratorAccessRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *AdministratorsAPIService) UpdateAdministratorAccessExecute(r ApiUpdateAdministratorAccessRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdministratorsAPIService.UpdateAdministratorAccess")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/access"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.id == nil {
		return nil, reportError("id is required and must be specified")
	}
	if strlen(*r.id) < 0 {
		return nil, reportError("id must have at least 0 elements")
	}
	if strlen(*r.id) > 100 {
		return nil, reportError("id must have less than 100 elements")
	}
	if r.authorization == nil {
		return nil, reportError("authorization is required and must be specified")
	}
	if r.citrixCustomerId == nil {
		return nil, reportError("citrixCustomerId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "Authorization", r.authorization, "simple", "")
	parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-CustomerId", r.citrixCustomerId, "simple", "")
	// body params
	localVarPostBody = r.administratorAccessModel
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
