/*
Citrix.CloudServices.Administrators.Api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ccadmins

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// AdministratorsAPIService AdministratorsAPI service
type AdministratorsAPIService service

type ApiCustomerAdministratorGetRequest struct {
	ctx context.Context
	ApiService *AdministratorsAPIService
	ucOid *string
	customer string
	citrixConsistencyToken *string
	xCwsTransactionId *string
}

// Administrator universal claim organization identifier (OID).
func (r ApiCustomerAdministratorGetRequest) UcOid(ucOid string) ApiCustomerAdministratorGetRequest {
	r.ucOid = &ucOid
	return r
}

// CosmosDB consistency token.
func (r ApiCustomerAdministratorGetRequest) CitrixConsistencyToken(citrixConsistencyToken string) ApiCustomerAdministratorGetRequest {
	r.citrixConsistencyToken = &citrixConsistencyToken
	return r
}

// Used for Citrix Cloud telemetry correlation.
func (r ApiCustomerAdministratorGetRequest) XCwsTransactionId(xCwsTransactionId string) ApiCustomerAdministratorGetRequest {
	r.xCwsTransactionId = &xCwsTransactionId
	return r
}

func (r ApiCustomerAdministratorGetRequest) Execute() (*CitrixCloudServicesAdministratorsApiModelsAdministratorResult, *http.Response, error) {
	return r.ApiService.CustomerAdministratorGetExecute(r)
}

/*
CustomerAdministratorGet Gets an administrator with ucOid passed as a query parameter. [ServiceKey][BearerToken]

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param customer
 @return ApiCustomerAdministratorGetRequest
*/
func (a *AdministratorsAPIService) CustomerAdministratorGet(ctx context.Context, customer string) ApiCustomerAdministratorGetRequest {
	return ApiCustomerAdministratorGetRequest{
		ApiService: a,
		ctx: ctx,
		customer: customer,
	}
}

// Execute executes the request
//  @return CitrixCloudServicesAdministratorsApiModelsAdministratorResult
func (a *AdministratorsAPIService) CustomerAdministratorGetExecute(r ApiCustomerAdministratorGetRequest) (*CitrixCloudServicesAdministratorsApiModelsAdministratorResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CitrixCloudServicesAdministratorsApiModelsAdministratorResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdministratorsAPIService.CustomerAdministratorGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{customer}/administrator"
	localVarPath = strings.Replace(localVarPath, "{"+"customer"+"}", url.PathEscape(parameterValueToString(r.customer, "customer")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.ucOid == nil {
		return localVarReturnValue, nil, reportError("ucOid is required and must be specified")
	}
	if strlen(*r.ucOid) < 0 {
		return localVarReturnValue, nil, reportError("ucOid must have at least 0 elements")
	}
	if strlen(*r.ucOid) > 100 {
		return localVarReturnValue, nil, reportError("ucOid must have less than 100 elements")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "ucOid", r.ucOid, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.citrixConsistencyToken != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-ConsistencyToken", r.citrixConsistencyToken, "")
	}
	if r.xCwsTransactionId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Cws-TransactionId", r.xCwsTransactionId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCustomerAdministratorsAccessPutRequest struct {
	ctx context.Context
	ApiService *AdministratorsAPIService
	customer string
	id *string
	citrixConsistencyToken *string
	xCwsTransactionId *string
	citrixTimeoutMs *float64
	citrixCloudServicesAdministratorsApiModelsAdministratorAccessModel *CitrixCloudServicesAdministratorsApiModelsAdministratorAccessModel
}

// The administrator&#39;s userId
func (r ApiCustomerAdministratorsAccessPutRequest) Id(id string) ApiCustomerAdministratorsAccessPutRequest {
	r.id = &id
	return r
}

// CosmosDB consistency token.
func (r ApiCustomerAdministratorsAccessPutRequest) CitrixConsistencyToken(citrixConsistencyToken string) ApiCustomerAdministratorsAccessPutRequest {
	r.citrixConsistencyToken = &citrixConsistencyToken
	return r
}

// Used for Citrix Cloud telemetry correlation.
func (r ApiCustomerAdministratorsAccessPutRequest) XCwsTransactionId(xCwsTransactionId string) ApiCustomerAdministratorsAccessPutRequest {
	r.xCwsTransactionId = &xCwsTransactionId
	return r
}

// Maximum time caller is willing to wait for a response before timing out the request, in milliseconds
func (r ApiCustomerAdministratorsAccessPutRequest) CitrixTimeoutMs(citrixTimeoutMs float64) ApiCustomerAdministratorsAccessPutRequest {
	r.citrixTimeoutMs = &citrixTimeoutMs
	return r
}

// The administrator&#39;s access, in terms of policies and access type.
func (r ApiCustomerAdministratorsAccessPutRequest) CitrixCloudServicesAdministratorsApiModelsAdministratorAccessModel(citrixCloudServicesAdministratorsApiModelsAdministratorAccessModel CitrixCloudServicesAdministratorsApiModelsAdministratorAccessModel) ApiCustomerAdministratorsAccessPutRequest {
	r.citrixCloudServicesAdministratorsApiModelsAdministratorAccessModel = &citrixCloudServicesAdministratorsApiModelsAdministratorAccessModel
	return r
}

func (r ApiCustomerAdministratorsAccessPutRequest) Execute() (*http.Response, error) {
	return r.ApiService.CustomerAdministratorsAccessPutExecute(r)
}

/*
CustomerAdministratorsAccessPut Updates the access for an administrator. [ServiceKey][BearerToken]

This currently retains the same behavior (input/output) expectations we had in DAv1.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param customer
 @return ApiCustomerAdministratorsAccessPutRequest
*/
func (a *AdministratorsAPIService) CustomerAdministratorsAccessPut(ctx context.Context, customer string) ApiCustomerAdministratorsAccessPutRequest {
	return ApiCustomerAdministratorsAccessPutRequest{
		ApiService: a,
		ctx: ctx,
		customer: customer,
	}
}

// Execute executes the request
func (a *AdministratorsAPIService) CustomerAdministratorsAccessPutExecute(r ApiCustomerAdministratorsAccessPutRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdministratorsAPIService.CustomerAdministratorsAccessPut")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{customer}/Administrators/Access"
	localVarPath = strings.Replace(localVarPath, "{"+"customer"+"}", url.PathEscape(parameterValueToString(r.customer, "customer")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.citrixConsistencyToken != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-ConsistencyToken", r.citrixConsistencyToken, "")
	}
	if r.xCwsTransactionId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Cws-TransactionId", r.xCwsTransactionId, "")
	}
	if r.citrixTimeoutMs != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-Timeout-ms", r.citrixTimeoutMs, "")
	}
	// body params
	localVarPostBody = r.citrixCloudServicesAdministratorsApiModelsAdministratorAccessModel
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v MicrosoftAspNetCoreMvcProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCustomerAdministratorsAccessUcOidGetRequest struct {
	ctx context.Context
	ApiService *AdministratorsAPIService
	ucOid string
	customer string
	administratorType *string
	groupOnlyPermissions *bool
	citrixConsistencyToken *string
	xCwsTransactionId *string
}

// Administrator Type.
func (r ApiCustomerAdministratorsAccessUcOidGetRequest) AdministratorType(administratorType string) ApiCustomerAdministratorsAccessUcOidGetRequest {
	r.administratorType = &administratorType
	return r
}

// Whether permissions applicable to group administrators should be returned.
func (r ApiCustomerAdministratorsAccessUcOidGetRequest) GroupOnlyPermissions(groupOnlyPermissions bool) ApiCustomerAdministratorsAccessUcOidGetRequest {
	r.groupOnlyPermissions = &groupOnlyPermissions
	return r
}

// CosmosDB consistency token.
func (r ApiCustomerAdministratorsAccessUcOidGetRequest) CitrixConsistencyToken(citrixConsistencyToken string) ApiCustomerAdministratorsAccessUcOidGetRequest {
	r.citrixConsistencyToken = &citrixConsistencyToken
	return r
}

// Used for Citrix Cloud telemetry correlation.
func (r ApiCustomerAdministratorsAccessUcOidGetRequest) XCwsTransactionId(xCwsTransactionId string) ApiCustomerAdministratorsAccessUcOidGetRequest {
	r.xCwsTransactionId = &xCwsTransactionId
	return r
}

func (r ApiCustomerAdministratorsAccessUcOidGetRequest) Execute() (*CitrixCloudServicesAdministratorsApiModelsAdministratorAccessModel, *http.Response, error) {
	return r.ApiService.CustomerAdministratorsAccessUcOidGetExecute(r)
}

/*
CustomerAdministratorsAccessUcOidGet Get the access of an administrator [ServiceKey][BearerToken]

This legacy endpoint has overloaded use cases - get access to create a new administrator, get access to update an existing administrator, and get current access to view.
Logic for each is slightly different from each other which results in many combinations of input query parameters.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param ucOid Administrator universal claim organization identifier (OID).
 @param customer
 @return ApiCustomerAdministratorsAccessUcOidGetRequest
*/
func (a *AdministratorsAPIService) CustomerAdministratorsAccessUcOidGet(ctx context.Context, ucOid string, customer string) ApiCustomerAdministratorsAccessUcOidGetRequest {
	return ApiCustomerAdministratorsAccessUcOidGetRequest{
		ApiService: a,
		ctx: ctx,
		ucOid: ucOid,
		customer: customer,
	}
}

// Execute executes the request
//  @return CitrixCloudServicesAdministratorsApiModelsAdministratorAccessModel
func (a *AdministratorsAPIService) CustomerAdministratorsAccessUcOidGetExecute(r ApiCustomerAdministratorsAccessUcOidGetRequest) (*CitrixCloudServicesAdministratorsApiModelsAdministratorAccessModel, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CitrixCloudServicesAdministratorsApiModelsAdministratorAccessModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdministratorsAPIService.CustomerAdministratorsAccessUcOidGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{customer}/administrators/access/{ucOid}"
	localVarPath = strings.Replace(localVarPath, "{"+"ucOid"+"}", url.PathEscape(parameterValueToString(r.ucOid, "ucOid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"customer"+"}", url.PathEscape(parameterValueToString(r.customer, "customer")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.ucOid) < 0 {
		return localVarReturnValue, nil, reportError("ucOid must have at least 0 elements")
	}
	if strlen(r.ucOid) > 100 {
		return localVarReturnValue, nil, reportError("ucOid must have less than 100 elements")
	}

	if r.administratorType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "administratorType", r.administratorType, "")
	} else {
		var defaultValue string = "Group"
		r.administratorType = &defaultValue
	}
	if r.groupOnlyPermissions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "groupOnlyPermissions", r.groupOnlyPermissions, "")
	} else {
		var defaultValue bool = true
		r.groupOnlyPermissions = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.citrixConsistencyToken != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-ConsistencyToken", r.citrixConsistencyToken, "")
	}
	if r.xCwsTransactionId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Cws-TransactionId", r.xCwsTransactionId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCustomerAdministratorsActiveAdministratorsGetRequest struct {
	ctx context.Context
	ApiService *AdministratorsAPIService
	customer string
	maxItemCount *string
	requestContinuation *string
	citrixConsistencyToken *string
	xCwsTransactionId *string
}

// Optional item count.
func (r ApiCustomerAdministratorsActiveAdministratorsGetRequest) MaxItemCount(maxItemCount string) ApiCustomerAdministratorsActiveAdministratorsGetRequest {
	r.maxItemCount = &maxItemCount
	return r
}

// Optional continuation token.
func (r ApiCustomerAdministratorsActiveAdministratorsGetRequest) RequestContinuation(requestContinuation string) ApiCustomerAdministratorsActiveAdministratorsGetRequest {
	r.requestContinuation = &requestContinuation
	return r
}

// CosmosDB consistency token.
func (r ApiCustomerAdministratorsActiveAdministratorsGetRequest) CitrixConsistencyToken(citrixConsistencyToken string) ApiCustomerAdministratorsActiveAdministratorsGetRequest {
	r.citrixConsistencyToken = &citrixConsistencyToken
	return r
}

// Used for Citrix Cloud telemetry correlation.
func (r ApiCustomerAdministratorsActiveAdministratorsGetRequest) XCwsTransactionId(xCwsTransactionId string) ApiCustomerAdministratorsActiveAdministratorsGetRequest {
	r.xCwsTransactionId = &xCwsTransactionId
	return r
}

func (r ApiCustomerAdministratorsActiveAdministratorsGetRequest) Execute() (*CitrixCloudServicesAdministratorsApiModelsAdministratorsResult, *http.Response, error) {
	return r.ApiService.CustomerAdministratorsActiveAdministratorsGetExecute(r)
}

/*
CustomerAdministratorsActiveAdministratorsGet Gets all active administrators (users, secureClients, and groups) across all customers. [ServiceKey][RootOnly]

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param customer
 @return ApiCustomerAdministratorsActiveAdministratorsGetRequest
*/
func (a *AdministratorsAPIService) CustomerAdministratorsActiveAdministratorsGet(ctx context.Context, customer string) ApiCustomerAdministratorsActiveAdministratorsGetRequest {
	return ApiCustomerAdministratorsActiveAdministratorsGetRequest{
		ApiService: a,
		ctx: ctx,
		customer: customer,
	}
}

// Execute executes the request
//  @return CitrixCloudServicesAdministratorsApiModelsAdministratorsResult
func (a *AdministratorsAPIService) CustomerAdministratorsActiveAdministratorsGetExecute(r ApiCustomerAdministratorsActiveAdministratorsGetRequest) (*CitrixCloudServicesAdministratorsApiModelsAdministratorsResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CitrixCloudServicesAdministratorsApiModelsAdministratorsResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdministratorsAPIService.CustomerAdministratorsActiveAdministratorsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{customer}/administrators/activeAdministrators"
	localVarPath = strings.Replace(localVarPath, "{"+"customer"+"}", url.PathEscape(parameterValueToString(r.customer, "customer")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.maxItemCount != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxItemCount", r.maxItemCount, "")
	}
	if r.requestContinuation != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "requestContinuation", r.requestContinuation, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.citrixConsistencyToken != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-ConsistencyToken", r.citrixConsistencyToken, "")
	}
	if r.xCwsTransactionId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Cws-TransactionId", r.xCwsTransactionId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v MicrosoftAspNetCoreMvcProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCustomerAdministratorsAdminIdDeleteRequest struct {
	ctx context.Context
	ApiService *AdministratorsAPIService
	adminId string
	customer string
	citrixConsistencyToken *string
	xCwsTransactionId *string
}

// CosmosDB consistency token.
func (r ApiCustomerAdministratorsAdminIdDeleteRequest) CitrixConsistencyToken(citrixConsistencyToken string) ApiCustomerAdministratorsAdminIdDeleteRequest {
	r.citrixConsistencyToken = &citrixConsistencyToken
	return r
}

// Used for Citrix Cloud telemetry correlation.
func (r ApiCustomerAdministratorsAdminIdDeleteRequest) XCwsTransactionId(xCwsTransactionId string) ApiCustomerAdministratorsAdminIdDeleteRequest {
	r.xCwsTransactionId = &xCwsTransactionId
	return r
}

func (r ApiCustomerAdministratorsAdminIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.CustomerAdministratorsAdminIdDeleteExecute(r)
}

/*
CustomerAdministratorsAdminIdDelete Deletes an administrator by ucOid. [ServiceKey][BearerToken]

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param adminId Either the administrator universal claim organization identifier (OID) or user id.
 @param customer
 @return ApiCustomerAdministratorsAdminIdDeleteRequest
*/
func (a *AdministratorsAPIService) CustomerAdministratorsAdminIdDelete(ctx context.Context, adminId string, customer string) ApiCustomerAdministratorsAdminIdDeleteRequest {
	return ApiCustomerAdministratorsAdminIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		adminId: adminId,
		customer: customer,
	}
}

// Execute executes the request
func (a *AdministratorsAPIService) CustomerAdministratorsAdminIdDeleteExecute(r ApiCustomerAdministratorsAdminIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdministratorsAPIService.CustomerAdministratorsAdminIdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{customer}/administrators/{adminId}"
	localVarPath = strings.Replace(localVarPath, "{"+"adminId"+"}", url.PathEscape(parameterValueToString(r.adminId, "adminId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"customer"+"}", url.PathEscape(parameterValueToString(r.customer, "customer")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.adminId) < 0 {
		return nil, reportError("adminId must have at least 0 elements")
	}
	if strlen(r.adminId) > 100 {
		return nil, reportError("adminId must have less than 100 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.citrixConsistencyToken != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-ConsistencyToken", r.citrixConsistencyToken, "")
	}
	if r.xCwsTransactionId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Cws-TransactionId", r.xCwsTransactionId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCustomerAdministratorsAdminIdPutRequest struct {
	ctx context.Context
	ApiService *AdministratorsAPIService
	adminId string
	customer string
	citrixConsistencyToken *string
	xCwsTransactionId *string
	citrixCloudServicesAdministratorsApiModelsUpdateAdministratorModel *CitrixCloudServicesAdministratorsApiModelsUpdateAdministratorModel
}

// CosmosDB consistency token.
func (r ApiCustomerAdministratorsAdminIdPutRequest) CitrixConsistencyToken(citrixConsistencyToken string) ApiCustomerAdministratorsAdminIdPutRequest {
	r.citrixConsistencyToken = &citrixConsistencyToken
	return r
}

// Used for Citrix Cloud telemetry correlation.
func (r ApiCustomerAdministratorsAdminIdPutRequest) XCwsTransactionId(xCwsTransactionId string) ApiCustomerAdministratorsAdminIdPutRequest {
	r.xCwsTransactionId = &xCwsTransactionId
	return r
}

// Administrator to be updated.
func (r ApiCustomerAdministratorsAdminIdPutRequest) CitrixCloudServicesAdministratorsApiModelsUpdateAdministratorModel(citrixCloudServicesAdministratorsApiModelsUpdateAdministratorModel CitrixCloudServicesAdministratorsApiModelsUpdateAdministratorModel) ApiCustomerAdministratorsAdminIdPutRequest {
	r.citrixCloudServicesAdministratorsApiModelsUpdateAdministratorModel = &citrixCloudServicesAdministratorsApiModelsUpdateAdministratorModel
	return r
}

func (r ApiCustomerAdministratorsAdminIdPutRequest) Execute() (*CitrixCloudServicesAdministratorsApiModelsAdministratorResult, *http.Response, error) {
	return r.ApiService.CustomerAdministratorsAdminIdPutExecute(r)
}

/*
CustomerAdministratorsAdminIdPut Updates an administrator by either ucOid or user id. [BearerToken]

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param adminId Either the administrator universal claim organization identifier (OID) or user id.
 @param customer
 @return ApiCustomerAdministratorsAdminIdPutRequest
*/
func (a *AdministratorsAPIService) CustomerAdministratorsAdminIdPut(ctx context.Context, adminId string, customer string) ApiCustomerAdministratorsAdminIdPutRequest {
	return ApiCustomerAdministratorsAdminIdPutRequest{
		ApiService: a,
		ctx: ctx,
		adminId: adminId,
		customer: customer,
	}
}

// Execute executes the request
//  @return CitrixCloudServicesAdministratorsApiModelsAdministratorResult
func (a *AdministratorsAPIService) CustomerAdministratorsAdminIdPutExecute(r ApiCustomerAdministratorsAdminIdPutRequest) (*CitrixCloudServicesAdministratorsApiModelsAdministratorResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CitrixCloudServicesAdministratorsApiModelsAdministratorResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdministratorsAPIService.CustomerAdministratorsAdminIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{customer}/administrators/{adminId}"
	localVarPath = strings.Replace(localVarPath, "{"+"adminId"+"}", url.PathEscape(parameterValueToString(r.adminId, "adminId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"customer"+"}", url.PathEscape(parameterValueToString(r.customer, "customer")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.adminId) < 0 {
		return localVarReturnValue, nil, reportError("adminId must have at least 0 elements")
	}
	if strlen(r.adminId) > 100 {
		return localVarReturnValue, nil, reportError("adminId must have less than 100 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.citrixConsistencyToken != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-ConsistencyToken", r.citrixConsistencyToken, "")
	}
	if r.xCwsTransactionId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Cws-TransactionId", r.xCwsTransactionId, "")
	}
	// body params
	localVarPostBody = r.citrixCloudServicesAdministratorsApiModelsUpdateAdministratorModel
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v MicrosoftAspNetCoreMvcProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCustomerAdministratorsAuthDomainPutRequest struct {
	ctx context.Context
	ApiService *AdministratorsAPIService
	oldAuthDomain *string
	newAuthDomain *string
	customer string
	citrixConsistencyToken *string
	xCwsTransactionId *string
	citrixTimeoutMs *float64
}

// The old auth domain to look for.
func (r ApiCustomerAdministratorsAuthDomainPutRequest) OldAuthDomain(oldAuthDomain string) ApiCustomerAdministratorsAuthDomainPutRequest {
	r.oldAuthDomain = &oldAuthDomain
	return r
}

// The new auth domain to update.
func (r ApiCustomerAdministratorsAuthDomainPutRequest) NewAuthDomain(newAuthDomain string) ApiCustomerAdministratorsAuthDomainPutRequest {
	r.newAuthDomain = &newAuthDomain
	return r
}

// CosmosDB consistency token.
func (r ApiCustomerAdministratorsAuthDomainPutRequest) CitrixConsistencyToken(citrixConsistencyToken string) ApiCustomerAdministratorsAuthDomainPutRequest {
	r.citrixConsistencyToken = &citrixConsistencyToken
	return r
}

// Used for Citrix Cloud telemetry correlation.
func (r ApiCustomerAdministratorsAuthDomainPutRequest) XCwsTransactionId(xCwsTransactionId string) ApiCustomerAdministratorsAuthDomainPutRequest {
	r.xCwsTransactionId = &xCwsTransactionId
	return r
}

// Maximum time caller is willing to wait for a response before timing out the request, in milliseconds
func (r ApiCustomerAdministratorsAuthDomainPutRequest) CitrixTimeoutMs(citrixTimeoutMs float64) ApiCustomerAdministratorsAuthDomainPutRequest {
	r.citrixTimeoutMs = &citrixTimeoutMs
	return r
}

func (r ApiCustomerAdministratorsAuthDomainPutRequest) Execute() (*http.Response, error) {
	return r.ApiService.CustomerAdministratorsAuthDomainPutExecute(r)
}

/*
CustomerAdministratorsAuthDomainPut Updates auth domain for relevant administrators of given customer context.  Forwards to DAv1 if not found locally or is pending. [ServiceKey]

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param customer
 @return ApiCustomerAdministratorsAuthDomainPutRequest
*/
func (a *AdministratorsAPIService) CustomerAdministratorsAuthDomainPut(ctx context.Context, customer string) ApiCustomerAdministratorsAuthDomainPutRequest {
	return ApiCustomerAdministratorsAuthDomainPutRequest{
		ApiService: a,
		ctx: ctx,
		customer: customer,
	}
}

// Execute executes the request
func (a *AdministratorsAPIService) CustomerAdministratorsAuthDomainPutExecute(r ApiCustomerAdministratorsAuthDomainPutRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdministratorsAPIService.CustomerAdministratorsAuthDomainPut")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{customer}/administrators/authDomain"
	localVarPath = strings.Replace(localVarPath, "{"+"customer"+"}", url.PathEscape(parameterValueToString(r.customer, "customer")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oldAuthDomain == nil {
		return nil, reportError("oldAuthDomain is required and must be specified")
	}
	if strlen(*r.oldAuthDomain) < 0 {
		return nil, reportError("oldAuthDomain must have at least 0 elements")
	}
	if strlen(*r.oldAuthDomain) > 100 {
		return nil, reportError("oldAuthDomain must have less than 100 elements")
	}
	if r.newAuthDomain == nil {
		return nil, reportError("newAuthDomain is required and must be specified")
	}
	if strlen(*r.newAuthDomain) < 0 {
		return nil, reportError("newAuthDomain must have at least 0 elements")
	}
	if strlen(*r.newAuthDomain) > 100 {
		return nil, reportError("newAuthDomain must have less than 100 elements")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "oldAuthDomain", r.oldAuthDomain, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "newAuthDomain", r.newAuthDomain, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.citrixConsistencyToken != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-ConsistencyToken", r.citrixConsistencyToken, "")
	}
	if r.xCwsTransactionId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Cws-TransactionId", r.xCwsTransactionId, "")
	}
	if r.citrixTimeoutMs != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-Timeout-ms", r.citrixTimeoutMs, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCustomerAdministratorsClaimsDecompressPostRequest struct {
	ctx context.Context
	ApiService *AdministratorsAPIService
	customer string
	citrixConsistencyToken *string
	xCwsTransactionId *string
	citrixCloudServicesAdministratorsApiModelsDecompressClaimsModel *CitrixCloudServicesAdministratorsApiModelsDecompressClaimsModel
}

// CosmosDB consistency token.
func (r ApiCustomerAdministratorsClaimsDecompressPostRequest) CitrixConsistencyToken(citrixConsistencyToken string) ApiCustomerAdministratorsClaimsDecompressPostRequest {
	r.citrixConsistencyToken = &citrixConsistencyToken
	return r
}

// Used for Citrix Cloud telemetry correlation.
func (r ApiCustomerAdministratorsClaimsDecompressPostRequest) XCwsTransactionId(xCwsTransactionId string) ApiCustomerAdministratorsClaimsDecompressPostRequest {
	r.xCwsTransactionId = &xCwsTransactionId
	return r
}

// The model.
func (r ApiCustomerAdministratorsClaimsDecompressPostRequest) CitrixCloudServicesAdministratorsApiModelsDecompressClaimsModel(citrixCloudServicesAdministratorsApiModelsDecompressClaimsModel CitrixCloudServicesAdministratorsApiModelsDecompressClaimsModel) ApiCustomerAdministratorsClaimsDecompressPostRequest {
	r.citrixCloudServicesAdministratorsApiModelsDecompressClaimsModel = &citrixCloudServicesAdministratorsApiModelsDecompressClaimsModel
	return r
}

func (r ApiCustomerAdministratorsClaimsDecompressPostRequest) Execute() (*CitrixCloudServicesAdministratorsApiModelsDecompressClaimsModelResponse, *http.Response, error) {
	return r.ApiService.CustomerAdministratorsClaimsDecompressPostExecute(r)
}

/*
CustomerAdministratorsClaimsDecompressPost Decompresses the group claims. [ServiceKey][BearerToken]

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param customer
 @return ApiCustomerAdministratorsClaimsDecompressPostRequest
*/
func (a *AdministratorsAPIService) CustomerAdministratorsClaimsDecompressPost(ctx context.Context, customer string) ApiCustomerAdministratorsClaimsDecompressPostRequest {
	return ApiCustomerAdministratorsClaimsDecompressPostRequest{
		ApiService: a,
		ctx: ctx,
		customer: customer,
	}
}

// Execute executes the request
//  @return CitrixCloudServicesAdministratorsApiModelsDecompressClaimsModelResponse
func (a *AdministratorsAPIService) CustomerAdministratorsClaimsDecompressPostExecute(r ApiCustomerAdministratorsClaimsDecompressPostRequest) (*CitrixCloudServicesAdministratorsApiModelsDecompressClaimsModelResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CitrixCloudServicesAdministratorsApiModelsDecompressClaimsModelResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdministratorsAPIService.CustomerAdministratorsClaimsDecompressPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{customer}/administrators/claims/$decompress"
	localVarPath = strings.Replace(localVarPath, "{"+"customer"+"}", url.PathEscape(parameterValueToString(r.customer, "customer")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.citrixConsistencyToken != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-ConsistencyToken", r.citrixConsistencyToken, "")
	}
	if r.xCwsTransactionId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Cws-TransactionId", r.xCwsTransactionId, "")
	}
	// body params
	localVarPostBody = r.citrixCloudServicesAdministratorsApiModelsDecompressClaimsModel
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCustomerAdministratorsCreatePostRequest struct {
	ctx context.Context
	ApiService *AdministratorsAPIService
	customer string
	citrixConsistencyToken *string
	xCwsTransactionId *string
	citrixCloudServicesAdministratorsApiModelsCreateAdministratorInputModel *CitrixCloudServicesAdministratorsApiModelsCreateAdministratorInputModel
}

// CosmosDB consistency token.
func (r ApiCustomerAdministratorsCreatePostRequest) CitrixConsistencyToken(citrixConsistencyToken string) ApiCustomerAdministratorsCreatePostRequest {
	r.citrixConsistencyToken = &citrixConsistencyToken
	return r
}

// Used for Citrix Cloud telemetry correlation.
func (r ApiCustomerAdministratorsCreatePostRequest) XCwsTransactionId(xCwsTransactionId string) ApiCustomerAdministratorsCreatePostRequest {
	r.xCwsTransactionId = &xCwsTransactionId
	return r
}

// Administrator to be added.
func (r ApiCustomerAdministratorsCreatePostRequest) CitrixCloudServicesAdministratorsApiModelsCreateAdministratorInputModel(citrixCloudServicesAdministratorsApiModelsCreateAdministratorInputModel CitrixCloudServicesAdministratorsApiModelsCreateAdministratorInputModel) ApiCustomerAdministratorsCreatePostRequest {
	r.citrixCloudServicesAdministratorsApiModelsCreateAdministratorInputModel = &citrixCloudServicesAdministratorsApiModelsCreateAdministratorInputModel
	return r
}

func (r ApiCustomerAdministratorsCreatePostRequest) Execute() (*CitrixCloudServicesAdministratorsApiModelsAdministratorResult, *http.Response, error) {
	return r.ApiService.CustomerAdministratorsCreatePostExecute(r)
}

/*
CustomerAdministratorsCreatePost Adds an administrator. This API is a higher-level version of  `POST /{customer}/administrators` that works with any type of  administrator with stricter input validation. [BearerToken]

<br>
            Administrator users from identity providers Citrix Identity and Azure AD
            will be sent an email invitation and are considered pending
            administrators until their email is verified. Any other type of
            administrator will be added immediately without this process.
            
<br>
            All new administrators require at least `type`, `accessType`,
            and `providerType`. Additional requirements vary by identity
            provider.
            
<br>
            Citrix Identity and Azure AD user administrators additionally require
            `email` for their email invitation.
            
<br>
            Administrators from external identity providers (Azure AD, Google, SAML)
            additionally require `externalProviderId` and
            `externalUserId`.
            

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param customer
 @return ApiCustomerAdministratorsCreatePostRequest
*/
func (a *AdministratorsAPIService) CustomerAdministratorsCreatePost(ctx context.Context, customer string) ApiCustomerAdministratorsCreatePostRequest {
	return ApiCustomerAdministratorsCreatePostRequest{
		ApiService: a,
		ctx: ctx,
		customer: customer,
	}
}

// Execute executes the request
//  @return CitrixCloudServicesAdministratorsApiModelsAdministratorResult
func (a *AdministratorsAPIService) CustomerAdministratorsCreatePostExecute(r ApiCustomerAdministratorsCreatePostRequest) (*CitrixCloudServicesAdministratorsApiModelsAdministratorResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CitrixCloudServicesAdministratorsApiModelsAdministratorResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdministratorsAPIService.CustomerAdministratorsCreatePost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{customer}/administrators/$create"
	localVarPath = strings.Replace(localVarPath, "{"+"customer"+"}", url.PathEscape(parameterValueToString(r.customer, "customer")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.citrixConsistencyToken != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-ConsistencyToken", r.citrixConsistencyToken, "")
	}
	if r.xCwsTransactionId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Cws-TransactionId", r.xCwsTransactionId, "")
	}
	// body params
	localVarPostBody = r.citrixCloudServicesAdministratorsApiModelsCreateAdministratorInputModel
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v CitrixCloudServicesApiModelsErrorsErrorModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v CitrixCloudServicesApiModelsErrorsErrorModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCustomerAdministratorsDeleteMultiplePostRequest struct {
	ctx context.Context
	ApiService *AdministratorsAPIService
	customer string
	citrixConsistencyToken *string
	xCwsTransactionId *string
	citrixCloudServicesAdministratorsApiModelsDeleteAdministratorModel *CitrixCloudServicesAdministratorsApiModelsDeleteAdministratorModel
}

// CosmosDB consistency token.
func (r ApiCustomerAdministratorsDeleteMultiplePostRequest) CitrixConsistencyToken(citrixConsistencyToken string) ApiCustomerAdministratorsDeleteMultiplePostRequest {
	r.citrixConsistencyToken = &citrixConsistencyToken
	return r
}

// Used for Citrix Cloud telemetry correlation.
func (r ApiCustomerAdministratorsDeleteMultiplePostRequest) XCwsTransactionId(xCwsTransactionId string) ApiCustomerAdministratorsDeleteMultiplePostRequest {
	r.xCwsTransactionId = &xCwsTransactionId
	return r
}

// Administrator delete model.
func (r ApiCustomerAdministratorsDeleteMultiplePostRequest) CitrixCloudServicesAdministratorsApiModelsDeleteAdministratorModel(citrixCloudServicesAdministratorsApiModelsDeleteAdministratorModel CitrixCloudServicesAdministratorsApiModelsDeleteAdministratorModel) ApiCustomerAdministratorsDeleteMultiplePostRequest {
	r.citrixCloudServicesAdministratorsApiModelsDeleteAdministratorModel = &citrixCloudServicesAdministratorsApiModelsDeleteAdministratorModel
	return r
}

func (r ApiCustomerAdministratorsDeleteMultiplePostRequest) Execute() (*CitrixCloudServicesAdministratorsApiModelsDeleteAdministratorsErrorResponseModel, *http.Response, error) {
	return r.ApiService.CustomerAdministratorsDeleteMultiplePostExecute(r)
}

/*
CustomerAdministratorsDeleteMultiplePost Deletes an administrator. [ServiceKey][BearerToken]

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param customer
 @return ApiCustomerAdministratorsDeleteMultiplePostRequest
*/
func (a *AdministratorsAPIService) CustomerAdministratorsDeleteMultiplePost(ctx context.Context, customer string) ApiCustomerAdministratorsDeleteMultiplePostRequest {
	return ApiCustomerAdministratorsDeleteMultiplePostRequest{
		ApiService: a,
		ctx: ctx,
		customer: customer,
	}
}

// Execute executes the request
//  @return CitrixCloudServicesAdministratorsApiModelsDeleteAdministratorsErrorResponseModel
func (a *AdministratorsAPIService) CustomerAdministratorsDeleteMultiplePostExecute(r ApiCustomerAdministratorsDeleteMultiplePostRequest) (*CitrixCloudServicesAdministratorsApiModelsDeleteAdministratorsErrorResponseModel, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CitrixCloudServicesAdministratorsApiModelsDeleteAdministratorsErrorResponseModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdministratorsAPIService.CustomerAdministratorsDeleteMultiplePost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{customer}/administrators/DeleteMultiple"
	localVarPath = strings.Replace(localVarPath, "{"+"customer"+"}", url.PathEscape(parameterValueToString(r.customer, "customer")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.citrixConsistencyToken != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-ConsistencyToken", r.citrixConsistencyToken, "")
	}
	if r.xCwsTransactionId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Cws-TransactionId", r.xCwsTransactionId, "")
	}
	// body params
	localVarPostBody = r.citrixCloudServicesAdministratorsApiModelsDeleteAdministratorModel
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCustomerAdministratorsDeletePostRequest struct {
	ctx context.Context
	ApiService *AdministratorsAPIService
	customer string
	citrixConsistencyToken *string
	xCwsTransactionId *string
	citrixCloudServicesAdministratorsApiModelsDeleteAdministratorsModel *CitrixCloudServicesAdministratorsApiModelsDeleteAdministratorsModel
}

// CosmosDB consistency token.
func (r ApiCustomerAdministratorsDeletePostRequest) CitrixConsistencyToken(citrixConsistencyToken string) ApiCustomerAdministratorsDeletePostRequest {
	r.citrixConsistencyToken = &citrixConsistencyToken
	return r
}

// Used for Citrix Cloud telemetry correlation.
func (r ApiCustomerAdministratorsDeletePostRequest) XCwsTransactionId(xCwsTransactionId string) ApiCustomerAdministratorsDeletePostRequest {
	r.xCwsTransactionId = &xCwsTransactionId
	return r
}

// Administrator delete model.
func (r ApiCustomerAdministratorsDeletePostRequest) CitrixCloudServicesAdministratorsApiModelsDeleteAdministratorsModel(citrixCloudServicesAdministratorsApiModelsDeleteAdministratorsModel CitrixCloudServicesAdministratorsApiModelsDeleteAdministratorsModel) ApiCustomerAdministratorsDeletePostRequest {
	r.citrixCloudServicesAdministratorsApiModelsDeleteAdministratorsModel = &citrixCloudServicesAdministratorsApiModelsDeleteAdministratorsModel
	return r
}

func (r ApiCustomerAdministratorsDeletePostRequest) Execute() (*CitrixCloudServicesAdministratorsApiModelsDeleteAdministratorsErrorResponseModel, *http.Response, error) {
	return r.ApiService.CustomerAdministratorsDeletePostExecute(r)
}

/*
CustomerAdministratorsDeletePost Deletes users by UserId in Administrators or DA, and deletes groups/users by UcOids in Administrators. [ServiceKey][BearerToken]

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param customer
 @return ApiCustomerAdministratorsDeletePostRequest
*/
func (a *AdministratorsAPIService) CustomerAdministratorsDeletePost(ctx context.Context, customer string) ApiCustomerAdministratorsDeletePostRequest {
	return ApiCustomerAdministratorsDeletePostRequest{
		ApiService: a,
		ctx: ctx,
		customer: customer,
	}
}

// Execute executes the request
//  @return CitrixCloudServicesAdministratorsApiModelsDeleteAdministratorsErrorResponseModel
func (a *AdministratorsAPIService) CustomerAdministratorsDeletePostExecute(r ApiCustomerAdministratorsDeletePostRequest) (*CitrixCloudServicesAdministratorsApiModelsDeleteAdministratorsErrorResponseModel, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CitrixCloudServicesAdministratorsApiModelsDeleteAdministratorsErrorResponseModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdministratorsAPIService.CustomerAdministratorsDeletePost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{customer}/administrators/$delete"
	localVarPath = strings.Replace(localVarPath, "{"+"customer"+"}", url.PathEscape(parameterValueToString(r.customer, "customer")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.citrixConsistencyToken != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-ConsistencyToken", r.citrixConsistencyToken, "")
	}
	if r.xCwsTransactionId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Cws-TransactionId", r.xCwsTransactionId, "")
	}
	// body params
	localVarPostBody = r.citrixCloudServicesAdministratorsApiModelsDeleteAdministratorsModel
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCustomerAdministratorsGetRequest struct {
	ctx context.Context
	ApiService *AdministratorsAPIService
	customer string
	type_ *string
	providerType *string
	maxItemCount *string
	requestContinuation *string
	id *string
	citrixConsistencyToken *string
	xCwsTransactionId *string
}

// Optional administrator type filter.
func (r ApiCustomerAdministratorsGetRequest) Type_(type_ string) ApiCustomerAdministratorsGetRequest {
	r.type_ = &type_
	return r
}

// Optional Type of the provider.
func (r ApiCustomerAdministratorsGetRequest) ProviderType(providerType string) ApiCustomerAdministratorsGetRequest {
	r.providerType = &providerType
	return r
}

// Optional item count.
func (r ApiCustomerAdministratorsGetRequest) MaxItemCount(maxItemCount string) ApiCustomerAdministratorsGetRequest {
	r.maxItemCount = &maxItemCount
	return r
}

// Optional continuation token.
func (r ApiCustomerAdministratorsGetRequest) RequestContinuation(requestContinuation string) ApiCustomerAdministratorsGetRequest {
	r.requestContinuation = &requestContinuation
	return r
}

// The User Id corresponding to a user administrator. (Note: Exclusive with other parameters on this endpoint)
func (r ApiCustomerAdministratorsGetRequest) Id(id string) ApiCustomerAdministratorsGetRequest {
	r.id = &id
	return r
}

// CosmosDB consistency token.
func (r ApiCustomerAdministratorsGetRequest) CitrixConsistencyToken(citrixConsistencyToken string) ApiCustomerAdministratorsGetRequest {
	r.citrixConsistencyToken = &citrixConsistencyToken
	return r
}

// Used for Citrix Cloud telemetry correlation.
func (r ApiCustomerAdministratorsGetRequest) XCwsTransactionId(xCwsTransactionId string) ApiCustomerAdministratorsGetRequest {
	r.xCwsTransactionId = &xCwsTransactionId
	return r
}

func (r ApiCustomerAdministratorsGetRequest) Execute() (*CitrixCloudServicesAdministratorsApiModelsAdministratorsResult, *http.Response, error) {
	return r.ApiService.CustomerAdministratorsGetExecute(r)
}

/*
CustomerAdministratorsGet Gets all administrators on this customer. [ServiceKey][BearerToken]

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param customer
 @return ApiCustomerAdministratorsGetRequest
*/
func (a *AdministratorsAPIService) CustomerAdministratorsGet(ctx context.Context, customer string) ApiCustomerAdministratorsGetRequest {
	return ApiCustomerAdministratorsGetRequest{
		ApiService: a,
		ctx: ctx,
		customer: customer,
	}
}

// Execute executes the request
//  @return CitrixCloudServicesAdministratorsApiModelsAdministratorsResult
func (a *AdministratorsAPIService) CustomerAdministratorsGetExecute(r ApiCustomerAdministratorsGetRequest) (*CitrixCloudServicesAdministratorsApiModelsAdministratorsResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CitrixCloudServicesAdministratorsApiModelsAdministratorsResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdministratorsAPIService.CustomerAdministratorsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{customer}/administrators"
	localVarPath = strings.Replace(localVarPath, "{"+"customer"+"}", url.PathEscape(parameterValueToString(r.customer, "customer")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "")
	}
	if r.providerType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "providerType", r.providerType, "")
	}
	if r.maxItemCount != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxItemCount", r.maxItemCount, "")
	}
	if r.requestContinuation != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "requestContinuation", r.requestContinuation, "")
	}
	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.citrixConsistencyToken != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-ConsistencyToken", r.citrixConsistencyToken, "")
	}
	if r.xCwsTransactionId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Cws-TransactionId", r.xCwsTransactionId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v MicrosoftAspNetCoreMvcProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v MicrosoftAspNetCoreMvcProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCustomerAdministratorsIdAccessGetRequest struct {
	ctx context.Context
	ApiService *AdministratorsAPIService
	id string
	customer string
	citrixConsistencyToken *string
	xCwsTransactionId *string
}

// CosmosDB consistency token.
func (r ApiCustomerAdministratorsIdAccessGetRequest) CitrixConsistencyToken(citrixConsistencyToken string) ApiCustomerAdministratorsIdAccessGetRequest {
	r.citrixConsistencyToken = &citrixConsistencyToken
	return r
}

// Used for Citrix Cloud telemetry correlation.
func (r ApiCustomerAdministratorsIdAccessGetRequest) XCwsTransactionId(xCwsTransactionId string) ApiCustomerAdministratorsIdAccessGetRequest {
	r.xCwsTransactionId = &xCwsTransactionId
	return r
}

func (r ApiCustomerAdministratorsIdAccessGetRequest) Execute() (*CitrixCloudServicesAdministratorsApiModelsAdministratorAccessModel, *http.Response, error) {
	return r.ApiService.CustomerAdministratorsIdAccessGetExecute(r)
}

/*
CustomerAdministratorsIdAccessGet Get the access of an administrator. [ServiceKey][BearerToken]

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Either the Administrator UserId or UcOid (universal claim organization identifier [OID]). Use UserId for Citrix and AzureAd Users, UcOid for all others.
 @param customer
 @return ApiCustomerAdministratorsIdAccessGetRequest
*/
func (a *AdministratorsAPIService) CustomerAdministratorsIdAccessGet(ctx context.Context, id string, customer string) ApiCustomerAdministratorsIdAccessGetRequest {
	return ApiCustomerAdministratorsIdAccessGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		customer: customer,
	}
}

// Execute executes the request
//  @return CitrixCloudServicesAdministratorsApiModelsAdministratorAccessModel
func (a *AdministratorsAPIService) CustomerAdministratorsIdAccessGetExecute(r ApiCustomerAdministratorsIdAccessGetRequest) (*CitrixCloudServicesAdministratorsApiModelsAdministratorAccessModel, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CitrixCloudServicesAdministratorsApiModelsAdministratorAccessModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdministratorsAPIService.CustomerAdministratorsIdAccessGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{customer}/administrators/{id}/access"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"customer"+"}", url.PathEscape(parameterValueToString(r.customer, "customer")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.id) < 0 {
		return localVarReturnValue, nil, reportError("id must have at least 0 elements")
	}
	if strlen(r.id) > 100 {
		return localVarReturnValue, nil, reportError("id must have less than 100 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.citrixConsistencyToken != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-ConsistencyToken", r.citrixConsistencyToken, "")
	}
	if r.xCwsTransactionId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Cws-TransactionId", r.xCwsTransactionId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCustomerAdministratorsPostRequest struct {
	ctx context.Context
	ApiService *AdministratorsAPIService
	customer string
	citrixConsistencyToken *string
	xCwsTransactionId *string
	citrixCloudServicesAdministratorsApiModelsCreateAdministratorModel *CitrixCloudServicesAdministratorsApiModelsCreateAdministratorModel
}

// CosmosDB consistency token.
func (r ApiCustomerAdministratorsPostRequest) CitrixConsistencyToken(citrixConsistencyToken string) ApiCustomerAdministratorsPostRequest {
	r.citrixConsistencyToken = &citrixConsistencyToken
	return r
}

// Used for Citrix Cloud telemetry correlation.
func (r ApiCustomerAdministratorsPostRequest) XCwsTransactionId(xCwsTransactionId string) ApiCustomerAdministratorsPostRequest {
	r.xCwsTransactionId = &xCwsTransactionId
	return r
}

// Administrator to be added.
func (r ApiCustomerAdministratorsPostRequest) CitrixCloudServicesAdministratorsApiModelsCreateAdministratorModel(citrixCloudServicesAdministratorsApiModelsCreateAdministratorModel CitrixCloudServicesAdministratorsApiModelsCreateAdministratorModel) ApiCustomerAdministratorsPostRequest {
	r.citrixCloudServicesAdministratorsApiModelsCreateAdministratorModel = &citrixCloudServicesAdministratorsApiModelsCreateAdministratorModel
	return r
}

func (r ApiCustomerAdministratorsPostRequest) Execute() (*CitrixCloudServicesAdministratorsApiModelsAdministratorResult, *http.Response, error) {
	return r.ApiService.CustomerAdministratorsPostExecute(r)
}

/*
CustomerAdministratorsPost Adds an administrator. [BearerToken]

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param customer
 @return ApiCustomerAdministratorsPostRequest
*/
func (a *AdministratorsAPIService) CustomerAdministratorsPost(ctx context.Context, customer string) ApiCustomerAdministratorsPostRequest {
	return ApiCustomerAdministratorsPostRequest{
		ApiService: a,
		ctx: ctx,
		customer: customer,
	}
}

// Execute executes the request
//  @return CitrixCloudServicesAdministratorsApiModelsAdministratorResult
func (a *AdministratorsAPIService) CustomerAdministratorsPostExecute(r ApiCustomerAdministratorsPostRequest) (*CitrixCloudServicesAdministratorsApiModelsAdministratorResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CitrixCloudServicesAdministratorsApiModelsAdministratorResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdministratorsAPIService.CustomerAdministratorsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{customer}/administrators"
	localVarPath = strings.Replace(localVarPath, "{"+"customer"+"}", url.PathEscape(parameterValueToString(r.customer, "customer")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.citrixConsistencyToken != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-ConsistencyToken", r.citrixConsistencyToken, "")
	}
	if r.xCwsTransactionId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Cws-TransactionId", r.xCwsTransactionId, "")
	}
	// body params
	localVarPostBody = r.citrixCloudServicesAdministratorsApiModelsCreateAdministratorModel
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCustomerAdministratorsRbacrolesSyncPostRequest struct {
	ctx context.Context
	ApiService *AdministratorsAPIService
	customer string
	citrixConsistencyToken *string
	xCwsTransactionId *string
	citrixCloudServicesAdministratorsApiModelsRoleOperationRequest *CitrixCloudServicesAdministratorsApiModelsRoleOperationRequest
}

// CosmosDB consistency token.
func (r ApiCustomerAdministratorsRbacrolesSyncPostRequest) CitrixConsistencyToken(citrixConsistencyToken string) ApiCustomerAdministratorsRbacrolesSyncPostRequest {
	r.citrixConsistencyToken = &citrixConsistencyToken
	return r
}

// Used for Citrix Cloud telemetry correlation.
func (r ApiCustomerAdministratorsRbacrolesSyncPostRequest) XCwsTransactionId(xCwsTransactionId string) ApiCustomerAdministratorsRbacrolesSyncPostRequest {
	r.xCwsTransactionId = &xCwsTransactionId
	return r
}

func (r ApiCustomerAdministratorsRbacrolesSyncPostRequest) CitrixCloudServicesAdministratorsApiModelsRoleOperationRequest(citrixCloudServicesAdministratorsApiModelsRoleOperationRequest CitrixCloudServicesAdministratorsApiModelsRoleOperationRequest) ApiCustomerAdministratorsRbacrolesSyncPostRequest {
	r.citrixCloudServicesAdministratorsApiModelsRoleOperationRequest = &citrixCloudServicesAdministratorsApiModelsRoleOperationRequest
	return r
}

func (r ApiCustomerAdministratorsRbacrolesSyncPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.CustomerAdministratorsRbacrolesSyncPostExecute(r)
}

/*
CustomerAdministratorsRbacrolesSyncPost Updates the RBAC roles for the administrators belonging to a customer [ServiceKey]

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param customer
 @return ApiCustomerAdministratorsRbacrolesSyncPostRequest
*/
func (a *AdministratorsAPIService) CustomerAdministratorsRbacrolesSyncPost(ctx context.Context, customer string) ApiCustomerAdministratorsRbacrolesSyncPostRequest {
	return ApiCustomerAdministratorsRbacrolesSyncPostRequest{
		ApiService: a,
		ctx: ctx,
		customer: customer,
	}
}

// Execute executes the request
func (a *AdministratorsAPIService) CustomerAdministratorsRbacrolesSyncPostExecute(r ApiCustomerAdministratorsRbacrolesSyncPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdministratorsAPIService.CustomerAdministratorsRbacrolesSyncPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{customer}/administrators/rbacroles/$sync"
	localVarPath = strings.Replace(localVarPath, "{"+"customer"+"}", url.PathEscape(parameterValueToString(r.customer, "customer")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.citrixConsistencyToken != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-ConsistencyToken", r.citrixConsistencyToken, "")
	}
	if r.xCwsTransactionId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Cws-TransactionId", r.xCwsTransactionId, "")
	}
	// body params
	localVarPostBody = r.citrixCloudServicesAdministratorsApiModelsRoleOperationRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v MicrosoftAspNetCoreMvcProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCustomerAdministratorsSyncGroupsPostRequest struct {
	ctx context.Context
	ApiService *AdministratorsAPIService
	customer string
	citrixConsistencyToken *string
	xCwsTransactionId *string
}

// CosmosDB consistency token.
func (r ApiCustomerAdministratorsSyncGroupsPostRequest) CitrixConsistencyToken(citrixConsistencyToken string) ApiCustomerAdministratorsSyncGroupsPostRequest {
	r.citrixConsistencyToken = &citrixConsistencyToken
	return r
}

// Used for Citrix Cloud telemetry correlation.
func (r ApiCustomerAdministratorsSyncGroupsPostRequest) XCwsTransactionId(xCwsTransactionId string) ApiCustomerAdministratorsSyncGroupsPostRequest {
	r.xCwsTransactionId = &xCwsTransactionId
	return r
}

func (r ApiCustomerAdministratorsSyncGroupsPostRequest) Execute() (*CitrixCloudServicesAdministratorsApiModelsAdministratorsResult, *http.Response, error) {
	return r.ApiService.CustomerAdministratorsSyncGroupsPostExecute(r)
}

/*
CustomerAdministratorsSyncGroupsPost Synchronizes administrator groups with the respective identity provider directories. [ServiceKey][BearerToken]

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param customer
 @return ApiCustomerAdministratorsSyncGroupsPostRequest
*/
func (a *AdministratorsAPIService) CustomerAdministratorsSyncGroupsPost(ctx context.Context, customer string) ApiCustomerAdministratorsSyncGroupsPostRequest {
	return ApiCustomerAdministratorsSyncGroupsPostRequest{
		ApiService: a,
		ctx: ctx,
		customer: customer,
	}
}

// Execute executes the request
//  @return CitrixCloudServicesAdministratorsApiModelsAdministratorsResult
func (a *AdministratorsAPIService) CustomerAdministratorsSyncGroupsPostExecute(r ApiCustomerAdministratorsSyncGroupsPostRequest) (*CitrixCloudServicesAdministratorsApiModelsAdministratorsResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CitrixCloudServicesAdministratorsApiModelsAdministratorsResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdministratorsAPIService.CustomerAdministratorsSyncGroupsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{customer}/administrators/$syncGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"customer"+"}", url.PathEscape(parameterValueToString(r.customer, "customer")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.citrixConsistencyToken != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-ConsistencyToken", r.citrixConsistencyToken, "")
	}
	if r.xCwsTransactionId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Cws-TransactionId", r.xCwsTransactionId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCustomerAdministratorsUcOidGetRequest struct {
	ctx context.Context
	ApiService *AdministratorsAPIService
	ucOid string
	customer string
	citrixConsistencyToken *string
	xCwsTransactionId *string
}

// CosmosDB consistency token.
func (r ApiCustomerAdministratorsUcOidGetRequest) CitrixConsistencyToken(citrixConsistencyToken string) ApiCustomerAdministratorsUcOidGetRequest {
	r.citrixConsistencyToken = &citrixConsistencyToken
	return r
}

// Used for Citrix Cloud telemetry correlation.
func (r ApiCustomerAdministratorsUcOidGetRequest) XCwsTransactionId(xCwsTransactionId string) ApiCustomerAdministratorsUcOidGetRequest {
	r.xCwsTransactionId = &xCwsTransactionId
	return r
}

func (r ApiCustomerAdministratorsUcOidGetRequest) Execute() (*CitrixCloudServicesAdministratorsApiModelsAdministratorResult, *http.Response, error) {
	return r.ApiService.CustomerAdministratorsUcOidGetExecute(r)
}

/*
CustomerAdministratorsUcOidGet Gets an administrator with ucOid passed a route parameter. [ServiceKey][BearerToken]

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param ucOid Administrator universal claim organization identifier (OID).
 @param customer
 @return ApiCustomerAdministratorsUcOidGetRequest
*/
func (a *AdministratorsAPIService) CustomerAdministratorsUcOidGet(ctx context.Context, ucOid string, customer string) ApiCustomerAdministratorsUcOidGetRequest {
	return ApiCustomerAdministratorsUcOidGetRequest{
		ApiService: a,
		ctx: ctx,
		ucOid: ucOid,
		customer: customer,
	}
}

// Execute executes the request
//  @return CitrixCloudServicesAdministratorsApiModelsAdministratorResult
func (a *AdministratorsAPIService) CustomerAdministratorsUcOidGetExecute(r ApiCustomerAdministratorsUcOidGetRequest) (*CitrixCloudServicesAdministratorsApiModelsAdministratorResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CitrixCloudServicesAdministratorsApiModelsAdministratorResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdministratorsAPIService.CustomerAdministratorsUcOidGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{customer}/administrators/{ucOid}"
	localVarPath = strings.Replace(localVarPath, "{"+"ucOid"+"}", url.PathEscape(parameterValueToString(r.ucOid, "ucOid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"customer"+"}", url.PathEscape(parameterValueToString(r.customer, "customer")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.ucOid) < 0 {
		return localVarReturnValue, nil, reportError("ucOid must have at least 0 elements")
	}
	if strlen(r.ucOid) > 100 {
		return localVarReturnValue, nil, reportError("ucOid must have less than 100 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.citrixConsistencyToken != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-ConsistencyToken", r.citrixConsistencyToken, "")
	}
	if r.xCwsTransactionId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Cws-TransactionId", r.xCwsTransactionId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
