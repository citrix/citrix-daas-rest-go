/*
Administrators APIs

APIs for managing CC administrators.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ccadmins

import (
	"encoding/json"
	"fmt"
)

// AdministratorType the model 'AdministratorType'
type AdministratorType string

// List of AdministratorType
const (
	ADMINISTRATORTYPE_ADMINISTRATOR_USER  AdministratorType = "AdministratorUser"
	ADMINISTRATORTYPE_ADMINISTRATOR_GROUP AdministratorType = "AdministratorGroup"
	ADMINISTRATORTYPE_SERVICE_PRINCIPAL   AdministratorType = "ServicePrincipal"
)

// All allowed values of AdministratorType enum
var AllowedAdministratorTypeEnumValues = []AdministratorType{
	"AdministratorUser",
	"AdministratorGroup",
	"ServicePrincipal",
}

func (v *AdministratorType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AdministratorType(value)
	for _, existing := range AllowedAdministratorTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AdministratorType", value)
}

// NewAdministratorTypeFromValue returns a pointer to a valid AdministratorType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAdministratorTypeFromValue(v string) (*AdministratorType, error) {
	ev := AdministratorType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AdministratorType: valid values are %v", v, AllowedAdministratorTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AdministratorType) IsValid() bool {
	for _, existing := range AllowedAdministratorTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AdministratorType value
func (v AdministratorType) Ptr() *AdministratorType {
	return &v
}

type NullableAdministratorType struct {
	value *AdministratorType
	isSet bool
}

func (v NullableAdministratorType) Get() *AdministratorType {
	return v.value
}

func (v *NullableAdministratorType) Set(val *AdministratorType) {
	v.value = val
	v.isSet = true
}

func (v NullableAdministratorType) IsSet() bool {
	return v.isSet
}

func (v *NullableAdministratorType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdministratorType(val *AdministratorType) *NullableAdministratorType {
	return &NullableAdministratorType{value: val, isSet: true}
}

func (v NullableAdministratorType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdministratorType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
