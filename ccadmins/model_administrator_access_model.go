/*
Administrators APIs

APIs for managing CC administrators.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ccadmins

import (
	"encoding/json"
)

// checks if the AdministratorAccessModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdministratorAccessModel{}

// AdministratorAccessModel struct for AdministratorAccessModel
type AdministratorAccessModel struct {
	AccessType AdministratorAccessType `json:"accessType"`
	Policies []AdministratorAccessPolicyModel `json:"policies,omitempty"`
}

// NewAdministratorAccessModel instantiates a new AdministratorAccessModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdministratorAccessModel(accessType AdministratorAccessType) *AdministratorAccessModel {
	this := AdministratorAccessModel{}
	this.AccessType = accessType
	return &this
}

// NewAdministratorAccessModelWithDefaults instantiates a new AdministratorAccessModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdministratorAccessModelWithDefaults() *AdministratorAccessModel {
	this := AdministratorAccessModel{}
	return &this
}

// GetAccessType returns the AccessType field value
func (o *AdministratorAccessModel) GetAccessType() AdministratorAccessType {
	if o == nil {
		var ret AdministratorAccessType
		return ret
	}

	return o.AccessType
}

// GetAccessTypeOk returns a tuple with the AccessType field value
// and a boolean to check if the value has been set.
func (o *AdministratorAccessModel) GetAccessTypeOk() (*AdministratorAccessType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccessType, true
}

// SetAccessType sets field value
func (o *AdministratorAccessModel) SetAccessType(v AdministratorAccessType) {
	o.AccessType = v
}

// GetPolicies returns the Policies field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AdministratorAccessModel) GetPolicies() []AdministratorAccessPolicyModel {
	if o == nil {
		var ret []AdministratorAccessPolicyModel
		return ret
	}
	return o.Policies
}

// GetPoliciesOk returns a tuple with the Policies field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AdministratorAccessModel) GetPoliciesOk() ([]AdministratorAccessPolicyModel, bool) {
	if o == nil || IsNil(o.Policies) {
		return nil, false
	}
	return o.Policies, true
}

// HasPolicies returns a boolean if a field has been set.
func (o *AdministratorAccessModel) HasPolicies() bool {
	if o != nil && IsNil(o.Policies) {
		return true
	}

	return false
}

// SetPolicies gets a reference to the given []AdministratorAccessPolicyModel and assigns it to the Policies field.
func (o *AdministratorAccessModel) SetPolicies(v []AdministratorAccessPolicyModel) {
	o.Policies = v
}

func (o AdministratorAccessModel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdministratorAccessModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["accessType"] = o.AccessType
	if o.Policies != nil {
		toSerialize["policies"] = o.Policies
	}
	return toSerialize, nil
}

type NullableAdministratorAccessModel struct {
	value *AdministratorAccessModel
	isSet bool
}

func (v NullableAdministratorAccessModel) Get() *AdministratorAccessModel {
	return v.value
}

func (v *NullableAdministratorAccessModel) Set(val *AdministratorAccessModel) {
	v.value = val
	v.isSet = true
}

func (v NullableAdministratorAccessModel) IsSet() bool {
	return v.isSet
}

func (v *NullableAdministratorAccessModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdministratorAccessModel(val *AdministratorAccessModel) *NullableAdministratorAccessModel {
	return &NullableAdministratorAccessModel{value: val, isSet: true}
}

func (v NullableAdministratorAccessModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdministratorAccessModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


