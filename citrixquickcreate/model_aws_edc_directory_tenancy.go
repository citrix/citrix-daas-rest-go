/*
Quick Create Service for DaaS Quick Deploy with AWS WorkSpaces Core - Tech Preview

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: DaaSTechPreview
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickcreate

import (
	"encoding/json"
	"fmt"
)

// AwsEdcDirectoryTenancy the model 'AwsEdcDirectoryTenancy'
type AwsEdcDirectoryTenancy string

// List of AwsEdcDirectoryTenancy
const (
	AWSEDCDIRECTORYTENANCY_SHARED    AwsEdcDirectoryTenancy = "SHARED"
	AWSEDCDIRECTORYTENANCY_DEDICATED AwsEdcDirectoryTenancy = "DEDICATED"
)

// All allowed values of AwsEdcDirectoryTenancy enum
var AllowedAwsEdcDirectoryTenancyEnumValues = []AwsEdcDirectoryTenancy{
	"SHARED",
	"DEDICATED",
}

func (v *AwsEdcDirectoryTenancy) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AwsEdcDirectoryTenancy(value)
	for _, existing := range AllowedAwsEdcDirectoryTenancyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AwsEdcDirectoryTenancy", value)
}

// NewAwsEdcDirectoryTenancyFromValue returns a pointer to a valid AwsEdcDirectoryTenancy
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAwsEdcDirectoryTenancyFromValue(v string) (*AwsEdcDirectoryTenancy, error) {
	ev := AwsEdcDirectoryTenancy(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AwsEdcDirectoryTenancy: valid values are %v", v, AllowedAwsEdcDirectoryTenancyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AwsEdcDirectoryTenancy) IsValid() bool {
	for _, existing := range AllowedAwsEdcDirectoryTenancyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AwsEdcDirectoryTenancy value
func (v AwsEdcDirectoryTenancy) Ptr() *AwsEdcDirectoryTenancy {
	return &v
}

type NullableAwsEdcDirectoryTenancy struct {
	value *AwsEdcDirectoryTenancy
	isSet bool
}

func (v NullableAwsEdcDirectoryTenancy) Get() *AwsEdcDirectoryTenancy {
	return v.value
}

func (v *NullableAwsEdcDirectoryTenancy) Set(val *AwsEdcDirectoryTenancy) {
	v.value = val
	v.isSet = true
}

func (v NullableAwsEdcDirectoryTenancy) IsSet() bool {
	return v.isSet
}

func (v *NullableAwsEdcDirectoryTenancy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAwsEdcDirectoryTenancy(val *AwsEdcDirectoryTenancy) *NullableAwsEdcDirectoryTenancy {
	return &NullableAwsEdcDirectoryTenancy{value: val, isSet: true}
}

func (v NullableAwsEdcDirectoryTenancy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAwsEdcDirectoryTenancy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
