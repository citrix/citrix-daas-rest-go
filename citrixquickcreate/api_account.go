/*
Quick Create Service for DaaS Quick Deploy with AWS WorkSpaces Core - Tech Preview

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: DaaSTechPreview
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickcreate

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// AccountQCSService AccountQCS service
type AccountQCSService service

type AccountQCSAddAccountAsyncRequest struct {
	ctx context.Context
	ApiService *AccountQCSService
	customerId string
	citrixTransactionId *string
	body *AddAwsEdcAccount
}

// The Transaction Id.
func (r AccountQCSAddAccountAsyncRequest) CitrixTransactionId(citrixTransactionId string) AccountQCSAddAccountAsyncRequest {
	r.citrixTransactionId = &citrixTransactionId
	return r
}

// Configuration of the account to add
func (r AccountQCSAddAccountAsyncRequest) Body(body AddAwsEdcAccount) AccountQCSAddAccountAsyncRequest {
	r.body = &body
	return r
}

func (r AccountQCSAddAccountAsyncRequest) Execute() (*AwsEdcAccount, *http.Response, error) {
	return r.ApiService.AddAccountAsyncExecute(r)
}

/*
AddAccountAsync Add a account

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param customerId ID of the customer
 @return AccountQCSAddAccountAsyncRequest
*/
func (a *AccountQCSService) AddAccountAsync(ctx context.Context, customerId string) AccountQCSAddAccountAsyncRequest {
	return AccountQCSAddAccountAsyncRequest{
		ApiService: a,
		ctx: ctx,
		customerId: customerId,
	}
}

// Execute executes the request
//  @return AwsEdcAccount
func (a *AccountQCSService) AddAccountAsyncExecute(r AccountQCSAddAccountAsyncRequest) (*AwsEdcAccount, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AwsEdcAccount
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountQCSService.AddAccountAsync")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{customerId}/accounts"
	localVarPath = strings.Replace(localVarPath, "{"+"customerId"+"}", url.PathEscape(parameterValueToString(r.customerId, "customerId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.citrixTransactionId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-TransactionId", r.citrixTransactionId, "")
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CWSAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AccountQCSDeleteCustomerAccountAsyncRequest struct {
	ctx context.Context
	ApiService *AccountQCSService
	customerId string
	accountId string
	citrixTransactionId *string
}

// The Transaction Id.
func (r AccountQCSDeleteCustomerAccountAsyncRequest) CitrixTransactionId(citrixTransactionId string) AccountQCSDeleteCustomerAccountAsyncRequest {
	r.citrixTransactionId = &citrixTransactionId
	return r
}

func (r AccountQCSDeleteCustomerAccountAsyncRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteCustomerAccountAsyncExecute(r)
}

/*
DeleteCustomerAccountAsync Deletes the account configured for the specified customer

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param customerId ID of the customer
 @param accountId ID of the account
 @return AccountQCSDeleteCustomerAccountAsyncRequest
*/
func (a *AccountQCSService) DeleteCustomerAccountAsync(ctx context.Context, customerId string, accountId string) AccountQCSDeleteCustomerAccountAsyncRequest {
	return AccountQCSDeleteCustomerAccountAsyncRequest{
		ApiService: a,
		ctx: ctx,
		customerId: customerId,
		accountId: accountId,
	}
}

// Execute executes the request
func (a *AccountQCSService) DeleteCustomerAccountAsyncExecute(r AccountQCSDeleteCustomerAccountAsyncRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountQCSService.DeleteCustomerAccountAsync")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{customerId}/accounts/{accountId}"
	localVarPath = strings.Replace(localVarPath, "{"+"customerId"+"}", url.PathEscape(parameterValueToString(r.customerId, "customerId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.citrixTransactionId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-TransactionId", r.citrixTransactionId, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CWSAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type AccountQCSGetAccountResourcesAsyncRequest struct {
	ctx context.Context
	ApiService *AccountQCSService
	customerId string
	accountId string
	citrixTransactionId *string
	body *SearchAwsEdcAccountResourceRequest
}

// The Transaction Id.
func (r AccountQCSGetAccountResourcesAsyncRequest) CitrixTransactionId(citrixTransactionId string) AccountQCSGetAccountResourcesAsyncRequest {
	r.citrixTransactionId = &citrixTransactionId
	return r
}

// Search request
func (r AccountQCSGetAccountResourcesAsyncRequest) Body(body SearchAwsEdcAccountResourceRequest) AccountQCSGetAccountResourcesAsyncRequest {
	r.body = &body
	return r
}

func (r AccountQCSGetAccountResourcesAsyncRequest) Execute() (*AccountResources, *http.Response, error) {
	return r.ApiService.GetAccountResourcesAsyncExecute(r)
}

/*
GetAccountResourcesAsync Get the account resources for the specified customer

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param customerId ID of the customer
 @param accountId ID of the account
 @return AccountQCSGetAccountResourcesAsyncRequest
*/
func (a *AccountQCSService) GetAccountResourcesAsync(ctx context.Context, customerId string, accountId string) AccountQCSGetAccountResourcesAsyncRequest {
	return AccountQCSGetAccountResourcesAsyncRequest{
		ApiService: a,
		ctx: ctx,
		customerId: customerId,
		accountId: accountId,
	}
}

// Execute executes the request
//  @return AccountResources
func (a *AccountQCSService) GetAccountResourcesAsyncExecute(r AccountQCSGetAccountResourcesAsyncRequest) (*AccountResources, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AccountResources
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountQCSService.GetAccountResourcesAsync")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{customerId}/accounts/{accountId}/resources/$search"
	localVarPath = strings.Replace(localVarPath, "{"+"customerId"+"}", url.PathEscape(parameterValueToString(r.customerId, "customerId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.citrixTransactionId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-TransactionId", r.citrixTransactionId, "")
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CWSAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AccountQCSGetCustomerAccountAsyncRequest struct {
	ctx context.Context
	ApiService *AccountQCSService
	customerId string
	accountId string
	citrixTransactionId *string
}

// The Transaction Id.
func (r AccountQCSGetCustomerAccountAsyncRequest) CitrixTransactionId(citrixTransactionId string) AccountQCSGetCustomerAccountAsyncRequest {
	r.citrixTransactionId = &citrixTransactionId
	return r
}

func (r AccountQCSGetCustomerAccountAsyncRequest) Execute() (*AwsEdcAccount, *http.Response, error) {
	return r.ApiService.GetCustomerAccountAsyncExecute(r)
}

/*
GetCustomerAccountAsync Get the account configured for the specified customer

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param customerId ID of the customer
 @param accountId ID of the account
 @return AccountQCSGetCustomerAccountAsyncRequest
*/
func (a *AccountQCSService) GetCustomerAccountAsync(ctx context.Context, customerId string, accountId string) AccountQCSGetCustomerAccountAsyncRequest {
	return AccountQCSGetCustomerAccountAsyncRequest{
		ApiService: a,
		ctx: ctx,
		customerId: customerId,
		accountId: accountId,
	}
}

// Execute executes the request
//  @return AwsEdcAccount
func (a *AccountQCSService) GetCustomerAccountAsyncExecute(r AccountQCSGetCustomerAccountAsyncRequest) (*AwsEdcAccount, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AwsEdcAccount
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountQCSService.GetCustomerAccountAsync")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{customerId}/accounts/{accountId}"
	localVarPath = strings.Replace(localVarPath, "{"+"customerId"+"}", url.PathEscape(parameterValueToString(r.customerId, "customerId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.citrixTransactionId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-TransactionId", r.citrixTransactionId, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CWSAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AccountQCSGetCustomerAccountResourcesAsyncRequest struct {
	ctx context.Context
	ApiService *AccountQCSService
	customerId string
	citrixTransactionId *string
	body *SearchAwsEdcAccountResourceRequest
}

// The Transaction Id.
func (r AccountQCSGetCustomerAccountResourcesAsyncRequest) CitrixTransactionId(citrixTransactionId string) AccountQCSGetCustomerAccountResourcesAsyncRequest {
	r.citrixTransactionId = &citrixTransactionId
	return r
}

// Search request
func (r AccountQCSGetCustomerAccountResourcesAsyncRequest) Body(body SearchAwsEdcAccountResourceRequest) AccountQCSGetCustomerAccountResourcesAsyncRequest {
	r.body = &body
	return r
}

func (r AccountQCSGetCustomerAccountResourcesAsyncRequest) Execute() (*AccountResources, *http.Response, error) {
	return r.ApiService.GetCustomerAccountResourcesAsyncExecute(r)
}

/*
GetCustomerAccountResourcesAsync Get the account resources for the specified customer

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param customerId ID of the customer
 @return AccountQCSGetCustomerAccountResourcesAsyncRequest
*/
func (a *AccountQCSService) GetCustomerAccountResourcesAsync(ctx context.Context, customerId string) AccountQCSGetCustomerAccountResourcesAsyncRequest {
	return AccountQCSGetCustomerAccountResourcesAsyncRequest{
		ApiService: a,
		ctx: ctx,
		customerId: customerId,
	}
}

// Execute executes the request
//  @return AccountResources
func (a *AccountQCSService) GetCustomerAccountResourcesAsyncExecute(r AccountQCSGetCustomerAccountResourcesAsyncRequest) (*AccountResources, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AccountResources
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountQCSService.GetCustomerAccountResourcesAsync")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{customerId}/accounts/resources/$search"
	localVarPath = strings.Replace(localVarPath, "{"+"customerId"+"}", url.PathEscape(parameterValueToString(r.customerId, "customerId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.citrixTransactionId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-TransactionId", r.citrixTransactionId, "")
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CWSAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AccountQCSGetCustomerAccountTaskAsyncRequest struct {
	ctx context.Context
	ApiService *AccountQCSService
	customerId string
	accountId string
	taskId string
	citrixTransactionId *string
}

// The Transaction Id.
func (r AccountQCSGetCustomerAccountTaskAsyncRequest) CitrixTransactionId(citrixTransactionId string) AccountQCSGetCustomerAccountTaskAsyncRequest {
	r.citrixTransactionId = &citrixTransactionId
	return r
}

func (r AccountQCSGetCustomerAccountTaskAsyncRequest) Execute() (*AccountTask, *http.Response, error) {
	return r.ApiService.GetCustomerAccountTaskAsyncExecute(r)
}

/*
GetCustomerAccountTaskAsync Gets account task

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param customerId ID of the customer
 @param accountId ID of the account
 @param taskId ID of task
 @return AccountQCSGetCustomerAccountTaskAsyncRequest
*/
func (a *AccountQCSService) GetCustomerAccountTaskAsync(ctx context.Context, customerId string, accountId string, taskId string) AccountQCSGetCustomerAccountTaskAsyncRequest {
	return AccountQCSGetCustomerAccountTaskAsyncRequest{
		ApiService: a,
		ctx: ctx,
		customerId: customerId,
		accountId: accountId,
		taskId: taskId,
	}
}

// Execute executes the request
//  @return AccountTask
func (a *AccountQCSService) GetCustomerAccountTaskAsyncExecute(r AccountQCSGetCustomerAccountTaskAsyncRequest) (*AccountTask, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AccountTask
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountQCSService.GetCustomerAccountTaskAsync")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{customerId}/accounts/{accountId}/tasks/{taskId}"
	localVarPath = strings.Replace(localVarPath, "{"+"customerId"+"}", url.PathEscape(parameterValueToString(r.customerId, "customerId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"taskId"+"}", url.PathEscape(parameterValueToString(r.taskId, "taskId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.citrixTransactionId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-TransactionId", r.citrixTransactionId, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CWSAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AccountQCSGetCustomerAccountsAsyncRequest struct {
	ctx context.Context
	ApiService *AccountQCSService
	customerId string
	accountType *AccountType
	fetchDetails *bool
	citrixTransactionId *string
}

// Account Type
func (r AccountQCSGetCustomerAccountsAsyncRequest) AccountType(accountType AccountType) AccountQCSGetCustomerAccountsAsyncRequest {
	r.accountType = &accountType
	return r
}

// If true, checks if all accounts have the required set of permissions for assume role tasks
func (r AccountQCSGetCustomerAccountsAsyncRequest) FetchDetails(fetchDetails bool) AccountQCSGetCustomerAccountsAsyncRequest {
	r.fetchDetails = &fetchDetails
	return r
}

// The Transaction Id.
func (r AccountQCSGetCustomerAccountsAsyncRequest) CitrixTransactionId(citrixTransactionId string) AccountQCSGetCustomerAccountsAsyncRequest {
	r.citrixTransactionId = &citrixTransactionId
	return r
}

func (r AccountQCSGetCustomerAccountsAsyncRequest) Execute() (*Accounts, *http.Response, error) {
	return r.ApiService.GetCustomerAccountsAsyncExecute(r)
}

/*
GetCustomerAccountsAsync Get the accounts configured for the specified customer

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param customerId ID of the customer
 @return AccountQCSGetCustomerAccountsAsyncRequest
*/
func (a *AccountQCSService) GetCustomerAccountsAsync(ctx context.Context, customerId string) AccountQCSGetCustomerAccountsAsyncRequest {
	return AccountQCSGetCustomerAccountsAsyncRequest{
		ApiService: a,
		ctx: ctx,
		customerId: customerId,
	}
}

// Execute executes the request
//  @return Accounts
func (a *AccountQCSService) GetCustomerAccountsAsyncExecute(r AccountQCSGetCustomerAccountsAsyncRequest) (*Accounts, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Accounts
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountQCSService.GetCustomerAccountsAsync")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{customerId}/accounts"
	localVarPath = strings.Replace(localVarPath, "{"+"customerId"+"}", url.PathEscape(parameterValueToString(r.customerId, "customerId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.accountType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "accountType", r.accountType, "")
	}
	if r.fetchDetails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fetchDetails", r.fetchDetails, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.citrixTransactionId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-TransactionId", r.citrixTransactionId, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CWSAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AccountQCSInititateAccountTaskAsyncRequest struct {
	ctx context.Context
	ApiService *AccountQCSService
	customerId string
	accountId string
	citrixTransactionId *string
	body *RegisterAwsEdcAccountTask
}

// The Transaction Id.
func (r AccountQCSInititateAccountTaskAsyncRequest) CitrixTransactionId(citrixTransactionId string) AccountQCSInititateAccountTaskAsyncRequest {
	r.citrixTransactionId = &citrixTransactionId
	return r
}

// Task request
func (r AccountQCSInititateAccountTaskAsyncRequest) Body(body RegisterAwsEdcAccountTask) AccountQCSInititateAccountTaskAsyncRequest {
	r.body = &body
	return r
}

func (r AccountQCSInititateAccountTaskAsyncRequest) Execute() (*AwsEdcRegisterAccount, *http.Response, error) {
	return r.ApiService.InititateAccountTaskAsyncExecute(r)
}

/*
InititateAccountTaskAsync Registers account BYOL account

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param customerId ID of the customer
 @param accountId ID of the account
 @return AccountQCSInititateAccountTaskAsyncRequest
*/
func (a *AccountQCSService) InititateAccountTaskAsync(ctx context.Context, customerId string, accountId string) AccountQCSInititateAccountTaskAsyncRequest {
	return AccountQCSInititateAccountTaskAsyncRequest{
		ApiService: a,
		ctx: ctx,
		customerId: customerId,
		accountId: accountId,
	}
}

// Execute executes the request
//  @return AwsEdcRegisterAccount
func (a *AccountQCSService) InititateAccountTaskAsyncExecute(r AccountQCSInititateAccountTaskAsyncRequest) (*AwsEdcRegisterAccount, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AwsEdcRegisterAccount
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountQCSService.InititateAccountTaskAsync")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{customerId}/accounts/{accountId}/tasks"
	localVarPath = strings.Replace(localVarPath, "{"+"customerId"+"}", url.PathEscape(parameterValueToString(r.customerId, "customerId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.citrixTransactionId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-TransactionId", r.citrixTransactionId, "")
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CWSAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AccountQCSUpdateCustomerAccountAsyncRequest struct {
	ctx context.Context
	ApiService *AccountQCSService
	customerId string
	accountId string
	citrixTransactionId *string
	updateCustomerAccountAsyncRequest *UpdateCustomerAccountAsyncRequest
}

// The Transaction Id.
func (r AccountQCSUpdateCustomerAccountAsyncRequest) CitrixTransactionId(citrixTransactionId string) AccountQCSUpdateCustomerAccountAsyncRequest {
	r.citrixTransactionId = &citrixTransactionId
	return r
}

// Configuration of the account to update
func (r AccountQCSUpdateCustomerAccountAsyncRequest) UpdateCustomerAccountAsyncRequest(updateCustomerAccountAsyncRequest UpdateCustomerAccountAsyncRequest) AccountQCSUpdateCustomerAccountAsyncRequest {
	r.updateCustomerAccountAsyncRequest = &updateCustomerAccountAsyncRequest
	return r
}

func (r AccountQCSUpdateCustomerAccountAsyncRequest) Execute() (*http.Response, error) {
	return r.ApiService.UpdateCustomerAccountAsyncExecute(r)
}

/*
UpdateCustomerAccountAsync Updates the account access keys for the specified customer

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param customerId ID of the customer
 @param accountId ID of the account
 @return AccountQCSUpdateCustomerAccountAsyncRequest
*/
func (a *AccountQCSService) UpdateCustomerAccountAsync(ctx context.Context, customerId string, accountId string) AccountQCSUpdateCustomerAccountAsyncRequest {
	return AccountQCSUpdateCustomerAccountAsyncRequest{
		ApiService: a,
		ctx: ctx,
		customerId: customerId,
		accountId: accountId,
	}
}

// Execute executes the request
func (a *AccountQCSService) UpdateCustomerAccountAsyncExecute(r AccountQCSUpdateCustomerAccountAsyncRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountQCSService.UpdateCustomerAccountAsync")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{customerId}/accounts/{accountId}"
	localVarPath = strings.Replace(localVarPath, "{"+"customerId"+"}", url.PathEscape(parameterValueToString(r.customerId, "customerId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.citrixTransactionId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-TransactionId", r.citrixTransactionId, "")
	}
	// body params
	localVarPostBody = r.updateCustomerAccountAsyncRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CWSAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
