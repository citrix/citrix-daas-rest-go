/*
Quick Create Service for DaaS Quick Deploy with AWS WorkSpaces Core - Tech Preview

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: DaaSTechPreview
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickcreate

import (
	"encoding/json"
	"fmt"
)

// CommissionTaskOperationType Commission tasks
type CommissionTaskOperationType string

// List of CommissionTaskOperationType
const (
	COMMISSIONTASKOPERATIONTYPE_DECOMMISSION    CommissionTaskOperationType = "DECOMMISSION"
	COMMISSIONTASKOPERATIONTYPE_DELETE          CommissionTaskOperationType = "DELETE"
	COMMISSIONTASKOPERATIONTYPE_RECOMMISSION    CommissionTaskOperationType = "RECOMMISSION"
	COMMISSIONTASKOPERATIONTYPE_POWER_RESOURCES CommissionTaskOperationType = "POWER_RESOURCES"
)

// All allowed values of CommissionTaskOperationType enum
var AllowedCommissionTaskOperationTypeEnumValues = []CommissionTaskOperationType{
	"DECOMMISSION",
	"DELETE",
	"RECOMMISSION",
	"POWER_RESOURCES",
}

func (v *CommissionTaskOperationType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CommissionTaskOperationType(value)
	for _, existing := range AllowedCommissionTaskOperationTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CommissionTaskOperationType", value)
}

// NewCommissionTaskOperationTypeFromValue returns a pointer to a valid CommissionTaskOperationType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCommissionTaskOperationTypeFromValue(v string) (*CommissionTaskOperationType, error) {
	ev := CommissionTaskOperationType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CommissionTaskOperationType: valid values are %v", v, AllowedCommissionTaskOperationTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CommissionTaskOperationType) IsValid() bool {
	for _, existing := range AllowedCommissionTaskOperationTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CommissionTaskOperationType value
func (v CommissionTaskOperationType) Ptr() *CommissionTaskOperationType {
	return &v
}

type NullableCommissionTaskOperationType struct {
	value *CommissionTaskOperationType
	isSet bool
}

func (v NullableCommissionTaskOperationType) Get() *CommissionTaskOperationType {
	return v.value
}

func (v *NullableCommissionTaskOperationType) Set(val *CommissionTaskOperationType) {
	v.value = val
	v.isSet = true
}

func (v NullableCommissionTaskOperationType) IsSet() bool {
	return v.isSet
}

func (v *NullableCommissionTaskOperationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommissionTaskOperationType(val *CommissionTaskOperationType) *NullableCommissionTaskOperationType {
	return &NullableCommissionTaskOperationType{value: val, isSet: true}
}

func (v NullableCommissionTaskOperationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommissionTaskOperationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
