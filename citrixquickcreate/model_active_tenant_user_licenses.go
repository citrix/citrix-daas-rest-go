/*
Quick Create Service for DaaS Quick Deploy with AWS WorkSpaces Core - Tech Preview

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: DaaSTechPreview
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickcreate

import (
	"encoding/json"
)

// checks if the ActiveTenantUserLicenses type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActiveTenantUserLicenses{}

// ActiveTenantUserLicenses struct for ActiveTenantUserLicenses
type ActiveTenantUserLicenses struct {
	// AAD Tenant of which the licensed users are part of
	TenantId NullableString `json:"tenantId,omitempty"`
	// User IDs of users with active licenses for which we want to revoke HDX License
	LicensedUsers []string `json:"licensedUsers,omitempty"`
}

// NewActiveTenantUserLicenses instantiates a new ActiveTenantUserLicenses object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActiveTenantUserLicenses() *ActiveTenantUserLicenses {
	this := ActiveTenantUserLicenses{}
	return &this
}

// NewActiveTenantUserLicensesWithDefaults instantiates a new ActiveTenantUserLicenses object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActiveTenantUserLicensesWithDefaults() *ActiveTenantUserLicenses {
	this := ActiveTenantUserLicenses{}
	return &this
}

// GetTenantId returns the TenantId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActiveTenantUserLicenses) GetTenantId() string {
	if o == nil || IsNil(o.TenantId.Get()) {
		var ret string
		return ret
	}
	return *o.TenantId.Get()
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActiveTenantUserLicenses) GetTenantIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TenantId.Get(), o.TenantId.IsSet()
}

// HasTenantId returns a boolean if a field has been set.
func (o *ActiveTenantUserLicenses) HasTenantId() bool {
	if o != nil && o.TenantId.IsSet() {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given NullableString and assigns it to the TenantId field.
func (o *ActiveTenantUserLicenses) SetTenantId(v string) {
	o.TenantId.Set(&v)
}
// SetTenantIdNil sets the value for TenantId to be an explicit nil
func (o *ActiveTenantUserLicenses) SetTenantIdNil() {
	o.TenantId.Set(nil)
}

// UnsetTenantId ensures that no value is present for TenantId, not even an explicit nil
func (o *ActiveTenantUserLicenses) UnsetTenantId() {
	o.TenantId.Unset()
}

// GetLicensedUsers returns the LicensedUsers field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActiveTenantUserLicenses) GetLicensedUsers() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.LicensedUsers
}

// GetLicensedUsersOk returns a tuple with the LicensedUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActiveTenantUserLicenses) GetLicensedUsersOk() ([]string, bool) {
	if o == nil || IsNil(o.LicensedUsers) {
		return nil, false
	}
	return o.LicensedUsers, true
}

// HasLicensedUsers returns a boolean if a field has been set.
func (o *ActiveTenantUserLicenses) HasLicensedUsers() bool {
	if o != nil && IsNil(o.LicensedUsers) {
		return true
	}

	return false
}

// SetLicensedUsers gets a reference to the given []string and assigns it to the LicensedUsers field.
func (o *ActiveTenantUserLicenses) SetLicensedUsers(v []string) {
	o.LicensedUsers = v
}

func (o ActiveTenantUserLicenses) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActiveTenantUserLicenses) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.TenantId.IsSet() {
		toSerialize["tenantId"] = o.TenantId.Get()
	}
	if o.LicensedUsers != nil {
		toSerialize["licensedUsers"] = o.LicensedUsers
	}
	return toSerialize, nil
}

type NullableActiveTenantUserLicenses struct {
	value *ActiveTenantUserLicenses
	isSet bool
}

func (v NullableActiveTenantUserLicenses) Get() *ActiveTenantUserLicenses {
	return v.value
}

func (v *NullableActiveTenantUserLicenses) Set(val *ActiveTenantUserLicenses) {
	v.value = val
	v.isSet = true
}

func (v NullableActiveTenantUserLicenses) IsSet() bool {
	return v.isSet
}

func (v *NullableActiveTenantUserLicenses) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActiveTenantUserLicenses(val *ActiveTenantUserLicenses) *NullableActiveTenantUserLicenses {
	return &NullableActiveTenantUserLicenses{value: val, isSet: true}
}

func (v NullableActiveTenantUserLicenses) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActiveTenantUserLicenses) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


