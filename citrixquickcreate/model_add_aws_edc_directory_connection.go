/*
Quick Create Service for DaaS Quick Deploy with AWS WorkSpaces Core - Tech Preview

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: DaaSTechPreview
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickcreate

import (
	"encoding/json"
)

// checks if the AddAwsEdcDirectoryConnection type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddAwsEdcDirectoryConnection{}

// AddAwsEdcDirectoryConnection struct for AddAwsEdcDirectoryConnection
type AddAwsEdcDirectoryConnection struct {
	AddResourceConnection
	// Directory Id
	DirectoryId NullableString `json:"directoryId,omitempty"`
	// First Subnet Id
	Subnet1Id NullableString `json:"subnet1Id,omitempty"`
	// Second Subnet Id
	Subnet2Id NullableString `json:"subnet2Id,omitempty"`
	Tenancy NullableAwsEdcDirectoryTenancy `json:"tenancy,omitempty"`
	// Enable Work Docs
	EnableWorkDocs *bool `json:"enableWorkDocs,omitempty"`
	// Enable Local Administrator
	UserEnabledAsLocalAdministrator *bool `json:"userEnabledAsLocalAdministrator,omitempty"`
	// The identifier of the security group
	SecurityGroupId NullableString `json:"securityGroupId,omitempty"`
	// The default OU for workspace directories
	DefaultOu NullableString `json:"defaultOu,omitempty"`
	// Indicates if maintenance mode is enabled for workspaces
	EnableMaintenanceMode *bool `json:"enableMaintenanceMode,omitempty"`
}

// NewAddAwsEdcDirectoryConnection instantiates a new AddAwsEdcDirectoryConnection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddAwsEdcDirectoryConnection(accountType AccountType, name string) *AddAwsEdcDirectoryConnection {
	this := AddAwsEdcDirectoryConnection{}
	this.AccountType = accountType
	this.Name = name
	return &this
}

// NewAddAwsEdcDirectoryConnectionWithDefaults instantiates a new AddAwsEdcDirectoryConnection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddAwsEdcDirectoryConnectionWithDefaults() *AddAwsEdcDirectoryConnection {
	this := AddAwsEdcDirectoryConnection{}
	return &this
}

// GetDirectoryId returns the DirectoryId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AddAwsEdcDirectoryConnection) GetDirectoryId() string {
	if o == nil || IsNil(o.DirectoryId.Get()) {
		var ret string
		return ret
	}
	return *o.DirectoryId.Get()
}

// GetDirectoryIdOk returns a tuple with the DirectoryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AddAwsEdcDirectoryConnection) GetDirectoryIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DirectoryId.Get(), o.DirectoryId.IsSet()
}

// HasDirectoryId returns a boolean if a field has been set.
func (o *AddAwsEdcDirectoryConnection) HasDirectoryId() bool {
	if o != nil && o.DirectoryId.IsSet() {
		return true
	}

	return false
}

// SetDirectoryId gets a reference to the given NullableString and assigns it to the DirectoryId field.
func (o *AddAwsEdcDirectoryConnection) SetDirectoryId(v string) {
	o.DirectoryId.Set(&v)
}
// SetDirectoryIdNil sets the value for DirectoryId to be an explicit nil
func (o *AddAwsEdcDirectoryConnection) SetDirectoryIdNil() {
	o.DirectoryId.Set(nil)
}

// UnsetDirectoryId ensures that no value is present for DirectoryId, not even an explicit nil
func (o *AddAwsEdcDirectoryConnection) UnsetDirectoryId() {
	o.DirectoryId.Unset()
}

// GetSubnet1Id returns the Subnet1Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AddAwsEdcDirectoryConnection) GetSubnet1Id() string {
	if o == nil || IsNil(o.Subnet1Id.Get()) {
		var ret string
		return ret
	}
	return *o.Subnet1Id.Get()
}

// GetSubnet1IdOk returns a tuple with the Subnet1Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AddAwsEdcDirectoryConnection) GetSubnet1IdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Subnet1Id.Get(), o.Subnet1Id.IsSet()
}

// HasSubnet1Id returns a boolean if a field has been set.
func (o *AddAwsEdcDirectoryConnection) HasSubnet1Id() bool {
	if o != nil && o.Subnet1Id.IsSet() {
		return true
	}

	return false
}

// SetSubnet1Id gets a reference to the given NullableString and assigns it to the Subnet1Id field.
func (o *AddAwsEdcDirectoryConnection) SetSubnet1Id(v string) {
	o.Subnet1Id.Set(&v)
}
// SetSubnet1IdNil sets the value for Subnet1Id to be an explicit nil
func (o *AddAwsEdcDirectoryConnection) SetSubnet1IdNil() {
	o.Subnet1Id.Set(nil)
}

// UnsetSubnet1Id ensures that no value is present for Subnet1Id, not even an explicit nil
func (o *AddAwsEdcDirectoryConnection) UnsetSubnet1Id() {
	o.Subnet1Id.Unset()
}

// GetSubnet2Id returns the Subnet2Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AddAwsEdcDirectoryConnection) GetSubnet2Id() string {
	if o == nil || IsNil(o.Subnet2Id.Get()) {
		var ret string
		return ret
	}
	return *o.Subnet2Id.Get()
}

// GetSubnet2IdOk returns a tuple with the Subnet2Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AddAwsEdcDirectoryConnection) GetSubnet2IdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Subnet2Id.Get(), o.Subnet2Id.IsSet()
}

// HasSubnet2Id returns a boolean if a field has been set.
func (o *AddAwsEdcDirectoryConnection) HasSubnet2Id() bool {
	if o != nil && o.Subnet2Id.IsSet() {
		return true
	}

	return false
}

// SetSubnet2Id gets a reference to the given NullableString and assigns it to the Subnet2Id field.
func (o *AddAwsEdcDirectoryConnection) SetSubnet2Id(v string) {
	o.Subnet2Id.Set(&v)
}
// SetSubnet2IdNil sets the value for Subnet2Id to be an explicit nil
func (o *AddAwsEdcDirectoryConnection) SetSubnet2IdNil() {
	o.Subnet2Id.Set(nil)
}

// UnsetSubnet2Id ensures that no value is present for Subnet2Id, not even an explicit nil
func (o *AddAwsEdcDirectoryConnection) UnsetSubnet2Id() {
	o.Subnet2Id.Unset()
}

// GetTenancy returns the Tenancy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AddAwsEdcDirectoryConnection) GetTenancy() AwsEdcDirectoryTenancy {
	if o == nil || IsNil(o.Tenancy.Get()) {
		var ret AwsEdcDirectoryTenancy
		return ret
	}
	return *o.Tenancy.Get()
}

// GetTenancyOk returns a tuple with the Tenancy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AddAwsEdcDirectoryConnection) GetTenancyOk() (*AwsEdcDirectoryTenancy, bool) {
	if o == nil {
		return nil, false
	}
	return o.Tenancy.Get(), o.Tenancy.IsSet()
}

// HasTenancy returns a boolean if a field has been set.
func (o *AddAwsEdcDirectoryConnection) HasTenancy() bool {
	if o != nil && o.Tenancy.IsSet() {
		return true
	}

	return false
}

// SetTenancy gets a reference to the given NullableAwsEdcDirectoryTenancy and assigns it to the Tenancy field.
func (o *AddAwsEdcDirectoryConnection) SetTenancy(v AwsEdcDirectoryTenancy) {
	o.Tenancy.Set(&v)
}
// SetTenancyNil sets the value for Tenancy to be an explicit nil
func (o *AddAwsEdcDirectoryConnection) SetTenancyNil() {
	o.Tenancy.Set(nil)
}

// UnsetTenancy ensures that no value is present for Tenancy, not even an explicit nil
func (o *AddAwsEdcDirectoryConnection) UnsetTenancy() {
	o.Tenancy.Unset()
}

// GetEnableWorkDocs returns the EnableWorkDocs field value if set, zero value otherwise.
func (o *AddAwsEdcDirectoryConnection) GetEnableWorkDocs() bool {
	if o == nil || IsNil(o.EnableWorkDocs) {
		var ret bool
		return ret
	}
	return *o.EnableWorkDocs
}

// GetEnableWorkDocsOk returns a tuple with the EnableWorkDocs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddAwsEdcDirectoryConnection) GetEnableWorkDocsOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableWorkDocs) {
		return nil, false
	}
	return o.EnableWorkDocs, true
}

// HasEnableWorkDocs returns a boolean if a field has been set.
func (o *AddAwsEdcDirectoryConnection) HasEnableWorkDocs() bool {
	if o != nil && !IsNil(o.EnableWorkDocs) {
		return true
	}

	return false
}

// SetEnableWorkDocs gets a reference to the given bool and assigns it to the EnableWorkDocs field.
func (o *AddAwsEdcDirectoryConnection) SetEnableWorkDocs(v bool) {
	o.EnableWorkDocs = &v
}

// GetUserEnabledAsLocalAdministrator returns the UserEnabledAsLocalAdministrator field value if set, zero value otherwise.
func (o *AddAwsEdcDirectoryConnection) GetUserEnabledAsLocalAdministrator() bool {
	if o == nil || IsNil(o.UserEnabledAsLocalAdministrator) {
		var ret bool
		return ret
	}
	return *o.UserEnabledAsLocalAdministrator
}

// GetUserEnabledAsLocalAdministratorOk returns a tuple with the UserEnabledAsLocalAdministrator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddAwsEdcDirectoryConnection) GetUserEnabledAsLocalAdministratorOk() (*bool, bool) {
	if o == nil || IsNil(o.UserEnabledAsLocalAdministrator) {
		return nil, false
	}
	return o.UserEnabledAsLocalAdministrator, true
}

// HasUserEnabledAsLocalAdministrator returns a boolean if a field has been set.
func (o *AddAwsEdcDirectoryConnection) HasUserEnabledAsLocalAdministrator() bool {
	if o != nil && !IsNil(o.UserEnabledAsLocalAdministrator) {
		return true
	}

	return false
}

// SetUserEnabledAsLocalAdministrator gets a reference to the given bool and assigns it to the UserEnabledAsLocalAdministrator field.
func (o *AddAwsEdcDirectoryConnection) SetUserEnabledAsLocalAdministrator(v bool) {
	o.UserEnabledAsLocalAdministrator = &v
}

// GetSecurityGroupId returns the SecurityGroupId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AddAwsEdcDirectoryConnection) GetSecurityGroupId() string {
	if o == nil || IsNil(o.SecurityGroupId.Get()) {
		var ret string
		return ret
	}
	return *o.SecurityGroupId.Get()
}

// GetSecurityGroupIdOk returns a tuple with the SecurityGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AddAwsEdcDirectoryConnection) GetSecurityGroupIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SecurityGroupId.Get(), o.SecurityGroupId.IsSet()
}

// HasSecurityGroupId returns a boolean if a field has been set.
func (o *AddAwsEdcDirectoryConnection) HasSecurityGroupId() bool {
	if o != nil && o.SecurityGroupId.IsSet() {
		return true
	}

	return false
}

// SetSecurityGroupId gets a reference to the given NullableString and assigns it to the SecurityGroupId field.
func (o *AddAwsEdcDirectoryConnection) SetSecurityGroupId(v string) {
	o.SecurityGroupId.Set(&v)
}
// SetSecurityGroupIdNil sets the value for SecurityGroupId to be an explicit nil
func (o *AddAwsEdcDirectoryConnection) SetSecurityGroupIdNil() {
	o.SecurityGroupId.Set(nil)
}

// UnsetSecurityGroupId ensures that no value is present for SecurityGroupId, not even an explicit nil
func (o *AddAwsEdcDirectoryConnection) UnsetSecurityGroupId() {
	o.SecurityGroupId.Unset()
}

// GetDefaultOu returns the DefaultOu field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AddAwsEdcDirectoryConnection) GetDefaultOu() string {
	if o == nil || IsNil(o.DefaultOu.Get()) {
		var ret string
		return ret
	}
	return *o.DefaultOu.Get()
}

// GetDefaultOuOk returns a tuple with the DefaultOu field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AddAwsEdcDirectoryConnection) GetDefaultOuOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultOu.Get(), o.DefaultOu.IsSet()
}

// HasDefaultOu returns a boolean if a field has been set.
func (o *AddAwsEdcDirectoryConnection) HasDefaultOu() bool {
	if o != nil && o.DefaultOu.IsSet() {
		return true
	}

	return false
}

// SetDefaultOu gets a reference to the given NullableString and assigns it to the DefaultOu field.
func (o *AddAwsEdcDirectoryConnection) SetDefaultOu(v string) {
	o.DefaultOu.Set(&v)
}
// SetDefaultOuNil sets the value for DefaultOu to be an explicit nil
func (o *AddAwsEdcDirectoryConnection) SetDefaultOuNil() {
	o.DefaultOu.Set(nil)
}

// UnsetDefaultOu ensures that no value is present for DefaultOu, not even an explicit nil
func (o *AddAwsEdcDirectoryConnection) UnsetDefaultOu() {
	o.DefaultOu.Unset()
}

// GetEnableMaintenanceMode returns the EnableMaintenanceMode field value if set, zero value otherwise.
func (o *AddAwsEdcDirectoryConnection) GetEnableMaintenanceMode() bool {
	if o == nil || IsNil(o.EnableMaintenanceMode) {
		var ret bool
		return ret
	}
	return *o.EnableMaintenanceMode
}

// GetEnableMaintenanceModeOk returns a tuple with the EnableMaintenanceMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddAwsEdcDirectoryConnection) GetEnableMaintenanceModeOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableMaintenanceMode) {
		return nil, false
	}
	return o.EnableMaintenanceMode, true
}

// HasEnableMaintenanceMode returns a boolean if a field has been set.
func (o *AddAwsEdcDirectoryConnection) HasEnableMaintenanceMode() bool {
	if o != nil && !IsNil(o.EnableMaintenanceMode) {
		return true
	}

	return false
}

// SetEnableMaintenanceMode gets a reference to the given bool and assigns it to the EnableMaintenanceMode field.
func (o *AddAwsEdcDirectoryConnection) SetEnableMaintenanceMode(v bool) {
	o.EnableMaintenanceMode = &v
}

func (o AddAwsEdcDirectoryConnection) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddAwsEdcDirectoryConnection) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedAddResourceConnection, errAddResourceConnection := json.Marshal(o.AddResourceConnection)
	if errAddResourceConnection != nil {
		return map[string]interface{}{}, errAddResourceConnection
	}
	errAddResourceConnection = json.Unmarshal([]byte(serializedAddResourceConnection), &toSerialize)
	if errAddResourceConnection != nil {
		return map[string]interface{}{}, errAddResourceConnection
	}
	if o.DirectoryId.IsSet() {
		toSerialize["directoryId"] = o.DirectoryId.Get()
	}
	if o.Subnet1Id.IsSet() {
		toSerialize["subnet1Id"] = o.Subnet1Id.Get()
	}
	if o.Subnet2Id.IsSet() {
		toSerialize["subnet2Id"] = o.Subnet2Id.Get()
	}
	if o.Tenancy.IsSet() {
		toSerialize["tenancy"] = o.Tenancy.Get()
	}
	if !IsNil(o.EnableWorkDocs) {
		toSerialize["enableWorkDocs"] = o.EnableWorkDocs
	}
	if !IsNil(o.UserEnabledAsLocalAdministrator) {
		toSerialize["userEnabledAsLocalAdministrator"] = o.UserEnabledAsLocalAdministrator
	}
	if o.SecurityGroupId.IsSet() {
		toSerialize["securityGroupId"] = o.SecurityGroupId.Get()
	}
	if o.DefaultOu.IsSet() {
		toSerialize["defaultOu"] = o.DefaultOu.Get()
	}
	if !IsNil(o.EnableMaintenanceMode) {
		toSerialize["enableMaintenanceMode"] = o.EnableMaintenanceMode
	}
	return toSerialize, nil
}

type NullableAddAwsEdcDirectoryConnection struct {
	value *AddAwsEdcDirectoryConnection
	isSet bool
}

func (v NullableAddAwsEdcDirectoryConnection) Get() *AddAwsEdcDirectoryConnection {
	return v.value
}

func (v *NullableAddAwsEdcDirectoryConnection) Set(val *AddAwsEdcDirectoryConnection) {
	v.value = val
	v.isSet = true
}

func (v NullableAddAwsEdcDirectoryConnection) IsSet() bool {
	return v.isSet
}

func (v *NullableAddAwsEdcDirectoryConnection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddAwsEdcDirectoryConnection(val *AddAwsEdcDirectoryConnection) *NullableAddAwsEdcDirectoryConnection {
	return &NullableAddAwsEdcDirectoryConnection{value: val, isSet: true}
}

func (v NullableAddAwsEdcDirectoryConnection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddAwsEdcDirectoryConnection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


