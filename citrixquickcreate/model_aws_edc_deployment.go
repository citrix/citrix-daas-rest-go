/*
Quick Create Service for DaaS Quick Deploy with AWS WorkSpaces Core - Tech Preview

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: DaaSTechPreview
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickcreate

import (
	"encoding/json"
)

// checks if the AwsEdcDeployment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AwsEdcDeployment{}

// AwsEdcDeployment struct for AwsEdcDeployment
type AwsEdcDeployment struct {
	Deployment
	ComputeType NullableAwsEdcWorkspaceCompute `json:"computeType,omitempty"`
	// Size of operating system volume for bundle creation
	RootVolumeSize NullableInt32 `json:"rootVolumeSize,omitempty"`
	// Size of user storage volume for bundle creation
	UserVolumeSize NullableInt32 `json:"userVolumeSize,omitempty"`
	// Image Id
	ImageId NullableString `json:"imageId,omitempty"`
	// Image Name
	ImageName NullableString `json:"imageName,omitempty"`
	RunningMode NullableAwsEdcWorkspaceRunningMode `json:"runningMode,omitempty"`
	// Configuration for individual workspace
	Workspaces []AwsEdcDeploymentMachine `json:"workspaces,omitempty"`
	// The name of the directory associated with the deployment
	DirectoryName NullableString `json:"directoryName,omitempty"`
}

// NewAwsEdcDeployment instantiates a new AwsEdcDeployment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAwsEdcDeployment(accountType AccountType) *AwsEdcDeployment {
	this := AwsEdcDeployment{}
	this.AccountType = accountType
	return &this
}

// NewAwsEdcDeploymentWithDefaults instantiates a new AwsEdcDeployment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAwsEdcDeploymentWithDefaults() *AwsEdcDeployment {
	this := AwsEdcDeployment{}
	return &this
}

// GetComputeType returns the ComputeType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AwsEdcDeployment) GetComputeType() AwsEdcWorkspaceCompute {
	if o == nil || IsNil(o.ComputeType.Get()) {
		var ret AwsEdcWorkspaceCompute
		return ret
	}
	return *o.ComputeType.Get()
}

// GetComputeTypeOk returns a tuple with the ComputeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsEdcDeployment) GetComputeTypeOk() (*AwsEdcWorkspaceCompute, bool) {
	if o == nil {
		return nil, false
	}
	return o.ComputeType.Get(), o.ComputeType.IsSet()
}

// HasComputeType returns a boolean if a field has been set.
func (o *AwsEdcDeployment) HasComputeType() bool {
	if o != nil && o.ComputeType.IsSet() {
		return true
	}

	return false
}

// SetComputeType gets a reference to the given NullableAwsEdcWorkspaceCompute and assigns it to the ComputeType field.
func (o *AwsEdcDeployment) SetComputeType(v AwsEdcWorkspaceCompute) {
	o.ComputeType.Set(&v)
}
// SetComputeTypeNil sets the value for ComputeType to be an explicit nil
func (o *AwsEdcDeployment) SetComputeTypeNil() {
	o.ComputeType.Set(nil)
}

// UnsetComputeType ensures that no value is present for ComputeType, not even an explicit nil
func (o *AwsEdcDeployment) UnsetComputeType() {
	o.ComputeType.Unset()
}

// GetRootVolumeSize returns the RootVolumeSize field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AwsEdcDeployment) GetRootVolumeSize() int32 {
	if o == nil || IsNil(o.RootVolumeSize.Get()) {
		var ret int32
		return ret
	}
	return *o.RootVolumeSize.Get()
}

// GetRootVolumeSizeOk returns a tuple with the RootVolumeSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsEdcDeployment) GetRootVolumeSizeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.RootVolumeSize.Get(), o.RootVolumeSize.IsSet()
}

// HasRootVolumeSize returns a boolean if a field has been set.
func (o *AwsEdcDeployment) HasRootVolumeSize() bool {
	if o != nil && o.RootVolumeSize.IsSet() {
		return true
	}

	return false
}

// SetRootVolumeSize gets a reference to the given NullableInt32 and assigns it to the RootVolumeSize field.
func (o *AwsEdcDeployment) SetRootVolumeSize(v int32) {
	o.RootVolumeSize.Set(&v)
}
// SetRootVolumeSizeNil sets the value for RootVolumeSize to be an explicit nil
func (o *AwsEdcDeployment) SetRootVolumeSizeNil() {
	o.RootVolumeSize.Set(nil)
}

// UnsetRootVolumeSize ensures that no value is present for RootVolumeSize, not even an explicit nil
func (o *AwsEdcDeployment) UnsetRootVolumeSize() {
	o.RootVolumeSize.Unset()
}

// GetUserVolumeSize returns the UserVolumeSize field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AwsEdcDeployment) GetUserVolumeSize() int32 {
	if o == nil || IsNil(o.UserVolumeSize.Get()) {
		var ret int32
		return ret
	}
	return *o.UserVolumeSize.Get()
}

// GetUserVolumeSizeOk returns a tuple with the UserVolumeSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsEdcDeployment) GetUserVolumeSizeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.UserVolumeSize.Get(), o.UserVolumeSize.IsSet()
}

// HasUserVolumeSize returns a boolean if a field has been set.
func (o *AwsEdcDeployment) HasUserVolumeSize() bool {
	if o != nil && o.UserVolumeSize.IsSet() {
		return true
	}

	return false
}

// SetUserVolumeSize gets a reference to the given NullableInt32 and assigns it to the UserVolumeSize field.
func (o *AwsEdcDeployment) SetUserVolumeSize(v int32) {
	o.UserVolumeSize.Set(&v)
}
// SetUserVolumeSizeNil sets the value for UserVolumeSize to be an explicit nil
func (o *AwsEdcDeployment) SetUserVolumeSizeNil() {
	o.UserVolumeSize.Set(nil)
}

// UnsetUserVolumeSize ensures that no value is present for UserVolumeSize, not even an explicit nil
func (o *AwsEdcDeployment) UnsetUserVolumeSize() {
	o.UserVolumeSize.Unset()
}

// GetImageId returns the ImageId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AwsEdcDeployment) GetImageId() string {
	if o == nil || IsNil(o.ImageId.Get()) {
		var ret string
		return ret
	}
	return *o.ImageId.Get()
}

// GetImageIdOk returns a tuple with the ImageId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsEdcDeployment) GetImageIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ImageId.Get(), o.ImageId.IsSet()
}

// HasImageId returns a boolean if a field has been set.
func (o *AwsEdcDeployment) HasImageId() bool {
	if o != nil && o.ImageId.IsSet() {
		return true
	}

	return false
}

// SetImageId gets a reference to the given NullableString and assigns it to the ImageId field.
func (o *AwsEdcDeployment) SetImageId(v string) {
	o.ImageId.Set(&v)
}
// SetImageIdNil sets the value for ImageId to be an explicit nil
func (o *AwsEdcDeployment) SetImageIdNil() {
	o.ImageId.Set(nil)
}

// UnsetImageId ensures that no value is present for ImageId, not even an explicit nil
func (o *AwsEdcDeployment) UnsetImageId() {
	o.ImageId.Unset()
}

// GetImageName returns the ImageName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AwsEdcDeployment) GetImageName() string {
	if o == nil || IsNil(o.ImageName.Get()) {
		var ret string
		return ret
	}
	return *o.ImageName.Get()
}

// GetImageNameOk returns a tuple with the ImageName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsEdcDeployment) GetImageNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ImageName.Get(), o.ImageName.IsSet()
}

// HasImageName returns a boolean if a field has been set.
func (o *AwsEdcDeployment) HasImageName() bool {
	if o != nil && o.ImageName.IsSet() {
		return true
	}

	return false
}

// SetImageName gets a reference to the given NullableString and assigns it to the ImageName field.
func (o *AwsEdcDeployment) SetImageName(v string) {
	o.ImageName.Set(&v)
}
// SetImageNameNil sets the value for ImageName to be an explicit nil
func (o *AwsEdcDeployment) SetImageNameNil() {
	o.ImageName.Set(nil)
}

// UnsetImageName ensures that no value is present for ImageName, not even an explicit nil
func (o *AwsEdcDeployment) UnsetImageName() {
	o.ImageName.Unset()
}

// GetRunningMode returns the RunningMode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AwsEdcDeployment) GetRunningMode() AwsEdcWorkspaceRunningMode {
	if o == nil || IsNil(o.RunningMode.Get()) {
		var ret AwsEdcWorkspaceRunningMode
		return ret
	}
	return *o.RunningMode.Get()
}

// GetRunningModeOk returns a tuple with the RunningMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsEdcDeployment) GetRunningModeOk() (*AwsEdcWorkspaceRunningMode, bool) {
	if o == nil {
		return nil, false
	}
	return o.RunningMode.Get(), o.RunningMode.IsSet()
}

// HasRunningMode returns a boolean if a field has been set.
func (o *AwsEdcDeployment) HasRunningMode() bool {
	if o != nil && o.RunningMode.IsSet() {
		return true
	}

	return false
}

// SetRunningMode gets a reference to the given NullableAwsEdcWorkspaceRunningMode and assigns it to the RunningMode field.
func (o *AwsEdcDeployment) SetRunningMode(v AwsEdcWorkspaceRunningMode) {
	o.RunningMode.Set(&v)
}
// SetRunningModeNil sets the value for RunningMode to be an explicit nil
func (o *AwsEdcDeployment) SetRunningModeNil() {
	o.RunningMode.Set(nil)
}

// UnsetRunningMode ensures that no value is present for RunningMode, not even an explicit nil
func (o *AwsEdcDeployment) UnsetRunningMode() {
	o.RunningMode.Unset()
}

// GetWorkspaces returns the Workspaces field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AwsEdcDeployment) GetWorkspaces() []AwsEdcDeploymentMachine {
	if o == nil {
		var ret []AwsEdcDeploymentMachine
		return ret
	}
	return o.Workspaces
}

// GetWorkspacesOk returns a tuple with the Workspaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsEdcDeployment) GetWorkspacesOk() ([]AwsEdcDeploymentMachine, bool) {
	if o == nil || IsNil(o.Workspaces) {
		return nil, false
	}
	return o.Workspaces, true
}

// HasWorkspaces returns a boolean if a field has been set.
func (o *AwsEdcDeployment) HasWorkspaces() bool {
	if o != nil && IsNil(o.Workspaces) {
		return true
	}

	return false
}

// SetWorkspaces gets a reference to the given []AwsEdcDeploymentMachine and assigns it to the Workspaces field.
func (o *AwsEdcDeployment) SetWorkspaces(v []AwsEdcDeploymentMachine) {
	o.Workspaces = v
}

// GetDirectoryName returns the DirectoryName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AwsEdcDeployment) GetDirectoryName() string {
	if o == nil || IsNil(o.DirectoryName.Get()) {
		var ret string
		return ret
	}
	return *o.DirectoryName.Get()
}

// GetDirectoryNameOk returns a tuple with the DirectoryName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsEdcDeployment) GetDirectoryNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DirectoryName.Get(), o.DirectoryName.IsSet()
}

// HasDirectoryName returns a boolean if a field has been set.
func (o *AwsEdcDeployment) HasDirectoryName() bool {
	if o != nil && o.DirectoryName.IsSet() {
		return true
	}

	return false
}

// SetDirectoryName gets a reference to the given NullableString and assigns it to the DirectoryName field.
func (o *AwsEdcDeployment) SetDirectoryName(v string) {
	o.DirectoryName.Set(&v)
}
// SetDirectoryNameNil sets the value for DirectoryName to be an explicit nil
func (o *AwsEdcDeployment) SetDirectoryNameNil() {
	o.DirectoryName.Set(nil)
}

// UnsetDirectoryName ensures that no value is present for DirectoryName, not even an explicit nil
func (o *AwsEdcDeployment) UnsetDirectoryName() {
	o.DirectoryName.Unset()
}

func (o AwsEdcDeployment) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AwsEdcDeployment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedDeployment, errDeployment := json.Marshal(o.Deployment)
	if errDeployment != nil {
		return map[string]interface{}{}, errDeployment
	}
	errDeployment = json.Unmarshal([]byte(serializedDeployment), &toSerialize)
	if errDeployment != nil {
		return map[string]interface{}{}, errDeployment
	}
	if o.ComputeType.IsSet() {
		toSerialize["computeType"] = o.ComputeType.Get()
	}
	if o.RootVolumeSize.IsSet() {
		toSerialize["rootVolumeSize"] = o.RootVolumeSize.Get()
	}
	if o.UserVolumeSize.IsSet() {
		toSerialize["userVolumeSize"] = o.UserVolumeSize.Get()
	}
	if o.ImageId.IsSet() {
		toSerialize["imageId"] = o.ImageId.Get()
	}
	if o.ImageName.IsSet() {
		toSerialize["imageName"] = o.ImageName.Get()
	}
	if o.RunningMode.IsSet() {
		toSerialize["runningMode"] = o.RunningMode.Get()
	}
	if o.Workspaces != nil {
		toSerialize["workspaces"] = o.Workspaces
	}
	if o.DirectoryName.IsSet() {
		toSerialize["directoryName"] = o.DirectoryName.Get()
	}
	return toSerialize, nil
}

type NullableAwsEdcDeployment struct {
	value *AwsEdcDeployment
	isSet bool
}

func (v NullableAwsEdcDeployment) Get() *AwsEdcDeployment {
	return v.value
}

func (v *NullableAwsEdcDeployment) Set(val *AwsEdcDeployment) {
	v.value = val
	v.isSet = true
}

func (v NullableAwsEdcDeployment) IsSet() bool {
	return v.isSet
}

func (v *NullableAwsEdcDeployment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAwsEdcDeployment(val *AwsEdcDeployment) *NullableAwsEdcDeployment {
	return &NullableAwsEdcDeployment{value: val, isSet: true}
}

func (v NullableAwsEdcDeployment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAwsEdcDeployment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


