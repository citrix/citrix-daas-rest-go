/*
Quick Create Service for DaaS Quick Deploy with AWS WorkSpaces Core - Tech Preview

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: DaaSTechPreview
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickcreate

import (
	"encoding/json"
	"fmt"
)

// PowerMode the model 'PowerMode'
type PowerMode string

// List of PowerMode
const (
	POWERMODE_OFF PowerMode = "Off"
	POWERMODE_ON PowerMode = "On"
)

// All allowed values of PowerMode enum
var AllowedPowerModeEnumValues = []PowerMode{
	"Off",
	"On",
}

func (v *PowerMode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PowerMode(value)
	for _, existing := range AllowedPowerModeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PowerMode", value)
}

// NewPowerModeFromValue returns a pointer to a valid PowerMode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPowerModeFromValue(v string) (*PowerMode, error) {
	ev := PowerMode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PowerMode: valid values are %v", v, AllowedPowerModeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PowerMode) IsValid() bool {
	for _, existing := range AllowedPowerModeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PowerMode value
func (v PowerMode) Ptr() *PowerMode {
	return &v
}

type NullablePowerMode struct {
	value *PowerMode
	isSet bool
}

func (v NullablePowerMode) Get() *PowerMode {
	return v.value
}

func (v *NullablePowerMode) Set(val *PowerMode) {
	v.value = val
	v.isSet = true
}

func (v NullablePowerMode) IsSet() bool {
	return v.isSet
}

func (v *NullablePowerMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePowerMode(val *PowerMode) *NullablePowerMode {
	return &NullablePowerMode{value: val, isSet: true}
}

func (v NullablePowerMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePowerMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

