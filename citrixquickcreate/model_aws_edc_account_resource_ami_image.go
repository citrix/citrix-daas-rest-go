/*
Quick Create Service for DaaS Quick Deploy with AWS WorkSpaces Core - Tech Preview

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: DaaSTechPreview
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickcreate

import (
	"encoding/json"
)

// checks if the AwsEdcAccountResourceAmiImage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AwsEdcAccountResourceAmiImage{}

// AwsEdcAccountResourceAmiImage struct for AwsEdcAccountResourceAmiImage
type AwsEdcAccountResourceAmiImage struct {
	AwsEdcAccountResource
	// Image Id
	ImageId NullableString `json:"imageId,omitempty"`
	// Image Name
	Name NullableString `json:"name,omitempty"`
	// Image Description
	Description NullableString `json:"description,omitempty"`
	Status NullableAwsEdcAmiImageStatus `json:"status,omitempty"`
	// Image Location
	Location NullableString `json:"location,omitempty"`
	ImageType NullableAwsEdcAmiImageType `json:"imageType,omitempty"`
	PlatformType NullableAwsEdcAmiImagePlatform `json:"platformType,omitempty"`
	BootMode NullableAwsEdcAmiImageBootMode `json:"bootMode,omitempty"`
	ArchitectureType NullableAwsEdcAmiImageArchitecture `json:"architectureType,omitempty"`
	VirtualizationType NullableAwsEdcAmiImageVirtualization `json:"virtualizationType,omitempty"`
	// Image IsPublic
	Public NullableBool `json:"public,omitempty"`
	// Image Tags
	Tags []Tag `json:"tags,omitempty"`
}

// NewAwsEdcAccountResourceAmiImage instantiates a new AwsEdcAccountResourceAmiImage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAwsEdcAccountResourceAmiImage(accountType AccountType) *AwsEdcAccountResourceAmiImage {
	this := AwsEdcAccountResourceAmiImage{}
	this.AccountType = accountType
	return &this
}

// NewAwsEdcAccountResourceAmiImageWithDefaults instantiates a new AwsEdcAccountResourceAmiImage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAwsEdcAccountResourceAmiImageWithDefaults() *AwsEdcAccountResourceAmiImage {
	this := AwsEdcAccountResourceAmiImage{}
	return &this
}

// GetImageId returns the ImageId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AwsEdcAccountResourceAmiImage) GetImageId() string {
	if o == nil || IsNil(o.ImageId.Get()) {
		var ret string
		return ret
	}
	return *o.ImageId.Get()
}

// GetImageIdOk returns a tuple with the ImageId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsEdcAccountResourceAmiImage) GetImageIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ImageId.Get(), o.ImageId.IsSet()
}

// HasImageId returns a boolean if a field has been set.
func (o *AwsEdcAccountResourceAmiImage) HasImageId() bool {
	if o != nil && o.ImageId.IsSet() {
		return true
	}

	return false
}

// SetImageId gets a reference to the given NullableString and assigns it to the ImageId field.
func (o *AwsEdcAccountResourceAmiImage) SetImageId(v string) {
	o.ImageId.Set(&v)
}
// SetImageIdNil sets the value for ImageId to be an explicit nil
func (o *AwsEdcAccountResourceAmiImage) SetImageIdNil() {
	o.ImageId.Set(nil)
}

// UnsetImageId ensures that no value is present for ImageId, not even an explicit nil
func (o *AwsEdcAccountResourceAmiImage) UnsetImageId() {
	o.ImageId.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AwsEdcAccountResourceAmiImage) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsEdcAccountResourceAmiImage) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *AwsEdcAccountResourceAmiImage) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *AwsEdcAccountResourceAmiImage) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *AwsEdcAccountResourceAmiImage) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *AwsEdcAccountResourceAmiImage) UnsetName() {
	o.Name.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AwsEdcAccountResourceAmiImage) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsEdcAccountResourceAmiImage) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *AwsEdcAccountResourceAmiImage) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *AwsEdcAccountResourceAmiImage) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *AwsEdcAccountResourceAmiImage) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *AwsEdcAccountResourceAmiImage) UnsetDescription() {
	o.Description.Unset()
}

// GetStatus returns the Status field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AwsEdcAccountResourceAmiImage) GetStatus() AwsEdcAmiImageStatus {
	if o == nil || IsNil(o.Status.Get()) {
		var ret AwsEdcAmiImageStatus
		return ret
	}
	return *o.Status.Get()
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsEdcAccountResourceAmiImage) GetStatusOk() (*AwsEdcAmiImageStatus, bool) {
	if o == nil {
		return nil, false
	}
	return o.Status.Get(), o.Status.IsSet()
}

// HasStatus returns a boolean if a field has been set.
func (o *AwsEdcAccountResourceAmiImage) HasStatus() bool {
	if o != nil && o.Status.IsSet() {
		return true
	}

	return false
}

// SetStatus gets a reference to the given NullableAwsEdcAmiImageStatus and assigns it to the Status field.
func (o *AwsEdcAccountResourceAmiImage) SetStatus(v AwsEdcAmiImageStatus) {
	o.Status.Set(&v)
}
// SetStatusNil sets the value for Status to be an explicit nil
func (o *AwsEdcAccountResourceAmiImage) SetStatusNil() {
	o.Status.Set(nil)
}

// UnsetStatus ensures that no value is present for Status, not even an explicit nil
func (o *AwsEdcAccountResourceAmiImage) UnsetStatus() {
	o.Status.Unset()
}

// GetLocation returns the Location field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AwsEdcAccountResourceAmiImage) GetLocation() string {
	if o == nil || IsNil(o.Location.Get()) {
		var ret string
		return ret
	}
	return *o.Location.Get()
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsEdcAccountResourceAmiImage) GetLocationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Location.Get(), o.Location.IsSet()
}

// HasLocation returns a boolean if a field has been set.
func (o *AwsEdcAccountResourceAmiImage) HasLocation() bool {
	if o != nil && o.Location.IsSet() {
		return true
	}

	return false
}

// SetLocation gets a reference to the given NullableString and assigns it to the Location field.
func (o *AwsEdcAccountResourceAmiImage) SetLocation(v string) {
	o.Location.Set(&v)
}
// SetLocationNil sets the value for Location to be an explicit nil
func (o *AwsEdcAccountResourceAmiImage) SetLocationNil() {
	o.Location.Set(nil)
}

// UnsetLocation ensures that no value is present for Location, not even an explicit nil
func (o *AwsEdcAccountResourceAmiImage) UnsetLocation() {
	o.Location.Unset()
}

// GetImageType returns the ImageType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AwsEdcAccountResourceAmiImage) GetImageType() AwsEdcAmiImageType {
	if o == nil || IsNil(o.ImageType.Get()) {
		var ret AwsEdcAmiImageType
		return ret
	}
	return *o.ImageType.Get()
}

// GetImageTypeOk returns a tuple with the ImageType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsEdcAccountResourceAmiImage) GetImageTypeOk() (*AwsEdcAmiImageType, bool) {
	if o == nil {
		return nil, false
	}
	return o.ImageType.Get(), o.ImageType.IsSet()
}

// HasImageType returns a boolean if a field has been set.
func (o *AwsEdcAccountResourceAmiImage) HasImageType() bool {
	if o != nil && o.ImageType.IsSet() {
		return true
	}

	return false
}

// SetImageType gets a reference to the given NullableAwsEdcAmiImageType and assigns it to the ImageType field.
func (o *AwsEdcAccountResourceAmiImage) SetImageType(v AwsEdcAmiImageType) {
	o.ImageType.Set(&v)
}
// SetImageTypeNil sets the value for ImageType to be an explicit nil
func (o *AwsEdcAccountResourceAmiImage) SetImageTypeNil() {
	o.ImageType.Set(nil)
}

// UnsetImageType ensures that no value is present for ImageType, not even an explicit nil
func (o *AwsEdcAccountResourceAmiImage) UnsetImageType() {
	o.ImageType.Unset()
}

// GetPlatformType returns the PlatformType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AwsEdcAccountResourceAmiImage) GetPlatformType() AwsEdcAmiImagePlatform {
	if o == nil || IsNil(o.PlatformType.Get()) {
		var ret AwsEdcAmiImagePlatform
		return ret
	}
	return *o.PlatformType.Get()
}

// GetPlatformTypeOk returns a tuple with the PlatformType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsEdcAccountResourceAmiImage) GetPlatformTypeOk() (*AwsEdcAmiImagePlatform, bool) {
	if o == nil {
		return nil, false
	}
	return o.PlatformType.Get(), o.PlatformType.IsSet()
}

// HasPlatformType returns a boolean if a field has been set.
func (o *AwsEdcAccountResourceAmiImage) HasPlatformType() bool {
	if o != nil && o.PlatformType.IsSet() {
		return true
	}

	return false
}

// SetPlatformType gets a reference to the given NullableAwsEdcAmiImagePlatform and assigns it to the PlatformType field.
func (o *AwsEdcAccountResourceAmiImage) SetPlatformType(v AwsEdcAmiImagePlatform) {
	o.PlatformType.Set(&v)
}
// SetPlatformTypeNil sets the value for PlatformType to be an explicit nil
func (o *AwsEdcAccountResourceAmiImage) SetPlatformTypeNil() {
	o.PlatformType.Set(nil)
}

// UnsetPlatformType ensures that no value is present for PlatformType, not even an explicit nil
func (o *AwsEdcAccountResourceAmiImage) UnsetPlatformType() {
	o.PlatformType.Unset()
}

// GetBootMode returns the BootMode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AwsEdcAccountResourceAmiImage) GetBootMode() AwsEdcAmiImageBootMode {
	if o == nil || IsNil(o.BootMode.Get()) {
		var ret AwsEdcAmiImageBootMode
		return ret
	}
	return *o.BootMode.Get()
}

// GetBootModeOk returns a tuple with the BootMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsEdcAccountResourceAmiImage) GetBootModeOk() (*AwsEdcAmiImageBootMode, bool) {
	if o == nil {
		return nil, false
	}
	return o.BootMode.Get(), o.BootMode.IsSet()
}

// HasBootMode returns a boolean if a field has been set.
func (o *AwsEdcAccountResourceAmiImage) HasBootMode() bool {
	if o != nil && o.BootMode.IsSet() {
		return true
	}

	return false
}

// SetBootMode gets a reference to the given NullableAwsEdcAmiImageBootMode and assigns it to the BootMode field.
func (o *AwsEdcAccountResourceAmiImage) SetBootMode(v AwsEdcAmiImageBootMode) {
	o.BootMode.Set(&v)
}
// SetBootModeNil sets the value for BootMode to be an explicit nil
func (o *AwsEdcAccountResourceAmiImage) SetBootModeNil() {
	o.BootMode.Set(nil)
}

// UnsetBootMode ensures that no value is present for BootMode, not even an explicit nil
func (o *AwsEdcAccountResourceAmiImage) UnsetBootMode() {
	o.BootMode.Unset()
}

// GetArchitectureType returns the ArchitectureType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AwsEdcAccountResourceAmiImage) GetArchitectureType() AwsEdcAmiImageArchitecture {
	if o == nil || IsNil(o.ArchitectureType.Get()) {
		var ret AwsEdcAmiImageArchitecture
		return ret
	}
	return *o.ArchitectureType.Get()
}

// GetArchitectureTypeOk returns a tuple with the ArchitectureType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsEdcAccountResourceAmiImage) GetArchitectureTypeOk() (*AwsEdcAmiImageArchitecture, bool) {
	if o == nil {
		return nil, false
	}
	return o.ArchitectureType.Get(), o.ArchitectureType.IsSet()
}

// HasArchitectureType returns a boolean if a field has been set.
func (o *AwsEdcAccountResourceAmiImage) HasArchitectureType() bool {
	if o != nil && o.ArchitectureType.IsSet() {
		return true
	}

	return false
}

// SetArchitectureType gets a reference to the given NullableAwsEdcAmiImageArchitecture and assigns it to the ArchitectureType field.
func (o *AwsEdcAccountResourceAmiImage) SetArchitectureType(v AwsEdcAmiImageArchitecture) {
	o.ArchitectureType.Set(&v)
}
// SetArchitectureTypeNil sets the value for ArchitectureType to be an explicit nil
func (o *AwsEdcAccountResourceAmiImage) SetArchitectureTypeNil() {
	o.ArchitectureType.Set(nil)
}

// UnsetArchitectureType ensures that no value is present for ArchitectureType, not even an explicit nil
func (o *AwsEdcAccountResourceAmiImage) UnsetArchitectureType() {
	o.ArchitectureType.Unset()
}

// GetVirtualizationType returns the VirtualizationType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AwsEdcAccountResourceAmiImage) GetVirtualizationType() AwsEdcAmiImageVirtualization {
	if o == nil || IsNil(o.VirtualizationType.Get()) {
		var ret AwsEdcAmiImageVirtualization
		return ret
	}
	return *o.VirtualizationType.Get()
}

// GetVirtualizationTypeOk returns a tuple with the VirtualizationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsEdcAccountResourceAmiImage) GetVirtualizationTypeOk() (*AwsEdcAmiImageVirtualization, bool) {
	if o == nil {
		return nil, false
	}
	return o.VirtualizationType.Get(), o.VirtualizationType.IsSet()
}

// HasVirtualizationType returns a boolean if a field has been set.
func (o *AwsEdcAccountResourceAmiImage) HasVirtualizationType() bool {
	if o != nil && o.VirtualizationType.IsSet() {
		return true
	}

	return false
}

// SetVirtualizationType gets a reference to the given NullableAwsEdcAmiImageVirtualization and assigns it to the VirtualizationType field.
func (o *AwsEdcAccountResourceAmiImage) SetVirtualizationType(v AwsEdcAmiImageVirtualization) {
	o.VirtualizationType.Set(&v)
}
// SetVirtualizationTypeNil sets the value for VirtualizationType to be an explicit nil
func (o *AwsEdcAccountResourceAmiImage) SetVirtualizationTypeNil() {
	o.VirtualizationType.Set(nil)
}

// UnsetVirtualizationType ensures that no value is present for VirtualizationType, not even an explicit nil
func (o *AwsEdcAccountResourceAmiImage) UnsetVirtualizationType() {
	o.VirtualizationType.Unset()
}

// GetPublic returns the Public field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AwsEdcAccountResourceAmiImage) GetPublic() bool {
	if o == nil || IsNil(o.Public.Get()) {
		var ret bool
		return ret
	}
	return *o.Public.Get()
}

// GetPublicOk returns a tuple with the Public field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsEdcAccountResourceAmiImage) GetPublicOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Public.Get(), o.Public.IsSet()
}

// HasPublic returns a boolean if a field has been set.
func (o *AwsEdcAccountResourceAmiImage) HasPublic() bool {
	if o != nil && o.Public.IsSet() {
		return true
	}

	return false
}

// SetPublic gets a reference to the given NullableBool and assigns it to the Public field.
func (o *AwsEdcAccountResourceAmiImage) SetPublic(v bool) {
	o.Public.Set(&v)
}
// SetPublicNil sets the value for Public to be an explicit nil
func (o *AwsEdcAccountResourceAmiImage) SetPublicNil() {
	o.Public.Set(nil)
}

// UnsetPublic ensures that no value is present for Public, not even an explicit nil
func (o *AwsEdcAccountResourceAmiImage) UnsetPublic() {
	o.Public.Unset()
}

// GetTags returns the Tags field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AwsEdcAccountResourceAmiImage) GetTags() []Tag {
	if o == nil {
		var ret []Tag
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsEdcAccountResourceAmiImage) GetTagsOk() ([]Tag, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *AwsEdcAccountResourceAmiImage) HasTags() bool {
	if o != nil && IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []Tag and assigns it to the Tags field.
func (o *AwsEdcAccountResourceAmiImage) SetTags(v []Tag) {
	o.Tags = v
}

func (o AwsEdcAccountResourceAmiImage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AwsEdcAccountResourceAmiImage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedAwsEdcAccountResource, errAwsEdcAccountResource := json.Marshal(o.AwsEdcAccountResource)
	if errAwsEdcAccountResource != nil {
		return map[string]interface{}{}, errAwsEdcAccountResource
	}
	errAwsEdcAccountResource = json.Unmarshal([]byte(serializedAwsEdcAccountResource), &toSerialize)
	if errAwsEdcAccountResource != nil {
		return map[string]interface{}{}, errAwsEdcAccountResource
	}
	if o.ImageId.IsSet() {
		toSerialize["imageId"] = o.ImageId.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.Status.IsSet() {
		toSerialize["status"] = o.Status.Get()
	}
	if o.Location.IsSet() {
		toSerialize["location"] = o.Location.Get()
	}
	if o.ImageType.IsSet() {
		toSerialize["imageType"] = o.ImageType.Get()
	}
	if o.PlatformType.IsSet() {
		toSerialize["platformType"] = o.PlatformType.Get()
	}
	if o.BootMode.IsSet() {
		toSerialize["bootMode"] = o.BootMode.Get()
	}
	if o.ArchitectureType.IsSet() {
		toSerialize["architectureType"] = o.ArchitectureType.Get()
	}
	if o.VirtualizationType.IsSet() {
		toSerialize["virtualizationType"] = o.VirtualizationType.Get()
	}
	if o.Public.IsSet() {
		toSerialize["public"] = o.Public.Get()
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	return toSerialize, nil
}

type NullableAwsEdcAccountResourceAmiImage struct {
	value *AwsEdcAccountResourceAmiImage
	isSet bool
}

func (v NullableAwsEdcAccountResourceAmiImage) Get() *AwsEdcAccountResourceAmiImage {
	return v.value
}

func (v *NullableAwsEdcAccountResourceAmiImage) Set(val *AwsEdcAccountResourceAmiImage) {
	v.value = val
	v.isSet = true
}

func (v NullableAwsEdcAccountResourceAmiImage) IsSet() bool {
	return v.isSet
}

func (v *NullableAwsEdcAccountResourceAmiImage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAwsEdcAccountResourceAmiImage(val *AwsEdcAccountResourceAmiImage) *NullableAwsEdcAccountResourceAmiImage {
	return &NullableAwsEdcAccountResourceAmiImage{value: val, isSet: true}
}

func (v NullableAwsEdcAccountResourceAmiImage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAwsEdcAccountResourceAmiImage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


