/*
Quick Create Service for DaaS Quick Deploy with AWS WorkSpaces Core - Tech Preview

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: DaaSTechPreview
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickcreate

import (
	"encoding/json"
	"fmt"
)

// AwsEdcVpcTenancy the model 'AwsEdcVpcTenancy'
type AwsEdcVpcTenancy string

// List of AwsEdcVpcTenancy
const (
	AWSEDCVPCTENANCY_DEDICATED AwsEdcVpcTenancy = "DEDICATED"
	AWSEDCVPCTENANCY_DEFAULT   AwsEdcVpcTenancy = "DEFAULT"
	AWSEDCVPCTENANCY_HOST      AwsEdcVpcTenancy = "HOST"
)

// All allowed values of AwsEdcVpcTenancy enum
var AllowedAwsEdcVpcTenancyEnumValues = []AwsEdcVpcTenancy{
	"DEDICATED",
	"DEFAULT",
	"HOST",
}

func (v *AwsEdcVpcTenancy) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AwsEdcVpcTenancy(value)
	for _, existing := range AllowedAwsEdcVpcTenancyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AwsEdcVpcTenancy", value)
}

// NewAwsEdcVpcTenancyFromValue returns a pointer to a valid AwsEdcVpcTenancy
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAwsEdcVpcTenancyFromValue(v string) (*AwsEdcVpcTenancy, error) {
	ev := AwsEdcVpcTenancy(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AwsEdcVpcTenancy: valid values are %v", v, AllowedAwsEdcVpcTenancyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AwsEdcVpcTenancy) IsValid() bool {
	for _, existing := range AllowedAwsEdcVpcTenancyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AwsEdcVpcTenancy value
func (v AwsEdcVpcTenancy) Ptr() *AwsEdcVpcTenancy {
	return &v
}

type NullableAwsEdcVpcTenancy struct {
	value *AwsEdcVpcTenancy
	isSet bool
}

func (v NullableAwsEdcVpcTenancy) Get() *AwsEdcVpcTenancy {
	return v.value
}

func (v *NullableAwsEdcVpcTenancy) Set(val *AwsEdcVpcTenancy) {
	v.value = val
	v.isSet = true
}

func (v NullableAwsEdcVpcTenancy) IsSet() bool {
	return v.isSet
}

func (v *NullableAwsEdcVpcTenancy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAwsEdcVpcTenancy(val *AwsEdcVpcTenancy) *NullableAwsEdcVpcTenancy {
	return &NullableAwsEdcVpcTenancy{value: val, isSet: true}
}

func (v NullableAwsEdcVpcTenancy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAwsEdcVpcTenancy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
