/*
Quick Create Service for DaaS Quick Deploy with AWS WorkSpaces Core - Tech Preview

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: DaaSTechPreview
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickcreate

import (
	"encoding/json"
	"fmt"
)

// AwsEdcAccountAuthType the model 'AwsEdcAccountAuthType'
type AwsEdcAccountAuthType string

// List of AwsEdcAccountAuthType
const (
	AWSEDCACCOUNTAUTHTYPE_ASSUME_ROLE AwsEdcAccountAuthType = "ASSUME_ROLE"
	AWSEDCACCOUNTAUTHTYPE_ACCESS_KEY  AwsEdcAccountAuthType = "ACCESS_KEY"
)

// All allowed values of AwsEdcAccountAuthType enum
var AllowedAwsEdcAccountAuthTypeEnumValues = []AwsEdcAccountAuthType{
	"ASSUME_ROLE",
	"ACCESS_KEY",
}

func (v *AwsEdcAccountAuthType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AwsEdcAccountAuthType(value)
	for _, existing := range AllowedAwsEdcAccountAuthTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AwsEdcAccountAuthType", value)
}

// NewAwsEdcAccountAuthTypeFromValue returns a pointer to a valid AwsEdcAccountAuthType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAwsEdcAccountAuthTypeFromValue(v string) (*AwsEdcAccountAuthType, error) {
	ev := AwsEdcAccountAuthType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AwsEdcAccountAuthType: valid values are %v", v, AllowedAwsEdcAccountAuthTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AwsEdcAccountAuthType) IsValid() bool {
	for _, existing := range AllowedAwsEdcAccountAuthTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AwsEdcAccountAuthType value
func (v AwsEdcAccountAuthType) Ptr() *AwsEdcAccountAuthType {
	return &v
}

type NullableAwsEdcAccountAuthType struct {
	value *AwsEdcAccountAuthType
	isSet bool
}

func (v NullableAwsEdcAccountAuthType) Get() *AwsEdcAccountAuthType {
	return v.value
}

func (v *NullableAwsEdcAccountAuthType) Set(val *AwsEdcAccountAuthType) {
	v.value = val
	v.isSet = true
}

func (v NullableAwsEdcAccountAuthType) IsSet() bool {
	return v.isSet
}

func (v *NullableAwsEdcAccountAuthType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAwsEdcAccountAuthType(val *AwsEdcAccountAuthType) *NullableAwsEdcAccountAuthType {
	return &NullableAwsEdcAccountAuthType{value: val, isSet: true}
}

func (v NullableAwsEdcAccountAuthType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAwsEdcAccountAuthType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
