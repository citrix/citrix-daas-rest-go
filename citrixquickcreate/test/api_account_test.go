/*
Quick Create Service for DaaS Quick Deploy with AWS WorkSpaces Core - Tech Preview

Testing AccountQCSService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package citrixquickcreate

import (
	"context"
	"testing"

	openapiclient "github.com/citrix/citrix-daas-rest-go/citrixquickcreate"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_citrixquickcreate_AccountQCSService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test AccountQCSService AddAccountAsync", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var customerId string

		resp, httpRes, err := apiClient.AccountQCS.AddAccountAsync(context.Background(), customerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountQCSService DeleteCustomerAccountAsync", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var customerId string
		var accountId string

		httpRes, err := apiClient.AccountQCS.DeleteCustomerAccountAsync(context.Background(), customerId, accountId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountQCSService GetAccountResourcesAsync", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var customerId string
		var accountId string

		resp, httpRes, err := apiClient.AccountQCS.GetAccountResourcesAsync(context.Background(), customerId, accountId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountQCSService GetCustomerAccountAsync", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var customerId string
		var accountId string

		resp, httpRes, err := apiClient.AccountQCS.GetCustomerAccountAsync(context.Background(), customerId, accountId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountQCSService GetCustomerAccountResourcesAsync", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var customerId string

		resp, httpRes, err := apiClient.AccountQCS.GetCustomerAccountResourcesAsync(context.Background(), customerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountQCSService GetCustomerAccountTaskAsync", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var customerId string
		var accountId string
		var taskId string

		resp, httpRes, err := apiClient.AccountQCS.GetCustomerAccountTaskAsync(context.Background(), customerId, accountId, taskId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountQCSService GetCustomerAccountsAsync", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var customerId string

		resp, httpRes, err := apiClient.AccountQCS.GetCustomerAccountsAsync(context.Background(), customerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountQCSService InititateAccountTaskAsync", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var customerId string
		var accountId string

		resp, httpRes, err := apiClient.AccountQCS.InititateAccountTaskAsync(context.Background(), customerId, accountId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountQCSService UpdateCustomerAccountAsync", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var customerId string
		var accountId string

		httpRes, err := apiClient.AccountQCS.UpdateCustomerAccountAsync(context.Background(), customerId, accountId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
