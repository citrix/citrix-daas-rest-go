/*
Quick Create Service for DaaS Quick Deploy with AWS WorkSpaces Core - Tech Preview

Testing ConnectionQCSService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package citrixquickcreate

import (
	"context"
	"testing"

	openapiclient "github.com/citrix/citrix-daas-rest-go/citrixquickcreate"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_citrixquickcreate_ConnectionQCSService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ConnectionQCSService AddResourceConnectionAsync", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var customerId string
		var accountId string

		resp, httpRes, err := apiClient.ConnectionQCS.AddResourceConnectionAsync(context.Background(), customerId, accountId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConnectionQCSService GetAllResourceConnectionsAsync", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var customerId string

		resp, httpRes, err := apiClient.ConnectionQCS.GetAllResourceConnectionsAsync(context.Background(), customerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConnectionQCSService GetResourceConnectionAsync", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var customerId string
		var accountId string
		var connectionId string

		resp, httpRes, err := apiClient.ConnectionQCS.GetResourceConnectionAsync(context.Background(), customerId, accountId, connectionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConnectionQCSService GetResourceConnectionsAsync", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var customerId string
		var accountId string

		resp, httpRes, err := apiClient.ConnectionQCS.GetResourceConnectionsAsync(context.Background(), customerId, accountId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConnectionQCSService ModifyResourceConnectionAsync", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var customerId string
		var accountId string
		var connectionId string

		resp, httpRes, err := apiClient.ConnectionQCS.ModifyResourceConnectionAsync(context.Background(), customerId, accountId, connectionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConnectionQCSService RemoveResourceConnectionAsync", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var customerId string
		var accountId string
		var connectionId string

		resp, httpRes, err := apiClient.ConnectionQCS.RemoveResourceConnectionAsync(context.Background(), customerId, accountId, connectionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
