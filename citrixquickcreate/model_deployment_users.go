/*
Quick Create Service for DaaS Quick Deploy with AWS WorkSpaces Core - Tech Preview

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: DaaSTechPreview
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickcreate

import (
	"encoding/json"
)

// checks if the DeploymentUsers type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeploymentUsers{}

// DeploymentUsers struct for DeploymentUsers
type DeploymentUsers struct {
	Usernames []string `json:"usernames,omitempty"`
}

// NewDeploymentUsers instantiates a new DeploymentUsers object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeploymentUsers() *DeploymentUsers {
	this := DeploymentUsers{}
	return &this
}

// NewDeploymentUsersWithDefaults instantiates a new DeploymentUsers object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeploymentUsersWithDefaults() *DeploymentUsers {
	this := DeploymentUsers{}
	return &this
}

// GetUsernames returns the Usernames field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeploymentUsers) GetUsernames() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Usernames
}

// GetUsernamesOk returns a tuple with the Usernames field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeploymentUsers) GetUsernamesOk() ([]string, bool) {
	if o == nil || IsNil(o.Usernames) {
		return nil, false
	}
	return o.Usernames, true
}

// HasUsernames returns a boolean if a field has been set.
func (o *DeploymentUsers) HasUsernames() bool {
	if o != nil && IsNil(o.Usernames) {
		return true
	}

	return false
}

// SetUsernames gets a reference to the given []string and assigns it to the Usernames field.
func (o *DeploymentUsers) SetUsernames(v []string) {
	o.Usernames = v
}

func (o DeploymentUsers) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeploymentUsers) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Usernames != nil {
		toSerialize["usernames"] = o.Usernames
	}
	return toSerialize, nil
}

type NullableDeploymentUsers struct {
	value *DeploymentUsers
	isSet bool
}

func (v NullableDeploymentUsers) Get() *DeploymentUsers {
	return v.value
}

func (v *NullableDeploymentUsers) Set(val *DeploymentUsers) {
	v.value = val
	v.isSet = true
}

func (v NullableDeploymentUsers) IsSet() bool {
	return v.isSet
}

func (v *NullableDeploymentUsers) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeploymentUsers(val *DeploymentUsers) *NullableDeploymentUsers {
	return &NullableDeploymentUsers{value: val, isSet: true}
}

func (v NullableDeploymentUsers) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeploymentUsers) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


