/*
Quick Create Service for DaaS Quick Deploy with AWS WorkSpaces Core - Tech Preview

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: DaaSTechPreview
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickcreate

import (
	"encoding/json"
	"fmt"
)

// OperatingSystemType the model 'OperatingSystemType'
type OperatingSystemType string

// List of OperatingSystemType
const (
	OPERATINGSYSTEMTYPE_WINDOWS OperatingSystemType = "WINDOWS"
	OPERATINGSYSTEMTYPE_LINUX   OperatingSystemType = "LINUX"
)

// All allowed values of OperatingSystemType enum
var AllowedOperatingSystemTypeEnumValues = []OperatingSystemType{
	"WINDOWS",
	"LINUX",
}

func (v *OperatingSystemType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OperatingSystemType(value)
	for _, existing := range AllowedOperatingSystemTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OperatingSystemType", value)
}

// NewOperatingSystemTypeFromValue returns a pointer to a valid OperatingSystemType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOperatingSystemTypeFromValue(v string) (*OperatingSystemType, error) {
	ev := OperatingSystemType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OperatingSystemType: valid values are %v", v, AllowedOperatingSystemTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OperatingSystemType) IsValid() bool {
	for _, existing := range AllowedOperatingSystemTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OperatingSystemType value
func (v OperatingSystemType) Ptr() *OperatingSystemType {
	return &v
}

type NullableOperatingSystemType struct {
	value *OperatingSystemType
	isSet bool
}

func (v NullableOperatingSystemType) Get() *OperatingSystemType {
	return v.value
}

func (v *NullableOperatingSystemType) Set(val *OperatingSystemType) {
	v.value = val
	v.isSet = true
}

func (v NullableOperatingSystemType) IsSet() bool {
	return v.isSet
}

func (v *NullableOperatingSystemType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOperatingSystemType(val *OperatingSystemType) *NullableOperatingSystemType {
	return &NullableOperatingSystemType{value: val, isSet: true}
}

func (v NullableOperatingSystemType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOperatingSystemType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
