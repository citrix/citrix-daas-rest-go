/*
Quick Create Service for DaaS Quick Deploy with AWS WorkSpaces Core - Tech Preview

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: DaaSTechPreview
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickcreate

import (
	"encoding/json"
	"fmt"
)

// AwsEdcDedicatedTenancyState the model 'AwsEdcDedicatedTenancyState'
type AwsEdcDedicatedTenancyState string

// List of AwsEdcDedicatedTenancyState
const (
	AWSEDCDEDICATEDTENANCYSTATE_DISABLED AwsEdcDedicatedTenancyState = "DISABLED"
	AWSEDCDEDICATEDTENANCYSTATE_PENDING AwsEdcDedicatedTenancyState = "PENDING"
	AWSEDCDEDICATEDTENANCYSTATE_FAILED AwsEdcDedicatedTenancyState = "FAILED"
	AWSEDCDEDICATEDTENANCYSTATE_COMPLETED AwsEdcDedicatedTenancyState = "COMPLETED"
)

// All allowed values of AwsEdcDedicatedTenancyState enum
var AllowedAwsEdcDedicatedTenancyStateEnumValues = []AwsEdcDedicatedTenancyState{
	"DISABLED",
	"PENDING",
	"FAILED",
	"COMPLETED",
}

func (v *AwsEdcDedicatedTenancyState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AwsEdcDedicatedTenancyState(value)
	for _, existing := range AllowedAwsEdcDedicatedTenancyStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AwsEdcDedicatedTenancyState", value)
}

// NewAwsEdcDedicatedTenancyStateFromValue returns a pointer to a valid AwsEdcDedicatedTenancyState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAwsEdcDedicatedTenancyStateFromValue(v string) (*AwsEdcDedicatedTenancyState, error) {
	ev := AwsEdcDedicatedTenancyState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AwsEdcDedicatedTenancyState: valid values are %v", v, AllowedAwsEdcDedicatedTenancyStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AwsEdcDedicatedTenancyState) IsValid() bool {
	for _, existing := range AllowedAwsEdcDedicatedTenancyStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AwsEdcDedicatedTenancyState value
func (v AwsEdcDedicatedTenancyState) Ptr() *AwsEdcDedicatedTenancyState {
	return &v
}

type NullableAwsEdcDedicatedTenancyState struct {
	value *AwsEdcDedicatedTenancyState
	isSet bool
}

func (v NullableAwsEdcDedicatedTenancyState) Get() *AwsEdcDedicatedTenancyState {
	return v.value
}

func (v *NullableAwsEdcDedicatedTenancyState) Set(val *AwsEdcDedicatedTenancyState) {
	v.value = val
	v.isSet = true
}

func (v NullableAwsEdcDedicatedTenancyState) IsSet() bool {
	return v.isSet
}

func (v *NullableAwsEdcDedicatedTenancyState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAwsEdcDedicatedTenancyState(val *AwsEdcDedicatedTenancyState) *NullableAwsEdcDedicatedTenancyState {
	return &NullableAwsEdcDedicatedTenancyState{value: val, isSet: true}
}

func (v NullableAwsEdcDedicatedTenancyState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAwsEdcDedicatedTenancyState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

