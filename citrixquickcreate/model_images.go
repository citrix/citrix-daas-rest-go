/*
Quick Create Service for DaaS Quick Deploy with AWS WorkSpaces Core - Tech Preview

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: DaaSTechPreview
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickcreate

import (
	"encoding/json"
)

// checks if the Images type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Images{}

// Images Enumerable of Image
type Images struct {
	// Enumerable of Image
	Items []AwsEdcImage `json:"items,omitempty"`
}

// NewImages instantiates a new Images object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImages() *Images {
	this := Images{}
	return &this
}

// NewImagesWithDefaults instantiates a new Images object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImagesWithDefaults() *Images {
	this := Images{}
	return &this
}

// GetItems returns the Items field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Images) GetItems() []AwsEdcImage {
	if o == nil {
		var ret []AwsEdcImage
		return ret
	}
	return o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Images) GetItemsOk() ([]AwsEdcImage, bool) {
	if o == nil || IsNil(o.Items) {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *Images) HasItems() bool {
	if o != nil && !IsNil(o.Items) {
		return true
	}

	return false
}

// SetItems gets a reference to the given []AwsEdcImage and assigns it to the Items field.
func (o *Images) SetItems(v []AwsEdcImage) {
	o.Items = v
}

func (o Images) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Images) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Items != nil {
		toSerialize["items"] = o.Items
	}
	return toSerialize, nil
}

type NullableImages struct {
	value *Images
	isSet bool
}

func (v NullableImages) Get() *Images {
	return v.value
}

func (v *NullableImages) Set(val *Images) {
	v.value = val
	v.isSet = true
}

func (v NullableImages) IsSet() bool {
	return v.isSet
}

func (v *NullableImages) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImages(val *Images) *NullableImages {
	return &NullableImages{value: val, isSet: true}
}

func (v NullableImages) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImages) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
