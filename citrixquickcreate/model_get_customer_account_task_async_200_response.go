/*
Quick Create Service for DaaS Quick Deploy with AWS WorkSpaces Core - Tech Preview

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: DaaSTechPreview
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickcreate

import (
	"encoding/json"
	"fmt"
)

// GetCustomerAccountTaskAsync200Response - Base class for Tasks
type GetCustomerAccountTaskAsync200Response struct {
	AccountTask *AccountTask
	CommissionTask *CommissionTask
	DeploymentTask *DeploymentTask
	ResourceConnectionTask *ResourceConnectionTask
	TaskBase *TaskBase
}

// AccountTaskAsGetCustomerAccountTaskAsync200Response is a convenience function that returns AccountTask wrapped in GetCustomerAccountTaskAsync200Response
func AccountTaskAsGetCustomerAccountTaskAsync200Response(v *AccountTask) GetCustomerAccountTaskAsync200Response {
	return GetCustomerAccountTaskAsync200Response{
		AccountTask: v,
	}
}

// CommissionTaskAsGetCustomerAccountTaskAsync200Response is a convenience function that returns CommissionTask wrapped in GetCustomerAccountTaskAsync200Response
func CommissionTaskAsGetCustomerAccountTaskAsync200Response(v *CommissionTask) GetCustomerAccountTaskAsync200Response {
	return GetCustomerAccountTaskAsync200Response{
		CommissionTask: v,
	}
}

// DeploymentTaskAsGetCustomerAccountTaskAsync200Response is a convenience function that returns DeploymentTask wrapped in GetCustomerAccountTaskAsync200Response
func DeploymentTaskAsGetCustomerAccountTaskAsync200Response(v *DeploymentTask) GetCustomerAccountTaskAsync200Response {
	return GetCustomerAccountTaskAsync200Response{
		DeploymentTask: v,
	}
}

// ResourceConnectionTaskAsGetCustomerAccountTaskAsync200Response is a convenience function that returns ResourceConnectionTask wrapped in GetCustomerAccountTaskAsync200Response
func ResourceConnectionTaskAsGetCustomerAccountTaskAsync200Response(v *ResourceConnectionTask) GetCustomerAccountTaskAsync200Response {
	return GetCustomerAccountTaskAsync200Response{
		ResourceConnectionTask: v,
	}
}

// TaskBaseAsGetCustomerAccountTaskAsync200Response is a convenience function that returns TaskBase wrapped in GetCustomerAccountTaskAsync200Response
func TaskBaseAsGetCustomerAccountTaskAsync200Response(v *TaskBase) GetCustomerAccountTaskAsync200Response {
	return GetCustomerAccountTaskAsync200Response{
		TaskBase: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetCustomerAccountTaskAsync200Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AccountTask
	err = json.Unmarshal(data, &dst.AccountTask)
	if err == nil {
		jsonAccountTask, _ := json.Marshal(dst.AccountTask)
		if string(jsonAccountTask) == "{}" { // empty struct
			dst.AccountTask = nil
		} else {
			match++
		}
	} else {
		dst.AccountTask = nil
	}

	// try to unmarshal data into CommissionTask
	err = json.Unmarshal(data, &dst.CommissionTask)
	if err == nil {
		jsonCommissionTask, _ := json.Marshal(dst.CommissionTask)
		if string(jsonCommissionTask) == "{}" { // empty struct
			dst.CommissionTask = nil
		} else {
			match++
		}
	} else {
		dst.CommissionTask = nil
	}

	// try to unmarshal data into DeploymentTask
	err = json.Unmarshal(data, &dst.DeploymentTask)
	if err == nil {
		jsonDeploymentTask, _ := json.Marshal(dst.DeploymentTask)
		if string(jsonDeploymentTask) == "{}" { // empty struct
			dst.DeploymentTask = nil
		} else {
			match++
		}
	} else {
		dst.DeploymentTask = nil
	}

	// try to unmarshal data into ResourceConnectionTask
	err = json.Unmarshal(data, &dst.ResourceConnectionTask)
	if err == nil {
		jsonResourceConnectionTask, _ := json.Marshal(dst.ResourceConnectionTask)
		if string(jsonResourceConnectionTask) == "{}" { // empty struct
			dst.ResourceConnectionTask = nil
		} else {
			match++
		}
	} else {
		dst.ResourceConnectionTask = nil
	}

	// try to unmarshal data into TaskBase
	err = json.Unmarshal(data, &dst.TaskBase)
	if err == nil {
		jsonTaskBase, _ := json.Marshal(dst.TaskBase)
		if string(jsonTaskBase) == "{}" { // empty struct
			dst.TaskBase = nil
		} else {
			match++
		}
	} else {
		dst.TaskBase = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AccountTask = nil
		dst.CommissionTask = nil
		dst.DeploymentTask = nil
		dst.ResourceConnectionTask = nil
		dst.TaskBase = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetCustomerAccountTaskAsync200Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetCustomerAccountTaskAsync200Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetCustomerAccountTaskAsync200Response) MarshalJSON() ([]byte, error) {
	if src.AccountTask != nil {
		return json.Marshal(&src.AccountTask)
	}

	if src.CommissionTask != nil {
		return json.Marshal(&src.CommissionTask)
	}

	if src.DeploymentTask != nil {
		return json.Marshal(&src.DeploymentTask)
	}

	if src.ResourceConnectionTask != nil {
		return json.Marshal(&src.ResourceConnectionTask)
	}

	if src.TaskBase != nil {
		return json.Marshal(&src.TaskBase)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetCustomerAccountTaskAsync200Response) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AccountTask != nil {
		return obj.AccountTask
	}

	if obj.CommissionTask != nil {
		return obj.CommissionTask
	}

	if obj.DeploymentTask != nil {
		return obj.DeploymentTask
	}

	if obj.ResourceConnectionTask != nil {
		return obj.ResourceConnectionTask
	}

	if obj.TaskBase != nil {
		return obj.TaskBase
	}

	// all schemas are nil
	return nil
}

type NullableGetCustomerAccountTaskAsync200Response struct {
	value *GetCustomerAccountTaskAsync200Response
	isSet bool
}

func (v NullableGetCustomerAccountTaskAsync200Response) Get() *GetCustomerAccountTaskAsync200Response {
	return v.value
}

func (v *NullableGetCustomerAccountTaskAsync200Response) Set(val *GetCustomerAccountTaskAsync200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetCustomerAccountTaskAsync200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetCustomerAccountTaskAsync200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetCustomerAccountTaskAsync200Response(val *GetCustomerAccountTaskAsync200Response) *NullableGetCustomerAccountTaskAsync200Response {
	return &NullableGetCustomerAccountTaskAsync200Response{value: val, isSet: true}
}

func (v NullableGetCustomerAccountTaskAsync200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetCustomerAccountTaskAsync200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


