/*
Quick Create Service for DaaS Quick Deploy with AWS WorkSpaces Core - Tech Preview

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: DaaSTechPreview
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickcreate

import (
	"encoding/json"
)

// checks if the UpdateAwsEdcDirectoryConnection type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateAwsEdcDirectoryConnection{}

// UpdateAwsEdcDirectoryConnection struct for UpdateAwsEdcDirectoryConnection
type UpdateAwsEdcDirectoryConnection struct {
	UpdateResourceConnection
	// Default OU
	DefaultOU NullableString `json:"defaultOU,omitempty"`
	// Enable Work Docs
	EnableWorkDocs NullableBool `json:"enableWorkDocs,omitempty"`
	// Enable Local Administrator
	UserEnabledAsLocalAdministrator NullableBool `json:"userEnabledAsLocalAdministrator,omitempty"`
	// Enable Internet Access
	EnableInternetAccess NullableBool `json:"enableInternetAccess,omitempty"`
	// Enable Maintanance Mode
	EnableMaintananceMode NullableBool `json:"enableMaintananceMode,omitempty"`
	// Custom Security Group Id
	SecurityGroupId NullableString `json:"securityGroupId,omitempty"`
}

// NewUpdateAwsEdcDirectoryConnection instantiates a new UpdateAwsEdcDirectoryConnection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateAwsEdcDirectoryConnection(accountType AccountType) *UpdateAwsEdcDirectoryConnection {
	this := UpdateAwsEdcDirectoryConnection{}
	this.AccountType = accountType
	return &this
}

// NewUpdateAwsEdcDirectoryConnectionWithDefaults instantiates a new UpdateAwsEdcDirectoryConnection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateAwsEdcDirectoryConnectionWithDefaults() *UpdateAwsEdcDirectoryConnection {
	this := UpdateAwsEdcDirectoryConnection{}
	return &this
}

// GetDefaultOU returns the DefaultOU field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateAwsEdcDirectoryConnection) GetDefaultOU() string {
	if o == nil || IsNil(o.DefaultOU.Get()) {
		var ret string
		return ret
	}
	return *o.DefaultOU.Get()
}

// GetDefaultOUOk returns a tuple with the DefaultOU field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateAwsEdcDirectoryConnection) GetDefaultOUOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultOU.Get(), o.DefaultOU.IsSet()
}

// HasDefaultOU returns a boolean if a field has been set.
func (o *UpdateAwsEdcDirectoryConnection) HasDefaultOU() bool {
	if o != nil && o.DefaultOU.IsSet() {
		return true
	}

	return false
}

// SetDefaultOU gets a reference to the given NullableString and assigns it to the DefaultOU field.
func (o *UpdateAwsEdcDirectoryConnection) SetDefaultOU(v string) {
	o.DefaultOU.Set(&v)
}
// SetDefaultOUNil sets the value for DefaultOU to be an explicit nil
func (o *UpdateAwsEdcDirectoryConnection) SetDefaultOUNil() {
	o.DefaultOU.Set(nil)
}

// UnsetDefaultOU ensures that no value is present for DefaultOU, not even an explicit nil
func (o *UpdateAwsEdcDirectoryConnection) UnsetDefaultOU() {
	o.DefaultOU.Unset()
}

// GetEnableWorkDocs returns the EnableWorkDocs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateAwsEdcDirectoryConnection) GetEnableWorkDocs() bool {
	if o == nil || IsNil(o.EnableWorkDocs.Get()) {
		var ret bool
		return ret
	}
	return *o.EnableWorkDocs.Get()
}

// GetEnableWorkDocsOk returns a tuple with the EnableWorkDocs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateAwsEdcDirectoryConnection) GetEnableWorkDocsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.EnableWorkDocs.Get(), o.EnableWorkDocs.IsSet()
}

// HasEnableWorkDocs returns a boolean if a field has been set.
func (o *UpdateAwsEdcDirectoryConnection) HasEnableWorkDocs() bool {
	if o != nil && o.EnableWorkDocs.IsSet() {
		return true
	}

	return false
}

// SetEnableWorkDocs gets a reference to the given NullableBool and assigns it to the EnableWorkDocs field.
func (o *UpdateAwsEdcDirectoryConnection) SetEnableWorkDocs(v bool) {
	o.EnableWorkDocs.Set(&v)
}
// SetEnableWorkDocsNil sets the value for EnableWorkDocs to be an explicit nil
func (o *UpdateAwsEdcDirectoryConnection) SetEnableWorkDocsNil() {
	o.EnableWorkDocs.Set(nil)
}

// UnsetEnableWorkDocs ensures that no value is present for EnableWorkDocs, not even an explicit nil
func (o *UpdateAwsEdcDirectoryConnection) UnsetEnableWorkDocs() {
	o.EnableWorkDocs.Unset()
}

// GetUserEnabledAsLocalAdministrator returns the UserEnabledAsLocalAdministrator field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateAwsEdcDirectoryConnection) GetUserEnabledAsLocalAdministrator() bool {
	if o == nil || IsNil(o.UserEnabledAsLocalAdministrator.Get()) {
		var ret bool
		return ret
	}
	return *o.UserEnabledAsLocalAdministrator.Get()
}

// GetUserEnabledAsLocalAdministratorOk returns a tuple with the UserEnabledAsLocalAdministrator field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateAwsEdcDirectoryConnection) GetUserEnabledAsLocalAdministratorOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.UserEnabledAsLocalAdministrator.Get(), o.UserEnabledAsLocalAdministrator.IsSet()
}

// HasUserEnabledAsLocalAdministrator returns a boolean if a field has been set.
func (o *UpdateAwsEdcDirectoryConnection) HasUserEnabledAsLocalAdministrator() bool {
	if o != nil && o.UserEnabledAsLocalAdministrator.IsSet() {
		return true
	}

	return false
}

// SetUserEnabledAsLocalAdministrator gets a reference to the given NullableBool and assigns it to the UserEnabledAsLocalAdministrator field.
func (o *UpdateAwsEdcDirectoryConnection) SetUserEnabledAsLocalAdministrator(v bool) {
	o.UserEnabledAsLocalAdministrator.Set(&v)
}
// SetUserEnabledAsLocalAdministratorNil sets the value for UserEnabledAsLocalAdministrator to be an explicit nil
func (o *UpdateAwsEdcDirectoryConnection) SetUserEnabledAsLocalAdministratorNil() {
	o.UserEnabledAsLocalAdministrator.Set(nil)
}

// UnsetUserEnabledAsLocalAdministrator ensures that no value is present for UserEnabledAsLocalAdministrator, not even an explicit nil
func (o *UpdateAwsEdcDirectoryConnection) UnsetUserEnabledAsLocalAdministrator() {
	o.UserEnabledAsLocalAdministrator.Unset()
}

// GetEnableInternetAccess returns the EnableInternetAccess field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateAwsEdcDirectoryConnection) GetEnableInternetAccess() bool {
	if o == nil || IsNil(o.EnableInternetAccess.Get()) {
		var ret bool
		return ret
	}
	return *o.EnableInternetAccess.Get()
}

// GetEnableInternetAccessOk returns a tuple with the EnableInternetAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateAwsEdcDirectoryConnection) GetEnableInternetAccessOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.EnableInternetAccess.Get(), o.EnableInternetAccess.IsSet()
}

// HasEnableInternetAccess returns a boolean if a field has been set.
func (o *UpdateAwsEdcDirectoryConnection) HasEnableInternetAccess() bool {
	if o != nil && o.EnableInternetAccess.IsSet() {
		return true
	}

	return false
}

// SetEnableInternetAccess gets a reference to the given NullableBool and assigns it to the EnableInternetAccess field.
func (o *UpdateAwsEdcDirectoryConnection) SetEnableInternetAccess(v bool) {
	o.EnableInternetAccess.Set(&v)
}
// SetEnableInternetAccessNil sets the value for EnableInternetAccess to be an explicit nil
func (o *UpdateAwsEdcDirectoryConnection) SetEnableInternetAccessNil() {
	o.EnableInternetAccess.Set(nil)
}

// UnsetEnableInternetAccess ensures that no value is present for EnableInternetAccess, not even an explicit nil
func (o *UpdateAwsEdcDirectoryConnection) UnsetEnableInternetAccess() {
	o.EnableInternetAccess.Unset()
}

// GetEnableMaintananceMode returns the EnableMaintananceMode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateAwsEdcDirectoryConnection) GetEnableMaintananceMode() bool {
	if o == nil || IsNil(o.EnableMaintananceMode.Get()) {
		var ret bool
		return ret
	}
	return *o.EnableMaintananceMode.Get()
}

// GetEnableMaintananceModeOk returns a tuple with the EnableMaintananceMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateAwsEdcDirectoryConnection) GetEnableMaintananceModeOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.EnableMaintananceMode.Get(), o.EnableMaintananceMode.IsSet()
}

// HasEnableMaintananceMode returns a boolean if a field has been set.
func (o *UpdateAwsEdcDirectoryConnection) HasEnableMaintananceMode() bool {
	if o != nil && o.EnableMaintananceMode.IsSet() {
		return true
	}

	return false
}

// SetEnableMaintananceMode gets a reference to the given NullableBool and assigns it to the EnableMaintananceMode field.
func (o *UpdateAwsEdcDirectoryConnection) SetEnableMaintananceMode(v bool) {
	o.EnableMaintananceMode.Set(&v)
}
// SetEnableMaintananceModeNil sets the value for EnableMaintananceMode to be an explicit nil
func (o *UpdateAwsEdcDirectoryConnection) SetEnableMaintananceModeNil() {
	o.EnableMaintananceMode.Set(nil)
}

// UnsetEnableMaintananceMode ensures that no value is present for EnableMaintananceMode, not even an explicit nil
func (o *UpdateAwsEdcDirectoryConnection) UnsetEnableMaintananceMode() {
	o.EnableMaintananceMode.Unset()
}

// GetSecurityGroupId returns the SecurityGroupId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateAwsEdcDirectoryConnection) GetSecurityGroupId() string {
	if o == nil || IsNil(o.SecurityGroupId.Get()) {
		var ret string
		return ret
	}
	return *o.SecurityGroupId.Get()
}

// GetSecurityGroupIdOk returns a tuple with the SecurityGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateAwsEdcDirectoryConnection) GetSecurityGroupIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SecurityGroupId.Get(), o.SecurityGroupId.IsSet()
}

// HasSecurityGroupId returns a boolean if a field has been set.
func (o *UpdateAwsEdcDirectoryConnection) HasSecurityGroupId() bool {
	if o != nil && o.SecurityGroupId.IsSet() {
		return true
	}

	return false
}

// SetSecurityGroupId gets a reference to the given NullableString and assigns it to the SecurityGroupId field.
func (o *UpdateAwsEdcDirectoryConnection) SetSecurityGroupId(v string) {
	o.SecurityGroupId.Set(&v)
}
// SetSecurityGroupIdNil sets the value for SecurityGroupId to be an explicit nil
func (o *UpdateAwsEdcDirectoryConnection) SetSecurityGroupIdNil() {
	o.SecurityGroupId.Set(nil)
}

// UnsetSecurityGroupId ensures that no value is present for SecurityGroupId, not even an explicit nil
func (o *UpdateAwsEdcDirectoryConnection) UnsetSecurityGroupId() {
	o.SecurityGroupId.Unset()
}

func (o UpdateAwsEdcDirectoryConnection) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateAwsEdcDirectoryConnection) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedUpdateResourceConnection, errUpdateResourceConnection := json.Marshal(o.UpdateResourceConnection)
	if errUpdateResourceConnection != nil {
		return map[string]interface{}{}, errUpdateResourceConnection
	}
	errUpdateResourceConnection = json.Unmarshal([]byte(serializedUpdateResourceConnection), &toSerialize)
	if errUpdateResourceConnection != nil {
		return map[string]interface{}{}, errUpdateResourceConnection
	}
	if o.DefaultOU.IsSet() {
		toSerialize["defaultOU"] = o.DefaultOU.Get()
	}
	if o.EnableWorkDocs.IsSet() {
		toSerialize["enableWorkDocs"] = o.EnableWorkDocs.Get()
	}
	if o.UserEnabledAsLocalAdministrator.IsSet() {
		toSerialize["userEnabledAsLocalAdministrator"] = o.UserEnabledAsLocalAdministrator.Get()
	}
	if o.EnableInternetAccess.IsSet() {
		toSerialize["enableInternetAccess"] = o.EnableInternetAccess.Get()
	}
	if o.EnableMaintananceMode.IsSet() {
		toSerialize["enableMaintananceMode"] = o.EnableMaintananceMode.Get()
	}
	if o.SecurityGroupId.IsSet() {
		toSerialize["securityGroupId"] = o.SecurityGroupId.Get()
	}
	return toSerialize, nil
}

type NullableUpdateAwsEdcDirectoryConnection struct {
	value *UpdateAwsEdcDirectoryConnection
	isSet bool
}

func (v NullableUpdateAwsEdcDirectoryConnection) Get() *UpdateAwsEdcDirectoryConnection {
	return v.value
}

func (v *NullableUpdateAwsEdcDirectoryConnection) Set(val *UpdateAwsEdcDirectoryConnection) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateAwsEdcDirectoryConnection) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateAwsEdcDirectoryConnection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateAwsEdcDirectoryConnection(val *UpdateAwsEdcDirectoryConnection) *NullableUpdateAwsEdcDirectoryConnection {
	return &NullableUpdateAwsEdcDirectoryConnection{value: val, isSet: true}
}

func (v NullableUpdateAwsEdcDirectoryConnection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateAwsEdcDirectoryConnection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


