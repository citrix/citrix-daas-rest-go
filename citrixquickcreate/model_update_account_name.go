/*
Quick Create Service for DaaS Quick Deploy with AWS WorkSpaces Core - Tech Preview

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: DaaSTechPreview
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickcreate

import (
	"encoding/json"
)

// checks if the UpdateAccountName type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateAccountName{}

// UpdateAccountName struct for UpdateAccountName
type UpdateAccountName struct {
	UpdateAccount
	// The new name of account
	Name NullableString `json:"name,omitempty"`
}

// NewUpdateAccountName instantiates a new UpdateAccountName object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateAccountName(accountOperationType UpdateAccountOperationType) *UpdateAccountName {
	this := UpdateAccountName{}
	this.AccountOperationType = accountOperationType
	return &this
}

// NewUpdateAccountNameWithDefaults instantiates a new UpdateAccountName object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateAccountNameWithDefaults() *UpdateAccountName {
	this := UpdateAccountName{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateAccountName) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateAccountName) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *UpdateAccountName) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *UpdateAccountName) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *UpdateAccountName) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *UpdateAccountName) UnsetName() {
	o.Name.Unset()
}

func (o UpdateAccountName) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateAccountName) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedUpdateAccount, errUpdateAccount := json.Marshal(o.UpdateAccount)
	if errUpdateAccount != nil {
		return map[string]interface{}{}, errUpdateAccount
	}
	errUpdateAccount = json.Unmarshal([]byte(serializedUpdateAccount), &toSerialize)
	if errUpdateAccount != nil {
		return map[string]interface{}{}, errUpdateAccount
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	return toSerialize, nil
}

type NullableUpdateAccountName struct {
	value *UpdateAccountName
	isSet bool
}

func (v NullableUpdateAccountName) Get() *UpdateAccountName {
	return v.value
}

func (v *NullableUpdateAccountName) Set(val *UpdateAccountName) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateAccountName) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateAccountName) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateAccountName(val *UpdateAccountName) *NullableUpdateAccountName {
	return &NullableUpdateAccountName{value: val, isSet: true}
}

func (v NullableUpdateAccountName) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateAccountName) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


