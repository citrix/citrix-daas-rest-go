/*
Quick Create Service for DaaS Quick Deploy with AWS WorkSpaces Core - Tech Preview

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: DaaSTechPreview
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickcreate

import (
	"encoding/json"
	"fmt"
)

// PowerResponseCode Error code for power operation
type PowerResponseCode string

// List of PowerResponseCode
const (
	POWERRESPONSECODE_SUCCESS               PowerResponseCode = "Success"
	POWERRESPONSECODE_UNASSIGNED            PowerResponseCode = "Unassigned"
	POWERRESPONSECODE_NO_LICENSES_AVAILABLE PowerResponseCode = "NoLicensesAvailable"
	POWERRESPONSECODE_ACTIVATION_FAILED     PowerResponseCode = "ActivationFailed"
	POWERRESPONSECODE_UNKNOWN               PowerResponseCode = "Unknown"
)

// All allowed values of PowerResponseCode enum
var AllowedPowerResponseCodeEnumValues = []PowerResponseCode{
	"Success",
	"Unassigned",
	"NoLicensesAvailable",
	"ActivationFailed",
	"Unknown",
}

func (v *PowerResponseCode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PowerResponseCode(value)
	for _, existing := range AllowedPowerResponseCodeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PowerResponseCode", value)
}

// NewPowerResponseCodeFromValue returns a pointer to a valid PowerResponseCode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPowerResponseCodeFromValue(v string) (*PowerResponseCode, error) {
	ev := PowerResponseCode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PowerResponseCode: valid values are %v", v, AllowedPowerResponseCodeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PowerResponseCode) IsValid() bool {
	for _, existing := range AllowedPowerResponseCodeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PowerResponseCode value
func (v PowerResponseCode) Ptr() *PowerResponseCode {
	return &v
}

type NullablePowerResponseCode struct {
	value *PowerResponseCode
	isSet bool
}

func (v NullablePowerResponseCode) Get() *PowerResponseCode {
	return v.value
}

func (v *NullablePowerResponseCode) Set(val *PowerResponseCode) {
	v.value = val
	v.isSet = true
}

func (v NullablePowerResponseCode) IsSet() bool {
	return v.isSet
}

func (v *NullablePowerResponseCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePowerResponseCode(val *PowerResponseCode) *NullablePowerResponseCode {
	return &NullablePowerResponseCode{value: val, isSet: true}
}

func (v NullablePowerResponseCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePowerResponseCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
