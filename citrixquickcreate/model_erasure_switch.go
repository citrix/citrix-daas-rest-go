/*
Quick Create Service for DaaS Quick Deploy with AWS WorkSpaces Core - Tech Preview

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: DaaSTechPreview
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickcreate

import (
	"encoding/json"
	"fmt"
)

// ErasureSwitch the model 'ErasureSwitch'
type ErasureSwitch string

// List of ErasureSwitch
const (
	ERASURESWITCH_DRY_RUN ErasureSwitch = "DryRun"
	ERASURESWITCH_CONFIRM ErasureSwitch = "Confirm"
)

// All allowed values of ErasureSwitch enum
var AllowedErasureSwitchEnumValues = []ErasureSwitch{
	"DryRun",
	"Confirm",
}

func (v *ErasureSwitch) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ErasureSwitch(value)
	for _, existing := range AllowedErasureSwitchEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ErasureSwitch", value)
}

// NewErasureSwitchFromValue returns a pointer to a valid ErasureSwitch
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewErasureSwitchFromValue(v string) (*ErasureSwitch, error) {
	ev := ErasureSwitch(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ErasureSwitch: valid values are %v", v, AllowedErasureSwitchEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ErasureSwitch) IsValid() bool {
	for _, existing := range AllowedErasureSwitchEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ErasureSwitch value
func (v ErasureSwitch) Ptr() *ErasureSwitch {
	return &v
}

type NullableErasureSwitch struct {
	value *ErasureSwitch
	isSet bool
}

func (v NullableErasureSwitch) Get() *ErasureSwitch {
	return v.value
}

func (v *NullableErasureSwitch) Set(val *ErasureSwitch) {
	v.value = val
	v.isSet = true
}

func (v NullableErasureSwitch) IsSet() bool {
	return v.isSet
}

func (v *NullableErasureSwitch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErasureSwitch(val *ErasureSwitch) *NullableErasureSwitch {
	return &NullableErasureSwitch{value: val, isSet: true}
}

func (v NullableErasureSwitch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErasureSwitch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
