/*
Quick Create Service for DaaS Quick Deploy with AWS WorkSpaces Core - Tech Preview

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: DaaSTechPreview
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickcreate

import (
	"encoding/json"
)

// checks if the AwsEdcAccountResourceRegion type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AwsEdcAccountResourceRegion{}

// AwsEdcAccountResourceRegion struct for AwsEdcAccountResourceRegion
type AwsEdcAccountResourceRegion struct {
	AwsEdcAccountResource
	// The names of the regions
	RegionNames []string `json:"regionNames,omitempty"`
	// The list of regions including their names, codes and supported az ids
	Regions []AwsWorkspaceRegion `json:"regions,omitempty"`
}

type _AwsEdcAccountResourceRegion AwsEdcAccountResourceRegion

// NewAwsEdcAccountResourceRegion instantiates a new AwsEdcAccountResourceRegion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAwsEdcAccountResourceRegion(resourceType AwsAccountResourceType, accountType AccountType) *AwsEdcAccountResourceRegion {
	this := AwsEdcAccountResourceRegion{}
	this.ResourceType = resourceType
	this.AccountType = accountType
	return &this
}

// NewAwsEdcAccountResourceRegionWithDefaults instantiates a new AwsEdcAccountResourceRegion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAwsEdcAccountResourceRegionWithDefaults() *AwsEdcAccountResourceRegion {
	this := AwsEdcAccountResourceRegion{}
	return &this
}

// GetRegionNames returns the RegionNames field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AwsEdcAccountResourceRegion) GetRegionNames() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.RegionNames
}

// GetRegionNamesOk returns a tuple with the RegionNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsEdcAccountResourceRegion) GetRegionNamesOk() ([]string, bool) {
	if o == nil || IsNil(o.RegionNames) {
		return nil, false
	}
	return o.RegionNames, true
}

// HasRegionNames returns a boolean if a field has been set.
func (o *AwsEdcAccountResourceRegion) HasRegionNames() bool {
	if o != nil && !IsNil(o.RegionNames) {
		return true
	}

	return false
}

// SetRegionNames gets a reference to the given []string and assigns it to the RegionNames field.
func (o *AwsEdcAccountResourceRegion) SetRegionNames(v []string) {
	o.RegionNames = v
}

// GetRegions returns the Regions field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AwsEdcAccountResourceRegion) GetRegions() []AwsWorkspaceRegion {
	if o == nil {
		var ret []AwsWorkspaceRegion
		return ret
	}
	return o.Regions
}

// GetRegionsOk returns a tuple with the Regions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsEdcAccountResourceRegion) GetRegionsOk() ([]AwsWorkspaceRegion, bool) {
	if o == nil || IsNil(o.Regions) {
		return nil, false
	}
	return o.Regions, true
}

// HasRegions returns a boolean if a field has been set.
func (o *AwsEdcAccountResourceRegion) HasRegions() bool {
	if o != nil && !IsNil(o.Regions) {
		return true
	}

	return false
}

// SetRegions gets a reference to the given []AwsWorkspaceRegion and assigns it to the Regions field.
func (o *AwsEdcAccountResourceRegion) SetRegions(v []AwsWorkspaceRegion) {
	o.Regions = v
}

func (o AwsEdcAccountResourceRegion) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AwsEdcAccountResourceRegion) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedAwsEdcAccountResource, errAwsEdcAccountResource := json.Marshal(o.AwsEdcAccountResource)
	if errAwsEdcAccountResource != nil {
		return map[string]interface{}{}, errAwsEdcAccountResource
	}
	errAwsEdcAccountResource = json.Unmarshal([]byte(serializedAwsEdcAccountResource), &toSerialize)
	if errAwsEdcAccountResource != nil {
		return map[string]interface{}{}, errAwsEdcAccountResource
	}
	if o.RegionNames != nil {
		toSerialize["regionNames"] = o.RegionNames
	}
	if o.Regions != nil {
		toSerialize["regions"] = o.Regions
	}
	return toSerialize, nil
}

type NullableAwsEdcAccountResourceRegion struct {
	value *AwsEdcAccountResourceRegion
	isSet bool
}

func (v NullableAwsEdcAccountResourceRegion) Get() *AwsEdcAccountResourceRegion {
	return v.value
}

func (v *NullableAwsEdcAccountResourceRegion) Set(val *AwsEdcAccountResourceRegion) {
	v.value = val
	v.isSet = true
}

func (v NullableAwsEdcAccountResourceRegion) IsSet() bool {
	return v.isSet
}

func (v *NullableAwsEdcAccountResourceRegion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAwsEdcAccountResourceRegion(val *AwsEdcAccountResourceRegion) *NullableAwsEdcAccountResourceRegion {
	return &NullableAwsEdcAccountResourceRegion{value: val, isSet: true}
}

func (v NullableAwsEdcAccountResourceRegion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAwsEdcAccountResourceRegion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
