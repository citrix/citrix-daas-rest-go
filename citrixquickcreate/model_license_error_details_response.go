/*
Quick Create Service for DaaS Quick Deploy with AWS WorkSpaces Core - Tech Preview

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: DaaSTechPreview
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickcreate

import (
	"encoding/json"
)

// checks if the LicenseErrorDetailsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LicenseErrorDetailsResponse{}

// LicenseErrorDetailsResponse Response Object for Licensing API request
type LicenseErrorDetailsResponse struct {
	LicenseStatus []ResponseDetailsLicenseAssignment `json:"licenseStatus,omitempty"`
}

// NewLicenseErrorDetailsResponse instantiates a new LicenseErrorDetailsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLicenseErrorDetailsResponse() *LicenseErrorDetailsResponse {
	this := LicenseErrorDetailsResponse{}
	return &this
}

// NewLicenseErrorDetailsResponseWithDefaults instantiates a new LicenseErrorDetailsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLicenseErrorDetailsResponseWithDefaults() *LicenseErrorDetailsResponse {
	this := LicenseErrorDetailsResponse{}
	return &this
}

// GetLicenseStatus returns the LicenseStatus field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LicenseErrorDetailsResponse) GetLicenseStatus() []ResponseDetailsLicenseAssignment {
	if o == nil {
		var ret []ResponseDetailsLicenseAssignment
		return ret
	}
	return o.LicenseStatus
}

// GetLicenseStatusOk returns a tuple with the LicenseStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LicenseErrorDetailsResponse) GetLicenseStatusOk() ([]ResponseDetailsLicenseAssignment, bool) {
	if o == nil || IsNil(o.LicenseStatus) {
		return nil, false
	}
	return o.LicenseStatus, true
}

// HasLicenseStatus returns a boolean if a field has been set.
func (o *LicenseErrorDetailsResponse) HasLicenseStatus() bool {
	if o != nil && !IsNil(o.LicenseStatus) {
		return true
	}

	return false
}

// SetLicenseStatus gets a reference to the given []ResponseDetailsLicenseAssignment and assigns it to the LicenseStatus field.
func (o *LicenseErrorDetailsResponse) SetLicenseStatus(v []ResponseDetailsLicenseAssignment) {
	o.LicenseStatus = v
}

func (o LicenseErrorDetailsResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LicenseErrorDetailsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.LicenseStatus != nil {
		toSerialize["licenseStatus"] = o.LicenseStatus
	}
	return toSerialize, nil
}

type NullableLicenseErrorDetailsResponse struct {
	value *LicenseErrorDetailsResponse
	isSet bool
}

func (v NullableLicenseErrorDetailsResponse) Get() *LicenseErrorDetailsResponse {
	return v.value
}

func (v *NullableLicenseErrorDetailsResponse) Set(val *LicenseErrorDetailsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableLicenseErrorDetailsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableLicenseErrorDetailsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLicenseErrorDetailsResponse(val *LicenseErrorDetailsResponse) *NullableLicenseErrorDetailsResponse {
	return &NullableLicenseErrorDetailsResponse{value: val, isSet: true}
}

func (v NullableLicenseErrorDetailsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLicenseErrorDetailsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
