/*
Quick Create Service for DaaS Quick Deploy with AWS WorkSpaces Core - Tech Preview

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: DaaSTechPreview
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickcreate

import (
	"encoding/json"
)

// checks if the TaskError type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TaskError{}

// TaskError Deployment Task Error
type TaskError struct {
	// Error Id
	ErrorId NullableString `json:"errorId,omitempty"`
	// Error Message
	Message NullableString `json:"message,omitempty"`
	// Error Message
	Exception interface{} `json:"exception,omitempty"`
}

// NewTaskError instantiates a new TaskError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaskError() *TaskError {
	this := TaskError{}
	return &this
}

// NewTaskErrorWithDefaults instantiates a new TaskError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaskErrorWithDefaults() *TaskError {
	this := TaskError{}
	return &this
}

// GetErrorId returns the ErrorId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskError) GetErrorId() string {
	if o == nil || IsNil(o.ErrorId.Get()) {
		var ret string
		return ret
	}
	return *o.ErrorId.Get()
}

// GetErrorIdOk returns a tuple with the ErrorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskError) GetErrorIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ErrorId.Get(), o.ErrorId.IsSet()
}

// HasErrorId returns a boolean if a field has been set.
func (o *TaskError) HasErrorId() bool {
	if o != nil && o.ErrorId.IsSet() {
		return true
	}

	return false
}

// SetErrorId gets a reference to the given NullableString and assigns it to the ErrorId field.
func (o *TaskError) SetErrorId(v string) {
	o.ErrorId.Set(&v)
}
// SetErrorIdNil sets the value for ErrorId to be an explicit nil
func (o *TaskError) SetErrorIdNil() {
	o.ErrorId.Set(nil)
}

// UnsetErrorId ensures that no value is present for ErrorId, not even an explicit nil
func (o *TaskError) UnsetErrorId() {
	o.ErrorId.Unset()
}

// GetMessage returns the Message field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskError) GetMessage() string {
	if o == nil || IsNil(o.Message.Get()) {
		var ret string
		return ret
	}
	return *o.Message.Get()
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskError) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Message.Get(), o.Message.IsSet()
}

// HasMessage returns a boolean if a field has been set.
func (o *TaskError) HasMessage() bool {
	if o != nil && o.Message.IsSet() {
		return true
	}

	return false
}

// SetMessage gets a reference to the given NullableString and assigns it to the Message field.
func (o *TaskError) SetMessage(v string) {
	o.Message.Set(&v)
}
// SetMessageNil sets the value for Message to be an explicit nil
func (o *TaskError) SetMessageNil() {
	o.Message.Set(nil)
}

// UnsetMessage ensures that no value is present for Message, not even an explicit nil
func (o *TaskError) UnsetMessage() {
	o.Message.Unset()
}

// GetException returns the Exception field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskError) GetException() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Exception
}

// GetExceptionOk returns a tuple with the Exception field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskError) GetExceptionOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Exception) {
		return nil, false
	}
	return &o.Exception, true
}

// HasException returns a boolean if a field has been set.
func (o *TaskError) HasException() bool {
	if o != nil && IsNil(o.Exception) {
		return true
	}

	return false
}

// SetException gets a reference to the given interface{} and assigns it to the Exception field.
func (o *TaskError) SetException(v interface{}) {
	o.Exception = v
}

func (o TaskError) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TaskError) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ErrorId.IsSet() {
		toSerialize["errorId"] = o.ErrorId.Get()
	}
	if o.Message.IsSet() {
		toSerialize["message"] = o.Message.Get()
	}
	if o.Exception != nil {
		toSerialize["exception"] = o.Exception
	}
	return toSerialize, nil
}

type NullableTaskError struct {
	value *TaskError
	isSet bool
}

func (v NullableTaskError) Get() *TaskError {
	return v.value
}

func (v *NullableTaskError) Set(val *TaskError) {
	v.value = val
	v.isSet = true
}

func (v NullableTaskError) IsSet() bool {
	return v.isSet
}

func (v *NullableTaskError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaskError(val *TaskError) *NullableTaskError {
	return &NullableTaskError{value: val, isSet: true}
}

func (v NullableTaskError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaskError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


