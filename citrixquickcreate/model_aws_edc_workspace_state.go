/*
Quick Create Service for DaaS Quick Deploy with AWS WorkSpaces Core - Tech Preview

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: DaaSTechPreview
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickcreate

import (
	"encoding/json"
	"fmt"
)

// AwsEdcWorkspaceState the model 'AwsEdcWorkspaceState'
type AwsEdcWorkspaceState string

// List of AwsEdcWorkspaceState
const (
	AWSEDCWORKSPACESTATE_PENDING         AwsEdcWorkspaceState = "PENDING"
	AWSEDCWORKSPACESTATE_AVAILABLE       AwsEdcWorkspaceState = "AVAILABLE"
	AWSEDCWORKSPACESTATE_ADMIN_MAINTANCE AwsEdcWorkspaceState = "ADMIN_MAINTANCE"
	AWSEDCWORKSPACESTATE_ERROR           AwsEdcWorkspaceState = "ERROR"
	AWSEDCWORKSPACESTATE_STOPPED         AwsEdcWorkspaceState = "STOPPED"
	AWSEDCWORKSPACESTATE_STOPPING        AwsEdcWorkspaceState = "STOPPING"
	AWSEDCWORKSPACESTATE_SUSPENDED       AwsEdcWorkspaceState = "SUSPENDED"
	AWSEDCWORKSPACESTATE_TERMINATED      AwsEdcWorkspaceState = "TERMINATED"
	AWSEDCWORKSPACESTATE_TERMINATING     AwsEdcWorkspaceState = "TERMINATING"
	AWSEDCWORKSPACESTATE_STARTING        AwsEdcWorkspaceState = "STARTING"
	AWSEDCWORKSPACESTATE_REBOOTING       AwsEdcWorkspaceState = "REBOOTING"
	AWSEDCWORKSPACESTATE_MAINTENANCE     AwsEdcWorkspaceState = "MAINTENANCE"
	AWSEDCWORKSPACESTATE_IMPARED         AwsEdcWorkspaceState = "IMPARED"
	AWSEDCWORKSPACESTATE_UNHEALTHY       AwsEdcWorkspaceState = "UNHEALTHY"
	AWSEDCWORKSPACESTATE_UPDATING        AwsEdcWorkspaceState = "UPDATING"
)

// All allowed values of AwsEdcWorkspaceState enum
var AllowedAwsEdcWorkspaceStateEnumValues = []AwsEdcWorkspaceState{
	"PENDING",
	"AVAILABLE",
	"ADMIN_MAINTANCE",
	"ERROR",
	"STOPPED",
	"STOPPING",
	"SUSPENDED",
	"TERMINATED",
	"TERMINATING",
	"STARTING",
	"REBOOTING",
	"MAINTENANCE",
	"IMPARED",
	"UNHEALTHY",
	"UPDATING",
}

func (v *AwsEdcWorkspaceState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AwsEdcWorkspaceState(value)
	for _, existing := range AllowedAwsEdcWorkspaceStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AwsEdcWorkspaceState", value)
}

// NewAwsEdcWorkspaceStateFromValue returns a pointer to a valid AwsEdcWorkspaceState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAwsEdcWorkspaceStateFromValue(v string) (*AwsEdcWorkspaceState, error) {
	ev := AwsEdcWorkspaceState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AwsEdcWorkspaceState: valid values are %v", v, AllowedAwsEdcWorkspaceStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AwsEdcWorkspaceState) IsValid() bool {
	for _, existing := range AllowedAwsEdcWorkspaceStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AwsEdcWorkspaceState value
func (v AwsEdcWorkspaceState) Ptr() *AwsEdcWorkspaceState {
	return &v
}

type NullableAwsEdcWorkspaceState struct {
	value *AwsEdcWorkspaceState
	isSet bool
}

func (v NullableAwsEdcWorkspaceState) Get() *AwsEdcWorkspaceState {
	return v.value
}

func (v *NullableAwsEdcWorkspaceState) Set(val *AwsEdcWorkspaceState) {
	v.value = val
	v.isSet = true
}

func (v NullableAwsEdcWorkspaceState) IsSet() bool {
	return v.isSet
}

func (v *NullableAwsEdcWorkspaceState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAwsEdcWorkspaceState(val *AwsEdcWorkspaceState) *NullableAwsEdcWorkspaceState {
	return &NullableAwsEdcWorkspaceState{value: val, isSet: true}
}

func (v NullableAwsEdcWorkspaceState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAwsEdcWorkspaceState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
