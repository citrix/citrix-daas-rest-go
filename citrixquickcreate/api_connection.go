/*
Quick Create Service for DaaS Quick Deploy with AWS WorkSpaces Core - Tech Preview

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: DaaSTechPreview
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickcreate

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// ConnectionQCSService ConnectionQCS service
type ConnectionQCSService service

type ConnectionQCSAddResourceConnectionAsyncRequest struct {
	ctx                 context.Context
	ApiService          *ConnectionQCSService
	customerId          string
	accountId           string
	citrixTransactionId *string
	body                *AddAwsEdcDirectoryConnection
}

// The Transaction Id.
func (r ConnectionQCSAddResourceConnectionAsyncRequest) CitrixTransactionId(citrixTransactionId string) ConnectionQCSAddResourceConnectionAsyncRequest {
	r.citrixTransactionId = &citrixTransactionId
	return r
}

// Connection configuration
func (r ConnectionQCSAddResourceConnectionAsyncRequest) Body(body AddAwsEdcDirectoryConnection) ConnectionQCSAddResourceConnectionAsyncRequest {
	r.body = &body
	return r
}

func (r ConnectionQCSAddResourceConnectionAsyncRequest) Execute() (*ResourceConnectionTask, *http.Response, error) {
	return r.ApiService.AddResourceConnectionAsyncExecute(r)
}

/*
AddResourceConnectionAsync Adds resource connection asyncronously

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param customerId ID of the customer
	@param accountId ID of account
	@return ConnectionQCSAddResourceConnectionAsyncRequest
*/
func (a *ConnectionQCSService) AddResourceConnectionAsync(ctx context.Context, customerId string, accountId string) ConnectionQCSAddResourceConnectionAsyncRequest {
	return ConnectionQCSAddResourceConnectionAsyncRequest{
		ApiService: a,
		ctx:        ctx,
		customerId: customerId,
		accountId:  accountId,
	}
}

// Execute executes the request
//
//	@return ResourceConnectionTask
func (a *ConnectionQCSService) AddResourceConnectionAsyncExecute(r ConnectionQCSAddResourceConnectionAsyncRequest) (*ResourceConnectionTask, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ResourceConnectionTask
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConnectionQCSService.AddResourceConnectionAsync")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{customerId}/accounts/{accountId}/connections/$initiate"
	localVarPath = strings.Replace(localVarPath, "{"+"customerId"+"}", url.PathEscape(parameterValueToString(r.customerId, "customerId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.citrixTransactionId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-TransactionId", r.citrixTransactionId, "simple", "")
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CWSAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConnectionQCSGetAllResourceConnectionsAsyncRequest struct {
	ctx                 context.Context
	ApiService          *ConnectionQCSService
	customerId          string
	accountType         *AccountType
	citrixTransactionId *string
}

// Filtering parameter for account type
func (r ConnectionQCSGetAllResourceConnectionsAsyncRequest) AccountType(accountType AccountType) ConnectionQCSGetAllResourceConnectionsAsyncRequest {
	r.accountType = &accountType
	return r
}

// The Transaction Id.
func (r ConnectionQCSGetAllResourceConnectionsAsyncRequest) CitrixTransactionId(citrixTransactionId string) ConnectionQCSGetAllResourceConnectionsAsyncRequest {
	r.citrixTransactionId = &citrixTransactionId
	return r
}

func (r ConnectionQCSGetAllResourceConnectionsAsyncRequest) Execute() (*ResourceConnections, *http.Response, error) {
	return r.ApiService.GetAllResourceConnectionsAsyncExecute(r)
}

/*
GetAllResourceConnectionsAsync Gets all resource connections without specifying account

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param customerId ID of the customer
	@return ConnectionQCSGetAllResourceConnectionsAsyncRequest
*/
func (a *ConnectionQCSService) GetAllResourceConnectionsAsync(ctx context.Context, customerId string) ConnectionQCSGetAllResourceConnectionsAsyncRequest {
	return ConnectionQCSGetAllResourceConnectionsAsyncRequest{
		ApiService: a,
		ctx:        ctx,
		customerId: customerId,
	}
}

// Execute executes the request
//
//	@return ResourceConnections
func (a *ConnectionQCSService) GetAllResourceConnectionsAsyncExecute(r ConnectionQCSGetAllResourceConnectionsAsyncRequest) (*ResourceConnections, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ResourceConnections
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConnectionQCSService.GetAllResourceConnectionsAsync")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{customerId}/connections"
	localVarPath = strings.Replace(localVarPath, "{"+"customerId"+"}", url.PathEscape(parameterValueToString(r.customerId, "customerId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.accountType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "accountType", r.accountType, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.citrixTransactionId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-TransactionId", r.citrixTransactionId, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CWSAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConnectionQCSGetResourceConnectionAsyncRequest struct {
	ctx                 context.Context
	ApiService          *ConnectionQCSService
	customerId          string
	accountId           string
	connectionId        string
	citrixTransactionId *string
}

// The Transaction Id.
func (r ConnectionQCSGetResourceConnectionAsyncRequest) CitrixTransactionId(citrixTransactionId string) ConnectionQCSGetResourceConnectionAsyncRequest {
	r.citrixTransactionId = &citrixTransactionId
	return r
}

func (r ConnectionQCSGetResourceConnectionAsyncRequest) Execute() (*AwsEdcDirectoryConnection, *http.Response, error) {
	return r.ApiService.GetResourceConnectionAsyncExecute(r)
}

/*
GetResourceConnectionAsync Gets resource connection

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param customerId ID of the customer
	@param accountId ID of account
	@param connectionId ID of connection
	@return ConnectionQCSGetResourceConnectionAsyncRequest
*/
func (a *ConnectionQCSService) GetResourceConnectionAsync(ctx context.Context, customerId string, accountId string, connectionId string) ConnectionQCSGetResourceConnectionAsyncRequest {
	return ConnectionQCSGetResourceConnectionAsyncRequest{
		ApiService:   a,
		ctx:          ctx,
		customerId:   customerId,
		accountId:    accountId,
		connectionId: connectionId,
	}
}

// Execute executes the request
//
//	@return AwsEdcDirectoryConnection
func (a *ConnectionQCSService) GetResourceConnectionAsyncExecute(r ConnectionQCSGetResourceConnectionAsyncRequest) (*AwsEdcDirectoryConnection, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AwsEdcDirectoryConnection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConnectionQCSService.GetResourceConnectionAsync")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{customerId}/accounts/{accountId}/connections/{connectionId}"
	localVarPath = strings.Replace(localVarPath, "{"+"customerId"+"}", url.PathEscape(parameterValueToString(r.customerId, "customerId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"connectionId"+"}", url.PathEscape(parameterValueToString(r.connectionId, "connectionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.citrixTransactionId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-TransactionId", r.citrixTransactionId, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CWSAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConnectionQCSGetResourceConnectionsAsyncRequest struct {
	ctx                 context.Context
	ApiService          *ConnectionQCSService
	customerId          string
	accountId           string
	citrixManaged       *bool
	citrixTransactionId *string
}

// citrix managed connections
func (r ConnectionQCSGetResourceConnectionsAsyncRequest) CitrixManaged(citrixManaged bool) ConnectionQCSGetResourceConnectionsAsyncRequest {
	r.citrixManaged = &citrixManaged
	return r
}

// The Transaction Id.
func (r ConnectionQCSGetResourceConnectionsAsyncRequest) CitrixTransactionId(citrixTransactionId string) ConnectionQCSGetResourceConnectionsAsyncRequest {
	r.citrixTransactionId = &citrixTransactionId
	return r
}

func (r ConnectionQCSGetResourceConnectionsAsyncRequest) Execute() (*ResourceConnections, *http.Response, error) {
	return r.ApiService.GetResourceConnectionsAsyncExecute(r)
}

/*
GetResourceConnectionsAsync Gets resource connections

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param customerId ID of the customer
	@param accountId ID of account
	@return ConnectionQCSGetResourceConnectionsAsyncRequest
*/
func (a *ConnectionQCSService) GetResourceConnectionsAsync(ctx context.Context, customerId string, accountId string) ConnectionQCSGetResourceConnectionsAsyncRequest {
	return ConnectionQCSGetResourceConnectionsAsyncRequest{
		ApiService: a,
		ctx:        ctx,
		customerId: customerId,
		accountId:  accountId,
	}
}

// Execute executes the request
//
//	@return ResourceConnections
func (a *ConnectionQCSService) GetResourceConnectionsAsyncExecute(r ConnectionQCSGetResourceConnectionsAsyncRequest) (*ResourceConnections, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ResourceConnections
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConnectionQCSService.GetResourceConnectionsAsync")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{customerId}/accounts/{accountId}/connections"
	localVarPath = strings.Replace(localVarPath, "{"+"customerId"+"}", url.PathEscape(parameterValueToString(r.customerId, "customerId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.citrixManaged != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "citrixManaged", r.citrixManaged, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.citrixTransactionId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-TransactionId", r.citrixTransactionId, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CWSAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConnectionQCSModifyResourceConnectionAsyncRequest struct {
	ctx                 context.Context
	ApiService          *ConnectionQCSService
	customerId          string
	accountId           string
	connectionId        string
	citrixTransactionId *string
	body                *UpdateAwsEdcDirectoryConnection
}

// The Transaction Id.
func (r ConnectionQCSModifyResourceConnectionAsyncRequest) CitrixTransactionId(citrixTransactionId string) ConnectionQCSModifyResourceConnectionAsyncRequest {
	r.citrixTransactionId = &citrixTransactionId
	return r
}

// Update configuration
func (r ConnectionQCSModifyResourceConnectionAsyncRequest) Body(body UpdateAwsEdcDirectoryConnection) ConnectionQCSModifyResourceConnectionAsyncRequest {
	r.body = &body
	return r
}

func (r ConnectionQCSModifyResourceConnectionAsyncRequest) Execute() (*AwsEdcDirectoryConnection, *http.Response, error) {
	return r.ApiService.ModifyResourceConnectionAsyncExecute(r)
}

/*
ModifyResourceConnectionAsync Modifies connection

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param customerId ID of the customer
	@param accountId ID of account
	@param connectionId ID of connection
	@return ConnectionQCSModifyResourceConnectionAsyncRequest
*/
func (a *ConnectionQCSService) ModifyResourceConnectionAsync(ctx context.Context, customerId string, accountId string, connectionId string) ConnectionQCSModifyResourceConnectionAsyncRequest {
	return ConnectionQCSModifyResourceConnectionAsyncRequest{
		ApiService:   a,
		ctx:          ctx,
		customerId:   customerId,
		accountId:    accountId,
		connectionId: connectionId,
	}
}

// Execute executes the request
//
//	@return AwsEdcDirectoryConnection
func (a *ConnectionQCSService) ModifyResourceConnectionAsyncExecute(r ConnectionQCSModifyResourceConnectionAsyncRequest) (*AwsEdcDirectoryConnection, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AwsEdcDirectoryConnection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConnectionQCSService.ModifyResourceConnectionAsync")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{customerId}/accounts/{accountId}/connections/{connectionId}"
	localVarPath = strings.Replace(localVarPath, "{"+"customerId"+"}", url.PathEscape(parameterValueToString(r.customerId, "customerId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"connectionId"+"}", url.PathEscape(parameterValueToString(r.connectionId, "connectionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.citrixTransactionId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-TransactionId", r.citrixTransactionId, "simple", "")
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CWSAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConnectionQCSRemoveResourceConnectionAsyncRequest struct {
	ctx                 context.Context
	ApiService          *ConnectionQCSService
	customerId          string
	accountId           string
	connectionId        string
	forceDelete         *bool
	citrixTransactionId *string
}

// Force delete a connection
func (r ConnectionQCSRemoveResourceConnectionAsyncRequest) ForceDelete(forceDelete bool) ConnectionQCSRemoveResourceConnectionAsyncRequest {
	r.forceDelete = &forceDelete
	return r
}

// The Transaction Id.
func (r ConnectionQCSRemoveResourceConnectionAsyncRequest) CitrixTransactionId(citrixTransactionId string) ConnectionQCSRemoveResourceConnectionAsyncRequest {
	r.citrixTransactionId = &citrixTransactionId
	return r
}

func (r ConnectionQCSRemoveResourceConnectionAsyncRequest) Execute() (*ResourceConnectionTask, *http.Response, error) {
	return r.ApiService.RemoveResourceConnectionAsyncExecute(r)
}

/*
RemoveResourceConnectionAsync Removes connection

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param customerId ID of the customer
	@param accountId ID of account
	@param connectionId ID of connection
	@return ConnectionQCSRemoveResourceConnectionAsyncRequest
*/
func (a *ConnectionQCSService) RemoveResourceConnectionAsync(ctx context.Context, customerId string, accountId string, connectionId string) ConnectionQCSRemoveResourceConnectionAsyncRequest {
	return ConnectionQCSRemoveResourceConnectionAsyncRequest{
		ApiService:   a,
		ctx:          ctx,
		customerId:   customerId,
		accountId:    accountId,
		connectionId: connectionId,
	}
}

// Execute executes the request
//
//	@return ResourceConnectionTask
func (a *ConnectionQCSService) RemoveResourceConnectionAsyncExecute(r ConnectionQCSRemoveResourceConnectionAsyncRequest) (*ResourceConnectionTask, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodDelete
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ResourceConnectionTask
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConnectionQCSService.RemoveResourceConnectionAsync")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{customerId}/accounts/{accountId}/connections/{connectionId}"
	localVarPath = strings.Replace(localVarPath, "{"+"customerId"+"}", url.PathEscape(parameterValueToString(r.customerId, "customerId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"connectionId"+"}", url.PathEscape(parameterValueToString(r.connectionId, "connectionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.forceDelete != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "forceDelete", r.forceDelete, "form", "")
	} else {
		var defaultValue bool = false
		r.forceDelete = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.citrixTransactionId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-TransactionId", r.citrixTransactionId, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CWSAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
