/*
Quick Create Service for DaaS Quick Deploy with AWS WorkSpaces Core - Tech Preview

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: DaaSTechPreview
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickcreate

import (
	"encoding/json"
)

// checks if the ImportAwsEdcImage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ImportAwsEdcImage{}

// ImportAwsEdcImage struct for ImportAwsEdcImage
type ImportAwsEdcImage struct {
	ImportImage
	// Source Image Id
	Ec2ImageId string `json:"ec2ImageId"`
	// Ingestion Process used during image import
	IngestionProcess *AwsEdcWorkspaceImageIngestionProcess `json:"ingestionProcess,omitempty"`
	// The list of installed applications
	ApplicationList []AwsEdcAmiImportApplications `json:"applicationList,omitempty"`
}

type _ImportAwsEdcImage ImportAwsEdcImage

// NewImportAwsEdcImage instantiates a new ImportAwsEdcImage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImportAwsEdcImage(ec2ImageId string, accountType AccountType, name string) *ImportAwsEdcImage {
	this := ImportAwsEdcImage{}
	this.AccountType = accountType
	this.Name = name
	return &this
}

// NewImportAwsEdcImageWithDefaults instantiates a new ImportAwsEdcImage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImportAwsEdcImageWithDefaults() *ImportAwsEdcImage {
	this := ImportAwsEdcImage{}
	return &this
}

// GetEc2ImageId returns the Ec2ImageId field value
func (o *ImportAwsEdcImage) GetEc2ImageId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Ec2ImageId
}

// GetEc2ImageIdOk returns a tuple with the Ec2ImageId field value
// and a boolean to check if the value has been set.
func (o *ImportAwsEdcImage) GetEc2ImageIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ec2ImageId, true
}

// SetEc2ImageId sets field value
func (o *ImportAwsEdcImage) SetEc2ImageId(v string) {
	o.Ec2ImageId = v
}

// GetIngestionProcess returns the IngestionProcess field value if set, zero value otherwise.
func (o *ImportAwsEdcImage) GetIngestionProcess() AwsEdcWorkspaceImageIngestionProcess {
	if o == nil || IsNil(o.IngestionProcess) {
		var ret AwsEdcWorkspaceImageIngestionProcess
		return ret
	}
	return *o.IngestionProcess
}

// GetIngestionProcessOk returns a tuple with the IngestionProcess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportAwsEdcImage) GetIngestionProcessOk() (*AwsEdcWorkspaceImageIngestionProcess, bool) {
	if o == nil || IsNil(o.IngestionProcess) {
		return nil, false
	}
	return o.IngestionProcess, true
}

// HasIngestionProcess returns a boolean if a field has been set.
func (o *ImportAwsEdcImage) HasIngestionProcess() bool {
	if o != nil && !IsNil(o.IngestionProcess) {
		return true
	}

	return false
}

// SetIngestionProcess gets a reference to the given AwsEdcWorkspaceImageIngestionProcess and assigns it to the IngestionProcess field.
func (o *ImportAwsEdcImage) SetIngestionProcess(v AwsEdcWorkspaceImageIngestionProcess) {
	o.IngestionProcess = &v
}

// GetApplicationList returns the ApplicationList field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ImportAwsEdcImage) GetApplicationList() []AwsEdcAmiImportApplications {
	if o == nil {
		var ret []AwsEdcAmiImportApplications
		return ret
	}
	return o.ApplicationList
}

// GetApplicationListOk returns a tuple with the ApplicationList field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ImportAwsEdcImage) GetApplicationListOk() ([]AwsEdcAmiImportApplications, bool) {
	if o == nil || IsNil(o.ApplicationList) {
		return nil, false
	}
	return o.ApplicationList, true
}

// HasApplicationList returns a boolean if a field has been set.
func (o *ImportAwsEdcImage) HasApplicationList() bool {
	if o != nil && !IsNil(o.ApplicationList) {
		return true
	}

	return false
}

// SetApplicationList gets a reference to the given []AwsEdcAmiImportApplications and assigns it to the ApplicationList field.
func (o *ImportAwsEdcImage) SetApplicationList(v []AwsEdcAmiImportApplications) {
	o.ApplicationList = v
}

func (o ImportAwsEdcImage) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ImportAwsEdcImage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedImportImage, errImportImage := json.Marshal(o.ImportImage)
	if errImportImage != nil {
		return map[string]interface{}{}, errImportImage
	}
	errImportImage = json.Unmarshal([]byte(serializedImportImage), &toSerialize)
	if errImportImage != nil {
		return map[string]interface{}{}, errImportImage
	}
	toSerialize["ec2ImageId"] = o.Ec2ImageId
	if !IsNil(o.IngestionProcess) {
		toSerialize["ingestionProcess"] = o.IngestionProcess
	}
	if o.ApplicationList != nil {
		toSerialize["applicationList"] = o.ApplicationList
	}
	return toSerialize, nil
}

type NullableImportAwsEdcImage struct {
	value *ImportAwsEdcImage
	isSet bool
}

func (v NullableImportAwsEdcImage) Get() *ImportAwsEdcImage {
	return v.value
}

func (v *NullableImportAwsEdcImage) Set(val *ImportAwsEdcImage) {
	v.value = val
	v.isSet = true
}

func (v NullableImportAwsEdcImage) IsSet() bool {
	return v.isSet
}

func (v *NullableImportAwsEdcImage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImportAwsEdcImage(val *ImportAwsEdcImage) *NullableImportAwsEdcImage {
	return &NullableImportAwsEdcImage{value: val, isSet: true}
}

func (v NullableImportAwsEdcImage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImportAwsEdcImage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
