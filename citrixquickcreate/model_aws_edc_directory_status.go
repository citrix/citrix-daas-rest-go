/*
Quick Create Service for DaaS Quick Deploy with AWS WorkSpaces Core - Tech Preview

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: DaaSTechPreview
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickcreate

import (
	"encoding/json"
	"fmt"
)

// AwsEdcDirectoryStatus the model 'AwsEdcDirectoryStatus'
type AwsEdcDirectoryStatus string

// List of AwsEdcDirectoryStatus
const (
	AWSEDCDIRECTORYSTATUS_ACTIVE AwsEdcDirectoryStatus = "ACTIVE"
	AWSEDCDIRECTORYSTATUS_CREATED AwsEdcDirectoryStatus = "CREATED"
	AWSEDCDIRECTORYSTATUS_CREATING AwsEdcDirectoryStatus = "CREATING"
	AWSEDCDIRECTORYSTATUS_DELETED AwsEdcDirectoryStatus = "DELETED"
	AWSEDCDIRECTORYSTATUS_DELETING AwsEdcDirectoryStatus = "DELETING"
	AWSEDCDIRECTORYSTATUS_FAILED AwsEdcDirectoryStatus = "FAILED"
	AWSEDCDIRECTORYSTATUS_IMPARED AwsEdcDirectoryStatus = "IMPARED"
	AWSEDCDIRECTORYSTATUS_INOPERABLE AwsEdcDirectoryStatus = "INOPERABLE"
	AWSEDCDIRECTORYSTATUS_REQUESTED AwsEdcDirectoryStatus = "REQUESTED"
	AWSEDCDIRECTORYSTATUS_RESTOREFAILED AwsEdcDirectoryStatus = "RESTOREFAILED"
	AWSEDCDIRECTORYSTATUS_RESTORING AwsEdcDirectoryStatus = "RESTORING"
)

// All allowed values of AwsEdcDirectoryStatus enum
var AllowedAwsEdcDirectoryStatusEnumValues = []AwsEdcDirectoryStatus{
	"ACTIVE",
	"CREATED",
	"CREATING",
	"DELETED",
	"DELETING",
	"FAILED",
	"IMPARED",
	"INOPERABLE",
	"REQUESTED",
	"RESTOREFAILED",
	"RESTORING",
}

func (v *AwsEdcDirectoryStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AwsEdcDirectoryStatus(value)
	for _, existing := range AllowedAwsEdcDirectoryStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AwsEdcDirectoryStatus", value)
}

// NewAwsEdcDirectoryStatusFromValue returns a pointer to a valid AwsEdcDirectoryStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAwsEdcDirectoryStatusFromValue(v string) (*AwsEdcDirectoryStatus, error) {
	ev := AwsEdcDirectoryStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AwsEdcDirectoryStatus: valid values are %v", v, AllowedAwsEdcDirectoryStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AwsEdcDirectoryStatus) IsValid() bool {
	for _, existing := range AllowedAwsEdcDirectoryStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AwsEdcDirectoryStatus value
func (v AwsEdcDirectoryStatus) Ptr() *AwsEdcDirectoryStatus {
	return &v
}

type NullableAwsEdcDirectoryStatus struct {
	value *AwsEdcDirectoryStatus
	isSet bool
}

func (v NullableAwsEdcDirectoryStatus) Get() *AwsEdcDirectoryStatus {
	return v.value
}

func (v *NullableAwsEdcDirectoryStatus) Set(val *AwsEdcDirectoryStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableAwsEdcDirectoryStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableAwsEdcDirectoryStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAwsEdcDirectoryStatus(val *AwsEdcDirectoryStatus) *NullableAwsEdcDirectoryStatus {
	return &NullableAwsEdcDirectoryStatus{value: val, isSet: true}
}

func (v NullableAwsEdcDirectoryStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAwsEdcDirectoryStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

