/*
Quick Create Service for DaaS Quick Deploy with AWS WorkSpaces Core - Tech Preview

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: DaaSTechPreview
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickcreate

import (
	"encoding/json"
)

// checks if the DeploymentTask type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeploymentTask{}

// DeploymentTask Deployment Task Configuration
type DeploymentTask struct {
	TaskBase
	Operation NullableDeploymentTaskOperationType `json:"operation,omitempty"`
	// Deployment Id this task is working on
	DeploymentId NullableString `json:"deploymentId,omitempty"`
}

// NewDeploymentTask instantiates a new DeploymentTask object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeploymentTask(taskType TaskType) *DeploymentTask {
	this := DeploymentTask{}
	this.TaskType = taskType
	return &this
}

// NewDeploymentTaskWithDefaults instantiates a new DeploymentTask object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeploymentTaskWithDefaults() *DeploymentTask {
	this := DeploymentTask{}
	return &this
}

// GetOperation returns the Operation field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeploymentTask) GetOperation() DeploymentTaskOperationType {
	if o == nil || IsNil(o.Operation.Get()) {
		var ret DeploymentTaskOperationType
		return ret
	}
	return *o.Operation.Get()
}

// GetOperationOk returns a tuple with the Operation field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeploymentTask) GetOperationOk() (*DeploymentTaskOperationType, bool) {
	if o == nil {
		return nil, false
	}
	return o.Operation.Get(), o.Operation.IsSet()
}

// HasOperation returns a boolean if a field has been set.
func (o *DeploymentTask) HasOperation() bool {
	if o != nil && o.Operation.IsSet() {
		return true
	}

	return false
}

// SetOperation gets a reference to the given NullableDeploymentTaskOperationType and assigns it to the Operation field.
func (o *DeploymentTask) SetOperation(v DeploymentTaskOperationType) {
	o.Operation.Set(&v)
}
// SetOperationNil sets the value for Operation to be an explicit nil
func (o *DeploymentTask) SetOperationNil() {
	o.Operation.Set(nil)
}

// UnsetOperation ensures that no value is present for Operation, not even an explicit nil
func (o *DeploymentTask) UnsetOperation() {
	o.Operation.Unset()
}

// GetDeploymentId returns the DeploymentId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeploymentTask) GetDeploymentId() string {
	if o == nil || IsNil(o.DeploymentId.Get()) {
		var ret string
		return ret
	}
	return *o.DeploymentId.Get()
}

// GetDeploymentIdOk returns a tuple with the DeploymentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeploymentTask) GetDeploymentIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DeploymentId.Get(), o.DeploymentId.IsSet()
}

// HasDeploymentId returns a boolean if a field has been set.
func (o *DeploymentTask) HasDeploymentId() bool {
	if o != nil && o.DeploymentId.IsSet() {
		return true
	}

	return false
}

// SetDeploymentId gets a reference to the given NullableString and assigns it to the DeploymentId field.
func (o *DeploymentTask) SetDeploymentId(v string) {
	o.DeploymentId.Set(&v)
}
// SetDeploymentIdNil sets the value for DeploymentId to be an explicit nil
func (o *DeploymentTask) SetDeploymentIdNil() {
	o.DeploymentId.Set(nil)
}

// UnsetDeploymentId ensures that no value is present for DeploymentId, not even an explicit nil
func (o *DeploymentTask) UnsetDeploymentId() {
	o.DeploymentId.Unset()
}

func (o DeploymentTask) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeploymentTask) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedTaskBase, errTaskBase := json.Marshal(o.TaskBase)
	if errTaskBase != nil {
		return map[string]interface{}{}, errTaskBase
	}
	errTaskBase = json.Unmarshal([]byte(serializedTaskBase), &toSerialize)
	if errTaskBase != nil {
		return map[string]interface{}{}, errTaskBase
	}
	if o.Operation.IsSet() {
		toSerialize["operation"] = o.Operation.Get()
	}
	if o.DeploymentId.IsSet() {
		toSerialize["deploymentId"] = o.DeploymentId.Get()
	}
	return toSerialize, nil
}

type NullableDeploymentTask struct {
	value *DeploymentTask
	isSet bool
}

func (v NullableDeploymentTask) Get() *DeploymentTask {
	return v.value
}

func (v *NullableDeploymentTask) Set(val *DeploymentTask) {
	v.value = val
	v.isSet = true
}

func (v NullableDeploymentTask) IsSet() bool {
	return v.isSet
}

func (v *NullableDeploymentTask) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeploymentTask(val *DeploymentTask) *NullableDeploymentTask {
	return &NullableDeploymentTask{value: val, isSet: true}
}

func (v NullableDeploymentTask) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeploymentTask) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


