/*
Quick Create Service for DaaS Quick Deploy with AWS WorkSpaces Core - Tech Preview

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: DaaSTechPreview
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickcreate

import (
	"encoding/json"
	"fmt"
)

// AwsEdcAmiImageArchitecture the model 'AwsEdcAmiImageArchitecture'
type AwsEdcAmiImageArchitecture string

// List of AwsEdcAmiImageArchitecture
const (
	AWSEDCAMIIMAGEARCHITECTURE_ARM64 AwsEdcAmiImageArchitecture = "ARM64"
	AWSEDCAMIIMAGEARCHITECTURE_I386 AwsEdcAmiImageArchitecture = "I386"
	AWSEDCAMIIMAGEARCHITECTURE_X86_64 AwsEdcAmiImageArchitecture = "X86_64"
)

// All allowed values of AwsEdcAmiImageArchitecture enum
var AllowedAwsEdcAmiImageArchitectureEnumValues = []AwsEdcAmiImageArchitecture{
	"ARM64",
	"I386",
	"X86_64",
}

func (v *AwsEdcAmiImageArchitecture) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AwsEdcAmiImageArchitecture(value)
	for _, existing := range AllowedAwsEdcAmiImageArchitectureEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AwsEdcAmiImageArchitecture", value)
}

// NewAwsEdcAmiImageArchitectureFromValue returns a pointer to a valid AwsEdcAmiImageArchitecture
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAwsEdcAmiImageArchitectureFromValue(v string) (*AwsEdcAmiImageArchitecture, error) {
	ev := AwsEdcAmiImageArchitecture(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AwsEdcAmiImageArchitecture: valid values are %v", v, AllowedAwsEdcAmiImageArchitectureEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AwsEdcAmiImageArchitecture) IsValid() bool {
	for _, existing := range AllowedAwsEdcAmiImageArchitectureEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AwsEdcAmiImageArchitecture value
func (v AwsEdcAmiImageArchitecture) Ptr() *AwsEdcAmiImageArchitecture {
	return &v
}

type NullableAwsEdcAmiImageArchitecture struct {
	value *AwsEdcAmiImageArchitecture
	isSet bool
}

func (v NullableAwsEdcAmiImageArchitecture) Get() *AwsEdcAmiImageArchitecture {
	return v.value
}

func (v *NullableAwsEdcAmiImageArchitecture) Set(val *AwsEdcAmiImageArchitecture) {
	v.value = val
	v.isSet = true
}

func (v NullableAwsEdcAmiImageArchitecture) IsSet() bool {
	return v.isSet
}

func (v *NullableAwsEdcAmiImageArchitecture) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAwsEdcAmiImageArchitecture(val *AwsEdcAmiImageArchitecture) *NullableAwsEdcAmiImageArchitecture {
	return &NullableAwsEdcAmiImageArchitecture{value: val, isSet: true}
}

func (v NullableAwsEdcAmiImageArchitecture) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAwsEdcAmiImageArchitecture) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

