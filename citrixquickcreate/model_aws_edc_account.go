/*
Quick Create Service for DaaS Quick Deploy with AWS WorkSpaces Core - Tech Preview

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: DaaSTechPreview
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickcreate

import (
	"encoding/json"
)

// checks if the AwsEdcAccount type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AwsEdcAccount{}

// AwsEdcAccount struct for AwsEdcAccount
type AwsEdcAccount struct {
	Account
	// Indicates if the associated AWS EDC account has BYOL support enabled
	ByolAccount *bool `json:"byolAccount,omitempty"`
	// The CIDR range that is associated with this account
	ByolCidrRange NullableString `json:"byolCidrRange,omitempty"`
	// ID of the AWS Account
	AwsAccount NullableString `json:"awsAccount,omitempty"`
	// The AWS region the account is associated with
	AwsRegion NullableString `json:"awsRegion,omitempty"`
	// Indicates the list of missing permissions in the role associated with the account
	AwsEdcMissingRolePermissions []AwsEdcMissingRolePermissions `json:"awsEdcMissingRolePermissions,omitempty"`
	// Indicates if the associated AWS EDC account has BYOL feature is enabled
	AwsByolFeatureEnabled NullableBool `json:"awsByolFeatureEnabled,omitempty"`
	// Discribes what method of authentication is used for the account
	AwsAuthType *AwsEdcAccountAuthType `json:"awsAuthType,omitempty"`
}

type _AwsEdcAccount AwsEdcAccount

// NewAwsEdcAccount instantiates a new AwsEdcAccount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAwsEdcAccount(accountType AccountType) *AwsEdcAccount {
	this := AwsEdcAccount{}
	this.AccountType = accountType
	return &this
}

// NewAwsEdcAccountWithDefaults instantiates a new AwsEdcAccount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAwsEdcAccountWithDefaults() *AwsEdcAccount {
	this := AwsEdcAccount{}
	return &this
}

// GetByolAccount returns the ByolAccount field value if set, zero value otherwise.
func (o *AwsEdcAccount) GetByolAccount() bool {
	if o == nil || IsNil(o.ByolAccount) {
		var ret bool
		return ret
	}
	return *o.ByolAccount
}

// GetByolAccountOk returns a tuple with the ByolAccount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsEdcAccount) GetByolAccountOk() (*bool, bool) {
	if o == nil || IsNil(o.ByolAccount) {
		return nil, false
	}
	return o.ByolAccount, true
}

// HasByolAccount returns a boolean if a field has been set.
func (o *AwsEdcAccount) HasByolAccount() bool {
	if o != nil && !IsNil(o.ByolAccount) {
		return true
	}

	return false
}

// SetByolAccount gets a reference to the given bool and assigns it to the ByolAccount field.
func (o *AwsEdcAccount) SetByolAccount(v bool) {
	o.ByolAccount = &v
}

// GetByolCidrRange returns the ByolCidrRange field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AwsEdcAccount) GetByolCidrRange() string {
	if o == nil || IsNil(o.ByolCidrRange.Get()) {
		var ret string
		return ret
	}
	return *o.ByolCidrRange.Get()
}

// GetByolCidrRangeOk returns a tuple with the ByolCidrRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsEdcAccount) GetByolCidrRangeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ByolCidrRange.Get(), o.ByolCidrRange.IsSet()
}

// HasByolCidrRange returns a boolean if a field has been set.
func (o *AwsEdcAccount) HasByolCidrRange() bool {
	if o != nil && o.ByolCidrRange.IsSet() {
		return true
	}

	return false
}

// SetByolCidrRange gets a reference to the given NullableString and assigns it to the ByolCidrRange field.
func (o *AwsEdcAccount) SetByolCidrRange(v string) {
	o.ByolCidrRange.Set(&v)
}

// SetByolCidrRangeNil sets the value for ByolCidrRange to be an explicit nil
func (o *AwsEdcAccount) SetByolCidrRangeNil() {
	o.ByolCidrRange.Set(nil)
}

// UnsetByolCidrRange ensures that no value is present for ByolCidrRange, not even an explicit nil
func (o *AwsEdcAccount) UnsetByolCidrRange() {
	o.ByolCidrRange.Unset()
}

// GetAwsAccount returns the AwsAccount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AwsEdcAccount) GetAwsAccount() string {
	if o == nil || IsNil(o.AwsAccount.Get()) {
		var ret string
		return ret
	}
	return *o.AwsAccount.Get()
}

// GetAwsAccountOk returns a tuple with the AwsAccount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsEdcAccount) GetAwsAccountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AwsAccount.Get(), o.AwsAccount.IsSet()
}

// HasAwsAccount returns a boolean if a field has been set.
func (o *AwsEdcAccount) HasAwsAccount() bool {
	if o != nil && o.AwsAccount.IsSet() {
		return true
	}

	return false
}

// SetAwsAccount gets a reference to the given NullableString and assigns it to the AwsAccount field.
func (o *AwsEdcAccount) SetAwsAccount(v string) {
	o.AwsAccount.Set(&v)
}

// SetAwsAccountNil sets the value for AwsAccount to be an explicit nil
func (o *AwsEdcAccount) SetAwsAccountNil() {
	o.AwsAccount.Set(nil)
}

// UnsetAwsAccount ensures that no value is present for AwsAccount, not even an explicit nil
func (o *AwsEdcAccount) UnsetAwsAccount() {
	o.AwsAccount.Unset()
}

// GetAwsRegion returns the AwsRegion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AwsEdcAccount) GetAwsRegion() string {
	if o == nil || IsNil(o.AwsRegion.Get()) {
		var ret string
		return ret
	}
	return *o.AwsRegion.Get()
}

// GetAwsRegionOk returns a tuple with the AwsRegion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsEdcAccount) GetAwsRegionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AwsRegion.Get(), o.AwsRegion.IsSet()
}

// HasAwsRegion returns a boolean if a field has been set.
func (o *AwsEdcAccount) HasAwsRegion() bool {
	if o != nil && o.AwsRegion.IsSet() {
		return true
	}

	return false
}

// SetAwsRegion gets a reference to the given NullableString and assigns it to the AwsRegion field.
func (o *AwsEdcAccount) SetAwsRegion(v string) {
	o.AwsRegion.Set(&v)
}

// SetAwsRegionNil sets the value for AwsRegion to be an explicit nil
func (o *AwsEdcAccount) SetAwsRegionNil() {
	o.AwsRegion.Set(nil)
}

// UnsetAwsRegion ensures that no value is present for AwsRegion, not even an explicit nil
func (o *AwsEdcAccount) UnsetAwsRegion() {
	o.AwsRegion.Unset()
}

// GetAwsEdcMissingRolePermissions returns the AwsEdcMissingRolePermissions field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AwsEdcAccount) GetAwsEdcMissingRolePermissions() []AwsEdcMissingRolePermissions {
	if o == nil {
		var ret []AwsEdcMissingRolePermissions
		return ret
	}
	return o.AwsEdcMissingRolePermissions
}

// GetAwsEdcMissingRolePermissionsOk returns a tuple with the AwsEdcMissingRolePermissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsEdcAccount) GetAwsEdcMissingRolePermissionsOk() ([]AwsEdcMissingRolePermissions, bool) {
	if o == nil || IsNil(o.AwsEdcMissingRolePermissions) {
		return nil, false
	}
	return o.AwsEdcMissingRolePermissions, true
}

// HasAwsEdcMissingRolePermissions returns a boolean if a field has been set.
func (o *AwsEdcAccount) HasAwsEdcMissingRolePermissions() bool {
	if o != nil && !IsNil(o.AwsEdcMissingRolePermissions) {
		return true
	}

	return false
}

// SetAwsEdcMissingRolePermissions gets a reference to the given []AwsEdcMissingRolePermissions and assigns it to the AwsEdcMissingRolePermissions field.
func (o *AwsEdcAccount) SetAwsEdcMissingRolePermissions(v []AwsEdcMissingRolePermissions) {
	o.AwsEdcMissingRolePermissions = v
}

// GetAwsByolFeatureEnabled returns the AwsByolFeatureEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AwsEdcAccount) GetAwsByolFeatureEnabled() bool {
	if o == nil || IsNil(o.AwsByolFeatureEnabled.Get()) {
		var ret bool
		return ret
	}
	return *o.AwsByolFeatureEnabled.Get()
}

// GetAwsByolFeatureEnabledOk returns a tuple with the AwsByolFeatureEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsEdcAccount) GetAwsByolFeatureEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AwsByolFeatureEnabled.Get(), o.AwsByolFeatureEnabled.IsSet()
}

// HasAwsByolFeatureEnabled returns a boolean if a field has been set.
func (o *AwsEdcAccount) HasAwsByolFeatureEnabled() bool {
	if o != nil && o.AwsByolFeatureEnabled.IsSet() {
		return true
	}

	return false
}

// SetAwsByolFeatureEnabled gets a reference to the given NullableBool and assigns it to the AwsByolFeatureEnabled field.
func (o *AwsEdcAccount) SetAwsByolFeatureEnabled(v bool) {
	o.AwsByolFeatureEnabled.Set(&v)
}

// SetAwsByolFeatureEnabledNil sets the value for AwsByolFeatureEnabled to be an explicit nil
func (o *AwsEdcAccount) SetAwsByolFeatureEnabledNil() {
	o.AwsByolFeatureEnabled.Set(nil)
}

// UnsetAwsByolFeatureEnabled ensures that no value is present for AwsByolFeatureEnabled, not even an explicit nil
func (o *AwsEdcAccount) UnsetAwsByolFeatureEnabled() {
	o.AwsByolFeatureEnabled.Unset()
}

// GetAwsAuthType returns the AwsAuthType field value if set, zero value otherwise.
func (o *AwsEdcAccount) GetAwsAuthType() AwsEdcAccountAuthType {
	if o == nil || IsNil(o.AwsAuthType) {
		var ret AwsEdcAccountAuthType
		return ret
	}
	return *o.AwsAuthType
}

// GetAwsAuthTypeOk returns a tuple with the AwsAuthType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsEdcAccount) GetAwsAuthTypeOk() (*AwsEdcAccountAuthType, bool) {
	if o == nil || IsNil(o.AwsAuthType) {
		return nil, false
	}
	return o.AwsAuthType, true
}

// HasAwsAuthType returns a boolean if a field has been set.
func (o *AwsEdcAccount) HasAwsAuthType() bool {
	if o != nil && !IsNil(o.AwsAuthType) {
		return true
	}

	return false
}

// SetAwsAuthType gets a reference to the given AwsEdcAccountAuthType and assigns it to the AwsAuthType field.
func (o *AwsEdcAccount) SetAwsAuthType(v AwsEdcAccountAuthType) {
	o.AwsAuthType = &v
}

func (o AwsEdcAccount) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AwsEdcAccount) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedAccount, errAccount := json.Marshal(o.Account)
	if errAccount != nil {
		return map[string]interface{}{}, errAccount
	}
	errAccount = json.Unmarshal([]byte(serializedAccount), &toSerialize)
	if errAccount != nil {
		return map[string]interface{}{}, errAccount
	}
	if !IsNil(o.ByolAccount) {
		toSerialize["byolAccount"] = o.ByolAccount
	}
	if o.ByolCidrRange.IsSet() {
		toSerialize["byolCidrRange"] = o.ByolCidrRange.Get()
	}
	if o.AwsAccount.IsSet() {
		toSerialize["awsAccount"] = o.AwsAccount.Get()
	}
	if o.AwsRegion.IsSet() {
		toSerialize["awsRegion"] = o.AwsRegion.Get()
	}
	if o.AwsEdcMissingRolePermissions != nil {
		toSerialize["awsEdcMissingRolePermissions"] = o.AwsEdcMissingRolePermissions
	}
	if o.AwsByolFeatureEnabled.IsSet() {
		toSerialize["awsByolFeatureEnabled"] = o.AwsByolFeatureEnabled.Get()
	}
	if !IsNil(o.AwsAuthType) {
		toSerialize["awsAuthType"] = o.AwsAuthType
	}
	return toSerialize, nil
}

type NullableAwsEdcAccount struct {
	value *AwsEdcAccount
	isSet bool
}

func (v NullableAwsEdcAccount) Get() *AwsEdcAccount {
	return v.value
}

func (v *NullableAwsEdcAccount) Set(val *AwsEdcAccount) {
	v.value = val
	v.isSet = true
}

func (v NullableAwsEdcAccount) IsSet() bool {
	return v.isSet
}

func (v *NullableAwsEdcAccount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAwsEdcAccount(val *AwsEdcAccount) *NullableAwsEdcAccount {
	return &NullableAwsEdcAccount{value: val, isSet: true}
}

func (v NullableAwsEdcAccount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAwsEdcAccount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
