/*
Quick Create Service for DaaS Quick Deploy with AWS WorkSpaces Core - Tech Preview

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: DaaSTechPreview
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickcreate

import (
	"encoding/json"
	"fmt"
)

// UpdateCustomerAccountAsyncRequest - struct for UpdateCustomerAccountAsyncRequest
type UpdateCustomerAccountAsyncRequest struct {
	UpdateAccount *UpdateAccount
	UpdateAccountName *UpdateAccountName
	UpdateAwsEdcAccountCredentials *UpdateAwsEdcAccountCredentials
}

// UpdateAccountAsUpdateCustomerAccountAsyncRequest is a convenience function that returns UpdateAccount wrapped in UpdateCustomerAccountAsyncRequest
func UpdateAccountAsUpdateCustomerAccountAsyncRequest(v *UpdateAccount) UpdateCustomerAccountAsyncRequest {
	return UpdateCustomerAccountAsyncRequest{
		UpdateAccount: v,
	}
}

// UpdateAccountNameAsUpdateCustomerAccountAsyncRequest is a convenience function that returns UpdateAccountName wrapped in UpdateCustomerAccountAsyncRequest
func UpdateAccountNameAsUpdateCustomerAccountAsyncRequest(v *UpdateAccountName) UpdateCustomerAccountAsyncRequest {
	return UpdateCustomerAccountAsyncRequest{
		UpdateAccountName: v,
	}
}

// UpdateAwsEdcAccountCredentialsAsUpdateCustomerAccountAsyncRequest is a convenience function that returns UpdateAwsEdcAccountCredentials wrapped in UpdateCustomerAccountAsyncRequest
func UpdateAwsEdcAccountCredentialsAsUpdateCustomerAccountAsyncRequest(v *UpdateAwsEdcAccountCredentials) UpdateCustomerAccountAsyncRequest {
	return UpdateCustomerAccountAsyncRequest{
		UpdateAwsEdcAccountCredentials: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *UpdateCustomerAccountAsyncRequest) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'RenameAccount'
	if jsonDict["accountOperationType"] == "RenameAccount" {
		// try to unmarshal JSON data into UpdateAccountName
		err = json.Unmarshal(data, &dst.UpdateAccountName)
		if err == nil {
			return nil // data stored in dst.UpdateAccountName, return on the first match
		} else {
			dst.UpdateAccountName = nil
			return fmt.Errorf("failed to unmarshal UpdateCustomerAccountAsyncRequest as UpdateAccountName: %s", err.Error())
		}
	}

	// check if the discriminator value is 'UpdateAccount'
	if jsonDict["accountOperationType"] == "UpdateAccount" {
		// try to unmarshal JSON data into UpdateAccount
		err = json.Unmarshal(data, &dst.UpdateAccount)
		if err == nil {
			return nil // data stored in dst.UpdateAccount, return on the first match
		} else {
			dst.UpdateAccount = nil
			return fmt.Errorf("failed to unmarshal UpdateCustomerAccountAsyncRequest as UpdateAccount: %s", err.Error())
		}
	}

	// check if the discriminator value is 'UpdateAccountName'
	if jsonDict["accountOperationType"] == "UpdateAccountName" {
		// try to unmarshal JSON data into UpdateAccountName
		err = json.Unmarshal(data, &dst.UpdateAccountName)
		if err == nil {
			return nil // data stored in dst.UpdateAccountName, return on the first match
		} else {
			dst.UpdateAccountName = nil
			return fmt.Errorf("failed to unmarshal UpdateCustomerAccountAsyncRequest as UpdateAccountName: %s", err.Error())
		}
	}

	// check if the discriminator value is 'UpdateAwsEdcAccountCredentials'
	if jsonDict["accountOperationType"] == "UpdateAwsEdcAccountCredentials" {
		// try to unmarshal JSON data into UpdateAwsEdcAccountCredentials
		err = json.Unmarshal(data, &dst.UpdateAwsEdcAccountCredentials)
		if err == nil {
			return nil // data stored in dst.UpdateAwsEdcAccountCredentials, return on the first match
		} else {
			dst.UpdateAwsEdcAccountCredentials = nil
			return fmt.Errorf("failed to unmarshal UpdateCustomerAccountAsyncRequest as UpdateAwsEdcAccountCredentials: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src UpdateCustomerAccountAsyncRequest) MarshalJSON() ([]byte, error) {
	if src.UpdateAccount != nil {
		return json.Marshal(&src.UpdateAccount)
	}

	if src.UpdateAccountName != nil {
		return json.Marshal(&src.UpdateAccountName)
	}

	if src.UpdateAwsEdcAccountCredentials != nil {
		return json.Marshal(&src.UpdateAwsEdcAccountCredentials)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *UpdateCustomerAccountAsyncRequest) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.UpdateAccount != nil {
		return obj.UpdateAccount
	}

	if obj.UpdateAccountName != nil {
		return obj.UpdateAccountName
	}

	if obj.UpdateAwsEdcAccountCredentials != nil {
		return obj.UpdateAwsEdcAccountCredentials
	}

	// all schemas are nil
	return nil
}

type NullableUpdateCustomerAccountAsyncRequest struct {
	value *UpdateCustomerAccountAsyncRequest
	isSet bool
}

func (v NullableUpdateCustomerAccountAsyncRequest) Get() *UpdateCustomerAccountAsyncRequest {
	return v.value
}

func (v *NullableUpdateCustomerAccountAsyncRequest) Set(val *UpdateCustomerAccountAsyncRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateCustomerAccountAsyncRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateCustomerAccountAsyncRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateCustomerAccountAsyncRequest(val *UpdateCustomerAccountAsyncRequest) *NullableUpdateCustomerAccountAsyncRequest {
	return &NullableUpdateCustomerAccountAsyncRequest{value: val, isSet: true}
}

func (v NullableUpdateCustomerAccountAsyncRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateCustomerAccountAsyncRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


