/*
Quick Create Service for DaaS Quick Deploy with AWS WorkSpaces Core - Tech Preview

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: DaaSTechPreview
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickcreate

import (
	"encoding/json"
	"fmt"
)

// AwsEdcSubnetStatus the model 'AwsEdcSubnetStatus'
type AwsEdcSubnetStatus string

// List of AwsEdcSubnetStatus
const (
	AWSEDCSUBNETSTATUS_AVAILABLE AwsEdcSubnetStatus = "AVAILABLE"
	AWSEDCSUBNETSTATUS_PENDING   AwsEdcSubnetStatus = "PENDING"
)

// All allowed values of AwsEdcSubnetStatus enum
var AllowedAwsEdcSubnetStatusEnumValues = []AwsEdcSubnetStatus{
	"AVAILABLE",
	"PENDING",
}

func (v *AwsEdcSubnetStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AwsEdcSubnetStatus(value)
	for _, existing := range AllowedAwsEdcSubnetStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AwsEdcSubnetStatus", value)
}

// NewAwsEdcSubnetStatusFromValue returns a pointer to a valid AwsEdcSubnetStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAwsEdcSubnetStatusFromValue(v string) (*AwsEdcSubnetStatus, error) {
	ev := AwsEdcSubnetStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AwsEdcSubnetStatus: valid values are %v", v, AllowedAwsEdcSubnetStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AwsEdcSubnetStatus) IsValid() bool {
	for _, existing := range AllowedAwsEdcSubnetStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AwsEdcSubnetStatus value
func (v AwsEdcSubnetStatus) Ptr() *AwsEdcSubnetStatus {
	return &v
}

type NullableAwsEdcSubnetStatus struct {
	value *AwsEdcSubnetStatus
	isSet bool
}

func (v NullableAwsEdcSubnetStatus) Get() *AwsEdcSubnetStatus {
	return v.value
}

func (v *NullableAwsEdcSubnetStatus) Set(val *AwsEdcSubnetStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableAwsEdcSubnetStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableAwsEdcSubnetStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAwsEdcSubnetStatus(val *AwsEdcSubnetStatus) *NullableAwsEdcSubnetStatus {
	return &NullableAwsEdcSubnetStatus{value: val, isSet: true}
}

func (v NullableAwsEdcSubnetStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAwsEdcSubnetStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
