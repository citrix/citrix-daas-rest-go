/*
Quick Create Service for DaaS Quick Deploy with AWS WorkSpaces Core - Tech Preview

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: DaaSTechPreview
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickcreate

import (
	"encoding/json"
	"fmt"
)

// AwsEdcAmiImagePlatform the model 'AwsEdcAmiImagePlatform'
type AwsEdcAmiImagePlatform string

// List of AwsEdcAmiImagePlatform
const (
	AWSEDCAMIIMAGEPLATFORM_WINDOWS AwsEdcAmiImagePlatform = "WINDOWS"
	AWSEDCAMIIMAGEPLATFORM_LINUX   AwsEdcAmiImagePlatform = "LINUX"
)

// All allowed values of AwsEdcAmiImagePlatform enum
var AllowedAwsEdcAmiImagePlatformEnumValues = []AwsEdcAmiImagePlatform{
	"WINDOWS",
	"LINUX",
}

func (v *AwsEdcAmiImagePlatform) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AwsEdcAmiImagePlatform(value)
	for _, existing := range AllowedAwsEdcAmiImagePlatformEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AwsEdcAmiImagePlatform", value)
}

// NewAwsEdcAmiImagePlatformFromValue returns a pointer to a valid AwsEdcAmiImagePlatform
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAwsEdcAmiImagePlatformFromValue(v string) (*AwsEdcAmiImagePlatform, error) {
	ev := AwsEdcAmiImagePlatform(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AwsEdcAmiImagePlatform: valid values are %v", v, AllowedAwsEdcAmiImagePlatformEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AwsEdcAmiImagePlatform) IsValid() bool {
	for _, existing := range AllowedAwsEdcAmiImagePlatformEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AwsEdcAmiImagePlatform value
func (v AwsEdcAmiImagePlatform) Ptr() *AwsEdcAmiImagePlatform {
	return &v
}

type NullableAwsEdcAmiImagePlatform struct {
	value *AwsEdcAmiImagePlatform
	isSet bool
}

func (v NullableAwsEdcAmiImagePlatform) Get() *AwsEdcAmiImagePlatform {
	return v.value
}

func (v *NullableAwsEdcAmiImagePlatform) Set(val *AwsEdcAmiImagePlatform) {
	v.value = val
	v.isSet = true
}

func (v NullableAwsEdcAmiImagePlatform) IsSet() bool {
	return v.isSet
}

func (v *NullableAwsEdcAmiImagePlatform) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAwsEdcAmiImagePlatform(val *AwsEdcAmiImagePlatform) *NullableAwsEdcAmiImagePlatform {
	return &NullableAwsEdcAmiImagePlatform{value: val, isSet: true}
}

func (v NullableAwsEdcAmiImagePlatform) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAwsEdcAmiImagePlatform) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
