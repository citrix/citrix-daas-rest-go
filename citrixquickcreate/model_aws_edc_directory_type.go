/*
Quick Create Service for DaaS Quick Deploy with AWS WorkSpaces Core - Tech Preview

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: DaaSTechPreview
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickcreate

import (
	"encoding/json"
	"fmt"
)

// AwsEdcDirectoryType the model 'AwsEdcDirectoryType'
type AwsEdcDirectoryType string

// List of AwsEdcDirectoryType
const (
	AWSEDCDIRECTORYTYPE_ADCONNECTOR AwsEdcDirectoryType = "ADCONNECTOR"
	AWSEDCDIRECTORYTYPE_AD_CONNECTOR AwsEdcDirectoryType = "AD_CONNECTOR"
	AWSEDCDIRECTORYTYPE_SIMPLEAD AwsEdcDirectoryType = "SIMPLEAD"
	AWSEDCDIRECTORYTYPE_SIMPLE_AD AwsEdcDirectoryType = "SIMPLE_AD"
	AWSEDCDIRECTORYTYPE_MICROSOFTAD AwsEdcDirectoryType = "MICROSOFTAD"
	AWSEDCDIRECTORYTYPE_SHAREDMICROSOFTAD AwsEdcDirectoryType = "SHAREDMICROSOFTAD"
)

// All allowed values of AwsEdcDirectoryType enum
var AllowedAwsEdcDirectoryTypeEnumValues = []AwsEdcDirectoryType{
	"ADCONNECTOR",
	"AD_CONNECTOR",
	"SIMPLEAD",
	"SIMPLE_AD",
	"MICROSOFTAD",
	"SHAREDMICROSOFTAD",
}

func (v *AwsEdcDirectoryType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AwsEdcDirectoryType(value)
	for _, existing := range AllowedAwsEdcDirectoryTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AwsEdcDirectoryType", value)
}

// NewAwsEdcDirectoryTypeFromValue returns a pointer to a valid AwsEdcDirectoryType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAwsEdcDirectoryTypeFromValue(v string) (*AwsEdcDirectoryType, error) {
	ev := AwsEdcDirectoryType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AwsEdcDirectoryType: valid values are %v", v, AllowedAwsEdcDirectoryTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AwsEdcDirectoryType) IsValid() bool {
	for _, existing := range AllowedAwsEdcDirectoryTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AwsEdcDirectoryType value
func (v AwsEdcDirectoryType) Ptr() *AwsEdcDirectoryType {
	return &v
}

type NullableAwsEdcDirectoryType struct {
	value *AwsEdcDirectoryType
	isSet bool
}

func (v NullableAwsEdcDirectoryType) Get() *AwsEdcDirectoryType {
	return v.value
}

func (v *NullableAwsEdcDirectoryType) Set(val *AwsEdcDirectoryType) {
	v.value = val
	v.isSet = true
}

func (v NullableAwsEdcDirectoryType) IsSet() bool {
	return v.isSet
}

func (v *NullableAwsEdcDirectoryType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAwsEdcDirectoryType(val *AwsEdcDirectoryType) *NullableAwsEdcDirectoryType {
	return &NullableAwsEdcDirectoryType{value: val, isSet: true}
}

func (v NullableAwsEdcDirectoryType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAwsEdcDirectoryType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

