/*
Quick Create Service for DaaS Quick Deploy with AWS WorkSpaces Core - Tech Preview

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: DaaSTechPreview
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickcreate

import (
	"encoding/json"
	"fmt"
)

// DeploymentWarningType Types of warnings / errors that can occur in a deployment
type DeploymentWarningType string

// List of DeploymentWarningType
const (
	DEPLOYMENTWARNINGTYPE_AWS_EDC_DEPLOYMENT_MACHINE_FAILED_TO_CREATE                   DeploymentWarningType = "AwsEdcDeploymentMachineFailedToCreate"
	DEPLOYMENTWARNINGTYPE_AWS_EDC_DEPLOYMENT_MACHINE_EXISTS_FOR_USER                    DeploymentWarningType = "AwsEdcDeploymentMachineExistsForUser"
	DEPLOYMENTWARNINGTYPE_AWS_EDC_DEPLOYMENT_MACHINE_FAILED_TO_DELETE                   DeploymentWarningType = "AwsEdcDeploymentMachineFailedToDelete"
	DEPLOYMENTWARNINGTYPE_AWS_EDC_DEPLOYMENT_MACHINE_FAILED_TO_DELETE_GENERIC           DeploymentWarningType = "AwsEdcDeploymentMachineFailedToDeleteGeneric"
	DEPLOYMENTWARNINGTYPE_AWS_EDC_DEPLOYMENT_MACHINE_FAILED_TO_DELETE_MACHINE_NOT_FOUND DeploymentWarningType = "AwsEdcDeploymentMachineFailedToDeleteMachineNotFound"
	DEPLOYMENTWARNINGTYPE_DEPLOYMENT_ADD_MACHINES_FAILED_GENERIC                        DeploymentWarningType = "DeploymentAddMachinesFailedGeneric"
	DEPLOYMENTWARNINGTYPE_INSUFFICIENT_WORKSPACE_BUNDLE_QUOTA                           DeploymentWarningType = "InsufficientWorkspaceBundleQuota"
	DEPLOYMENTWARNINGTYPE_INSUFFICIENT_WORKSPACE_SERVICE_QUOTA                          DeploymentWarningType = "InsufficientWorkspaceServiceQuota"
	DEPLOYMENTWARNINGTYPE_AWS_EDC_DEPLOYMENT_FAILED_TO_DELETE                           DeploymentWarningType = "AwsEdcDeploymentFailedToDelete"
	DEPLOYMENTWARNINGTYPE_AWS_EDC_DEPLOYMENT_MACHINE_FAILED_TO_UPDATE                   DeploymentWarningType = "AwsEdcDeploymentMachineFailedToUpdate"
	DEPLOYMENTWARNINGTYPE_DEPLOYMENT_ADD_MACHINES_PARTIAL_SUCCESS                       DeploymentWarningType = "DeploymentAddMachinesPartialSuccess"
	DEPLOYMENTWARNINGTYPE_AWS_EDC_DEPLOYMENT_FAILED_TO_UPDATE_RUNNING_MODE              DeploymentWarningType = "AwsEdcDeploymentFailedToUpdateRunningMode"
	DEPLOYMENTWARNINGTYPE_AWS_EDC_DEPLOYMENT_BUNDLE_FAILED_TO_UPDATE_IMAGE              DeploymentWarningType = "AwsEdcDeploymentBundleFailedToUpdateImage"
	DEPLOYMENTWARNINGTYPE_AWS_EDC_SAVE_MACHINE_AS_IMAGE_FAILED                          DeploymentWarningType = "AwsEdcSaveMachineAsImageFailed"
)

// All allowed values of DeploymentWarningType enum
var AllowedDeploymentWarningTypeEnumValues = []DeploymentWarningType{
	"AwsEdcDeploymentMachineFailedToCreate",
	"AwsEdcDeploymentMachineExistsForUser",
	"AwsEdcDeploymentMachineFailedToDelete",
	"AwsEdcDeploymentMachineFailedToDeleteGeneric",
	"AwsEdcDeploymentMachineFailedToDeleteMachineNotFound",
	"DeploymentAddMachinesFailedGeneric",
	"InsufficientWorkspaceBundleQuota",
	"InsufficientWorkspaceServiceQuota",
	"AwsEdcDeploymentFailedToDelete",
	"AwsEdcDeploymentMachineFailedToUpdate",
	"DeploymentAddMachinesPartialSuccess",
	"AwsEdcDeploymentFailedToUpdateRunningMode",
	"AwsEdcDeploymentBundleFailedToUpdateImage",
	"AwsEdcSaveMachineAsImageFailed",
}

func (v *DeploymentWarningType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DeploymentWarningType(value)
	for _, existing := range AllowedDeploymentWarningTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DeploymentWarningType", value)
}

// NewDeploymentWarningTypeFromValue returns a pointer to a valid DeploymentWarningType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDeploymentWarningTypeFromValue(v string) (*DeploymentWarningType, error) {
	ev := DeploymentWarningType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DeploymentWarningType: valid values are %v", v, AllowedDeploymentWarningTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DeploymentWarningType) IsValid() bool {
	for _, existing := range AllowedDeploymentWarningTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DeploymentWarningType value
func (v DeploymentWarningType) Ptr() *DeploymentWarningType {
	return &v
}

type NullableDeploymentWarningType struct {
	value *DeploymentWarningType
	isSet bool
}

func (v NullableDeploymentWarningType) Get() *DeploymentWarningType {
	return v.value
}

func (v *NullableDeploymentWarningType) Set(val *DeploymentWarningType) {
	v.value = val
	v.isSet = true
}

func (v NullableDeploymentWarningType) IsSet() bool {
	return v.isSet
}

func (v *NullableDeploymentWarningType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeploymentWarningType(val *DeploymentWarningType) *NullableDeploymentWarningType {
	return &NullableDeploymentWarningType{value: val, isSet: true}
}

func (v NullableDeploymentWarningType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeploymentWarningType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
