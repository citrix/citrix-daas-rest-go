/*
Quick Create Service for DaaS Quick Deploy with AWS WorkSpaces Core - Tech Preview

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: DaaSTechPreview
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickcreate

import (
	"encoding/json"
)

// checks if the IpPermission type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IpPermission{}

// IpPermission struct for IpPermission
type IpPermission struct {
	// Deprecated
	IpRanges []string `json:"ipRanges,omitempty"`
	FromPort *int32 `json:"fromPort,omitempty"`
	IpProtocol NullableString `json:"ipProtocol,omitempty"`
	Ipv4Ranges []IpRange `json:"ipv4Ranges,omitempty"`
	Ipv6Ranges []Ipv6Range `json:"ipv6Ranges,omitempty"`
	PrefixListIds []PrefixListId `json:"prefixListIds,omitempty"`
	ToPort *int32 `json:"toPort,omitempty"`
	UserIdGroupPairs []UserIdGroupPair `json:"userIdGroupPairs,omitempty"`
}

// NewIpPermission instantiates a new IpPermission object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIpPermission() *IpPermission {
	this := IpPermission{}
	return &this
}

// NewIpPermissionWithDefaults instantiates a new IpPermission object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIpPermissionWithDefaults() *IpPermission {
	this := IpPermission{}
	return &this
}

// GetIpRanges returns the IpRanges field value if set, zero value otherwise (both if not set or set to explicit null).
// Deprecated
func (o *IpPermission) GetIpRanges() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.IpRanges
}

// GetIpRangesOk returns a tuple with the IpRanges field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
// Deprecated
func (o *IpPermission) GetIpRangesOk() ([]string, bool) {
	if o == nil || IsNil(o.IpRanges) {
		return nil, false
	}
	return o.IpRanges, true
}

// HasIpRanges returns a boolean if a field has been set.
func (o *IpPermission) HasIpRanges() bool {
	if o != nil && IsNil(o.IpRanges) {
		return true
	}

	return false
}

// SetIpRanges gets a reference to the given []string and assigns it to the IpRanges field.
// Deprecated
func (o *IpPermission) SetIpRanges(v []string) {
	o.IpRanges = v
}

// GetFromPort returns the FromPort field value if set, zero value otherwise.
func (o *IpPermission) GetFromPort() int32 {
	if o == nil || IsNil(o.FromPort) {
		var ret int32
		return ret
	}
	return *o.FromPort
}

// GetFromPortOk returns a tuple with the FromPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpPermission) GetFromPortOk() (*int32, bool) {
	if o == nil || IsNil(o.FromPort) {
		return nil, false
	}
	return o.FromPort, true
}

// HasFromPort returns a boolean if a field has been set.
func (o *IpPermission) HasFromPort() bool {
	if o != nil && !IsNil(o.FromPort) {
		return true
	}

	return false
}

// SetFromPort gets a reference to the given int32 and assigns it to the FromPort field.
func (o *IpPermission) SetFromPort(v int32) {
	o.FromPort = &v
}

// GetIpProtocol returns the IpProtocol field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IpPermission) GetIpProtocol() string {
	if o == nil || IsNil(o.IpProtocol.Get()) {
		var ret string
		return ret
	}
	return *o.IpProtocol.Get()
}

// GetIpProtocolOk returns a tuple with the IpProtocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IpPermission) GetIpProtocolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.IpProtocol.Get(), o.IpProtocol.IsSet()
}

// HasIpProtocol returns a boolean if a field has been set.
func (o *IpPermission) HasIpProtocol() bool {
	if o != nil && o.IpProtocol.IsSet() {
		return true
	}

	return false
}

// SetIpProtocol gets a reference to the given NullableString and assigns it to the IpProtocol field.
func (o *IpPermission) SetIpProtocol(v string) {
	o.IpProtocol.Set(&v)
}
// SetIpProtocolNil sets the value for IpProtocol to be an explicit nil
func (o *IpPermission) SetIpProtocolNil() {
	o.IpProtocol.Set(nil)
}

// UnsetIpProtocol ensures that no value is present for IpProtocol, not even an explicit nil
func (o *IpPermission) UnsetIpProtocol() {
	o.IpProtocol.Unset()
}

// GetIpv4Ranges returns the Ipv4Ranges field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IpPermission) GetIpv4Ranges() []IpRange {
	if o == nil {
		var ret []IpRange
		return ret
	}
	return o.Ipv4Ranges
}

// GetIpv4RangesOk returns a tuple with the Ipv4Ranges field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IpPermission) GetIpv4RangesOk() ([]IpRange, bool) {
	if o == nil || IsNil(o.Ipv4Ranges) {
		return nil, false
	}
	return o.Ipv4Ranges, true
}

// HasIpv4Ranges returns a boolean if a field has been set.
func (o *IpPermission) HasIpv4Ranges() bool {
	if o != nil && IsNil(o.Ipv4Ranges) {
		return true
	}

	return false
}

// SetIpv4Ranges gets a reference to the given []IpRange and assigns it to the Ipv4Ranges field.
func (o *IpPermission) SetIpv4Ranges(v []IpRange) {
	o.Ipv4Ranges = v
}

// GetIpv6Ranges returns the Ipv6Ranges field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IpPermission) GetIpv6Ranges() []Ipv6Range {
	if o == nil {
		var ret []Ipv6Range
		return ret
	}
	return o.Ipv6Ranges
}

// GetIpv6RangesOk returns a tuple with the Ipv6Ranges field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IpPermission) GetIpv6RangesOk() ([]Ipv6Range, bool) {
	if o == nil || IsNil(o.Ipv6Ranges) {
		return nil, false
	}
	return o.Ipv6Ranges, true
}

// HasIpv6Ranges returns a boolean if a field has been set.
func (o *IpPermission) HasIpv6Ranges() bool {
	if o != nil && IsNil(o.Ipv6Ranges) {
		return true
	}

	return false
}

// SetIpv6Ranges gets a reference to the given []Ipv6Range and assigns it to the Ipv6Ranges field.
func (o *IpPermission) SetIpv6Ranges(v []Ipv6Range) {
	o.Ipv6Ranges = v
}

// GetPrefixListIds returns the PrefixListIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IpPermission) GetPrefixListIds() []PrefixListId {
	if o == nil {
		var ret []PrefixListId
		return ret
	}
	return o.PrefixListIds
}

// GetPrefixListIdsOk returns a tuple with the PrefixListIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IpPermission) GetPrefixListIdsOk() ([]PrefixListId, bool) {
	if o == nil || IsNil(o.PrefixListIds) {
		return nil, false
	}
	return o.PrefixListIds, true
}

// HasPrefixListIds returns a boolean if a field has been set.
func (o *IpPermission) HasPrefixListIds() bool {
	if o != nil && IsNil(o.PrefixListIds) {
		return true
	}

	return false
}

// SetPrefixListIds gets a reference to the given []PrefixListId and assigns it to the PrefixListIds field.
func (o *IpPermission) SetPrefixListIds(v []PrefixListId) {
	o.PrefixListIds = v
}

// GetToPort returns the ToPort field value if set, zero value otherwise.
func (o *IpPermission) GetToPort() int32 {
	if o == nil || IsNil(o.ToPort) {
		var ret int32
		return ret
	}
	return *o.ToPort
}

// GetToPortOk returns a tuple with the ToPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpPermission) GetToPortOk() (*int32, bool) {
	if o == nil || IsNil(o.ToPort) {
		return nil, false
	}
	return o.ToPort, true
}

// HasToPort returns a boolean if a field has been set.
func (o *IpPermission) HasToPort() bool {
	if o != nil && !IsNil(o.ToPort) {
		return true
	}

	return false
}

// SetToPort gets a reference to the given int32 and assigns it to the ToPort field.
func (o *IpPermission) SetToPort(v int32) {
	o.ToPort = &v
}

// GetUserIdGroupPairs returns the UserIdGroupPairs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IpPermission) GetUserIdGroupPairs() []UserIdGroupPair {
	if o == nil {
		var ret []UserIdGroupPair
		return ret
	}
	return o.UserIdGroupPairs
}

// GetUserIdGroupPairsOk returns a tuple with the UserIdGroupPairs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IpPermission) GetUserIdGroupPairsOk() ([]UserIdGroupPair, bool) {
	if o == nil || IsNil(o.UserIdGroupPairs) {
		return nil, false
	}
	return o.UserIdGroupPairs, true
}

// HasUserIdGroupPairs returns a boolean if a field has been set.
func (o *IpPermission) HasUserIdGroupPairs() bool {
	if o != nil && IsNil(o.UserIdGroupPairs) {
		return true
	}

	return false
}

// SetUserIdGroupPairs gets a reference to the given []UserIdGroupPair and assigns it to the UserIdGroupPairs field.
func (o *IpPermission) SetUserIdGroupPairs(v []UserIdGroupPair) {
	o.UserIdGroupPairs = v
}

func (o IpPermission) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IpPermission) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.IpRanges != nil {
		toSerialize["ipRanges"] = o.IpRanges
	}
	if !IsNil(o.FromPort) {
		toSerialize["fromPort"] = o.FromPort
	}
	if o.IpProtocol.IsSet() {
		toSerialize["ipProtocol"] = o.IpProtocol.Get()
	}
	if o.Ipv4Ranges != nil {
		toSerialize["ipv4Ranges"] = o.Ipv4Ranges
	}
	if o.Ipv6Ranges != nil {
		toSerialize["ipv6Ranges"] = o.Ipv6Ranges
	}
	if o.PrefixListIds != nil {
		toSerialize["prefixListIds"] = o.PrefixListIds
	}
	if !IsNil(o.ToPort) {
		toSerialize["toPort"] = o.ToPort
	}
	if o.UserIdGroupPairs != nil {
		toSerialize["userIdGroupPairs"] = o.UserIdGroupPairs
	}
	return toSerialize, nil
}

type NullableIpPermission struct {
	value *IpPermission
	isSet bool
}

func (v NullableIpPermission) Get() *IpPermission {
	return v.value
}

func (v *NullableIpPermission) Set(val *IpPermission) {
	v.value = val
	v.isSet = true
}

func (v NullableIpPermission) IsSet() bool {
	return v.isSet
}

func (v *NullableIpPermission) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIpPermission(val *IpPermission) *NullableIpPermission {
	return &NullableIpPermission{value: val, isSet: true}
}

func (v NullableIpPermission) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIpPermission) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


