/*
Quick Create Service for DaaS Quick Deploy with AWS WorkSpaces Core - Tech Preview

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: DaaSTechPreview
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickcreate

import (
	"encoding/json"
)

// checks if the CoreUser type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CoreUser{}

// CoreUser struct for CoreUser
type CoreUser struct {
	// AAD User ID for which we want to assign/revoke license
	UserId NullableString `json:"userId,omitempty"`
	// AAD UPN for provided User
	UserPrincipalName NullableString `json:"userPrincipalName,omitempty"`
}

// NewCoreUser instantiates a new CoreUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCoreUser() *CoreUser {
	this := CoreUser{}
	return &this
}

// NewCoreUserWithDefaults instantiates a new CoreUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCoreUserWithDefaults() *CoreUser {
	this := CoreUser{}
	return &this
}

// GetUserId returns the UserId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CoreUser) GetUserId() string {
	if o == nil || IsNil(o.UserId.Get()) {
		var ret string
		return ret
	}
	return *o.UserId.Get()
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CoreUser) GetUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UserId.Get(), o.UserId.IsSet()
}

// HasUserId returns a boolean if a field has been set.
func (o *CoreUser) HasUserId() bool {
	if o != nil && o.UserId.IsSet() {
		return true
	}

	return false
}

// SetUserId gets a reference to the given NullableString and assigns it to the UserId field.
func (o *CoreUser) SetUserId(v string) {
	o.UserId.Set(&v)
}

// SetUserIdNil sets the value for UserId to be an explicit nil
func (o *CoreUser) SetUserIdNil() {
	o.UserId.Set(nil)
}

// UnsetUserId ensures that no value is present for UserId, not even an explicit nil
func (o *CoreUser) UnsetUserId() {
	o.UserId.Unset()
}

// GetUserPrincipalName returns the UserPrincipalName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CoreUser) GetUserPrincipalName() string {
	if o == nil || IsNil(o.UserPrincipalName.Get()) {
		var ret string
		return ret
	}
	return *o.UserPrincipalName.Get()
}

// GetUserPrincipalNameOk returns a tuple with the UserPrincipalName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CoreUser) GetUserPrincipalNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UserPrincipalName.Get(), o.UserPrincipalName.IsSet()
}

// HasUserPrincipalName returns a boolean if a field has been set.
func (o *CoreUser) HasUserPrincipalName() bool {
	if o != nil && o.UserPrincipalName.IsSet() {
		return true
	}

	return false
}

// SetUserPrincipalName gets a reference to the given NullableString and assigns it to the UserPrincipalName field.
func (o *CoreUser) SetUserPrincipalName(v string) {
	o.UserPrincipalName.Set(&v)
}

// SetUserPrincipalNameNil sets the value for UserPrincipalName to be an explicit nil
func (o *CoreUser) SetUserPrincipalNameNil() {
	o.UserPrincipalName.Set(nil)
}

// UnsetUserPrincipalName ensures that no value is present for UserPrincipalName, not even an explicit nil
func (o *CoreUser) UnsetUserPrincipalName() {
	o.UserPrincipalName.Unset()
}

func (o CoreUser) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CoreUser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.UserId.IsSet() {
		toSerialize["userId"] = o.UserId.Get()
	}
	if o.UserPrincipalName.IsSet() {
		toSerialize["userPrincipalName"] = o.UserPrincipalName.Get()
	}
	return toSerialize, nil
}

type NullableCoreUser struct {
	value *CoreUser
	isSet bool
}

func (v NullableCoreUser) Get() *CoreUser {
	return v.value
}

func (v *NullableCoreUser) Set(val *CoreUser) {
	v.value = val
	v.isSet = true
}

func (v NullableCoreUser) IsSet() bool {
	return v.isSet
}

func (v *NullableCoreUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoreUser(val *CoreUser) *NullableCoreUser {
	return &NullableCoreUser{value: val, isSet: true}
}

func (v NullableCoreUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoreUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
