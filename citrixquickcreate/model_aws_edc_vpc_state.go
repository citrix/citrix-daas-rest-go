/*
Quick Create Service for DaaS Quick Deploy with AWS WorkSpaces Core - Tech Preview

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: DaaSTechPreview
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickcreate

import (
	"encoding/json"
	"fmt"
)

// AwsEdcVpcState Amazon.EC2.VpcState
type AwsEdcVpcState string

// List of AwsEdcVpcState
const (
	AWSEDCVPCSTATE_AVAILABLE AwsEdcVpcState = "AVAILABLE"
	AWSEDCVPCSTATE_PENDING AwsEdcVpcState = "PENDING"
)

// All allowed values of AwsEdcVpcState enum
var AllowedAwsEdcVpcStateEnumValues = []AwsEdcVpcState{
	"AVAILABLE",
	"PENDING",
}

func (v *AwsEdcVpcState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AwsEdcVpcState(value)
	for _, existing := range AllowedAwsEdcVpcStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AwsEdcVpcState", value)
}

// NewAwsEdcVpcStateFromValue returns a pointer to a valid AwsEdcVpcState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAwsEdcVpcStateFromValue(v string) (*AwsEdcVpcState, error) {
	ev := AwsEdcVpcState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AwsEdcVpcState: valid values are %v", v, AllowedAwsEdcVpcStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AwsEdcVpcState) IsValid() bool {
	for _, existing := range AllowedAwsEdcVpcStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AwsEdcVpcState value
func (v AwsEdcVpcState) Ptr() *AwsEdcVpcState {
	return &v
}

type NullableAwsEdcVpcState struct {
	value *AwsEdcVpcState
	isSet bool
}

func (v NullableAwsEdcVpcState) Get() *AwsEdcVpcState {
	return v.value
}

func (v *NullableAwsEdcVpcState) Set(val *AwsEdcVpcState) {
	v.value = val
	v.isSet = true
}

func (v NullableAwsEdcVpcState) IsSet() bool {
	return v.isSet
}

func (v *NullableAwsEdcVpcState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAwsEdcVpcState(val *AwsEdcVpcState) *NullableAwsEdcVpcState {
	return &NullableAwsEdcVpcState{value: val, isSet: true}
}

func (v NullableAwsEdcVpcState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAwsEdcVpcState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

