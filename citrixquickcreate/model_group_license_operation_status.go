/*
Quick Create Service for DaaS Quick Deploy with AWS WorkSpaces Core - Tech Preview

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: DaaSTechPreview
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickcreate

import (
	"encoding/json"
	"fmt"
)

// GroupLicenseOperationStatus Group License operation status    DO NOT RENAME the enum values!  They are stored in DB as strings.
type GroupLicenseOperationStatus string

// List of GroupLicenseOperationStatus
const (
	GROUPLICENSEOPERATIONSTATUS_PENDING   GroupLicenseOperationStatus = "Pending"
	GROUPLICENSEOPERATIONSTATUS_RUNNING   GroupLicenseOperationStatus = "Running"
	GROUPLICENSEOPERATIONSTATUS_COMPLETED GroupLicenseOperationStatus = "Completed"
	GROUPLICENSEOPERATIONSTATUS_FAILED    GroupLicenseOperationStatus = "Failed"
)

// All allowed values of GroupLicenseOperationStatus enum
var AllowedGroupLicenseOperationStatusEnumValues = []GroupLicenseOperationStatus{
	"Pending",
	"Running",
	"Completed",
	"Failed",
}

func (v *GroupLicenseOperationStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := GroupLicenseOperationStatus(value)
	for _, existing := range AllowedGroupLicenseOperationStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid GroupLicenseOperationStatus", value)
}

// NewGroupLicenseOperationStatusFromValue returns a pointer to a valid GroupLicenseOperationStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGroupLicenseOperationStatusFromValue(v string) (*GroupLicenseOperationStatus, error) {
	ev := GroupLicenseOperationStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for GroupLicenseOperationStatus: valid values are %v", v, AllowedGroupLicenseOperationStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v GroupLicenseOperationStatus) IsValid() bool {
	for _, existing := range AllowedGroupLicenseOperationStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to GroupLicenseOperationStatus value
func (v GroupLicenseOperationStatus) Ptr() *GroupLicenseOperationStatus {
	return &v
}

type NullableGroupLicenseOperationStatus struct {
	value *GroupLicenseOperationStatus
	isSet bool
}

func (v NullableGroupLicenseOperationStatus) Get() *GroupLicenseOperationStatus {
	return v.value
}

func (v *NullableGroupLicenseOperationStatus) Set(val *GroupLicenseOperationStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableGroupLicenseOperationStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableGroupLicenseOperationStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroupLicenseOperationStatus(val *GroupLicenseOperationStatus) *NullableGroupLicenseOperationStatus {
	return &NullableGroupLicenseOperationStatus{value: val, isSet: true}
}

func (v NullableGroupLicenseOperationStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroupLicenseOperationStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
