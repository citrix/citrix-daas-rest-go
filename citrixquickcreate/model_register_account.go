/*
Quick Create Service for DaaS Quick Deploy with AWS WorkSpaces Core - Tech Preview

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: DaaSTechPreview
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickcreate

import (
	"encoding/json"
)

// checks if the RegisterAccount type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RegisterAccount{}

// RegisterAccount Register account
type RegisterAccount struct {
	AccountType AccountType `json:"accountType"`
	TaskType *TaskType `json:"taskType,omitempty"`
	// Task Id
	TaskId NullableString `json:"taskId,omitempty"`
}

// NewRegisterAccount instantiates a new RegisterAccount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegisterAccount(accountType AccountType) *RegisterAccount {
	this := RegisterAccount{}
	this.AccountType = accountType
	return &this
}

// NewRegisterAccountWithDefaults instantiates a new RegisterAccount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegisterAccountWithDefaults() *RegisterAccount {
	this := RegisterAccount{}
	return &this
}

// GetAccountType returns the AccountType field value
func (o *RegisterAccount) GetAccountType() AccountType {
	if o == nil {
		var ret AccountType
		return ret
	}

	return o.AccountType
}

// GetAccountTypeOk returns a tuple with the AccountType field value
// and a boolean to check if the value has been set.
func (o *RegisterAccount) GetAccountTypeOk() (*AccountType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountType, true
}

// SetAccountType sets field value
func (o *RegisterAccount) SetAccountType(v AccountType) {
	o.AccountType = v
}

// GetTaskType returns the TaskType field value if set, zero value otherwise.
func (o *RegisterAccount) GetTaskType() TaskType {
	if o == nil || IsNil(o.TaskType) {
		var ret TaskType
		return ret
	}
	return *o.TaskType
}

// GetTaskTypeOk returns a tuple with the TaskType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterAccount) GetTaskTypeOk() (*TaskType, bool) {
	if o == nil || IsNil(o.TaskType) {
		return nil, false
	}
	return o.TaskType, true
}

// HasTaskType returns a boolean if a field has been set.
func (o *RegisterAccount) HasTaskType() bool {
	if o != nil && !IsNil(o.TaskType) {
		return true
	}

	return false
}

// SetTaskType gets a reference to the given TaskType and assigns it to the TaskType field.
func (o *RegisterAccount) SetTaskType(v TaskType) {
	o.TaskType = &v
}

// GetTaskId returns the TaskId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisterAccount) GetTaskId() string {
	if o == nil || IsNil(o.TaskId.Get()) {
		var ret string
		return ret
	}
	return *o.TaskId.Get()
}

// GetTaskIdOk returns a tuple with the TaskId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisterAccount) GetTaskIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TaskId.Get(), o.TaskId.IsSet()
}

// HasTaskId returns a boolean if a field has been set.
func (o *RegisterAccount) HasTaskId() bool {
	if o != nil && o.TaskId.IsSet() {
		return true
	}

	return false
}

// SetTaskId gets a reference to the given NullableString and assigns it to the TaskId field.
func (o *RegisterAccount) SetTaskId(v string) {
	o.TaskId.Set(&v)
}
// SetTaskIdNil sets the value for TaskId to be an explicit nil
func (o *RegisterAccount) SetTaskIdNil() {
	o.TaskId.Set(nil)
}

// UnsetTaskId ensures that no value is present for TaskId, not even an explicit nil
func (o *RegisterAccount) UnsetTaskId() {
	o.TaskId.Unset()
}

func (o RegisterAccount) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RegisterAccount) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["accountType"] = o.AccountType
	if !IsNil(o.TaskType) {
		toSerialize["taskType"] = o.TaskType
	}
	if o.TaskId.IsSet() {
		toSerialize["taskId"] = o.TaskId.Get()
	}
	return toSerialize, nil
}

type NullableRegisterAccount struct {
	value *RegisterAccount
	isSet bool
}

func (v NullableRegisterAccount) Get() *RegisterAccount {
	return v.value
}

func (v *NullableRegisterAccount) Set(val *RegisterAccount) {
	v.value = val
	v.isSet = true
}

func (v NullableRegisterAccount) IsSet() bool {
	return v.isSet
}

func (v *NullableRegisterAccount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegisterAccount(val *RegisterAccount) *NullableRegisterAccount {
	return &NullableRegisterAccount{value: val, isSet: true}
}

func (v NullableRegisterAccount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegisterAccount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


