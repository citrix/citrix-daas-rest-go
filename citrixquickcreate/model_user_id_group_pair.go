/*
Quick Create Service for DaaS Quick Deploy with AWS WorkSpaces Core - Tech Preview

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: DaaSTechPreview
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickcreate

import (
	"encoding/json"
)

// checks if the UserIdGroupPair type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserIdGroupPair{}

// UserIdGroupPair struct for UserIdGroupPair
type UserIdGroupPair struct {
	Description NullableString `json:"description,omitempty"`
	GroupId NullableString `json:"groupId,omitempty"`
	GroupName NullableString `json:"groupName,omitempty"`
	PeeringStatus NullableString `json:"peeringStatus,omitempty"`
	UserId NullableString `json:"userId,omitempty"`
	VpcId NullableString `json:"vpcId,omitempty"`
	VpcPeeringConnectionId NullableString `json:"vpcPeeringConnectionId,omitempty"`
}

// NewUserIdGroupPair instantiates a new UserIdGroupPair object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserIdGroupPair() *UserIdGroupPair {
	this := UserIdGroupPair{}
	return &this
}

// NewUserIdGroupPairWithDefaults instantiates a new UserIdGroupPair object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserIdGroupPairWithDefaults() *UserIdGroupPair {
	this := UserIdGroupPair{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserIdGroupPair) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserIdGroupPair) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *UserIdGroupPair) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *UserIdGroupPair) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *UserIdGroupPair) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *UserIdGroupPair) UnsetDescription() {
	o.Description.Unset()
}

// GetGroupId returns the GroupId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserIdGroupPair) GetGroupId() string {
	if o == nil || IsNil(o.GroupId.Get()) {
		var ret string
		return ret
	}
	return *o.GroupId.Get()
}

// GetGroupIdOk returns a tuple with the GroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserIdGroupPair) GetGroupIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.GroupId.Get(), o.GroupId.IsSet()
}

// HasGroupId returns a boolean if a field has been set.
func (o *UserIdGroupPair) HasGroupId() bool {
	if o != nil && o.GroupId.IsSet() {
		return true
	}

	return false
}

// SetGroupId gets a reference to the given NullableString and assigns it to the GroupId field.
func (o *UserIdGroupPair) SetGroupId(v string) {
	o.GroupId.Set(&v)
}
// SetGroupIdNil sets the value for GroupId to be an explicit nil
func (o *UserIdGroupPair) SetGroupIdNil() {
	o.GroupId.Set(nil)
}

// UnsetGroupId ensures that no value is present for GroupId, not even an explicit nil
func (o *UserIdGroupPair) UnsetGroupId() {
	o.GroupId.Unset()
}

// GetGroupName returns the GroupName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserIdGroupPair) GetGroupName() string {
	if o == nil || IsNil(o.GroupName.Get()) {
		var ret string
		return ret
	}
	return *o.GroupName.Get()
}

// GetGroupNameOk returns a tuple with the GroupName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserIdGroupPair) GetGroupNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.GroupName.Get(), o.GroupName.IsSet()
}

// HasGroupName returns a boolean if a field has been set.
func (o *UserIdGroupPair) HasGroupName() bool {
	if o != nil && o.GroupName.IsSet() {
		return true
	}

	return false
}

// SetGroupName gets a reference to the given NullableString and assigns it to the GroupName field.
func (o *UserIdGroupPair) SetGroupName(v string) {
	o.GroupName.Set(&v)
}
// SetGroupNameNil sets the value for GroupName to be an explicit nil
func (o *UserIdGroupPair) SetGroupNameNil() {
	o.GroupName.Set(nil)
}

// UnsetGroupName ensures that no value is present for GroupName, not even an explicit nil
func (o *UserIdGroupPair) UnsetGroupName() {
	o.GroupName.Unset()
}

// GetPeeringStatus returns the PeeringStatus field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserIdGroupPair) GetPeeringStatus() string {
	if o == nil || IsNil(o.PeeringStatus.Get()) {
		var ret string
		return ret
	}
	return *o.PeeringStatus.Get()
}

// GetPeeringStatusOk returns a tuple with the PeeringStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserIdGroupPair) GetPeeringStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PeeringStatus.Get(), o.PeeringStatus.IsSet()
}

// HasPeeringStatus returns a boolean if a field has been set.
func (o *UserIdGroupPair) HasPeeringStatus() bool {
	if o != nil && o.PeeringStatus.IsSet() {
		return true
	}

	return false
}

// SetPeeringStatus gets a reference to the given NullableString and assigns it to the PeeringStatus field.
func (o *UserIdGroupPair) SetPeeringStatus(v string) {
	o.PeeringStatus.Set(&v)
}
// SetPeeringStatusNil sets the value for PeeringStatus to be an explicit nil
func (o *UserIdGroupPair) SetPeeringStatusNil() {
	o.PeeringStatus.Set(nil)
}

// UnsetPeeringStatus ensures that no value is present for PeeringStatus, not even an explicit nil
func (o *UserIdGroupPair) UnsetPeeringStatus() {
	o.PeeringStatus.Unset()
}

// GetUserId returns the UserId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserIdGroupPair) GetUserId() string {
	if o == nil || IsNil(o.UserId.Get()) {
		var ret string
		return ret
	}
	return *o.UserId.Get()
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserIdGroupPair) GetUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UserId.Get(), o.UserId.IsSet()
}

// HasUserId returns a boolean if a field has been set.
func (o *UserIdGroupPair) HasUserId() bool {
	if o != nil && o.UserId.IsSet() {
		return true
	}

	return false
}

// SetUserId gets a reference to the given NullableString and assigns it to the UserId field.
func (o *UserIdGroupPair) SetUserId(v string) {
	o.UserId.Set(&v)
}
// SetUserIdNil sets the value for UserId to be an explicit nil
func (o *UserIdGroupPair) SetUserIdNil() {
	o.UserId.Set(nil)
}

// UnsetUserId ensures that no value is present for UserId, not even an explicit nil
func (o *UserIdGroupPair) UnsetUserId() {
	o.UserId.Unset()
}

// GetVpcId returns the VpcId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserIdGroupPair) GetVpcId() string {
	if o == nil || IsNil(o.VpcId.Get()) {
		var ret string
		return ret
	}
	return *o.VpcId.Get()
}

// GetVpcIdOk returns a tuple with the VpcId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserIdGroupPair) GetVpcIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.VpcId.Get(), o.VpcId.IsSet()
}

// HasVpcId returns a boolean if a field has been set.
func (o *UserIdGroupPair) HasVpcId() bool {
	if o != nil && o.VpcId.IsSet() {
		return true
	}

	return false
}

// SetVpcId gets a reference to the given NullableString and assigns it to the VpcId field.
func (o *UserIdGroupPair) SetVpcId(v string) {
	o.VpcId.Set(&v)
}
// SetVpcIdNil sets the value for VpcId to be an explicit nil
func (o *UserIdGroupPair) SetVpcIdNil() {
	o.VpcId.Set(nil)
}

// UnsetVpcId ensures that no value is present for VpcId, not even an explicit nil
func (o *UserIdGroupPair) UnsetVpcId() {
	o.VpcId.Unset()
}

// GetVpcPeeringConnectionId returns the VpcPeeringConnectionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserIdGroupPair) GetVpcPeeringConnectionId() string {
	if o == nil || IsNil(o.VpcPeeringConnectionId.Get()) {
		var ret string
		return ret
	}
	return *o.VpcPeeringConnectionId.Get()
}

// GetVpcPeeringConnectionIdOk returns a tuple with the VpcPeeringConnectionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserIdGroupPair) GetVpcPeeringConnectionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.VpcPeeringConnectionId.Get(), o.VpcPeeringConnectionId.IsSet()
}

// HasVpcPeeringConnectionId returns a boolean if a field has been set.
func (o *UserIdGroupPair) HasVpcPeeringConnectionId() bool {
	if o != nil && o.VpcPeeringConnectionId.IsSet() {
		return true
	}

	return false
}

// SetVpcPeeringConnectionId gets a reference to the given NullableString and assigns it to the VpcPeeringConnectionId field.
func (o *UserIdGroupPair) SetVpcPeeringConnectionId(v string) {
	o.VpcPeeringConnectionId.Set(&v)
}
// SetVpcPeeringConnectionIdNil sets the value for VpcPeeringConnectionId to be an explicit nil
func (o *UserIdGroupPair) SetVpcPeeringConnectionIdNil() {
	o.VpcPeeringConnectionId.Set(nil)
}

// UnsetVpcPeeringConnectionId ensures that no value is present for VpcPeeringConnectionId, not even an explicit nil
func (o *UserIdGroupPair) UnsetVpcPeeringConnectionId() {
	o.VpcPeeringConnectionId.Unset()
}

func (o UserIdGroupPair) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserIdGroupPair) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.GroupId.IsSet() {
		toSerialize["groupId"] = o.GroupId.Get()
	}
	if o.GroupName.IsSet() {
		toSerialize["groupName"] = o.GroupName.Get()
	}
	if o.PeeringStatus.IsSet() {
		toSerialize["peeringStatus"] = o.PeeringStatus.Get()
	}
	if o.UserId.IsSet() {
		toSerialize["userId"] = o.UserId.Get()
	}
	if o.VpcId.IsSet() {
		toSerialize["vpcId"] = o.VpcId.Get()
	}
	if o.VpcPeeringConnectionId.IsSet() {
		toSerialize["vpcPeeringConnectionId"] = o.VpcPeeringConnectionId.Get()
	}
	return toSerialize, nil
}

type NullableUserIdGroupPair struct {
	value *UserIdGroupPair
	isSet bool
}

func (v NullableUserIdGroupPair) Get() *UserIdGroupPair {
	return v.value
}

func (v *NullableUserIdGroupPair) Set(val *UserIdGroupPair) {
	v.value = val
	v.isSet = true
}

func (v NullableUserIdGroupPair) IsSet() bool {
	return v.isSet
}

func (v *NullableUserIdGroupPair) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserIdGroupPair(val *UserIdGroupPair) *NullableUserIdGroupPair {
	return &NullableUserIdGroupPair{value: val, isSet: true}
}

func (v NullableUserIdGroupPair) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserIdGroupPair) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


