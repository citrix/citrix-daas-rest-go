/*
Quick Create Service for DaaS Quick Deploy with AWS WorkSpaces Core - Tech Preview

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: DaaSTechPreview
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickcreate

import (
	"encoding/json"
	"fmt"
)

// AwsEdcAmiImageStatus the model 'AwsEdcAmiImageStatus'
type AwsEdcAmiImageStatus string

// List of AwsEdcAmiImageStatus
const (
	AWSEDCAMIIMAGESTATUS_AVAILABLE AwsEdcAmiImageStatus = "AVAILABLE"
	AWSEDCAMIIMAGESTATUS_DEREGISTERED AwsEdcAmiImageStatus = "DEREGISTERED"
	AWSEDCAMIIMAGESTATUS_ERROR AwsEdcAmiImageStatus = "ERROR"
	AWSEDCAMIIMAGESTATUS_FAILED AwsEdcAmiImageStatus = "FAILED"
	AWSEDCAMIIMAGESTATUS_INVALID AwsEdcAmiImageStatus = "INVALID"
	AWSEDCAMIIMAGESTATUS_PENDING AwsEdcAmiImageStatus = "PENDING"
	AWSEDCAMIIMAGESTATUS_TRANSIENT AwsEdcAmiImageStatus = "TRANSIENT"
)

// All allowed values of AwsEdcAmiImageStatus enum
var AllowedAwsEdcAmiImageStatusEnumValues = []AwsEdcAmiImageStatus{
	"AVAILABLE",
	"DEREGISTERED",
	"ERROR",
	"FAILED",
	"INVALID",
	"PENDING",
	"TRANSIENT",
}

func (v *AwsEdcAmiImageStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AwsEdcAmiImageStatus(value)
	for _, existing := range AllowedAwsEdcAmiImageStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AwsEdcAmiImageStatus", value)
}

// NewAwsEdcAmiImageStatusFromValue returns a pointer to a valid AwsEdcAmiImageStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAwsEdcAmiImageStatusFromValue(v string) (*AwsEdcAmiImageStatus, error) {
	ev := AwsEdcAmiImageStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AwsEdcAmiImageStatus: valid values are %v", v, AllowedAwsEdcAmiImageStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AwsEdcAmiImageStatus) IsValid() bool {
	for _, existing := range AllowedAwsEdcAmiImageStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AwsEdcAmiImageStatus value
func (v AwsEdcAmiImageStatus) Ptr() *AwsEdcAmiImageStatus {
	return &v
}

type NullableAwsEdcAmiImageStatus struct {
	value *AwsEdcAmiImageStatus
	isSet bool
}

func (v NullableAwsEdcAmiImageStatus) Get() *AwsEdcAmiImageStatus {
	return v.value
}

func (v *NullableAwsEdcAmiImageStatus) Set(val *AwsEdcAmiImageStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableAwsEdcAmiImageStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableAwsEdcAmiImageStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAwsEdcAmiImageStatus(val *AwsEdcAmiImageStatus) *NullableAwsEdcAmiImageStatus {
	return &NullableAwsEdcAmiImageStatus{value: val, isSet: true}
}

func (v NullableAwsEdcAmiImageStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAwsEdcAmiImageStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

