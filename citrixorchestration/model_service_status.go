/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
	"fmt"
)

// ServiceStatus A status code to indicate the health of the service and database combined
type ServiceStatus string

// List of ServiceStatus
const (
	SERVICESTATUS_STOPPED ServiceStatus = "Stopped"
	SERVICESTATUS_DBUN_CONFIGURED ServiceStatus = "DBUnConfigured"
	SERVICESTATUS_DB_REJECTED_CONNECTION ServiceStatus = "DBRejectedConnection"
	SERVICESTATUS_INVALID_DB_CONFIGURED ServiceStatus = "InvalidDBConfigured"
	SERVICESTATUS_DB_NOT_FOUND ServiceStatus = "DBNotFound"
	SERVICESTATUS_DB_MISSING_OPTIONAL_FEATURE ServiceStatus = "DBMissingOptionalFeature"
	SERVICESTATUS_DB_MISSING_MANDATORY_FEATURE ServiceStatus = "DBMissingMandatoryFeature"
	SERVICESTATUS_DB_NEWER_VERSION_THAN_SERVICE ServiceStatus = "DBNewerVersionThanService"
	SERVICESTATUS_DB_OLDER_VERSION_THAN_SERVICE ServiceStatus = "DBOlderVersionThanService"
	SERVICESTATUS_DB_VERSION_CHANGE_IN_PROGRESS ServiceStatus = "DBVersionChangeInProgress"
	SERVICESTATUS_OK ServiceStatus = "OK"
	SERVICESTATUS_PENDING_FAILURE ServiceStatus = "PendingFailure"
	SERVICESTATUS_FAILED ServiceStatus = "Failed"
	SERVICESTATUS_UNKNOWN ServiceStatus = "Unknown"
	SERVICESTATUS_SERVICE_NOT_IN_SITE_DB ServiceStatus = "ServiceNotInSiteDB"
	SERVICESTATUS_INVALID_DB_CONNECTION_STRING ServiceStatus = "InvalidDBConnectionString"
	SERVICESTATUS_PENDING_SERVICE_DISCOVERY ServiceStatus = "PendingServiceDiscovery"
	SERVICESTATUS_PENDING_SERVICE_REGISTRATION ServiceStatus = "PendingServiceRegistration"
	SERVICESTATUS_PENDING_CONFIGURATION ServiceStatus = "PendingConfiguration"
)

// All allowed values of ServiceStatus enum
var AllowedServiceStatusEnumValues = []ServiceStatus{
	"Stopped",
	"DBUnConfigured",
	"DBRejectedConnection",
	"InvalidDBConfigured",
	"DBNotFound",
	"DBMissingOptionalFeature",
	"DBMissingMandatoryFeature",
	"DBNewerVersionThanService",
	"DBOlderVersionThanService",
	"DBVersionChangeInProgress",
	"OK",
	"PendingFailure",
	"Failed",
	"Unknown",
	"ServiceNotInSiteDB",
	"InvalidDBConnectionString",
	"PendingServiceDiscovery",
	"PendingServiceRegistration",
	"PendingConfiguration",
}

func (v *ServiceStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ServiceStatus(value)
	for _, existing := range AllowedServiceStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ServiceStatus", value)
}

// NewServiceStatusFromValue returns a pointer to a valid ServiceStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewServiceStatusFromValue(v string) (*ServiceStatus, error) {
	ev := ServiceStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ServiceStatus: valid values are %v", v, AllowedServiceStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ServiceStatus) IsValid() bool {
	for _, existing := range AllowedServiceStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ServiceStatus value
func (v ServiceStatus) Ptr() *ServiceStatus {
	return &v
}

type NullableServiceStatus struct {
	value *ServiceStatus
	isSet bool
}

func (v NullableServiceStatus) Get() *ServiceStatus {
	return v.value
}

func (v *NullableServiceStatus) Set(val *ServiceStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceStatus(val *ServiceStatus) *NullableServiceStatus {
	return &NullableServiceStatus{value: val, isSet: true}
}

func (v NullableServiceStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

