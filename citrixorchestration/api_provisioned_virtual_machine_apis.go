/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-onprem-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

type ProvisionedVirtualMachineAPIsDAAS interface {

	/*
			ProvisionedVirtualMachineApplyProvisionedVirtualMachineConfigurationUpdate Performs an immediate update of the configuration for a specific provisioned virtual machine.

			Provides the ability to synchronize the properties of existing virtual machines with any changes
		occurred on the provisioning scheme with Set-ProvScheme and any configuration applied with Set-ProvVM.

			@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
			@param vmSid Virtual Machine Sid.
			@return ApiProvisionedVirtualMachineApplyProvisionedVirtualMachineConfigurationUpdateRequest
	*/
	ProvisionedVirtualMachineApplyProvisionedVirtualMachineConfigurationUpdate(ctx context.Context, vmSid string) ApiProvisionedVirtualMachineApplyProvisionedVirtualMachineConfigurationUpdateRequest

	// ProvisionedVirtualMachineApplyProvisionedVirtualMachineConfigurationUpdateExecute executes the request
	ProvisionedVirtualMachineApplyProvisionedVirtualMachineConfigurationUpdateExecute(r ApiProvisionedVirtualMachineApplyProvisionedVirtualMachineConfigurationUpdateRequest) (*http.Response, error)

	/*
		ProvisionedVirtualMachineGetMaintenanceCycleVMOperationJobs Get the maintenance cycle vm operation jobs for a machine.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param vmSid Virtual machine SID.
		@return ApiProvisionedVirtualMachineGetMaintenanceCycleVMOperationJobsRequest
	*/
	ProvisionedVirtualMachineGetMaintenanceCycleVMOperationJobs(ctx context.Context, vmSid string) ApiProvisionedVirtualMachineGetMaintenanceCycleVMOperationJobsRequest

	// ProvisionedVirtualMachineGetMaintenanceCycleVMOperationJobsExecute executes the request
	//  @return MaintenanceCycleVMOperationJobResponseModelCollection
	ProvisionedVirtualMachineGetMaintenanceCycleVMOperationJobsExecute(r ApiProvisionedVirtualMachineGetMaintenanceCycleVMOperationJobsRequest) (*MaintenanceCycleVMOperationJobResponseModelCollection, *http.Response, error)

	/*
		ProvisionedVirtualMachineResetProvisionedVirtualMachineOSDisk Performs an immediate reset of the OS disk for a specific provisioned virtual machine.

		Provides the ability to reset the OS disk with Reset-ProvVMDisk -OS.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param vmSid Virtual Machine Sid.
		@return ApiProvisionedVirtualMachineResetProvisionedVirtualMachineOSDiskRequest
	*/
	ProvisionedVirtualMachineResetProvisionedVirtualMachineOSDisk(ctx context.Context, vmSid string) ApiProvisionedVirtualMachineResetProvisionedVirtualMachineOSDiskRequest

	// ProvisionedVirtualMachineResetProvisionedVirtualMachineOSDiskExecute executes the request
	ProvisionedVirtualMachineResetProvisionedVirtualMachineOSDiskExecute(r ApiProvisionedVirtualMachineResetProvisionedVirtualMachineOSDiskRequest) (*http.Response, error)

	/*
			ProvisionedVirtualMachineUpdateProvisionedVirtualMachine Changes the configuration for a specific provisioned virtual machine.

			Any configuration changes made will not apply right away to the machine.
		To apply the updates, set an update time window for the machine with Set-ProvVMUpdateTimeWindow and start the machine within the window.

			@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
			@param vmSid Virtual Machine Sid.
			@return ApiProvisionedVirtualMachineUpdateProvisionedVirtualMachineRequest
	*/
	ProvisionedVirtualMachineUpdateProvisionedVirtualMachine(ctx context.Context, vmSid string) ApiProvisionedVirtualMachineUpdateProvisionedVirtualMachineRequest

	// ProvisionedVirtualMachineUpdateProvisionedVirtualMachineExecute executes the request
	ProvisionedVirtualMachineUpdateProvisionedVirtualMachineExecute(r ApiProvisionedVirtualMachineUpdateProvisionedVirtualMachineRequest) (*http.Response, error)
}

// ProvisionedVirtualMachineAPIsDAASService ProvisionedVirtualMachineAPIsDAAS service
type ProvisionedVirtualMachineAPIsDAASService service

type ApiProvisionedVirtualMachineApplyProvisionedVirtualMachineConfigurationUpdateRequest struct {
	ctx                 context.Context
	ApiService          ProvisionedVirtualMachineAPIsDAAS
	citrixCustomerId    *string
	citrixInstanceId    *string
	vmSid               string
	userAgent           *string
	authorization       *string
	citrixTransactionId *string
	accept              *string
	citrixLocale        *string
	async               *bool
}

// Citrix Customer ID. Default is &#39;CitrixOnPremises&#39;
func (r ApiProvisionedVirtualMachineApplyProvisionedVirtualMachineConfigurationUpdateRequest) CitrixCustomerId(citrixCustomerId string) ApiProvisionedVirtualMachineApplyProvisionedVirtualMachineConfigurationUpdateRequest {
	r.citrixCustomerId = &citrixCustomerId
	return r
}

// Citrix Instance (Site) ID.
func (r ApiProvisionedVirtualMachineApplyProvisionedVirtualMachineConfigurationUpdateRequest) CitrixInstanceId(citrixInstanceId string) ApiProvisionedVirtualMachineApplyProvisionedVirtualMachineConfigurationUpdateRequest {
	r.citrixInstanceId = &citrixInstanceId
	return r
}

// User Agent type of the request.
func (r ApiProvisionedVirtualMachineApplyProvisionedVirtualMachineConfigurationUpdateRequest) UserAgent(userAgent string) ApiProvisionedVirtualMachineApplyProvisionedVirtualMachineConfigurationUpdateRequest {
	r.userAgent = &userAgent
	return r
}

// Citrix authorization header: CWSAuth Bearer&#x3D;{token}
func (r ApiProvisionedVirtualMachineApplyProvisionedVirtualMachineConfigurationUpdateRequest) Authorization(authorization string) ApiProvisionedVirtualMachineApplyProvisionedVirtualMachineConfigurationUpdateRequest {
	r.authorization = &authorization
	return r
}

// Transaction ID that will be used to track this request. If not provided, a new GUID will be generated and returned.
func (r ApiProvisionedVirtualMachineApplyProvisionedVirtualMachineConfigurationUpdateRequest) CitrixTransactionId(citrixTransactionId string) ApiProvisionedVirtualMachineApplyProvisionedVirtualMachineConfigurationUpdateRequest {
	r.citrixTransactionId = &citrixTransactionId
	return r
}

// Must accept application/json.
func (r ApiProvisionedVirtualMachineApplyProvisionedVirtualMachineConfigurationUpdateRequest) Accept(accept string) ApiProvisionedVirtualMachineApplyProvisionedVirtualMachineConfigurationUpdateRequest {
	r.accept = &accept
	return r
}

// Locale of the request.
func (r ApiProvisionedVirtualMachineApplyProvisionedVirtualMachineConfigurationUpdateRequest) CitrixLocale(citrixLocale string) ApiProvisionedVirtualMachineApplyProvisionedVirtualMachineConfigurationUpdateRequest {
	r.citrixLocale = &citrixLocale
	return r
}

// If &#x60;true&#x60;, the update operation will be created within a background task.
func (r ApiProvisionedVirtualMachineApplyProvisionedVirtualMachineConfigurationUpdateRequest) Async(async bool) ApiProvisionedVirtualMachineApplyProvisionedVirtualMachineConfigurationUpdateRequest {
	r.async = &async
	return r
}

func (r ApiProvisionedVirtualMachineApplyProvisionedVirtualMachineConfigurationUpdateRequest) Execute() (*http.Response, error) {
	return r.ApiService.ProvisionedVirtualMachineApplyProvisionedVirtualMachineConfigurationUpdateExecute(r)
}

/*
ProvisionedVirtualMachineApplyProvisionedVirtualMachineConfigurationUpdate Performs an immediate update of the configuration for a specific provisioned virtual machine.

Provides the ability to synchronize the properties of existing virtual machines with any changes
occurred on the provisioning scheme with Set-ProvScheme and any configuration applied with Set-ProvVM.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param vmSid Virtual Machine Sid.
	@return ApiProvisionedVirtualMachineApplyProvisionedVirtualMachineConfigurationUpdateRequest
*/
func (a *ProvisionedVirtualMachineAPIsDAASService) ProvisionedVirtualMachineApplyProvisionedVirtualMachineConfigurationUpdate(ctx context.Context, vmSid string) ApiProvisionedVirtualMachineApplyProvisionedVirtualMachineConfigurationUpdateRequest {
	return ApiProvisionedVirtualMachineApplyProvisionedVirtualMachineConfigurationUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		vmSid:      vmSid,
	}
}

// Execute executes the request
func (a *ProvisionedVirtualMachineAPIsDAASService) ProvisionedVirtualMachineApplyProvisionedVirtualMachineConfigurationUpdateExecute(r ApiProvisionedVirtualMachineApplyProvisionedVirtualMachineConfigurationUpdateRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProvisionedVirtualMachineAPIsDAASService.ProvisionedVirtualMachineApplyProvisionedVirtualMachineConfigurationUpdate")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/provisionedVirtualMachines/{vmSid}/$applyUpdate"
	localVarPath = strings.Replace(localVarPath, "{"+"vmSid"+"}", url.PathEscape(parameterValueToString(r.vmSid, "vmSid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.citrixCustomerId == nil {
		return nil, reportError("citrixCustomerId is required and must be specified")
	}
	if r.citrixInstanceId == nil {
		return nil, reportError("citrixInstanceId is required and must be specified")
	}

	if r.async != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "async", r.async, "form", "")
	} else {
		var defaultValue bool = false
		r.async = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-CustomerId", r.citrixCustomerId, "simple", "")
	parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-InstanceId", r.citrixInstanceId, "simple", "")
	if r.userAgent != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "User-Agent", r.userAgent, "simple", "")
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Authorization", r.authorization, "simple", "")
	}
	if r.citrixTransactionId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-TransactionId", r.citrixTransactionId, "simple", "")
	}
	if r.accept != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept", r.accept, "simple", "")
	}
	if r.citrixLocale != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-Locale", r.citrixLocale, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 406 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiProvisionedVirtualMachineGetMaintenanceCycleVMOperationJobsRequest struct {
	ctx                 context.Context
	ApiService          ProvisionedVirtualMachineAPIsDAAS
	citrixCustomerId    *string
	citrixInstanceId    *string
	vmSid               string
	userAgent           *string
	authorization       *string
	citrixTransactionId *string
	accept              *string
	citrixLocale        *string
	async               *bool
}

// Citrix Customer ID. Default is &#39;CitrixOnPremises&#39;
func (r ApiProvisionedVirtualMachineGetMaintenanceCycleVMOperationJobsRequest) CitrixCustomerId(citrixCustomerId string) ApiProvisionedVirtualMachineGetMaintenanceCycleVMOperationJobsRequest {
	r.citrixCustomerId = &citrixCustomerId
	return r
}

// Citrix Instance (Site) ID.
func (r ApiProvisionedVirtualMachineGetMaintenanceCycleVMOperationJobsRequest) CitrixInstanceId(citrixInstanceId string) ApiProvisionedVirtualMachineGetMaintenanceCycleVMOperationJobsRequest {
	r.citrixInstanceId = &citrixInstanceId
	return r
}

// User Agent type of the request.
func (r ApiProvisionedVirtualMachineGetMaintenanceCycleVMOperationJobsRequest) UserAgent(userAgent string) ApiProvisionedVirtualMachineGetMaintenanceCycleVMOperationJobsRequest {
	r.userAgent = &userAgent
	return r
}

// Citrix authorization header: CWSAuth Bearer&#x3D;{token}
func (r ApiProvisionedVirtualMachineGetMaintenanceCycleVMOperationJobsRequest) Authorization(authorization string) ApiProvisionedVirtualMachineGetMaintenanceCycleVMOperationJobsRequest {
	r.authorization = &authorization
	return r
}

// Transaction ID that will be used to track this request. If not provided, a new GUID will be generated and returned.
func (r ApiProvisionedVirtualMachineGetMaintenanceCycleVMOperationJobsRequest) CitrixTransactionId(citrixTransactionId string) ApiProvisionedVirtualMachineGetMaintenanceCycleVMOperationJobsRequest {
	r.citrixTransactionId = &citrixTransactionId
	return r
}

// Must accept application/json.
func (r ApiProvisionedVirtualMachineGetMaintenanceCycleVMOperationJobsRequest) Accept(accept string) ApiProvisionedVirtualMachineGetMaintenanceCycleVMOperationJobsRequest {
	r.accept = &accept
	return r
}

// Locale of the request.
func (r ApiProvisionedVirtualMachineGetMaintenanceCycleVMOperationJobsRequest) CitrixLocale(citrixLocale string) ApiProvisionedVirtualMachineGetMaintenanceCycleVMOperationJobsRequest {
	r.citrixLocale = &citrixLocale
	return r
}

func (r ApiProvisionedVirtualMachineGetMaintenanceCycleVMOperationJobsRequest) Async(async bool) ApiProvisionedVirtualMachineGetMaintenanceCycleVMOperationJobsRequest {
	r.async = &async
	return r
}

func (r ApiProvisionedVirtualMachineGetMaintenanceCycleVMOperationJobsRequest) Execute() (*MaintenanceCycleVMOperationJobResponseModelCollection, *http.Response, error) {
	return r.ApiService.ProvisionedVirtualMachineGetMaintenanceCycleVMOperationJobsExecute(r)
}

/*
ProvisionedVirtualMachineGetMaintenanceCycleVMOperationJobs Get the maintenance cycle vm operation jobs for a machine.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param vmSid Virtual machine SID.
	@return ApiProvisionedVirtualMachineGetMaintenanceCycleVMOperationJobsRequest
*/
func (a *ProvisionedVirtualMachineAPIsDAASService) ProvisionedVirtualMachineGetMaintenanceCycleVMOperationJobs(ctx context.Context, vmSid string) ApiProvisionedVirtualMachineGetMaintenanceCycleVMOperationJobsRequest {
	return ApiProvisionedVirtualMachineGetMaintenanceCycleVMOperationJobsRequest{
		ApiService: a,
		ctx:        ctx,
		vmSid:      vmSid,
	}
}

// Execute executes the request
//
//	@return MaintenanceCycleVMOperationJobResponseModelCollection
func (a *ProvisionedVirtualMachineAPIsDAASService) ProvisionedVirtualMachineGetMaintenanceCycleVMOperationJobsExecute(r ApiProvisionedVirtualMachineGetMaintenanceCycleVMOperationJobsRequest) (*MaintenanceCycleVMOperationJobResponseModelCollection, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *MaintenanceCycleVMOperationJobResponseModelCollection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProvisionedVirtualMachineAPIsDAASService.ProvisionedVirtualMachineGetMaintenanceCycleVMOperationJobs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/provisionedVirtualMachines/{vmSid}/operationJobs"
	localVarPath = strings.Replace(localVarPath, "{"+"vmSid"+"}", url.PathEscape(parameterValueToString(r.vmSid, "vmSid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.citrixCustomerId == nil {
		return localVarReturnValue, nil, reportError("citrixCustomerId is required and must be specified")
	}
	if r.citrixInstanceId == nil {
		return localVarReturnValue, nil, reportError("citrixInstanceId is required and must be specified")
	}

	if r.async != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "async", r.async, "form", "")
	} else {
		var defaultValue bool = false
		r.async = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-CustomerId", r.citrixCustomerId, "simple", "")
	parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-InstanceId", r.citrixInstanceId, "simple", "")
	if r.userAgent != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "User-Agent", r.userAgent, "simple", "")
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Authorization", r.authorization, "simple", "")
	}
	if r.citrixTransactionId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-TransactionId", r.citrixTransactionId, "simple", "")
	}
	if r.accept != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept", r.accept, "simple", "")
	}
	if r.citrixLocale != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-Locale", r.citrixLocale, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 406 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiProvisionedVirtualMachineResetProvisionedVirtualMachineOSDiskRequest struct {
	ctx                 context.Context
	ApiService          ProvisionedVirtualMachineAPIsDAAS
	citrixCustomerId    *string
	citrixInstanceId    *string
	vmSid               string
	userAgent           *string
	authorization       *string
	citrixTransactionId *string
	accept              *string
	citrixLocale        *string
	async               *bool
}

// Citrix Customer ID. Default is &#39;CitrixOnPremises&#39;
func (r ApiProvisionedVirtualMachineResetProvisionedVirtualMachineOSDiskRequest) CitrixCustomerId(citrixCustomerId string) ApiProvisionedVirtualMachineResetProvisionedVirtualMachineOSDiskRequest {
	r.citrixCustomerId = &citrixCustomerId
	return r
}

// Citrix Instance (Site) ID.
func (r ApiProvisionedVirtualMachineResetProvisionedVirtualMachineOSDiskRequest) CitrixInstanceId(citrixInstanceId string) ApiProvisionedVirtualMachineResetProvisionedVirtualMachineOSDiskRequest {
	r.citrixInstanceId = &citrixInstanceId
	return r
}

// User Agent type of the request.
func (r ApiProvisionedVirtualMachineResetProvisionedVirtualMachineOSDiskRequest) UserAgent(userAgent string) ApiProvisionedVirtualMachineResetProvisionedVirtualMachineOSDiskRequest {
	r.userAgent = &userAgent
	return r
}

// Citrix authorization header: CWSAuth Bearer&#x3D;{token}
func (r ApiProvisionedVirtualMachineResetProvisionedVirtualMachineOSDiskRequest) Authorization(authorization string) ApiProvisionedVirtualMachineResetProvisionedVirtualMachineOSDiskRequest {
	r.authorization = &authorization
	return r
}

// Transaction ID that will be used to track this request. If not provided, a new GUID will be generated and returned.
func (r ApiProvisionedVirtualMachineResetProvisionedVirtualMachineOSDiskRequest) CitrixTransactionId(citrixTransactionId string) ApiProvisionedVirtualMachineResetProvisionedVirtualMachineOSDiskRequest {
	r.citrixTransactionId = &citrixTransactionId
	return r
}

// Must accept application/json.
func (r ApiProvisionedVirtualMachineResetProvisionedVirtualMachineOSDiskRequest) Accept(accept string) ApiProvisionedVirtualMachineResetProvisionedVirtualMachineOSDiskRequest {
	r.accept = &accept
	return r
}

// Locale of the request.
func (r ApiProvisionedVirtualMachineResetProvisionedVirtualMachineOSDiskRequest) CitrixLocale(citrixLocale string) ApiProvisionedVirtualMachineResetProvisionedVirtualMachineOSDiskRequest {
	r.citrixLocale = &citrixLocale
	return r
}

// If &#x60;true&#x60;, the update operation will be created within a background task.
func (r ApiProvisionedVirtualMachineResetProvisionedVirtualMachineOSDiskRequest) Async(async bool) ApiProvisionedVirtualMachineResetProvisionedVirtualMachineOSDiskRequest {
	r.async = &async
	return r
}

func (r ApiProvisionedVirtualMachineResetProvisionedVirtualMachineOSDiskRequest) Execute() (*http.Response, error) {
	return r.ApiService.ProvisionedVirtualMachineResetProvisionedVirtualMachineOSDiskExecute(r)
}

/*
ProvisionedVirtualMachineResetProvisionedVirtualMachineOSDisk Performs an immediate reset of the OS disk for a specific provisioned virtual machine.

Provides the ability to reset the OS disk with Reset-ProvVMDisk -OS.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param vmSid Virtual Machine Sid.
	@return ApiProvisionedVirtualMachineResetProvisionedVirtualMachineOSDiskRequest
*/
func (a *ProvisionedVirtualMachineAPIsDAASService) ProvisionedVirtualMachineResetProvisionedVirtualMachineOSDisk(ctx context.Context, vmSid string) ApiProvisionedVirtualMachineResetProvisionedVirtualMachineOSDiskRequest {
	return ApiProvisionedVirtualMachineResetProvisionedVirtualMachineOSDiskRequest{
		ApiService: a,
		ctx:        ctx,
		vmSid:      vmSid,
	}
}

// Execute executes the request
func (a *ProvisionedVirtualMachineAPIsDAASService) ProvisionedVirtualMachineResetProvisionedVirtualMachineOSDiskExecute(r ApiProvisionedVirtualMachineResetProvisionedVirtualMachineOSDiskRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProvisionedVirtualMachineAPIsDAASService.ProvisionedVirtualMachineResetProvisionedVirtualMachineOSDisk")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/provisionedVirtualMachines/{vmSid}/$resetProvVmOSDisk"
	localVarPath = strings.Replace(localVarPath, "{"+"vmSid"+"}", url.PathEscape(parameterValueToString(r.vmSid, "vmSid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.citrixCustomerId == nil {
		return nil, reportError("citrixCustomerId is required and must be specified")
	}
	if r.citrixInstanceId == nil {
		return nil, reportError("citrixInstanceId is required and must be specified")
	}

	if r.async != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "async", r.async, "form", "")
	} else {
		var defaultValue bool = false
		r.async = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-CustomerId", r.citrixCustomerId, "simple", "")
	parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-InstanceId", r.citrixInstanceId, "simple", "")
	if r.userAgent != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "User-Agent", r.userAgent, "simple", "")
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Authorization", r.authorization, "simple", "")
	}
	if r.citrixTransactionId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-TransactionId", r.citrixTransactionId, "simple", "")
	}
	if r.accept != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept", r.accept, "simple", "")
	}
	if r.citrixLocale != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-Locale", r.citrixLocale, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 406 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiProvisionedVirtualMachineUpdateProvisionedVirtualMachineRequest struct {
	ctx                                         context.Context
	ApiService                                  ProvisionedVirtualMachineAPIsDAAS
	citrixCustomerId                            *string
	citrixInstanceId                            *string
	vmSid                                       string
	updateProvisionedVirtualMachineRequestModel *UpdateProvisionedVirtualMachineRequestModel
	userAgent                                   *string
	authorization                               *string
	citrixTransactionId                         *string
	accept                                      *string
	citrixLocale                                *string
	async                                       *bool
}

// Citrix Customer ID. Default is &#39;CitrixOnPremises&#39;
func (r ApiProvisionedVirtualMachineUpdateProvisionedVirtualMachineRequest) CitrixCustomerId(citrixCustomerId string) ApiProvisionedVirtualMachineUpdateProvisionedVirtualMachineRequest {
	r.citrixCustomerId = &citrixCustomerId
	return r
}

// Citrix Instance (Site) ID.
func (r ApiProvisionedVirtualMachineUpdateProvisionedVirtualMachineRequest) CitrixInstanceId(citrixInstanceId string) ApiProvisionedVirtualMachineUpdateProvisionedVirtualMachineRequest {
	r.citrixInstanceId = &citrixInstanceId
	return r
}

// Properties of the provisioned virtual machine to update.
func (r ApiProvisionedVirtualMachineUpdateProvisionedVirtualMachineRequest) UpdateProvisionedVirtualMachineRequestModel(updateProvisionedVirtualMachineRequestModel UpdateProvisionedVirtualMachineRequestModel) ApiProvisionedVirtualMachineUpdateProvisionedVirtualMachineRequest {
	r.updateProvisionedVirtualMachineRequestModel = &updateProvisionedVirtualMachineRequestModel
	return r
}

// User Agent type of the request.
func (r ApiProvisionedVirtualMachineUpdateProvisionedVirtualMachineRequest) UserAgent(userAgent string) ApiProvisionedVirtualMachineUpdateProvisionedVirtualMachineRequest {
	r.userAgent = &userAgent
	return r
}

// Citrix authorization header: CWSAuth Bearer&#x3D;{token}
func (r ApiProvisionedVirtualMachineUpdateProvisionedVirtualMachineRequest) Authorization(authorization string) ApiProvisionedVirtualMachineUpdateProvisionedVirtualMachineRequest {
	r.authorization = &authorization
	return r
}

// Transaction ID that will be used to track this request. If not provided, a new GUID will be generated and returned.
func (r ApiProvisionedVirtualMachineUpdateProvisionedVirtualMachineRequest) CitrixTransactionId(citrixTransactionId string) ApiProvisionedVirtualMachineUpdateProvisionedVirtualMachineRequest {
	r.citrixTransactionId = &citrixTransactionId
	return r
}

// Must accept application/json.
func (r ApiProvisionedVirtualMachineUpdateProvisionedVirtualMachineRequest) Accept(accept string) ApiProvisionedVirtualMachineUpdateProvisionedVirtualMachineRequest {
	r.accept = &accept
	return r
}

// Locale of the request.
func (r ApiProvisionedVirtualMachineUpdateProvisionedVirtualMachineRequest) CitrixLocale(citrixLocale string) ApiProvisionedVirtualMachineUpdateProvisionedVirtualMachineRequest {
	r.citrixLocale = &citrixLocale
	return r
}

// If &#x60;true&#x60;, the update operation will be created within a background task.
func (r ApiProvisionedVirtualMachineUpdateProvisionedVirtualMachineRequest) Async(async bool) ApiProvisionedVirtualMachineUpdateProvisionedVirtualMachineRequest {
	r.async = &async
	return r
}

func (r ApiProvisionedVirtualMachineUpdateProvisionedVirtualMachineRequest) Execute() (*http.Response, error) {
	return r.ApiService.ProvisionedVirtualMachineUpdateProvisionedVirtualMachineExecute(r)
}

/*
ProvisionedVirtualMachineUpdateProvisionedVirtualMachine Changes the configuration for a specific provisioned virtual machine.

Any configuration changes made will not apply right away to the machine.
To apply the updates, set an update time window for the machine with Set-ProvVMUpdateTimeWindow and start the machine within the window.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param vmSid Virtual Machine Sid.
	@return ApiProvisionedVirtualMachineUpdateProvisionedVirtualMachineRequest
*/
func (a *ProvisionedVirtualMachineAPIsDAASService) ProvisionedVirtualMachineUpdateProvisionedVirtualMachine(ctx context.Context, vmSid string) ApiProvisionedVirtualMachineUpdateProvisionedVirtualMachineRequest {
	return ApiProvisionedVirtualMachineUpdateProvisionedVirtualMachineRequest{
		ApiService: a,
		ctx:        ctx,
		vmSid:      vmSid,
	}
}

// Execute executes the request
func (a *ProvisionedVirtualMachineAPIsDAASService) ProvisionedVirtualMachineUpdateProvisionedVirtualMachineExecute(r ApiProvisionedVirtualMachineUpdateProvisionedVirtualMachineRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPatch
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProvisionedVirtualMachineAPIsDAASService.ProvisionedVirtualMachineUpdateProvisionedVirtualMachine")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/provisionedVirtualMachines/{vmSid}"
	localVarPath = strings.Replace(localVarPath, "{"+"vmSid"+"}", url.PathEscape(parameterValueToString(r.vmSid, "vmSid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.citrixCustomerId == nil {
		return nil, reportError("citrixCustomerId is required and must be specified")
	}
	if r.citrixInstanceId == nil {
		return nil, reportError("citrixInstanceId is required and must be specified")
	}
	if r.updateProvisionedVirtualMachineRequestModel == nil {
		return nil, reportError("updateProvisionedVirtualMachineRequestModel is required and must be specified")
	}

	if r.async != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "async", r.async, "form", "")
	} else {
		var defaultValue bool = false
		r.async = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-CustomerId", r.citrixCustomerId, "simple", "")
	parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-InstanceId", r.citrixInstanceId, "simple", "")
	if r.userAgent != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "User-Agent", r.userAgent, "simple", "")
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Authorization", r.authorization, "simple", "")
	}
	if r.citrixTransactionId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-TransactionId", r.citrixTransactionId, "simple", "")
	}
	if r.accept != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept", r.accept, "simple", "")
	}
	if r.citrixLocale != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-Locale", r.citrixLocale, "simple", "")
	}
	// body params
	localVarPostBody = r.updateProvisionedVirtualMachineRequestModel
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 406 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 415 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
