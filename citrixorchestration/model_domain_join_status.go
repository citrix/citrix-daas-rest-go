/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
	"fmt"
)

// DomainJoinStatus 
type DomainJoinStatus string

// List of DomainJoinStatus
const (
	DOMAINJOINSTATUS_UNKNOWN DomainJoinStatus = "Unknown"
	DOMAINJOINSTATUS_NOT_JOINED DomainJoinStatus = "NotJoined"
	DOMAINJOINSTATUS_WORKGROUP_JOINED DomainJoinStatus = "WorkgroupJoined"
	DOMAINJOINSTATUS_DOMAIN_JOINED DomainJoinStatus = "DomainJoined"
)

// All allowed values of DomainJoinStatus enum
var AllowedDomainJoinStatusEnumValues = []DomainJoinStatus{
	"Unknown",
	"NotJoined",
	"WorkgroupJoined",
	"DomainJoined",
}

func (v *DomainJoinStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DomainJoinStatus(value)
	for _, existing := range AllowedDomainJoinStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DomainJoinStatus", value)
}

// NewDomainJoinStatusFromValue returns a pointer to a valid DomainJoinStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDomainJoinStatusFromValue(v string) (*DomainJoinStatus, error) {
	ev := DomainJoinStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DomainJoinStatus: valid values are %v", v, AllowedDomainJoinStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DomainJoinStatus) IsValid() bool {
	for _, existing := range AllowedDomainJoinStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DomainJoinStatus value
func (v DomainJoinStatus) Ptr() *DomainJoinStatus {
	return &v
}

type NullableDomainJoinStatus struct {
	value *DomainJoinStatus
	isSet bool
}

func (v NullableDomainJoinStatus) Get() *DomainJoinStatus {
	return v.value
}

func (v *NullableDomainJoinStatus) Set(val *DomainJoinStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableDomainJoinStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableDomainJoinStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDomainJoinStatus(val *DomainJoinStatus) *NullableDomainJoinStatus {
	return &NullableDomainJoinStatus{value: val, isSet: true}
}

func (v NullableDomainJoinStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDomainJoinStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

