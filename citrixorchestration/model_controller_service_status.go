/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
	"fmt"
)

// ControllerServiceStatus 
type ControllerServiceStatus string

// List of ControllerServiceStatus
const (
	CONTROLLERSERVICESTATUS_STOPPED ControllerServiceStatus = "Stopped"
	CONTROLLERSERVICESTATUS_DB_UNCONFIGURED ControllerServiceStatus = "DBUnconfigured"
	CONTROLLERSERVICESTATUS_DB_REJECTED_CONNECTION ControllerServiceStatus = "DBRejectedConnection"
	CONTROLLERSERVICESTATUS_INVALID_DB_CONFIGURED ControllerServiceStatus = "InvalidDBConfigured"
	CONTROLLERSERVICESTATUS_DB_NOT_FOUND ControllerServiceStatus = "DBNotFound"
	CONTROLLERSERVICESTATUS_DB_MISSING_OPTIONAL_FEATURE ControllerServiceStatus = "DBMissingOptionalFeature"
	CONTROLLERSERVICESTATUS_DB_MISSING_MANDATORY_FEATURE ControllerServiceStatus = "DBMissingMandatoryFeature"
	CONTROLLERSERVICESTATUS_DB_NEWER_VERSION_THAN_SERVICE ControllerServiceStatus = "DBNewerVersionThanService"
	CONTROLLERSERVICESTATUS_DB_OLDER_VERSION_THAN_SERVICE ControllerServiceStatus = "DBOlderVersionThanService"
	CONTROLLERSERVICESTATUS_DB_VERSION_CHANGE_IN_PROGRESS ControllerServiceStatus = "DBVersionChangeInProgress"
	CONTROLLERSERVICESTATUS_OK ControllerServiceStatus = "OK"
	CONTROLLERSERVICESTATUS_PENDING_FAILURE ControllerServiceStatus = "PendingFailure"
	CONTROLLERSERVICESTATUS_FAILED ControllerServiceStatus = "Failed"
	CONTROLLERSERVICESTATUS_UNKNOWN ControllerServiceStatus = "Unknown"
	CONTROLLERSERVICESTATUS_SERVICE_NOT_IN_SITE_DB ControllerServiceStatus = "ServiceNotInSiteDB"
	CONTROLLERSERVICESTATUS_INVALID_DB_CONNECTION_STRING ControllerServiceStatus = "InvalidDBConnectionString"
	CONTROLLERSERVICESTATUS_PENDING_SERVICE_DISCOVERY ControllerServiceStatus = "PendingServiceDiscovery"
	CONTROLLERSERVICESTATUS_PENDING_SERVICE_REGISTRATION ControllerServiceStatus = "PendingServiceRegistration"
	CONTROLLERSERVICESTATUS_PENDING_CONFIGURATION ControllerServiceStatus = "PendingConfiguration"
)

// All allowed values of ControllerServiceStatus enum
var AllowedControllerServiceStatusEnumValues = []ControllerServiceStatus{
	"Stopped",
	"DBUnconfigured",
	"DBRejectedConnection",
	"InvalidDBConfigured",
	"DBNotFound",
	"DBMissingOptionalFeature",
	"DBMissingMandatoryFeature",
	"DBNewerVersionThanService",
	"DBOlderVersionThanService",
	"DBVersionChangeInProgress",
	"OK",
	"PendingFailure",
	"Failed",
	"Unknown",
	"ServiceNotInSiteDB",
	"InvalidDBConnectionString",
	"PendingServiceDiscovery",
	"PendingServiceRegistration",
	"PendingConfiguration",
}

func (v *ControllerServiceStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ControllerServiceStatus(value)
	for _, existing := range AllowedControllerServiceStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ControllerServiceStatus", value)
}

// NewControllerServiceStatusFromValue returns a pointer to a valid ControllerServiceStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewControllerServiceStatusFromValue(v string) (*ControllerServiceStatus, error) {
	ev := ControllerServiceStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ControllerServiceStatus: valid values are %v", v, AllowedControllerServiceStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ControllerServiceStatus) IsValid() bool {
	for _, existing := range AllowedControllerServiceStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ControllerServiceStatus value
func (v ControllerServiceStatus) Ptr() *ControllerServiceStatus {
	return &v
}

type NullableControllerServiceStatus struct {
	value *ControllerServiceStatus
	isSet bool
}

func (v NullableControllerServiceStatus) Get() *ControllerServiceStatus {
	return v.value
}

func (v *NullableControllerServiceStatus) Set(val *ControllerServiceStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableControllerServiceStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableControllerServiceStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableControllerServiceStatus(val *ControllerServiceStatus) *NullableControllerServiceStatus {
	return &NullableControllerServiceStatus{value: val, isSet: true}
}

func (v NullableControllerServiceStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableControllerServiceStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

