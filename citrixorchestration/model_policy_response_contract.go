/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-onprem-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
)

// checks if the PolicyResponseContract type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PolicyResponseContract{}

// PolicyResponseContract Policy model
type PolicyResponseContract struct {
	// Policy name as identifier, translated.
	PolicyName NullableString `json:"PolicyName,omitempty"`
	// Policy priority
	Priority *int32 `json:"Priority,omitempty"`
	// Is policy enabled
	IsEnabled *bool `json:"IsEnabled,omitempty"`
	// Policy description
	Description NullableString `json:"Description,omitempty"`
	// Is unfiltered is true only for the 'Unfiltered' policy.
	IsUnfiltered *bool `json:"IsUnfiltered,omitempty"`
	// Policy settings
	Settings []SettingResponseContract `json:"Settings,omitempty"`
	// Policy filters
	Filters []FilterResponseContract `json:"Filters,omitempty"`
}

// NewPolicyResponseContract instantiates a new PolicyResponseContract object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPolicyResponseContract() *PolicyResponseContract {
	this := PolicyResponseContract{}
	return &this
}

// NewPolicyResponseContractWithDefaults instantiates a new PolicyResponseContract object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPolicyResponseContractWithDefaults() *PolicyResponseContract {
	this := PolicyResponseContract{}
	return &this
}

// GetPolicyName returns the PolicyName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PolicyResponseContract) GetPolicyName() string {
	if o == nil || IsNil(o.PolicyName.Get()) {
		var ret string
		return ret
	}
	return *o.PolicyName.Get()
}

// GetPolicyNameOk returns a tuple with the PolicyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PolicyResponseContract) GetPolicyNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PolicyName.Get(), o.PolicyName.IsSet()
}

// HasPolicyName returns a boolean if a field has been set.
func (o *PolicyResponseContract) HasPolicyName() bool {
	if o != nil && o.PolicyName.IsSet() {
		return true
	}

	return false
}

// SetPolicyName gets a reference to the given NullableString and assigns it to the PolicyName field.
func (o *PolicyResponseContract) SetPolicyName(v string) {
	o.PolicyName.Set(&v)
}

// SetPolicyNameNil sets the value for PolicyName to be an explicit nil
func (o *PolicyResponseContract) SetPolicyNameNil() {
	o.PolicyName.Set(nil)
}

// UnsetPolicyName ensures that no value is present for PolicyName, not even an explicit nil
func (o *PolicyResponseContract) UnsetPolicyName() {
	o.PolicyName.Unset()
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *PolicyResponseContract) GetPriority() int32 {
	if o == nil || IsNil(o.Priority) {
		var ret int32
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyResponseContract) GetPriorityOk() (*int32, bool) {
	if o == nil || IsNil(o.Priority) {
		return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *PolicyResponseContract) HasPriority() bool {
	if o != nil && !IsNil(o.Priority) {
		return true
	}

	return false
}

// SetPriority gets a reference to the given int32 and assigns it to the Priority field.
func (o *PolicyResponseContract) SetPriority(v int32) {
	o.Priority = &v
}

// GetIsEnabled returns the IsEnabled field value if set, zero value otherwise.
func (o *PolicyResponseContract) GetIsEnabled() bool {
	if o == nil || IsNil(o.IsEnabled) {
		var ret bool
		return ret
	}
	return *o.IsEnabled
}

// GetIsEnabledOk returns a tuple with the IsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyResponseContract) GetIsEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsEnabled) {
		return nil, false
	}
	return o.IsEnabled, true
}

// HasIsEnabled returns a boolean if a field has been set.
func (o *PolicyResponseContract) HasIsEnabled() bool {
	if o != nil && !IsNil(o.IsEnabled) {
		return true
	}

	return false
}

// SetIsEnabled gets a reference to the given bool and assigns it to the IsEnabled field.
func (o *PolicyResponseContract) SetIsEnabled(v bool) {
	o.IsEnabled = &v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PolicyResponseContract) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PolicyResponseContract) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *PolicyResponseContract) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *PolicyResponseContract) SetDescription(v string) {
	o.Description.Set(&v)
}

// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *PolicyResponseContract) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *PolicyResponseContract) UnsetDescription() {
	o.Description.Unset()
}

// GetIsUnfiltered returns the IsUnfiltered field value if set, zero value otherwise.
func (o *PolicyResponseContract) GetIsUnfiltered() bool {
	if o == nil || IsNil(o.IsUnfiltered) {
		var ret bool
		return ret
	}
	return *o.IsUnfiltered
}

// GetIsUnfilteredOk returns a tuple with the IsUnfiltered field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyResponseContract) GetIsUnfilteredOk() (*bool, bool) {
	if o == nil || IsNil(o.IsUnfiltered) {
		return nil, false
	}
	return o.IsUnfiltered, true
}

// HasIsUnfiltered returns a boolean if a field has been set.
func (o *PolicyResponseContract) HasIsUnfiltered() bool {
	if o != nil && !IsNil(o.IsUnfiltered) {
		return true
	}

	return false
}

// SetIsUnfiltered gets a reference to the given bool and assigns it to the IsUnfiltered field.
func (o *PolicyResponseContract) SetIsUnfiltered(v bool) {
	o.IsUnfiltered = &v
}

// GetSettings returns the Settings field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PolicyResponseContract) GetSettings() []SettingResponseContract {
	if o == nil {
		var ret []SettingResponseContract
		return ret
	}
	return o.Settings
}

// GetSettingsOk returns a tuple with the Settings field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PolicyResponseContract) GetSettingsOk() ([]SettingResponseContract, bool) {
	if o == nil || IsNil(o.Settings) {
		return nil, false
	}
	return o.Settings, true
}

// HasSettings returns a boolean if a field has been set.
func (o *PolicyResponseContract) HasSettings() bool {
	if o != nil && !IsNil(o.Settings) {
		return true
	}

	return false
}

// SetSettings gets a reference to the given []SettingResponseContract and assigns it to the Settings field.
func (o *PolicyResponseContract) SetSettings(v []SettingResponseContract) {
	o.Settings = v
}

// GetFilters returns the Filters field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PolicyResponseContract) GetFilters() []FilterResponseContract {
	if o == nil {
		var ret []FilterResponseContract
		return ret
	}
	return o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PolicyResponseContract) GetFiltersOk() ([]FilterResponseContract, bool) {
	if o == nil || IsNil(o.Filters) {
		return nil, false
	}
	return o.Filters, true
}

// HasFilters returns a boolean if a field has been set.
func (o *PolicyResponseContract) HasFilters() bool {
	if o != nil && !IsNil(o.Filters) {
		return true
	}

	return false
}

// SetFilters gets a reference to the given []FilterResponseContract and assigns it to the Filters field.
func (o *PolicyResponseContract) SetFilters(v []FilterResponseContract) {
	o.Filters = v
}

func (o PolicyResponseContract) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PolicyResponseContract) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.PolicyName.IsSet() {
		toSerialize["PolicyName"] = o.PolicyName.Get()
	}
	if !IsNil(o.Priority) {
		toSerialize["Priority"] = o.Priority
	}
	if !IsNil(o.IsEnabled) {
		toSerialize["IsEnabled"] = o.IsEnabled
	}
	if o.Description.IsSet() {
		toSerialize["Description"] = o.Description.Get()
	}
	if !IsNil(o.IsUnfiltered) {
		toSerialize["IsUnfiltered"] = o.IsUnfiltered
	}
	if o.Settings != nil {
		toSerialize["Settings"] = o.Settings
	}
	if o.Filters != nil {
		toSerialize["Filters"] = o.Filters
	}
	return toSerialize, nil
}

type NullablePolicyResponseContract struct {
	value *PolicyResponseContract
	isSet bool
}

func (v NullablePolicyResponseContract) Get() *PolicyResponseContract {
	return v.value
}

func (v *NullablePolicyResponseContract) Set(val *PolicyResponseContract) {
	v.value = val
	v.isSet = true
}

func (v NullablePolicyResponseContract) IsSet() bool {
	return v.isSet
}

func (v *NullablePolicyResponseContract) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePolicyResponseContract(val *PolicyResponseContract) *NullablePolicyResponseContract {
	return &NullablePolicyResponseContract{value: val, isSet: true}
}

func (v NullablePolicyResponseContract) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePolicyResponseContract) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
