/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-onprem-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
)

// checks if the ServiceAccountCapabilityReference type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServiceAccountCapabilityReference{}

// ServiceAccountCapabilityReference struct for ServiceAccountCapabilityReference
type ServiceAccountCapabilityReference struct {
	// Gets or sets the name of the capability.
	Name NullableString `json:"Name,omitempty"`
	// Gets or sets the effective scope of the capability.
	EffectiveScope NullableString `json:"EffectiveScope,omitempty"`
	// Gets or sets the healthy status of the capability.
	IsHealthy *bool `json:"IsHealthy,omitempty"`
	// Gets or sets the failure reason of the capability.
	FailureReason NullableString `json:"FailureReason,omitempty"`
}

// NewServiceAccountCapabilityReference instantiates a new ServiceAccountCapabilityReference object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServiceAccountCapabilityReference() *ServiceAccountCapabilityReference {
	this := ServiceAccountCapabilityReference{}
	return &this
}

// NewServiceAccountCapabilityReferenceWithDefaults instantiates a new ServiceAccountCapabilityReference object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceAccountCapabilityReferenceWithDefaults() *ServiceAccountCapabilityReference {
	this := ServiceAccountCapabilityReference{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServiceAccountCapabilityReference) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServiceAccountCapabilityReference) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *ServiceAccountCapabilityReference) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *ServiceAccountCapabilityReference) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *ServiceAccountCapabilityReference) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *ServiceAccountCapabilityReference) UnsetName() {
	o.Name.Unset()
}

// GetEffectiveScope returns the EffectiveScope field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServiceAccountCapabilityReference) GetEffectiveScope() string {
	if o == nil || IsNil(o.EffectiveScope.Get()) {
		var ret string
		return ret
	}
	return *o.EffectiveScope.Get()
}

// GetEffectiveScopeOk returns a tuple with the EffectiveScope field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServiceAccountCapabilityReference) GetEffectiveScopeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EffectiveScope.Get(), o.EffectiveScope.IsSet()
}

// HasEffectiveScope returns a boolean if a field has been set.
func (o *ServiceAccountCapabilityReference) HasEffectiveScope() bool {
	if o != nil && o.EffectiveScope.IsSet() {
		return true
	}

	return false
}

// SetEffectiveScope gets a reference to the given NullableString and assigns it to the EffectiveScope field.
func (o *ServiceAccountCapabilityReference) SetEffectiveScope(v string) {
	o.EffectiveScope.Set(&v)
}
// SetEffectiveScopeNil sets the value for EffectiveScope to be an explicit nil
func (o *ServiceAccountCapabilityReference) SetEffectiveScopeNil() {
	o.EffectiveScope.Set(nil)
}

// UnsetEffectiveScope ensures that no value is present for EffectiveScope, not even an explicit nil
func (o *ServiceAccountCapabilityReference) UnsetEffectiveScope() {
	o.EffectiveScope.Unset()
}

// GetIsHealthy returns the IsHealthy field value if set, zero value otherwise.
func (o *ServiceAccountCapabilityReference) GetIsHealthy() bool {
	if o == nil || IsNil(o.IsHealthy) {
		var ret bool
		return ret
	}
	return *o.IsHealthy
}

// GetIsHealthyOk returns a tuple with the IsHealthy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceAccountCapabilityReference) GetIsHealthyOk() (*bool, bool) {
	if o == nil || IsNil(o.IsHealthy) {
		return nil, false
	}
	return o.IsHealthy, true
}

// HasIsHealthy returns a boolean if a field has been set.
func (o *ServiceAccountCapabilityReference) HasIsHealthy() bool {
	if o != nil && !IsNil(o.IsHealthy) {
		return true
	}

	return false
}

// SetIsHealthy gets a reference to the given bool and assigns it to the IsHealthy field.
func (o *ServiceAccountCapabilityReference) SetIsHealthy(v bool) {
	o.IsHealthy = &v
}

// GetFailureReason returns the FailureReason field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServiceAccountCapabilityReference) GetFailureReason() string {
	if o == nil || IsNil(o.FailureReason.Get()) {
		var ret string
		return ret
	}
	return *o.FailureReason.Get()
}

// GetFailureReasonOk returns a tuple with the FailureReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServiceAccountCapabilityReference) GetFailureReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FailureReason.Get(), o.FailureReason.IsSet()
}

// HasFailureReason returns a boolean if a field has been set.
func (o *ServiceAccountCapabilityReference) HasFailureReason() bool {
	if o != nil && o.FailureReason.IsSet() {
		return true
	}

	return false
}

// SetFailureReason gets a reference to the given NullableString and assigns it to the FailureReason field.
func (o *ServiceAccountCapabilityReference) SetFailureReason(v string) {
	o.FailureReason.Set(&v)
}
// SetFailureReasonNil sets the value for FailureReason to be an explicit nil
func (o *ServiceAccountCapabilityReference) SetFailureReasonNil() {
	o.FailureReason.Set(nil)
}

// UnsetFailureReason ensures that no value is present for FailureReason, not even an explicit nil
func (o *ServiceAccountCapabilityReference) UnsetFailureReason() {
	o.FailureReason.Unset()
}

func (o ServiceAccountCapabilityReference) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServiceAccountCapabilityReference) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Name.IsSet() {
		toSerialize["Name"] = o.Name.Get()
	}
	if o.EffectiveScope.IsSet() {
		toSerialize["EffectiveScope"] = o.EffectiveScope.Get()
	}
	if !IsNil(o.IsHealthy) {
		toSerialize["IsHealthy"] = o.IsHealthy
	}
	if o.FailureReason.IsSet() {
		toSerialize["FailureReason"] = o.FailureReason.Get()
	}
	return toSerialize, nil
}

type NullableServiceAccountCapabilityReference struct {
	value *ServiceAccountCapabilityReference
	isSet bool
}

func (v NullableServiceAccountCapabilityReference) Get() *ServiceAccountCapabilityReference {
	return v.value
}

func (v *NullableServiceAccountCapabilityReference) Set(val *ServiceAccountCapabilityReference) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceAccountCapabilityReference) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceAccountCapabilityReference) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceAccountCapabilityReference(val *ServiceAccountCapabilityReference) *NullableServiceAccountCapabilityReference {
	return &NullableServiceAccountCapabilityReference{value: val, isSet: true}
}

func (v NullableServiceAccountCapabilityReference) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceAccountCapabilityReference) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


