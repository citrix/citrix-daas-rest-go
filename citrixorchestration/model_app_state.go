/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
	"fmt"
)

// AppState State of a machine with respect to session launch.
type AppState string

// List of AppState
const (
	APPSTATE_UNKNOWN AppState = "Unknown"
	APPSTATE_PRE_LOGON AppState = "PreLogon"
	APPSTATE_PRE_LAUNCHED AppState = "PreLaunched"
	APPSTATE_ACTIVE AppState = "Active"
	APPSTATE_DESKTOP AppState = "Desktop"
	APPSTATE_LINGERING AppState = "Lingering"
	APPSTATE_NO_APPS AppState = "NoApps"
)

// All allowed values of AppState enum
var AllowedAppStateEnumValues = []AppState{
	"Unknown",
	"PreLogon",
	"PreLaunched",
	"Active",
	"Desktop",
	"Lingering",
	"NoApps",
}

func (v *AppState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AppState(value)
	for _, existing := range AllowedAppStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AppState", value)
}

// NewAppStateFromValue returns a pointer to a valid AppState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAppStateFromValue(v string) (*AppState, error) {
	ev := AppState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AppState: valid values are %v", v, AllowedAppStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AppState) IsValid() bool {
	for _, existing := range AllowedAppStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AppState value
func (v AppState) Ptr() *AppState {
	return &v
}

type NullableAppState struct {
	value *AppState
	isSet bool
}

func (v NullableAppState) Get() *AppState {
	return v.value
}

func (v *NullableAppState) Set(val *AppState) {
	v.value = val
	v.isSet = true
}

func (v NullableAppState) IsSet() bool {
	return v.isSet
}

func (v *NullableAppState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppState(val *AppState) *NullableAppState {
	return &NullableAppState{value: val, isSet: true}
}

func (v NullableAppState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

