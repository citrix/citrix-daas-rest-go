/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-onprem-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
	"fmt"
)

// DatabaseServerEdition
type DatabaseServerEdition string

// List of DatabaseServerEdition
const (
	DATABASESERVEREDITION_AZURE   DatabaseServerEdition = "Azure"
	DATABASESERVEREDITION_ON_PREM DatabaseServerEdition = "OnPrem"
)

// All allowed values of DatabaseServerEdition enum
var AllowedDatabaseServerEditionEnumValues = []DatabaseServerEdition{
	"Azure",
	"OnPrem",
}

func (v *DatabaseServerEdition) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	*v = DatabaseServerEdition(value)
	return nil
}

// NewDatabaseServerEditionFromValue returns a pointer to a valid DatabaseServerEdition
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDatabaseServerEditionFromValue(v string) (*DatabaseServerEdition, error) {
	ev := DatabaseServerEdition(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DatabaseServerEdition: valid values are %v", v, AllowedDatabaseServerEditionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DatabaseServerEdition) IsValid() bool {
	for _, existing := range AllowedDatabaseServerEditionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DatabaseServerEdition value
func (v DatabaseServerEdition) Ptr() *DatabaseServerEdition {
	return &v
}

type NullableDatabaseServerEdition struct {
	value *DatabaseServerEdition
	isSet bool
}

func (v NullableDatabaseServerEdition) Get() *DatabaseServerEdition {
	return v.value
}

func (v *NullableDatabaseServerEdition) Set(val *DatabaseServerEdition) {
	v.value = val
	v.isSet = true
}

func (v NullableDatabaseServerEdition) IsSet() bool {
	return v.isSet
}

func (v *NullableDatabaseServerEdition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatabaseServerEdition(val *DatabaseServerEdition) *NullableDatabaseServerEdition {
	return &NullableDatabaseServerEdition{value: val, isSet: true}
}

func (v NullableDatabaseServerEdition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatabaseServerEdition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
