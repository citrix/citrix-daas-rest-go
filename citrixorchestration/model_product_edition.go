/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
	"fmt"
)

// ProductEdition Type of product
type ProductEdition string

// List of ProductEdition
const (
	PRODUCTEDITION_UNKNOWN ProductEdition = "Unknown"
	PRODUCTEDITION_PLATINUM ProductEdition = "Platinum"
	PRODUCTEDITION_ENTERPRISE ProductEdition = "Enterprise"
	PRODUCTEDITION_APPS ProductEdition = "Apps"
	PRODUCTEDITION_VDI ProductEdition = "Vdi"
	PRODUCTEDITION_ADVANCED ProductEdition = "Advanced"
	PRODUCTEDITION_PRE ProductEdition = "PRE"
)

// All allowed values of ProductEdition enum
var AllowedProductEditionEnumValues = []ProductEdition{
	"Unknown",
	"Platinum",
	"Enterprise",
	"Apps",
	"Vdi",
	"Advanced",
	"PRE",
}

func (v *ProductEdition) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ProductEdition(value)
	for _, existing := range AllowedProductEditionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ProductEdition", value)
}

// NewProductEditionFromValue returns a pointer to a valid ProductEdition
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewProductEditionFromValue(v string) (*ProductEdition, error) {
	ev := ProductEdition(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ProductEdition: valid values are %v", v, AllowedProductEditionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ProductEdition) IsValid() bool {
	for _, existing := range AllowedProductEditionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ProductEdition value
func (v ProductEdition) Ptr() *ProductEdition {
	return &v
}

type NullableProductEdition struct {
	value *ProductEdition
	isSet bool
}

func (v NullableProductEdition) Get() *ProductEdition {
	return v.value
}

func (v *NullableProductEdition) Set(val *ProductEdition) {
	v.value = val
	v.isSet = true
}

func (v NullableProductEdition) IsSet() bool {
	return v.isSet
}

func (v *NullableProductEdition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductEdition(val *ProductEdition) *NullableProductEdition {
	return &NullableProductEdition{value: val, isSet: true}
}

func (v NullableProductEdition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductEdition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

