/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-onprem-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
	"fmt"
)

// ObjectType Types of object.
type ObjectType string

// List of ObjectType
const (
	OBJECTTYPE_UNKNOWN ObjectType = "Unknown"
	OBJECTTYPE_MACHINE_CATALOG ObjectType = "MachineCatalog"
	OBJECTTYPE_DELIVERY_GROUP ObjectType = "DeliveryGroup"
	OBJECTTYPE_MACHINE ObjectType = "Machine"
	OBJECTTYPE_APPLICATION ObjectType = "Application"
	OBJECTTYPE_APPLICATION_GROUP ObjectType = "ApplicationGroup"
	OBJECTTYPE_ADMIN_FOLDER ObjectType = "AdminFolder"
	OBJECTTYPE_TAG ObjectType = "Tag"
	OBJECTTYPE_ADMIN_ROLE ObjectType = "AdminRole"
	OBJECTTYPE_ADMIN_SCOPE ObjectType = "AdminScope"
	OBJECTTYPE_HYPERVISOR ObjectType = "Hypervisor"
	OBJECTTYPE_REMOTE_PC_ENROLLMENT_SCOPE ObjectType = "RemotePCEnrollmentScope"
	OBJECTTYPE_REBOOT_SCHEDULE ObjectType = "RebootSchedule"
	OBJECTTYPE_RESOURCE_POOL ObjectType = "ResourcePool"
	OBJECTTYPE_IMAGE ObjectType = "Image"
	OBJECTTYPE_ZONE ObjectType = "Zone"
	OBJECTTYPE_SITE ObjectType = "Site"
)

// All allowed values of ObjectType enum
var AllowedObjectTypeEnumValues = []ObjectType{
	"Unknown",
	"MachineCatalog",
	"DeliveryGroup",
	"Machine",
	"Application",
	"ApplicationGroup",
	"AdminFolder",
	"Tag",
	"AdminRole",
	"AdminScope",
	"Hypervisor",
	"RemotePCEnrollmentScope",
	"RebootSchedule",
	"ResourcePool",
	"Image",
	"Zone",
	"Site",
}

func (v *ObjectType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ObjectType(value)
	for _, existing := range AllowedObjectTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ObjectType", value)
}

// NewObjectTypeFromValue returns a pointer to a valid ObjectType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewObjectTypeFromValue(v string) (*ObjectType, error) {
	ev := ObjectType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ObjectType: valid values are %v", v, AllowedObjectTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ObjectType) IsValid() bool {
	for _, existing := range AllowedObjectTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ObjectType value
func (v ObjectType) Ptr() *ObjectType {
	return &v
}

type NullableObjectType struct {
	value *ObjectType
	isSet bool
}

func (v NullableObjectType) Get() *ObjectType {
	return v.value
}

func (v *NullableObjectType) Set(val *ObjectType) {
	v.value = val
	v.isSet = true
}

func (v NullableObjectType) IsSet() bool {
	return v.isSet
}

func (v *NullableObjectType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjectType(val *ObjectType) *NullableObjectType {
	return &NullableObjectType{value: val, isSet: true}
}

func (v NullableObjectType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjectType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

