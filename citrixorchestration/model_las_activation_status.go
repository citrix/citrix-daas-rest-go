/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-onprem-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
	"fmt"
)

// LasActivationStatus Type of DeliveryController state
type LasActivationStatus string

// List of LasActivationStatus
const (
	LASACTIVATIONSTATUS_ACTIVATED     LasActivationStatus = "Activated"
	LASACTIVATIONSTATUS_NOT_ACTIVATED LasActivationStatus = "NotActivated"
	LASACTIVATIONSTATUS_EXPIRED       LasActivationStatus = "Expired"
	LASACTIVATIONSTATUS_UNKNOWN       LasActivationStatus = "Unknown"
)

// All allowed values of LasActivationStatus enum
var AllowedLasActivationStatusEnumValues = []LasActivationStatus{
	"Activated",
	"NotActivated",
	"Expired",
	"Unknown",
}

func (v *LasActivationStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	*v = LasActivationStatus(value)
	return nil
}

// NewLasActivationStatusFromValue returns a pointer to a valid LasActivationStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLasActivationStatusFromValue(v string) (*LasActivationStatus, error) {
	ev := LasActivationStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LasActivationStatus: valid values are %v", v, AllowedLasActivationStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LasActivationStatus) IsValid() bool {
	for _, existing := range AllowedLasActivationStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LasActivationStatus value
func (v LasActivationStatus) Ptr() *LasActivationStatus {
	return &v
}

type NullableLasActivationStatus struct {
	value *LasActivationStatus
	isSet bool
}

func (v NullableLasActivationStatus) Get() *LasActivationStatus {
	return v.value
}

func (v *NullableLasActivationStatus) Set(val *LasActivationStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableLasActivationStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableLasActivationStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLasActivationStatus(val *LasActivationStatus) *NullableLasActivationStatus {
	return &NullableLasActivationStatus{value: val, isSet: true}
}

func (v NullableLasActivationStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLasActivationStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
