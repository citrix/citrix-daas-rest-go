/*
Citrix Virtual Apps and Desktops REST API TECHPREVIEW

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: techpreview
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
	"fmt"
)

// SupportedPowerAction Power actions which may be supported by a machine.
type SupportedPowerAction string

// List of SupportedPowerAction
const (
	SUPPORTEDPOWERACTION_UNKNOWN SupportedPowerAction = "Unknown"
	SUPPORTEDPOWERACTION_POWER_ON SupportedPowerAction = "PowerOn"
	SUPPORTEDPOWERACTION_POWER_OFF SupportedPowerAction = "PowerOff"
	SUPPORTEDPOWERACTION_SUSPEND_RESUME SupportedPowerAction = "SuspendResume"
	SUPPORTEDPOWERACTION_RESTART SupportedPowerAction = "Restart"
	SUPPORTEDPOWERACTION_RESET SupportedPowerAction = "Reset"
	SUPPORTEDPOWERACTION_SHUTDOWN SupportedPowerAction = "Shutdown"
)

// All allowed values of SupportedPowerAction enum
var AllowedSupportedPowerActionEnumValues = []SupportedPowerAction{
	"Unknown",
	"PowerOn",
	"PowerOff",
	"SuspendResume",
	"Restart",
	"Reset",
	"Shutdown",
}

func (v *SupportedPowerAction) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SupportedPowerAction(value)
	for _, existing := range AllowedSupportedPowerActionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SupportedPowerAction", value)
}

// NewSupportedPowerActionFromValue returns a pointer to a valid SupportedPowerAction
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSupportedPowerActionFromValue(v string) (*SupportedPowerAction, error) {
	ev := SupportedPowerAction(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SupportedPowerAction: valid values are %v", v, AllowedSupportedPowerActionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SupportedPowerAction) IsValid() bool {
	for _, existing := range AllowedSupportedPowerActionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SupportedPowerAction value
func (v SupportedPowerAction) Ptr() *SupportedPowerAction {
	return &v
}

type NullableSupportedPowerAction struct {
	value *SupportedPowerAction
	isSet bool
}

func (v NullableSupportedPowerAction) Get() *SupportedPowerAction {
	return v.value
}

func (v *NullableSupportedPowerAction) Set(val *SupportedPowerAction) {
	v.value = val
	v.isSet = true
}

func (v NullableSupportedPowerAction) IsSet() bool {
	return v.isSet
}

func (v *NullableSupportedPowerAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSupportedPowerAction(val *SupportedPowerAction) *NullableSupportedPowerAction {
	return &NullableSupportedPowerAction{value: val, isSet: true}
}

func (v NullableSupportedPowerAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSupportedPowerAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

