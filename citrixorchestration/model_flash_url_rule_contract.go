/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-onprem-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
)

// checks if the FlashUrlRuleContract type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FlashUrlRuleContract{}

// FlashUrlRuleContract struct for FlashUrlRuleContract
type FlashUrlRuleContract struct {
	RenderAction *FlashUrlRenderAction `json:"RenderAction,omitempty"`
	UrlPattern NullableString `json:"UrlPattern,omitempty"`
	FlashInstance NullableString `json:"FlashInstance,omitempty"`
}

// NewFlashUrlRuleContract instantiates a new FlashUrlRuleContract object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFlashUrlRuleContract() *FlashUrlRuleContract {
	this := FlashUrlRuleContract{}
	return &this
}

// NewFlashUrlRuleContractWithDefaults instantiates a new FlashUrlRuleContract object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFlashUrlRuleContractWithDefaults() *FlashUrlRuleContract {
	this := FlashUrlRuleContract{}
	return &this
}

// GetRenderAction returns the RenderAction field value if set, zero value otherwise.
func (o *FlashUrlRuleContract) GetRenderAction() FlashUrlRenderAction {
	if o == nil || IsNil(o.RenderAction) {
		var ret FlashUrlRenderAction
		return ret
	}
	return *o.RenderAction
}

// GetRenderActionOk returns a tuple with the RenderAction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlashUrlRuleContract) GetRenderActionOk() (*FlashUrlRenderAction, bool) {
	if o == nil || IsNil(o.RenderAction) {
		return nil, false
	}
	return o.RenderAction, true
}

// HasRenderAction returns a boolean if a field has been set.
func (o *FlashUrlRuleContract) HasRenderAction() bool {
	if o != nil && !IsNil(o.RenderAction) {
		return true
	}

	return false
}

// SetRenderAction gets a reference to the given FlashUrlRenderAction and assigns it to the RenderAction field.
func (o *FlashUrlRuleContract) SetRenderAction(v FlashUrlRenderAction) {
	o.RenderAction = &v
}

// GetUrlPattern returns the UrlPattern field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FlashUrlRuleContract) GetUrlPattern() string {
	if o == nil || IsNil(o.UrlPattern.Get()) {
		var ret string
		return ret
	}
	return *o.UrlPattern.Get()
}

// GetUrlPatternOk returns a tuple with the UrlPattern field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FlashUrlRuleContract) GetUrlPatternOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UrlPattern.Get(), o.UrlPattern.IsSet()
}

// HasUrlPattern returns a boolean if a field has been set.
func (o *FlashUrlRuleContract) HasUrlPattern() bool {
	if o != nil && o.UrlPattern.IsSet() {
		return true
	}

	return false
}

// SetUrlPattern gets a reference to the given NullableString and assigns it to the UrlPattern field.
func (o *FlashUrlRuleContract) SetUrlPattern(v string) {
	o.UrlPattern.Set(&v)
}
// SetUrlPatternNil sets the value for UrlPattern to be an explicit nil
func (o *FlashUrlRuleContract) SetUrlPatternNil() {
	o.UrlPattern.Set(nil)
}

// UnsetUrlPattern ensures that no value is present for UrlPattern, not even an explicit nil
func (o *FlashUrlRuleContract) UnsetUrlPattern() {
	o.UrlPattern.Unset()
}

// GetFlashInstance returns the FlashInstance field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FlashUrlRuleContract) GetFlashInstance() string {
	if o == nil || IsNil(o.FlashInstance.Get()) {
		var ret string
		return ret
	}
	return *o.FlashInstance.Get()
}

// GetFlashInstanceOk returns a tuple with the FlashInstance field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FlashUrlRuleContract) GetFlashInstanceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FlashInstance.Get(), o.FlashInstance.IsSet()
}

// HasFlashInstance returns a boolean if a field has been set.
func (o *FlashUrlRuleContract) HasFlashInstance() bool {
	if o != nil && o.FlashInstance.IsSet() {
		return true
	}

	return false
}

// SetFlashInstance gets a reference to the given NullableString and assigns it to the FlashInstance field.
func (o *FlashUrlRuleContract) SetFlashInstance(v string) {
	o.FlashInstance.Set(&v)
}
// SetFlashInstanceNil sets the value for FlashInstance to be an explicit nil
func (o *FlashUrlRuleContract) SetFlashInstanceNil() {
	o.FlashInstance.Set(nil)
}

// UnsetFlashInstance ensures that no value is present for FlashInstance, not even an explicit nil
func (o *FlashUrlRuleContract) UnsetFlashInstance() {
	o.FlashInstance.Unset()
}

func (o FlashUrlRuleContract) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FlashUrlRuleContract) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RenderAction) {
		toSerialize["RenderAction"] = o.RenderAction
	}
	if o.UrlPattern.IsSet() {
		toSerialize["UrlPattern"] = o.UrlPattern.Get()
	}
	if o.FlashInstance.IsSet() {
		toSerialize["FlashInstance"] = o.FlashInstance.Get()
	}
	return toSerialize, nil
}

type NullableFlashUrlRuleContract struct {
	value *FlashUrlRuleContract
	isSet bool
}

func (v NullableFlashUrlRuleContract) Get() *FlashUrlRuleContract {
	return v.value
}

func (v *NullableFlashUrlRuleContract) Set(val *FlashUrlRuleContract) {
	v.value = val
	v.isSet = true
}

func (v NullableFlashUrlRuleContract) IsSet() bool {
	return v.isSet
}

func (v *NullableFlashUrlRuleContract) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFlashUrlRuleContract(val *FlashUrlRuleContract) *NullableFlashUrlRuleContract {
	return &NullableFlashUrlRuleContract{value: val, isSet: true}
}

func (v NullableFlashUrlRuleContract) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFlashUrlRuleContract) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


