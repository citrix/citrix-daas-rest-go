/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
	"fmt"
)

// AppVSource 
type AppVSource string

// List of AppVSource
const (
	APPVSOURCE_UNKNOWN AppVSource = "Unknown"
	APPVSOURCE_APP_V_SERVER AppVSource = "AppVServer"
	APPVSOURCE_APP_LIBRARY AppVSource = "AppLibrary"
)

// All allowed values of AppVSource enum
var AllowedAppVSourceEnumValues = []AppVSource{
	"Unknown",
	"AppVServer",
	"AppLibrary",
}

func (v *AppVSource) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AppVSource(value)
	for _, existing := range AllowedAppVSourceEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AppVSource", value)
}

// NewAppVSourceFromValue returns a pointer to a valid AppVSource
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAppVSourceFromValue(v string) (*AppVSource, error) {
	ev := AppVSource(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AppVSource: valid values are %v", v, AllowedAppVSourceEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AppVSource) IsValid() bool {
	for _, existing := range AllowedAppVSourceEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AppVSource value
func (v AppVSource) Ptr() *AppVSource {
	return &v
}

type NullableAppVSource struct {
	value *AppVSource
	isSet bool
}

func (v NullableAppVSource) Get() *AppVSource {
	return v.value
}

func (v *NullableAppVSource) Set(val *AppVSource) {
	v.value = val
	v.isSet = true
}

func (v NullableAppVSource) IsSet() bool {
	return v.isSet
}

func (v *NullableAppVSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppVSource(val *AppVSource) *NullableAppVSource {
	return &NullableAppVSource{value: val, isSet: true}
}

func (v NullableAppVSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppVSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

