/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-onprem-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
)

// checks if the CheckObjectNameExistsRequestModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CheckObjectNameExistsRequestModel{}

// CheckObjectNameExistsRequestModel Details of the object.
type CheckObjectNameExistsRequestModel struct {
	ObjectType ObjectType `json:"ObjectType"`
	// Name or path of the object to check.
	NameOrPath string `json:"NameOrPath"`
}

type _CheckObjectNameExistsRequestModel CheckObjectNameExistsRequestModel

// NewCheckObjectNameExistsRequestModel instantiates a new CheckObjectNameExistsRequestModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCheckObjectNameExistsRequestModel(objectType ObjectType, nameOrPath string) *CheckObjectNameExistsRequestModel {
	this := CheckObjectNameExistsRequestModel{}
	this.ObjectType = objectType
	this.NameOrPath = nameOrPath
	return &this
}

// NewCheckObjectNameExistsRequestModelWithDefaults instantiates a new CheckObjectNameExistsRequestModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCheckObjectNameExistsRequestModelWithDefaults() *CheckObjectNameExistsRequestModel {
	this := CheckObjectNameExistsRequestModel{}
	return &this
}

// GetObjectType returns the ObjectType field value
func (o *CheckObjectNameExistsRequestModel) GetObjectType() ObjectType {
	if o == nil {
		var ret ObjectType
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *CheckObjectNameExistsRequestModel) GetObjectTypeOk() (*ObjectType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *CheckObjectNameExistsRequestModel) SetObjectType(v ObjectType) {
	o.ObjectType = v
}

// GetNameOrPath returns the NameOrPath field value
func (o *CheckObjectNameExistsRequestModel) GetNameOrPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NameOrPath
}

// GetNameOrPathOk returns a tuple with the NameOrPath field value
// and a boolean to check if the value has been set.
func (o *CheckObjectNameExistsRequestModel) GetNameOrPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NameOrPath, true
}

// SetNameOrPath sets field value
func (o *CheckObjectNameExistsRequestModel) SetNameOrPath(v string) {
	o.NameOrPath = v
}

func (o CheckObjectNameExistsRequestModel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CheckObjectNameExistsRequestModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ObjectType"] = o.ObjectType
	toSerialize["NameOrPath"] = o.NameOrPath
	return toSerialize, nil
}

type NullableCheckObjectNameExistsRequestModel struct {
	value *CheckObjectNameExistsRequestModel
	isSet bool
}

func (v NullableCheckObjectNameExistsRequestModel) Get() *CheckObjectNameExistsRequestModel {
	return v.value
}

func (v *NullableCheckObjectNameExistsRequestModel) Set(val *CheckObjectNameExistsRequestModel) {
	v.value = val
	v.isSet = true
}

func (v NullableCheckObjectNameExistsRequestModel) IsSet() bool {
	return v.isSet
}

func (v *NullableCheckObjectNameExistsRequestModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCheckObjectNameExistsRequestModel(val *CheckObjectNameExistsRequestModel) *NullableCheckObjectNameExistsRequestModel {
	return &NullableCheckObjectNameExistsRequestModel{value: val, isSet: true}
}

func (v NullableCheckObjectNameExistsRequestModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCheckObjectNameExistsRequestModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
