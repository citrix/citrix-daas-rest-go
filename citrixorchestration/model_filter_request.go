/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-onprem-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
)

// checks if the FilterRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FilterRequest{}

// FilterRequest Data for specifying a filter request.
type FilterRequest struct {
	// The filter type.
	FilterType NullableString `json:"filterType,omitempty"`
	// Filtered policy is allowed or denied if the filter condition is met.
	IsAllowed *bool `json:"isAllowed,omitempty"`
	// Filter is enabled or disabled.
	IsEnabled *bool `json:"isEnabled,omitempty"`
	// Filter data as a serialized JSON string. This is ignored if the filter is a Citrix SD-Wan filter.
	FilterData NullableString `json:"filterData,omitempty"`
}

// NewFilterRequest instantiates a new FilterRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFilterRequest() *FilterRequest {
	this := FilterRequest{}
	return &this
}

// NewFilterRequestWithDefaults instantiates a new FilterRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFilterRequestWithDefaults() *FilterRequest {
	this := FilterRequest{}
	return &this
}

// GetFilterType returns the FilterType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FilterRequest) GetFilterType() string {
	if o == nil || IsNil(o.FilterType.Get()) {
		var ret string
		return ret
	}
	return *o.FilterType.Get()
}

// GetFilterTypeOk returns a tuple with the FilterType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FilterRequest) GetFilterTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FilterType.Get(), o.FilterType.IsSet()
}

// HasFilterType returns a boolean if a field has been set.
func (o *FilterRequest) HasFilterType() bool {
	if o != nil && o.FilterType.IsSet() {
		return true
	}

	return false
}

// SetFilterType gets a reference to the given NullableString and assigns it to the FilterType field.
func (o *FilterRequest) SetFilterType(v string) {
	o.FilterType.Set(&v)
}

// SetFilterTypeNil sets the value for FilterType to be an explicit nil
func (o *FilterRequest) SetFilterTypeNil() {
	o.FilterType.Set(nil)
}

// UnsetFilterType ensures that no value is present for FilterType, not even an explicit nil
func (o *FilterRequest) UnsetFilterType() {
	o.FilterType.Unset()
}

// GetIsAllowed returns the IsAllowed field value if set, zero value otherwise.
func (o *FilterRequest) GetIsAllowed() bool {
	if o == nil || IsNil(o.IsAllowed) {
		var ret bool
		return ret
	}
	return *o.IsAllowed
}

// GetIsAllowedOk returns a tuple with the IsAllowed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilterRequest) GetIsAllowedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsAllowed) {
		return nil, false
	}
	return o.IsAllowed, true
}

// HasIsAllowed returns a boolean if a field has been set.
func (o *FilterRequest) HasIsAllowed() bool {
	if o != nil && !IsNil(o.IsAllowed) {
		return true
	}

	return false
}

// SetIsAllowed gets a reference to the given bool and assigns it to the IsAllowed field.
func (o *FilterRequest) SetIsAllowed(v bool) {
	o.IsAllowed = &v
}

// GetIsEnabled returns the IsEnabled field value if set, zero value otherwise.
func (o *FilterRequest) GetIsEnabled() bool {
	if o == nil || IsNil(o.IsEnabled) {
		var ret bool
		return ret
	}
	return *o.IsEnabled
}

// GetIsEnabledOk returns a tuple with the IsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilterRequest) GetIsEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsEnabled) {
		return nil, false
	}
	return o.IsEnabled, true
}

// HasIsEnabled returns a boolean if a field has been set.
func (o *FilterRequest) HasIsEnabled() bool {
	if o != nil && !IsNil(o.IsEnabled) {
		return true
	}

	return false
}

// SetIsEnabled gets a reference to the given bool and assigns it to the IsEnabled field.
func (o *FilterRequest) SetIsEnabled(v bool) {
	o.IsEnabled = &v
}

// GetFilterData returns the FilterData field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FilterRequest) GetFilterData() string {
	if o == nil || IsNil(o.FilterData.Get()) {
		var ret string
		return ret
	}
	return *o.FilterData.Get()
}

// GetFilterDataOk returns a tuple with the FilterData field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FilterRequest) GetFilterDataOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FilterData.Get(), o.FilterData.IsSet()
}

// HasFilterData returns a boolean if a field has been set.
func (o *FilterRequest) HasFilterData() bool {
	if o != nil && o.FilterData.IsSet() {
		return true
	}

	return false
}

// SetFilterData gets a reference to the given NullableString and assigns it to the FilterData field.
func (o *FilterRequest) SetFilterData(v string) {
	o.FilterData.Set(&v)
}

// SetFilterDataNil sets the value for FilterData to be an explicit nil
func (o *FilterRequest) SetFilterDataNil() {
	o.FilterData.Set(nil)
}

// UnsetFilterData ensures that no value is present for FilterData, not even an explicit nil
func (o *FilterRequest) UnsetFilterData() {
	o.FilterData.Unset()
}

func (o FilterRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FilterRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.FilterType.IsSet() {
		toSerialize["filterType"] = o.FilterType.Get()
	}
	if !IsNil(o.IsAllowed) {
		toSerialize["isAllowed"] = o.IsAllowed
	}
	if !IsNil(o.IsEnabled) {
		toSerialize["isEnabled"] = o.IsEnabled
	}
	if o.FilterData.IsSet() {
		toSerialize["filterData"] = o.FilterData.Get()
	}
	return toSerialize, nil
}

type NullableFilterRequest struct {
	value *FilterRequest
	isSet bool
}

func (v NullableFilterRequest) Get() *FilterRequest {
	return v.value
}

func (v *NullableFilterRequest) Set(val *FilterRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableFilterRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableFilterRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilterRequest(val *FilterRequest) *NullableFilterRequest {
	return &NullableFilterRequest{value: val, isSet: true}
}

func (v NullableFilterRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilterRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
