/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
	"fmt"
)

// IdentityType Azure AD join type for machines
type IdentityType string

// List of IdentityType
const (
	IDENTITYTYPE_UNKNOWN IdentityType = "Unknown"
	IDENTITYTYPE_ACTIVE_DIRECTORY IdentityType = "ActiveDirectory"
	IDENTITYTYPE_WORKGROUP IdentityType = "Workgroup"
	IDENTITYTYPE_HYBRID_AZURE_AD IdentityType = "HybridAzureAD"
	IDENTITYTYPE_AZURE_AD IdentityType = "AzureAD"
)

// All allowed values of IdentityType enum
var AllowedIdentityTypeEnumValues = []IdentityType{
	"Unknown",
	"ActiveDirectory",
	"Workgroup",
	"HybridAzureAD",
	"AzureAD",
}

func (v *IdentityType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := IdentityType(value)
	for _, existing := range AllowedIdentityTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid IdentityType", value)
}

// NewIdentityTypeFromValue returns a pointer to a valid IdentityType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewIdentityTypeFromValue(v string) (*IdentityType, error) {
	ev := IdentityType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for IdentityType: valid values are %v", v, AllowedIdentityTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v IdentityType) IsValid() bool {
	for _, existing := range AllowedIdentityTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to IdentityType value
func (v IdentityType) Ptr() *IdentityType {
	return &v
}

type NullableIdentityType struct {
	value *IdentityType
	isSet bool
}

func (v NullableIdentityType) Get() *IdentityType {
	return v.value
}

func (v *NullableIdentityType) Set(val *IdentityType) {
	v.value = val
	v.isSet = true
}

func (v NullableIdentityType) IsSet() bool {
	return v.isSet
}

func (v *NullableIdentityType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdentityType(val *IdentityType) *NullableIdentityType {
	return &NullableIdentityType{value: val, isSet: true}
}

func (v NullableIdentityType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdentityType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

