/*
Citrix Virtual Apps and Desktops REST API TECHPREVIEW

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: techpreview
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
)

// checks if the HypervisorPluginResponseModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HypervisorPluginResponseModel{}

// HypervisorPluginResponseModel Hypervisor plugin response model.
type HypervisorPluginResponseModel struct {
	ConnectionType *HypervisorConnectionType `json:"ConnectionType,omitempty"`
	// Hypervisor display name. 
	DisplayName *string `json:"DisplayName,omitempty"`
	// Plugin factory name.
	PluginFactoryName *string `json:"PluginFactoryName,omitempty"`
	// If use Cloud Infrastructure.
	UsesCloudInfrastructure *bool `json:"UsesCloudInfrastructure,omitempty"`
	// This property only used when ConnectionType is AzureRM This property provides all supported Azure environments.
	Environments []HypervisorAzureEnvironmentResponseModel `json:"Environments,omitempty"`
	// If the plugin is verified by Citrix.
	CitrixVerified *bool `json:"CitrixVerified,omitempty"`
}

// NewHypervisorPluginResponseModel instantiates a new HypervisorPluginResponseModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHypervisorPluginResponseModel() *HypervisorPluginResponseModel {
	this := HypervisorPluginResponseModel{}
	return &this
}

// NewHypervisorPluginResponseModelWithDefaults instantiates a new HypervisorPluginResponseModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHypervisorPluginResponseModelWithDefaults() *HypervisorPluginResponseModel {
	this := HypervisorPluginResponseModel{}
	return &this
}

// GetConnectionType returns the ConnectionType field value if set, zero value otherwise.
func (o *HypervisorPluginResponseModel) GetConnectionType() HypervisorConnectionType {
	if o == nil || IsNil(o.ConnectionType) {
		var ret HypervisorConnectionType
		return ret
	}
	return *o.ConnectionType
}

// GetConnectionTypeOk returns a tuple with the ConnectionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HypervisorPluginResponseModel) GetConnectionTypeOk() (*HypervisorConnectionType, bool) {
	if o == nil || IsNil(o.ConnectionType) {
		return nil, false
	}
	return o.ConnectionType, true
}

// HasConnectionType returns a boolean if a field has been set.
func (o *HypervisorPluginResponseModel) HasConnectionType() bool {
	if o != nil && !IsNil(o.ConnectionType) {
		return true
	}

	return false
}

// SetConnectionType gets a reference to the given HypervisorConnectionType and assigns it to the ConnectionType field.
func (o *HypervisorPluginResponseModel) SetConnectionType(v HypervisorConnectionType) {
	o.ConnectionType = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *HypervisorPluginResponseModel) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HypervisorPluginResponseModel) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *HypervisorPluginResponseModel) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *HypervisorPluginResponseModel) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetPluginFactoryName returns the PluginFactoryName field value if set, zero value otherwise.
func (o *HypervisorPluginResponseModel) GetPluginFactoryName() string {
	if o == nil || IsNil(o.PluginFactoryName) {
		var ret string
		return ret
	}
	return *o.PluginFactoryName
}

// GetPluginFactoryNameOk returns a tuple with the PluginFactoryName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HypervisorPluginResponseModel) GetPluginFactoryNameOk() (*string, bool) {
	if o == nil || IsNil(o.PluginFactoryName) {
		return nil, false
	}
	return o.PluginFactoryName, true
}

// HasPluginFactoryName returns a boolean if a field has been set.
func (o *HypervisorPluginResponseModel) HasPluginFactoryName() bool {
	if o != nil && !IsNil(o.PluginFactoryName) {
		return true
	}

	return false
}

// SetPluginFactoryName gets a reference to the given string and assigns it to the PluginFactoryName field.
func (o *HypervisorPluginResponseModel) SetPluginFactoryName(v string) {
	o.PluginFactoryName = &v
}

// GetUsesCloudInfrastructure returns the UsesCloudInfrastructure field value if set, zero value otherwise.
func (o *HypervisorPluginResponseModel) GetUsesCloudInfrastructure() bool {
	if o == nil || IsNil(o.UsesCloudInfrastructure) {
		var ret bool
		return ret
	}
	return *o.UsesCloudInfrastructure
}

// GetUsesCloudInfrastructureOk returns a tuple with the UsesCloudInfrastructure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HypervisorPluginResponseModel) GetUsesCloudInfrastructureOk() (*bool, bool) {
	if o == nil || IsNil(o.UsesCloudInfrastructure) {
		return nil, false
	}
	return o.UsesCloudInfrastructure, true
}

// HasUsesCloudInfrastructure returns a boolean if a field has been set.
func (o *HypervisorPluginResponseModel) HasUsesCloudInfrastructure() bool {
	if o != nil && !IsNil(o.UsesCloudInfrastructure) {
		return true
	}

	return false
}

// SetUsesCloudInfrastructure gets a reference to the given bool and assigns it to the UsesCloudInfrastructure field.
func (o *HypervisorPluginResponseModel) SetUsesCloudInfrastructure(v bool) {
	o.UsesCloudInfrastructure = &v
}

// GetEnvironments returns the Environments field value if set, zero value otherwise.
func (o *HypervisorPluginResponseModel) GetEnvironments() []HypervisorAzureEnvironmentResponseModel {
	if o == nil || IsNil(o.Environments) {
		var ret []HypervisorAzureEnvironmentResponseModel
		return ret
	}
	return o.Environments
}

// GetEnvironmentsOk returns a tuple with the Environments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HypervisorPluginResponseModel) GetEnvironmentsOk() ([]HypervisorAzureEnvironmentResponseModel, bool) {
	if o == nil || IsNil(o.Environments) {
		return nil, false
	}
	return o.Environments, true
}

// HasEnvironments returns a boolean if a field has been set.
func (o *HypervisorPluginResponseModel) HasEnvironments() bool {
	if o != nil && !IsNil(o.Environments) {
		return true
	}

	return false
}

// SetEnvironments gets a reference to the given []HypervisorAzureEnvironmentResponseModel and assigns it to the Environments field.
func (o *HypervisorPluginResponseModel) SetEnvironments(v []HypervisorAzureEnvironmentResponseModel) {
	o.Environments = v
}

// GetCitrixVerified returns the CitrixVerified field value if set, zero value otherwise.
func (o *HypervisorPluginResponseModel) GetCitrixVerified() bool {
	if o == nil || IsNil(o.CitrixVerified) {
		var ret bool
		return ret
	}
	return *o.CitrixVerified
}

// GetCitrixVerifiedOk returns a tuple with the CitrixVerified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HypervisorPluginResponseModel) GetCitrixVerifiedOk() (*bool, bool) {
	if o == nil || IsNil(o.CitrixVerified) {
		return nil, false
	}
	return o.CitrixVerified, true
}

// HasCitrixVerified returns a boolean if a field has been set.
func (o *HypervisorPluginResponseModel) HasCitrixVerified() bool {
	if o != nil && !IsNil(o.CitrixVerified) {
		return true
	}

	return false
}

// SetCitrixVerified gets a reference to the given bool and assigns it to the CitrixVerified field.
func (o *HypervisorPluginResponseModel) SetCitrixVerified(v bool) {
	o.CitrixVerified = &v
}

func (o HypervisorPluginResponseModel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HypervisorPluginResponseModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ConnectionType) {
		toSerialize["ConnectionType"] = o.ConnectionType
	}
	if !IsNil(o.DisplayName) {
		toSerialize["DisplayName"] = o.DisplayName
	}
	if !IsNil(o.PluginFactoryName) {
		toSerialize["PluginFactoryName"] = o.PluginFactoryName
	}
	if !IsNil(o.UsesCloudInfrastructure) {
		toSerialize["UsesCloudInfrastructure"] = o.UsesCloudInfrastructure
	}
	if !IsNil(o.Environments) {
		toSerialize["Environments"] = o.Environments
	}
	if !IsNil(o.CitrixVerified) {
		toSerialize["CitrixVerified"] = o.CitrixVerified
	}
	return toSerialize, nil
}

type NullableHypervisorPluginResponseModel struct {
	value *HypervisorPluginResponseModel
	isSet bool
}

func (v NullableHypervisorPluginResponseModel) Get() *HypervisorPluginResponseModel {
	return v.value
}

func (v *NullableHypervisorPluginResponseModel) Set(val *HypervisorPluginResponseModel) {
	v.value = val
	v.isSet = true
}

func (v NullableHypervisorPluginResponseModel) IsSet() bool {
	return v.isSet
}

func (v *NullableHypervisorPluginResponseModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHypervisorPluginResponseModel(val *HypervisorPluginResponseModel) *NullableHypervisorPluginResponseModel {
	return &NullableHypervisorPluginResponseModel{value: val, isSet: true}
}

func (v NullableHypervisorPluginResponseModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHypervisorPluginResponseModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


