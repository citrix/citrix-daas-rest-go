/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-onprem-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
	"fmt"
)

// IdentityLogonType The type of log on operation to perform.
type IdentityLogonType string

// List of IdentityLogonType
const (
	IDENTITYLOGONTYPE_UNKNOWN            IdentityLogonType = "Unknown"
	IDENTITYLOGONTYPE_INTERACTIVE        IdentityLogonType = "Interactive"
	IDENTITYLOGONTYPE_NETWORK_CLEAR_TEXT IdentityLogonType = "NetworkClearText"
)

// All allowed values of IdentityLogonType enum
var AllowedIdentityLogonTypeEnumValues = []IdentityLogonType{
	"Unknown",
	"Interactive",
	"NetworkClearText",
}

func (v *IdentityLogonType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	*v = IdentityLogonType(value)
	return nil
}

// NewIdentityLogonTypeFromValue returns a pointer to a valid IdentityLogonType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewIdentityLogonTypeFromValue(v string) (*IdentityLogonType, error) {
	ev := IdentityLogonType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for IdentityLogonType: valid values are %v", v, AllowedIdentityLogonTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v IdentityLogonType) IsValid() bool {
	for _, existing := range AllowedIdentityLogonTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to IdentityLogonType value
func (v IdentityLogonType) Ptr() *IdentityLogonType {
	return &v
}

type NullableIdentityLogonType struct {
	value *IdentityLogonType
	isSet bool
}

func (v NullableIdentityLogonType) Get() *IdentityLogonType {
	return v.value
}

func (v *NullableIdentityLogonType) Set(val *IdentityLogonType) {
	v.value = val
	v.isSet = true
}

func (v NullableIdentityLogonType) IsSet() bool {
	return v.isSet
}

func (v *NullableIdentityLogonType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdentityLogonType(val *IdentityLogonType) *NullableIdentityLogonType {
	return &NullableIdentityLogonType{value: val, isSet: true}
}

func (v NullableIdentityLogonType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdentityLogonType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
