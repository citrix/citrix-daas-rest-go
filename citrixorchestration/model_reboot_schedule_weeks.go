/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-onprem-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
	"fmt"
)

// RebootScheduleWeeks Weeks to use for a reboot schedule.
type RebootScheduleWeeks string

// List of RebootScheduleWeeks
const (
	REBOOTSCHEDULEWEEKS_UNKNOWN RebootScheduleWeeks = "Unknown"
	REBOOTSCHEDULEWEEKS_FIRST RebootScheduleWeeks = "First"
	REBOOTSCHEDULEWEEKS_SECOND RebootScheduleWeeks = "Second"
	REBOOTSCHEDULEWEEKS_THIRD RebootScheduleWeeks = "Third"
	REBOOTSCHEDULEWEEKS_FOURTH RebootScheduleWeeks = "Fourth"
	REBOOTSCHEDULEWEEKS_LAST RebootScheduleWeeks = "Last"
)

// All allowed values of RebootScheduleWeeks enum
var AllowedRebootScheduleWeeksEnumValues = []RebootScheduleWeeks{
	"Unknown",
	"First",
	"Second",
	"Third",
	"Fourth",
	"Last",
}

func (v *RebootScheduleWeeks) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	
	*v = RebootScheduleWeeks(value)
	return nil
}

// NewRebootScheduleWeeksFromValue returns a pointer to a valid RebootScheduleWeeks
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRebootScheduleWeeksFromValue(v string) (*RebootScheduleWeeks, error) {
	ev := RebootScheduleWeeks(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RebootScheduleWeeks: valid values are %v", v, AllowedRebootScheduleWeeksEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RebootScheduleWeeks) IsValid() bool {
	for _, existing := range AllowedRebootScheduleWeeksEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RebootScheduleWeeks value
func (v RebootScheduleWeeks) Ptr() *RebootScheduleWeeks {
	return &v
}

type NullableRebootScheduleWeeks struct {
	value *RebootScheduleWeeks
	isSet bool
}

func (v NullableRebootScheduleWeeks) Get() *RebootScheduleWeeks {
	return v.value
}

func (v *NullableRebootScheduleWeeks) Set(val *RebootScheduleWeeks) {
	v.value = val
	v.isSet = true
}

func (v NullableRebootScheduleWeeks) IsSet() bool {
	return v.isSet
}

func (v *NullableRebootScheduleWeeks) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRebootScheduleWeeks(val *RebootScheduleWeeks) *NullableRebootScheduleWeeks {
	return &NullableRebootScheduleWeeks{value: val, isSet: true}
}

func (v NullableRebootScheduleWeeks) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRebootScheduleWeeks) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

