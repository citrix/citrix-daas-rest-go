/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
)

// checks if the ImageVersionCatalogResponseModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ImageVersionCatalogResponseModel{}

// ImageVersionCatalogResponseModel Catalog response for image version.
type ImageVersionCatalogResponseModel struct {
	// catalog uid
	CatalogUid *string `json:"CatalogUid,omitempty"`
	// catalog name
	CatalogName NullableString `json:"CatalogName,omitempty"`
}

// NewImageVersionCatalogResponseModel instantiates a new ImageVersionCatalogResponseModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImageVersionCatalogResponseModel() *ImageVersionCatalogResponseModel {
	this := ImageVersionCatalogResponseModel{}
	return &this
}

// NewImageVersionCatalogResponseModelWithDefaults instantiates a new ImageVersionCatalogResponseModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImageVersionCatalogResponseModelWithDefaults() *ImageVersionCatalogResponseModel {
	this := ImageVersionCatalogResponseModel{}
	return &this
}

// GetCatalogUid returns the CatalogUid field value if set, zero value otherwise.
func (o *ImageVersionCatalogResponseModel) GetCatalogUid() string {
	if o == nil || IsNil(o.CatalogUid) {
		var ret string
		return ret
	}
	return *o.CatalogUid
}

// GetCatalogUidOk returns a tuple with the CatalogUid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageVersionCatalogResponseModel) GetCatalogUidOk() (*string, bool) {
	if o == nil || IsNil(o.CatalogUid) {
		return nil, false
	}
	return o.CatalogUid, true
}

// HasCatalogUid returns a boolean if a field has been set.
func (o *ImageVersionCatalogResponseModel) HasCatalogUid() bool {
	if o != nil && !IsNil(o.CatalogUid) {
		return true
	}

	return false
}

// SetCatalogUid gets a reference to the given string and assigns it to the CatalogUid field.
func (o *ImageVersionCatalogResponseModel) SetCatalogUid(v string) {
	o.CatalogUid = &v
}

// GetCatalogName returns the CatalogName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ImageVersionCatalogResponseModel) GetCatalogName() string {
	if o == nil || IsNil(o.CatalogName.Get()) {
		var ret string
		return ret
	}
	return *o.CatalogName.Get()
}

// GetCatalogNameOk returns a tuple with the CatalogName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ImageVersionCatalogResponseModel) GetCatalogNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CatalogName.Get(), o.CatalogName.IsSet()
}

// HasCatalogName returns a boolean if a field has been set.
func (o *ImageVersionCatalogResponseModel) HasCatalogName() bool {
	if o != nil && o.CatalogName.IsSet() {
		return true
	}

	return false
}

// SetCatalogName gets a reference to the given NullableString and assigns it to the CatalogName field.
func (o *ImageVersionCatalogResponseModel) SetCatalogName(v string) {
	o.CatalogName.Set(&v)
}
// SetCatalogNameNil sets the value for CatalogName to be an explicit nil
func (o *ImageVersionCatalogResponseModel) SetCatalogNameNil() {
	o.CatalogName.Set(nil)
}

// UnsetCatalogName ensures that no value is present for CatalogName, not even an explicit nil
func (o *ImageVersionCatalogResponseModel) UnsetCatalogName() {
	o.CatalogName.Unset()
}

func (o ImageVersionCatalogResponseModel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ImageVersionCatalogResponseModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CatalogUid) {
		toSerialize["CatalogUid"] = o.CatalogUid
	}
	if o.CatalogName.IsSet() {
		toSerialize["CatalogName"] = o.CatalogName.Get()
	}
	return toSerialize, nil
}

type NullableImageVersionCatalogResponseModel struct {
	value *ImageVersionCatalogResponseModel
	isSet bool
}

func (v NullableImageVersionCatalogResponseModel) Get() *ImageVersionCatalogResponseModel {
	return v.value
}

func (v *NullableImageVersionCatalogResponseModel) Set(val *ImageVersionCatalogResponseModel) {
	v.value = val
	v.isSet = true
}

func (v NullableImageVersionCatalogResponseModel) IsSet() bool {
	return v.isSet
}

func (v *NullableImageVersionCatalogResponseModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImageVersionCatalogResponseModel(val *ImageVersionCatalogResponseModel) *NullableImageVersionCatalogResponseModel {
	return &NullableImageVersionCatalogResponseModel{value: val, isSet: true}
}

func (v NullableImageVersionCatalogResponseModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImageVersionCatalogResponseModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


