/*
Citrix Virtual Apps and Desktops REST API TECHPREVIEW

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: techpreview
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
	"fmt"
)

// RebootScheduleFrequency Reboot schedule frequency
type RebootScheduleFrequency string

// List of RebootScheduleFrequency
const (
	REBOOTSCHEDULEFREQUENCY_UNKNOWN RebootScheduleFrequency = "Unknown"
	REBOOTSCHEDULEFREQUENCY_DAILY RebootScheduleFrequency = "Daily"
	REBOOTSCHEDULEFREQUENCY_WEEKLY RebootScheduleFrequency = "Weekly"
	REBOOTSCHEDULEFREQUENCY_MONTHLY RebootScheduleFrequency = "Monthly"
	REBOOTSCHEDULEFREQUENCY_ONCE RebootScheduleFrequency = "Once"
)

// All allowed values of RebootScheduleFrequency enum
var AllowedRebootScheduleFrequencyEnumValues = []RebootScheduleFrequency{
	"Unknown",
	"Daily",
	"Weekly",
	"Monthly",
	"Once",
}

func (v *RebootScheduleFrequency) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RebootScheduleFrequency(value)
	for _, existing := range AllowedRebootScheduleFrequencyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RebootScheduleFrequency", value)
}

// NewRebootScheduleFrequencyFromValue returns a pointer to a valid RebootScheduleFrequency
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRebootScheduleFrequencyFromValue(v string) (*RebootScheduleFrequency, error) {
	ev := RebootScheduleFrequency(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RebootScheduleFrequency: valid values are %v", v, AllowedRebootScheduleFrequencyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RebootScheduleFrequency) IsValid() bool {
	for _, existing := range AllowedRebootScheduleFrequencyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RebootScheduleFrequency value
func (v RebootScheduleFrequency) Ptr() *RebootScheduleFrequency {
	return &v
}

type NullableRebootScheduleFrequency struct {
	value *RebootScheduleFrequency
	isSet bool
}

func (v NullableRebootScheduleFrequency) Get() *RebootScheduleFrequency {
	return v.value
}

func (v *NullableRebootScheduleFrequency) Set(val *RebootScheduleFrequency) {
	v.value = val
	v.isSet = true
}

func (v NullableRebootScheduleFrequency) IsSet() bool {
	return v.isSet
}

func (v *NullableRebootScheduleFrequency) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRebootScheduleFrequency(val *RebootScheduleFrequency) *NullableRebootScheduleFrequency {
	return &NullableRebootScheduleFrequency{value: val, isSet: true}
}

func (v NullableRebootScheduleFrequency) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRebootScheduleFrequency) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

