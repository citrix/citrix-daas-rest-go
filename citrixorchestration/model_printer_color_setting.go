/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-onprem-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
	"fmt"
)

// PrinterColorSetting Print color.
type PrinterColorSetting string

// List of PrinterColorSetting
const (
	PRINTERCOLORSETTING_MONOCHROME PrinterColorSetting = "Monochrome"
	PRINTERCOLORSETTING_COLOR PrinterColorSetting = "Color"
)

// All allowed values of PrinterColorSetting enum
var AllowedPrinterColorSettingEnumValues = []PrinterColorSetting{
	"Monochrome",
	"Color",
}

func (v *PrinterColorSetting) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	
	*v = PrinterColorSetting(value)
	return nil
}

// NewPrinterColorSettingFromValue returns a pointer to a valid PrinterColorSetting
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPrinterColorSettingFromValue(v string) (*PrinterColorSetting, error) {
	ev := PrinterColorSetting(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PrinterColorSetting: valid values are %v", v, AllowedPrinterColorSettingEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PrinterColorSetting) IsValid() bool {
	for _, existing := range AllowedPrinterColorSettingEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PrinterColorSetting value
func (v PrinterColorSetting) Ptr() *PrinterColorSetting {
	return &v
}

type NullablePrinterColorSetting struct {
	value *PrinterColorSetting
	isSet bool
}

func (v NullablePrinterColorSetting) Get() *PrinterColorSetting {
	return v.value
}

func (v *NullablePrinterColorSetting) Set(val *PrinterColorSetting) {
	v.value = val
	v.isSet = true
}

func (v NullablePrinterColorSetting) IsSet() bool {
	return v.isSet
}

func (v *NullablePrinterColorSetting) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrinterColorSetting(val *PrinterColorSetting) *NullablePrinterColorSetting {
	return &NullablePrinterColorSetting{value: val, isSet: true}
}

func (v NullablePrinterColorSetting) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrinterColorSetting) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

