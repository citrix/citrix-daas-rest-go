/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-onprem-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
	"fmt"
)

// LoadBalanceType Load Balance Type
type LoadBalanceType string

// List of LoadBalanceType
const (
	LOADBALANCETYPE_UNKNOWN LoadBalanceType = "Unknown"
	LOADBALANCETYPE_VERTICAL LoadBalanceType = "Vertical"
	LOADBALANCETYPE_HORIZONTAL LoadBalanceType = "Horizontal"
	LOADBALANCETYPE_NONE LoadBalanceType = "None"
)

// All allowed values of LoadBalanceType enum
var AllowedLoadBalanceTypeEnumValues = []LoadBalanceType{
	"Unknown",
	"Vertical",
	"Horizontal",
	"None",
}

func (v *LoadBalanceType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LoadBalanceType(value)
	for _, existing := range AllowedLoadBalanceTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LoadBalanceType", value)
}

// NewLoadBalanceTypeFromValue returns a pointer to a valid LoadBalanceType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLoadBalanceTypeFromValue(v string) (*LoadBalanceType, error) {
	ev := LoadBalanceType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LoadBalanceType: valid values are %v", v, AllowedLoadBalanceTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LoadBalanceType) IsValid() bool {
	for _, existing := range AllowedLoadBalanceTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LoadBalanceType value
func (v LoadBalanceType) Ptr() *LoadBalanceType {
	return &v
}

type NullableLoadBalanceType struct {
	value *LoadBalanceType
	isSet bool
}

func (v NullableLoadBalanceType) Get() *LoadBalanceType {
	return v.value
}

func (v *NullableLoadBalanceType) Set(val *LoadBalanceType) {
	v.value = val
	v.isSet = true
}

func (v NullableLoadBalanceType) IsSet() bool {
	return v.isSet
}

func (v *NullableLoadBalanceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLoadBalanceType(val *LoadBalanceType) *NullableLoadBalanceType {
	return &NullableLoadBalanceType{value: val, isSet: true}
}

func (v NullableLoadBalanceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLoadBalanceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

