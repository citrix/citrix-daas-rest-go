/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-onprem-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
	"fmt"
)

// ContainerScopeType The type of a container, relevant to delegated administration.
type ContainerScopeType string

// List of ContainerScopeType
const (
	CONTAINERSCOPETYPE_UNKNOWN ContainerScopeType = "Unknown"
	CONTAINERSCOPETYPE_DELIVERY_GROUP ContainerScopeType = "DeliveryGroup"
	CONTAINERSCOPETYPE_APPLICATION_GROUP ContainerScopeType = "ApplicationGroup"
	CONTAINERSCOPETYPE_MACHINE_CATALOG ContainerScopeType = "MachineCatalog"
	CONTAINERSCOPETYPE_HYPERVISOR_CONNECTION ContainerScopeType = "HypervisorConnection"
)

// All allowed values of ContainerScopeType enum
var AllowedContainerScopeTypeEnumValues = []ContainerScopeType{
	"Unknown",
	"DeliveryGroup",
	"ApplicationGroup",
	"MachineCatalog",
	"HypervisorConnection",
}

func (v *ContainerScopeType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	
	*v = ContainerScopeType(value)
	return nil
}

// NewContainerScopeTypeFromValue returns a pointer to a valid ContainerScopeType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewContainerScopeTypeFromValue(v string) (*ContainerScopeType, error) {
	ev := ContainerScopeType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ContainerScopeType: valid values are %v", v, AllowedContainerScopeTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ContainerScopeType) IsValid() bool {
	for _, existing := range AllowedContainerScopeTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ContainerScopeType value
func (v ContainerScopeType) Ptr() *ContainerScopeType {
	return &v
}

type NullableContainerScopeType struct {
	value *ContainerScopeType
	isSet bool
}

func (v NullableContainerScopeType) Get() *ContainerScopeType {
	return v.value
}

func (v *NullableContainerScopeType) Set(val *ContainerScopeType) {
	v.value = val
	v.isSet = true
}

func (v NullableContainerScopeType) IsSet() bool {
	return v.isSet
}

func (v *NullableContainerScopeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContainerScopeType(val *ContainerScopeType) *NullableContainerScopeType {
	return &NullableContainerScopeType{value: val, isSet: true}
}

func (v NullableContainerScopeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContainerScopeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

