/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-onprem-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
	"fmt"
)

// ResourceViolationLevel Resource Validation Level.
type ResourceViolationLevel string

// List of ResourceViolationLevel
const (
	RESOURCEVIOLATIONLEVEL_ERROR ResourceViolationLevel = "Error"
	RESOURCEVIOLATIONLEVEL_WARN  ResourceViolationLevel = "Warn"
)

// All allowed values of ResourceViolationLevel enum
var AllowedResourceViolationLevelEnumValues = []ResourceViolationLevel{
	"Error",
	"Warn",
}

func (v *ResourceViolationLevel) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	*v = ResourceViolationLevel(value)
	return nil
}

// NewResourceViolationLevelFromValue returns a pointer to a valid ResourceViolationLevel
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewResourceViolationLevelFromValue(v string) (*ResourceViolationLevel, error) {
	ev := ResourceViolationLevel(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ResourceViolationLevel: valid values are %v", v, AllowedResourceViolationLevelEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ResourceViolationLevel) IsValid() bool {
	for _, existing := range AllowedResourceViolationLevelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ResourceViolationLevel value
func (v ResourceViolationLevel) Ptr() *ResourceViolationLevel {
	return &v
}

type NullableResourceViolationLevel struct {
	value *ResourceViolationLevel
	isSet bool
}

func (v NullableResourceViolationLevel) Get() *ResourceViolationLevel {
	return v.value
}

func (v *NullableResourceViolationLevel) Set(val *ResourceViolationLevel) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceViolationLevel) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceViolationLevel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceViolationLevel(val *ResourceViolationLevel) *NullableResourceViolationLevel {
	return &NullableResourceViolationLevel{value: val, isSet: true}
}

func (v NullableResourceViolationLevel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceViolationLevel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
