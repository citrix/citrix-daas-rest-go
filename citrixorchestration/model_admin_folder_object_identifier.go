/*
Citrix Virtual Apps and Desktops REST API TECHPREVIEW

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: techpreview
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
	"fmt"
)

// AdminFolderObjectIdentifier Admin folder object identifier name, indicating which object will be contained in the folder.
type AdminFolderObjectIdentifier string

// List of AdminFolderObjectIdentifier
const (
	ADMINFOLDEROBJECTIDENTIFIER_UNKNOWN AdminFolderObjectIdentifier = "Unknown"
	ADMINFOLDEROBJECTIDENTIFIER_CONTAINS_APPLICATIONS AdminFolderObjectIdentifier = "ContainsApplications"
	ADMINFOLDEROBJECTIDENTIFIER_CONTAINS_MACHINE_CATALOGS AdminFolderObjectIdentifier = "ContainsMachineCatalogs"
	ADMINFOLDEROBJECTIDENTIFIER_CONTAINS_DELIVERY_GROUPS AdminFolderObjectIdentifier = "ContainsDeliveryGroups"
	ADMINFOLDEROBJECTIDENTIFIER_CONTAINS_APPLICATION_GROUPS AdminFolderObjectIdentifier = "ContainsApplicationGroups"
)

// All allowed values of AdminFolderObjectIdentifier enum
var AllowedAdminFolderObjectIdentifierEnumValues = []AdminFolderObjectIdentifier{
	"Unknown",
	"ContainsApplications",
	"ContainsMachineCatalogs",
	"ContainsDeliveryGroups",
	"ContainsApplicationGroups",
}

func (v *AdminFolderObjectIdentifier) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AdminFolderObjectIdentifier(value)
	for _, existing := range AllowedAdminFolderObjectIdentifierEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AdminFolderObjectIdentifier", value)
}

// NewAdminFolderObjectIdentifierFromValue returns a pointer to a valid AdminFolderObjectIdentifier
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAdminFolderObjectIdentifierFromValue(v string) (*AdminFolderObjectIdentifier, error) {
	ev := AdminFolderObjectIdentifier(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AdminFolderObjectIdentifier: valid values are %v", v, AllowedAdminFolderObjectIdentifierEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AdminFolderObjectIdentifier) IsValid() bool {
	for _, existing := range AllowedAdminFolderObjectIdentifierEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AdminFolderObjectIdentifier value
func (v AdminFolderObjectIdentifier) Ptr() *AdminFolderObjectIdentifier {
	return &v
}

type NullableAdminFolderObjectIdentifier struct {
	value *AdminFolderObjectIdentifier
	isSet bool
}

func (v NullableAdminFolderObjectIdentifier) Get() *AdminFolderObjectIdentifier {
	return v.value
}

func (v *NullableAdminFolderObjectIdentifier) Set(val *AdminFolderObjectIdentifier) {
	v.value = val
	v.isSet = true
}

func (v NullableAdminFolderObjectIdentifier) IsSet() bool {
	return v.isSet
}

func (v *NullableAdminFolderObjectIdentifier) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdminFolderObjectIdentifier(val *AdminFolderObjectIdentifier) *NullableAdminFolderObjectIdentifier {
	return &NullableAdminFolderObjectIdentifier{value: val, isSet: true}
}

func (v NullableAdminFolderObjectIdentifier) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdminFolderObjectIdentifier) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

