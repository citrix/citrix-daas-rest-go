/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-onprem-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
	"fmt"
)

// ActionState The action state.
type ActionState string

// List of ActionState
const (
	ACTIONSTATE_UNKNOWN ActionState = "Unknown"
	ACTIONSTATE_NOT_STARTED ActionState = "NotStarted"
	ACTIONSTATE_RUNNING ActionState = "Running"
	ACTIONSTATE_CANCELED ActionState = "Canceled"
	ACTIONSTATE_COMPLETED ActionState = "Completed"
	ACTIONSTATE_FAILED ActionState = "Failed"
)

// All allowed values of ActionState enum
var AllowedActionStateEnumValues = []ActionState{
	"Unknown",
	"NotStarted",
	"Running",
	"Canceled",
	"Completed",
	"Failed",
}

func (v *ActionState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ActionState(value)
	for _, existing := range AllowedActionStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ActionState", value)
}

// NewActionStateFromValue returns a pointer to a valid ActionState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewActionStateFromValue(v string) (*ActionState, error) {
	ev := ActionState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ActionState: valid values are %v", v, AllowedActionStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ActionState) IsValid() bool {
	for _, existing := range AllowedActionStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ActionState value
func (v ActionState) Ptr() *ActionState {
	return &v
}

type NullableActionState struct {
	value *ActionState
	isSet bool
}

func (v NullableActionState) Get() *ActionState {
	return v.value
}

func (v *NullableActionState) Set(val *ActionState) {
	v.value = val
	v.isSet = true
}

func (v NullableActionState) IsSet() bool {
	return v.isSet
}

func (v *NullableActionState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActionState(val *ActionState) *NullableActionState {
	return &NullableActionState{value: val, isSet: true}
}

func (v NullableActionState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActionState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

