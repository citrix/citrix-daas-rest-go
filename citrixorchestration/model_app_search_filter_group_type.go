/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-onprem-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
	"fmt"
)

// AppSearchFilterGroupType The search filter group type
type AppSearchFilterGroupType string

// List of AppSearchFilterGroupType
const (
	APPSEARCHFILTERGROUPTYPE_OR AppSearchFilterGroupType = "Or"
	APPSEARCHFILTERGROUPTYPE_AND AppSearchFilterGroupType = "And"
)

// All allowed values of AppSearchFilterGroupType enum
var AllowedAppSearchFilterGroupTypeEnumValues = []AppSearchFilterGroupType{
	"Or",
	"And",
}

func (v *AppSearchFilterGroupType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	
	*v = AppSearchFilterGroupType(value)
	return nil
}

// NewAppSearchFilterGroupTypeFromValue returns a pointer to a valid AppSearchFilterGroupType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAppSearchFilterGroupTypeFromValue(v string) (*AppSearchFilterGroupType, error) {
	ev := AppSearchFilterGroupType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AppSearchFilterGroupType: valid values are %v", v, AllowedAppSearchFilterGroupTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AppSearchFilterGroupType) IsValid() bool {
	for _, existing := range AllowedAppSearchFilterGroupTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AppSearchFilterGroupType value
func (v AppSearchFilterGroupType) Ptr() *AppSearchFilterGroupType {
	return &v
}

type NullableAppSearchFilterGroupType struct {
	value *AppSearchFilterGroupType
	isSet bool
}

func (v NullableAppSearchFilterGroupType) Get() *AppSearchFilterGroupType {
	return v.value
}

func (v *NullableAppSearchFilterGroupType) Set(val *AppSearchFilterGroupType) {
	v.value = val
	v.isSet = true
}

func (v NullableAppSearchFilterGroupType) IsSet() bool {
	return v.isSet
}

func (v *NullableAppSearchFilterGroupType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppSearchFilterGroupType(val *AppSearchFilterGroupType) *NullableAppSearchFilterGroupType {
	return &NullableAppSearchFilterGroupType{value: val, isSet: true}
}

func (v NullableAppSearchFilterGroupType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppSearchFilterGroupType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

