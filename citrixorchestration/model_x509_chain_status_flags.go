/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-onprem-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
	"fmt"
)

// X509ChainStatusFlags
type X509ChainStatusFlags string

// List of X509ChainStatusFlags
const (
	X509CHAINSTATUSFLAGS_NO_ERROR                             X509ChainStatusFlags = "NoError"
	X509CHAINSTATUSFLAGS_NOT_TIME_VALID                       X509ChainStatusFlags = "NotTimeValid"
	X509CHAINSTATUSFLAGS_NOT_TIME_NESTED                      X509ChainStatusFlags = "NotTimeNested"
	X509CHAINSTATUSFLAGS_REVOKED                              X509ChainStatusFlags = "Revoked"
	X509CHAINSTATUSFLAGS_NOT_SIGNATURE_VALID                  X509ChainStatusFlags = "NotSignatureValid"
	X509CHAINSTATUSFLAGS_NOT_VALID_FOR_USAGE                  X509ChainStatusFlags = "NotValidForUsage"
	X509CHAINSTATUSFLAGS_UNTRUSTED_ROOT                       X509ChainStatusFlags = "UntrustedRoot"
	X509CHAINSTATUSFLAGS_REVOCATION_STATUS_UNKNOWN            X509ChainStatusFlags = "RevocationStatusUnknown"
	X509CHAINSTATUSFLAGS_CYCLIC                               X509ChainStatusFlags = "Cyclic"
	X509CHAINSTATUSFLAGS_INVALID_EXTENSION                    X509ChainStatusFlags = "InvalidExtension"
	X509CHAINSTATUSFLAGS_INVALID_POLICY_CONSTRAINTS           X509ChainStatusFlags = "InvalidPolicyConstraints"
	X509CHAINSTATUSFLAGS_INVALID_BASIC_CONSTRAINTS            X509ChainStatusFlags = "InvalidBasicConstraints"
	X509CHAINSTATUSFLAGS_INVALID_NAME_CONSTRAINTS             X509ChainStatusFlags = "InvalidNameConstraints"
	X509CHAINSTATUSFLAGS_HAS_NOT_SUPPORTED_NAME_CONSTRAINT    X509ChainStatusFlags = "HasNotSupportedNameConstraint"
	X509CHAINSTATUSFLAGS_HAS_NOT_DEFINED_NAME_CONSTRAINT      X509ChainStatusFlags = "HasNotDefinedNameConstraint"
	X509CHAINSTATUSFLAGS_HAS_NOT_PERMITTED_NAME_CONSTRAINT    X509ChainStatusFlags = "HasNotPermittedNameConstraint"
	X509CHAINSTATUSFLAGS_HAS_EXCLUDED_NAME_CONSTRAINT         X509ChainStatusFlags = "HasExcludedNameConstraint"
	X509CHAINSTATUSFLAGS_PARTIAL_CHAIN                        X509ChainStatusFlags = "PartialChain"
	X509CHAINSTATUSFLAGS_CTL_NOT_TIME_VALID                   X509ChainStatusFlags = "CtlNotTimeValid"
	X509CHAINSTATUSFLAGS_CTL_NOT_SIGNATURE_VALID              X509ChainStatusFlags = "CtlNotSignatureValid"
	X509CHAINSTATUSFLAGS_CTL_NOT_VALID_FOR_USAGE              X509ChainStatusFlags = "CtlNotValidForUsage"
	X509CHAINSTATUSFLAGS_HAS_WEAK_SIGNATURE                   X509ChainStatusFlags = "HasWeakSignature"
	X509CHAINSTATUSFLAGS_OFFLINE_REVOCATION                   X509ChainStatusFlags = "OfflineRevocation"
	X509CHAINSTATUSFLAGS_NO_ISSUANCE_CHAIN_POLICY             X509ChainStatusFlags = "NoIssuanceChainPolicy"
	X509CHAINSTATUSFLAGS_EXPLICIT_DISTRUST                    X509ChainStatusFlags = "ExplicitDistrust"
	X509CHAINSTATUSFLAGS_HAS_NOT_SUPPORTED_CRITICAL_EXTENSION X509ChainStatusFlags = "HasNotSupportedCriticalExtension"
)

// All allowed values of X509ChainStatusFlags enum
var AllowedX509ChainStatusFlagsEnumValues = []X509ChainStatusFlags{
	"NoError",
	"NotTimeValid",
	"NotTimeNested",
	"Revoked",
	"NotSignatureValid",
	"NotValidForUsage",
	"UntrustedRoot",
	"RevocationStatusUnknown",
	"Cyclic",
	"InvalidExtension",
	"InvalidPolicyConstraints",
	"InvalidBasicConstraints",
	"InvalidNameConstraints",
	"HasNotSupportedNameConstraint",
	"HasNotDefinedNameConstraint",
	"HasNotPermittedNameConstraint",
	"HasExcludedNameConstraint",
	"PartialChain",
	"CtlNotTimeValid",
	"CtlNotSignatureValid",
	"CtlNotValidForUsage",
	"HasWeakSignature",
	"OfflineRevocation",
	"NoIssuanceChainPolicy",
	"ExplicitDistrust",
	"HasNotSupportedCriticalExtension",
}

func (v *X509ChainStatusFlags) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	*v = X509ChainStatusFlags(value)
	return nil
}

// NewX509ChainStatusFlagsFromValue returns a pointer to a valid X509ChainStatusFlags
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewX509ChainStatusFlagsFromValue(v string) (*X509ChainStatusFlags, error) {
	ev := X509ChainStatusFlags(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for X509ChainStatusFlags: valid values are %v", v, AllowedX509ChainStatusFlagsEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v X509ChainStatusFlags) IsValid() bool {
	for _, existing := range AllowedX509ChainStatusFlagsEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to X509ChainStatusFlags value
func (v X509ChainStatusFlags) Ptr() *X509ChainStatusFlags {
	return &v
}

type NullableX509ChainStatusFlags struct {
	value *X509ChainStatusFlags
	isSet bool
}

func (v NullableX509ChainStatusFlags) Get() *X509ChainStatusFlags {
	return v.value
}

func (v *NullableX509ChainStatusFlags) Set(val *X509ChainStatusFlags) {
	v.value = val
	v.isSet = true
}

func (v NullableX509ChainStatusFlags) IsSet() bool {
	return v.isSet
}

func (v *NullableX509ChainStatusFlags) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableX509ChainStatusFlags(val *X509ChainStatusFlags) *NullableX509ChainStatusFlags {
	return &NullableX509ChainStatusFlags{value: val, isSet: true}
}

func (v NullableX509ChainStatusFlags) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableX509ChainStatusFlags) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
