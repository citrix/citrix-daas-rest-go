/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-onprem-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
	"fmt"
)

// ProvisioningOperationEventSearchFilterGroupType The search filter group type.
type ProvisioningOperationEventSearchFilterGroupType string

// List of ProvisioningOperationEventSearchFilterGroupType
const (
	PROVISIONINGOPERATIONEVENTSEARCHFILTERGROUPTYPE_OR ProvisioningOperationEventSearchFilterGroupType = "Or"
	PROVISIONINGOPERATIONEVENTSEARCHFILTERGROUPTYPE_AND ProvisioningOperationEventSearchFilterGroupType = "And"
)

// All allowed values of ProvisioningOperationEventSearchFilterGroupType enum
var AllowedProvisioningOperationEventSearchFilterGroupTypeEnumValues = []ProvisioningOperationEventSearchFilterGroupType{
	"Or",
	"And",
}

func (v *ProvisioningOperationEventSearchFilterGroupType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ProvisioningOperationEventSearchFilterGroupType(value)
	for _, existing := range AllowedProvisioningOperationEventSearchFilterGroupTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ProvisioningOperationEventSearchFilterGroupType", value)
}

// NewProvisioningOperationEventSearchFilterGroupTypeFromValue returns a pointer to a valid ProvisioningOperationEventSearchFilterGroupType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewProvisioningOperationEventSearchFilterGroupTypeFromValue(v string) (*ProvisioningOperationEventSearchFilterGroupType, error) {
	ev := ProvisioningOperationEventSearchFilterGroupType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ProvisioningOperationEventSearchFilterGroupType: valid values are %v", v, AllowedProvisioningOperationEventSearchFilterGroupTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ProvisioningOperationEventSearchFilterGroupType) IsValid() bool {
	for _, existing := range AllowedProvisioningOperationEventSearchFilterGroupTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ProvisioningOperationEventSearchFilterGroupType value
func (v ProvisioningOperationEventSearchFilterGroupType) Ptr() *ProvisioningOperationEventSearchFilterGroupType {
	return &v
}

type NullableProvisioningOperationEventSearchFilterGroupType struct {
	value *ProvisioningOperationEventSearchFilterGroupType
	isSet bool
}

func (v NullableProvisioningOperationEventSearchFilterGroupType) Get() *ProvisioningOperationEventSearchFilterGroupType {
	return v.value
}

func (v *NullableProvisioningOperationEventSearchFilterGroupType) Set(val *ProvisioningOperationEventSearchFilterGroupType) {
	v.value = val
	v.isSet = true
}

func (v NullableProvisioningOperationEventSearchFilterGroupType) IsSet() bool {
	return v.isSet
}

func (v *NullableProvisioningOperationEventSearchFilterGroupType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProvisioningOperationEventSearchFilterGroupType(val *ProvisioningOperationEventSearchFilterGroupType) *NullableProvisioningOperationEventSearchFilterGroupType {
	return &NullableProvisioningOperationEventSearchFilterGroupType{value: val, isSet: true}
}

func (v NullableProvisioningOperationEventSearchFilterGroupType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProvisioningOperationEventSearchFilterGroupType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

