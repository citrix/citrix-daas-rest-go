/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
)

// checks if the AboutModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AboutModel{}

// AboutModel About model of current Orchestration instance.             
type AboutModel struct {
	// The commit hash when building.             
	Commit NullableString `json:"Commit,omitempty"`
	// Indicates if the  current environment is cloud.
	IsCloud *bool `json:"IsCloud,omitempty"`
}

// NewAboutModel instantiates a new AboutModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAboutModel() *AboutModel {
	this := AboutModel{}
	return &this
}

// NewAboutModelWithDefaults instantiates a new AboutModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAboutModelWithDefaults() *AboutModel {
	this := AboutModel{}
	return &this
}

// GetCommit returns the Commit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AboutModel) GetCommit() string {
	if o == nil || IsNil(o.Commit.Get()) {
		var ret string
		return ret
	}
	return *o.Commit.Get()
}

// GetCommitOk returns a tuple with the Commit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AboutModel) GetCommitOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Commit.Get(), o.Commit.IsSet()
}

// HasCommit returns a boolean if a field has been set.
func (o *AboutModel) HasCommit() bool {
	if o != nil && o.Commit.IsSet() {
		return true
	}

	return false
}

// SetCommit gets a reference to the given NullableString and assigns it to the Commit field.
func (o *AboutModel) SetCommit(v string) {
	o.Commit.Set(&v)
}
// SetCommitNil sets the value for Commit to be an explicit nil
func (o *AboutModel) SetCommitNil() {
	o.Commit.Set(nil)
}

// UnsetCommit ensures that no value is present for Commit, not even an explicit nil
func (o *AboutModel) UnsetCommit() {
	o.Commit.Unset()
}

// GetIsCloud returns the IsCloud field value if set, zero value otherwise.
func (o *AboutModel) GetIsCloud() bool {
	if o == nil || IsNil(o.IsCloud) {
		var ret bool
		return ret
	}
	return *o.IsCloud
}

// GetIsCloudOk returns a tuple with the IsCloud field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AboutModel) GetIsCloudOk() (*bool, bool) {
	if o == nil || IsNil(o.IsCloud) {
		return nil, false
	}
	return o.IsCloud, true
}

// HasIsCloud returns a boolean if a field has been set.
func (o *AboutModel) HasIsCloud() bool {
	if o != nil && !IsNil(o.IsCloud) {
		return true
	}

	return false
}

// SetIsCloud gets a reference to the given bool and assigns it to the IsCloud field.
func (o *AboutModel) SetIsCloud(v bool) {
	o.IsCloud = &v
}

func (o AboutModel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AboutModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Commit.IsSet() {
		toSerialize["Commit"] = o.Commit.Get()
	}
	if !IsNil(o.IsCloud) {
		toSerialize["IsCloud"] = o.IsCloud
	}
	return toSerialize, nil
}

type NullableAboutModel struct {
	value *AboutModel
	isSet bool
}

func (v NullableAboutModel) Get() *AboutModel {
	return v.value
}

func (v *NullableAboutModel) Set(val *AboutModel) {
	v.value = val
	v.isSet = true
}

func (v NullableAboutModel) IsSet() bool {
	return v.isSet
}

func (v *NullableAboutModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAboutModel(val *AboutModel) *NullableAboutModel {
	return &NullableAboutModel{value: val, isSet: true}
}

func (v NullableAboutModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAboutModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


