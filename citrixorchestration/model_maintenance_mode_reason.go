/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-onprem-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
	"fmt"
)

// MaintenanceModeReason The reason why the machine was placed in maintenance mode (if it is in maintenance mode)
type MaintenanceModeReason string

// List of MaintenanceModeReason
const (
	MAINTENANCEMODEREASON_UNKNOWN MaintenanceModeReason = "Unknown"
	MAINTENANCEMODEREASON_NONE MaintenanceModeReason = "None"
	MAINTENANCEMODEREASON_ADMINISTRATOR MaintenanceModeReason = "Administrator"
	MAINTENANCEMODEREASON_MAX_FAILED_REGISTRATIONS MaintenanceModeReason = "MaxFailedRegistrations"
)

// All allowed values of MaintenanceModeReason enum
var AllowedMaintenanceModeReasonEnumValues = []MaintenanceModeReason{
	"Unknown",
	"None",
	"Administrator",
	"MaxFailedRegistrations",
}

func (v *MaintenanceModeReason) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MaintenanceModeReason(value)
	for _, existing := range AllowedMaintenanceModeReasonEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MaintenanceModeReason", value)
}

// NewMaintenanceModeReasonFromValue returns a pointer to a valid MaintenanceModeReason
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMaintenanceModeReasonFromValue(v string) (*MaintenanceModeReason, error) {
	ev := MaintenanceModeReason(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MaintenanceModeReason: valid values are %v", v, AllowedMaintenanceModeReasonEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MaintenanceModeReason) IsValid() bool {
	for _, existing := range AllowedMaintenanceModeReasonEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MaintenanceModeReason value
func (v MaintenanceModeReason) Ptr() *MaintenanceModeReason {
	return &v
}

type NullableMaintenanceModeReason struct {
	value *MaintenanceModeReason
	isSet bool
}

func (v NullableMaintenanceModeReason) Get() *MaintenanceModeReason {
	return v.value
}

func (v *NullableMaintenanceModeReason) Set(val *MaintenanceModeReason) {
	v.value = val
	v.isSet = true
}

func (v NullableMaintenanceModeReason) IsSet() bool {
	return v.isSet
}

func (v *NullableMaintenanceModeReason) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMaintenanceModeReason(val *MaintenanceModeReason) *NullableMaintenanceModeReason {
	return &NullableMaintenanceModeReason{value: val, isSet: true}
}

func (v NullableMaintenanceModeReason) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMaintenanceModeReason) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

