/*
Citrix Virtual Apps and Desktops REST API TECHPREVIEW

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: techpreview
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
	"fmt"
)

// BackupRestoreScheduleWeeks Backup Restore Schedule Weeks             
type BackupRestoreScheduleWeeks string

// List of BackupRestoreScheduleWeeks
const (
	BACKUPRESTORESCHEDULEWEEKS_NOT_DEFINED BackupRestoreScheduleWeeks = "NotDefined"
	BACKUPRESTORESCHEDULEWEEKS_FIRST BackupRestoreScheduleWeeks = "First"
	BACKUPRESTORESCHEDULEWEEKS_SECOND BackupRestoreScheduleWeeks = "Second"
	BACKUPRESTORESCHEDULEWEEKS_THIRD BackupRestoreScheduleWeeks = "Third"
	BACKUPRESTORESCHEDULEWEEKS_FOURTH BackupRestoreScheduleWeeks = "Fourth"
	BACKUPRESTORESCHEDULEWEEKS_LAST BackupRestoreScheduleWeeks = "Last"
)

// All allowed values of BackupRestoreScheduleWeeks enum
var AllowedBackupRestoreScheduleWeeksEnumValues = []BackupRestoreScheduleWeeks{
	"NotDefined",
	"First",
	"Second",
	"Third",
	"Fourth",
	"Last",
}

func (v *BackupRestoreScheduleWeeks) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BackupRestoreScheduleWeeks(value)
	for _, existing := range AllowedBackupRestoreScheduleWeeksEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BackupRestoreScheduleWeeks", value)
}

// NewBackupRestoreScheduleWeeksFromValue returns a pointer to a valid BackupRestoreScheduleWeeks
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBackupRestoreScheduleWeeksFromValue(v string) (*BackupRestoreScheduleWeeks, error) {
	ev := BackupRestoreScheduleWeeks(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BackupRestoreScheduleWeeks: valid values are %v", v, AllowedBackupRestoreScheduleWeeksEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BackupRestoreScheduleWeeks) IsValid() bool {
	for _, existing := range AllowedBackupRestoreScheduleWeeksEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BackupRestoreScheduleWeeks value
func (v BackupRestoreScheduleWeeks) Ptr() *BackupRestoreScheduleWeeks {
	return &v
}

type NullableBackupRestoreScheduleWeeks struct {
	value *BackupRestoreScheduleWeeks
	isSet bool
}

func (v NullableBackupRestoreScheduleWeeks) Get() *BackupRestoreScheduleWeeks {
	return v.value
}

func (v *NullableBackupRestoreScheduleWeeks) Set(val *BackupRestoreScheduleWeeks) {
	v.value = val
	v.isSet = true
}

func (v NullableBackupRestoreScheduleWeeks) IsSet() bool {
	return v.isSet
}

func (v *NullableBackupRestoreScheduleWeeks) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBackupRestoreScheduleWeeks(val *BackupRestoreScheduleWeeks) *NullableBackupRestoreScheduleWeeks {
	return &NullableBackupRestoreScheduleWeeks{value: val, isSet: true}
}

func (v NullableBackupRestoreScheduleWeeks) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBackupRestoreScheduleWeeks) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

