/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-onprem-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
	"fmt"
)

// MachineLogOnType Data contract for MachineLogOnType.
type MachineLogOnType string

// List of MachineLogOnType
const (
	MACHINELOGONTYPE_ACTIVE_DIRECTORY MachineLogOnType = "ActiveDirectory"
	MACHINELOGONTYPE_LOCAL_MAPPED_ACCOUNT MachineLogOnType = "LocalMappedAccount"
	MACHINELOGONTYPE_AZURE_AD MachineLogOnType = "AzureAD"
	MACHINELOGONTYPE_UNKNOWN MachineLogOnType = "Unknown"
)

// All allowed values of MachineLogOnType enum
var AllowedMachineLogOnTypeEnumValues = []MachineLogOnType{
	"ActiveDirectory",
	"LocalMappedAccount",
	"AzureAD",
	"Unknown",
}

func (v *MachineLogOnType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	
	*v = MachineLogOnType(value)
	return nil
}

// NewMachineLogOnTypeFromValue returns a pointer to a valid MachineLogOnType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMachineLogOnTypeFromValue(v string) (*MachineLogOnType, error) {
	ev := MachineLogOnType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MachineLogOnType: valid values are %v", v, AllowedMachineLogOnTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MachineLogOnType) IsValid() bool {
	for _, existing := range AllowedMachineLogOnTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MachineLogOnType value
func (v MachineLogOnType) Ptr() *MachineLogOnType {
	return &v
}

type NullableMachineLogOnType struct {
	value *MachineLogOnType
	isSet bool
}

func (v NullableMachineLogOnType) Get() *MachineLogOnType {
	return v.value
}

func (v *NullableMachineLogOnType) Set(val *MachineLogOnType) {
	v.value = val
	v.isSet = true
}

func (v NullableMachineLogOnType) IsSet() bool {
	return v.isSet
}

func (v *NullableMachineLogOnType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMachineLogOnType(val *MachineLogOnType) *NullableMachineLogOnType {
	return &NullableMachineLogOnType{value: val, isSet: true}
}

func (v NullableMachineLogOnType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMachineLogOnType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

