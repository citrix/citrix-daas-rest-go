/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-onprem-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
	"fmt"
)

// DesktopCondition Desktop condition values, indicating warnings.
type DesktopCondition string

// List of DesktopCondition
const (
	DESKTOPCONDITION_UNKNOWN DesktopCondition = "Unknown"
	DESKTOPCONDITION_CPU DesktopCondition = "CPU"
	DESKTOPCONDITION_ICA_LATENCY DesktopCondition = "ICALatency"
	DESKTOPCONDITION_UPM_LOGON_TIME DesktopCondition = "UPMLogonTime"
)

// All allowed values of DesktopCondition enum
var AllowedDesktopConditionEnumValues = []DesktopCondition{
	"Unknown",
	"CPU",
	"ICALatency",
	"UPMLogonTime",
}

func (v *DesktopCondition) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DesktopCondition(value)
	for _, existing := range AllowedDesktopConditionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DesktopCondition", value)
}

// NewDesktopConditionFromValue returns a pointer to a valid DesktopCondition
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDesktopConditionFromValue(v string) (*DesktopCondition, error) {
	ev := DesktopCondition(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DesktopCondition: valid values are %v", v, AllowedDesktopConditionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DesktopCondition) IsValid() bool {
	for _, existing := range AllowedDesktopConditionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DesktopCondition value
func (v DesktopCondition) Ptr() *DesktopCondition {
	return &v
}

type NullableDesktopCondition struct {
	value *DesktopCondition
	isSet bool
}

func (v NullableDesktopCondition) Get() *DesktopCondition {
	return v.value
}

func (v *NullableDesktopCondition) Set(val *DesktopCondition) {
	v.value = val
	v.isSet = true
}

func (v NullableDesktopCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableDesktopCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDesktopCondition(val *DesktopCondition) *NullableDesktopCondition {
	return &NullableDesktopCondition{value: val, isSet: true}
}

func (v NullableDesktopCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDesktopCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

