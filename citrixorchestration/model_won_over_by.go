/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-onprem-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
)

// checks if the WonOverBy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WonOverBy{}

// WonOverBy The reason why a setting lost. Just the name of one of the winning policies that have this setting.
type WonOverBy struct {
	// Name of the setting.
	SettingName NullableString `json:"SettingName,omitempty"`
	// Name of the policy.
	PolicyName NullableString `json:"PolicyName,omitempty"`
	// Name of the GPO that contains the policy that uses this setting.
	GpoName NullableString `json:"GpoName,omitempty"`
}

// NewWonOverBy instantiates a new WonOverBy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWonOverBy() *WonOverBy {
	this := WonOverBy{}
	return &this
}

// NewWonOverByWithDefaults instantiates a new WonOverBy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWonOverByWithDefaults() *WonOverBy {
	this := WonOverBy{}
	return &this
}

// GetSettingName returns the SettingName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WonOverBy) GetSettingName() string {
	if o == nil || IsNil(o.SettingName.Get()) {
		var ret string
		return ret
	}
	return *o.SettingName.Get()
}

// GetSettingNameOk returns a tuple with the SettingName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WonOverBy) GetSettingNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SettingName.Get(), o.SettingName.IsSet()
}

// HasSettingName returns a boolean if a field has been set.
func (o *WonOverBy) HasSettingName() bool {
	if o != nil && o.SettingName.IsSet() {
		return true
	}

	return false
}

// SetSettingName gets a reference to the given NullableString and assigns it to the SettingName field.
func (o *WonOverBy) SetSettingName(v string) {
	o.SettingName.Set(&v)
}

// SetSettingNameNil sets the value for SettingName to be an explicit nil
func (o *WonOverBy) SetSettingNameNil() {
	o.SettingName.Set(nil)
}

// UnsetSettingName ensures that no value is present for SettingName, not even an explicit nil
func (o *WonOverBy) UnsetSettingName() {
	o.SettingName.Unset()
}

// GetPolicyName returns the PolicyName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WonOverBy) GetPolicyName() string {
	if o == nil || IsNil(o.PolicyName.Get()) {
		var ret string
		return ret
	}
	return *o.PolicyName.Get()
}

// GetPolicyNameOk returns a tuple with the PolicyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WonOverBy) GetPolicyNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PolicyName.Get(), o.PolicyName.IsSet()
}

// HasPolicyName returns a boolean if a field has been set.
func (o *WonOverBy) HasPolicyName() bool {
	if o != nil && o.PolicyName.IsSet() {
		return true
	}

	return false
}

// SetPolicyName gets a reference to the given NullableString and assigns it to the PolicyName field.
func (o *WonOverBy) SetPolicyName(v string) {
	o.PolicyName.Set(&v)
}

// SetPolicyNameNil sets the value for PolicyName to be an explicit nil
func (o *WonOverBy) SetPolicyNameNil() {
	o.PolicyName.Set(nil)
}

// UnsetPolicyName ensures that no value is present for PolicyName, not even an explicit nil
func (o *WonOverBy) UnsetPolicyName() {
	o.PolicyName.Unset()
}

// GetGpoName returns the GpoName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WonOverBy) GetGpoName() string {
	if o == nil || IsNil(o.GpoName.Get()) {
		var ret string
		return ret
	}
	return *o.GpoName.Get()
}

// GetGpoNameOk returns a tuple with the GpoName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WonOverBy) GetGpoNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.GpoName.Get(), o.GpoName.IsSet()
}

// HasGpoName returns a boolean if a field has been set.
func (o *WonOverBy) HasGpoName() bool {
	if o != nil && o.GpoName.IsSet() {
		return true
	}

	return false
}

// SetGpoName gets a reference to the given NullableString and assigns it to the GpoName field.
func (o *WonOverBy) SetGpoName(v string) {
	o.GpoName.Set(&v)
}

// SetGpoNameNil sets the value for GpoName to be an explicit nil
func (o *WonOverBy) SetGpoNameNil() {
	o.GpoName.Set(nil)
}

// UnsetGpoName ensures that no value is present for GpoName, not even an explicit nil
func (o *WonOverBy) UnsetGpoName() {
	o.GpoName.Unset()
}

func (o WonOverBy) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WonOverBy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.SettingName.IsSet() {
		toSerialize["SettingName"] = o.SettingName.Get()
	}
	if o.PolicyName.IsSet() {
		toSerialize["PolicyName"] = o.PolicyName.Get()
	}
	if o.GpoName.IsSet() {
		toSerialize["GpoName"] = o.GpoName.Get()
	}
	return toSerialize, nil
}

type NullableWonOverBy struct {
	value *WonOverBy
	isSet bool
}

func (v NullableWonOverBy) Get() *WonOverBy {
	return v.value
}

func (v *NullableWonOverBy) Set(val *WonOverBy) {
	v.value = val
	v.isSet = true
}

func (v NullableWonOverBy) IsSet() bool {
	return v.isSet
}

func (v *NullableWonOverBy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWonOverBy(val *WonOverBy) *NullableWonOverBy {
	return &NullableWonOverBy{value: val, isSet: true}
}

func (v NullableWonOverBy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWonOverBy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
