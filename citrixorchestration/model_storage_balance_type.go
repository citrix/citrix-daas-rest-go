/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-onprem-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
	"fmt"
)

// StorageBalanceType Known types for storage balance type
type StorageBalanceType string

// List of StorageBalanceType
const (
	STORAGEBALANCETYPE_UNKNOWN StorageBalanceType = "Unknown"
	STORAGEBALANCETYPE_NONE StorageBalanceType = "None"
	STORAGEBALANCETYPE_VM_COUNT_BASED_LEAST_LOAD StorageBalanceType = "VMCountBasedLeastLoad"
)

// All allowed values of StorageBalanceType enum
var AllowedStorageBalanceTypeEnumValues = []StorageBalanceType{
	"Unknown",
	"None",
	"VMCountBasedLeastLoad",
}

func (v *StorageBalanceType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := StorageBalanceType(value)
	for _, existing := range AllowedStorageBalanceTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid StorageBalanceType", value)
}

// NewStorageBalanceTypeFromValue returns a pointer to a valid StorageBalanceType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStorageBalanceTypeFromValue(v string) (*StorageBalanceType, error) {
	ev := StorageBalanceType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for StorageBalanceType: valid values are %v", v, AllowedStorageBalanceTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StorageBalanceType) IsValid() bool {
	for _, existing := range AllowedStorageBalanceTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to StorageBalanceType value
func (v StorageBalanceType) Ptr() *StorageBalanceType {
	return &v
}

type NullableStorageBalanceType struct {
	value *StorageBalanceType
	isSet bool
}

func (v NullableStorageBalanceType) Get() *StorageBalanceType {
	return v.value
}

func (v *NullableStorageBalanceType) Set(val *StorageBalanceType) {
	v.value = val
	v.isSet = true
}

func (v NullableStorageBalanceType) IsSet() bool {
	return v.isSet
}

func (v *NullableStorageBalanceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStorageBalanceType(val *StorageBalanceType) *NullableStorageBalanceType {
	return &NullableStorageBalanceType{value: val, isSet: true}
}

func (v NullableStorageBalanceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStorageBalanceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

