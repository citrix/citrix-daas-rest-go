/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
	"fmt"
)

// DeregistrationReason Reasons why a machine may have deregistered from a broker.
type DeregistrationReason string

// List of DeregistrationReason
const (
	DEREGISTRATIONREASON_UNKNOWN DeregistrationReason = "Unknown"
	DEREGISTRATIONREASON_AGENT_SHUTDOWN DeregistrationReason = "AgentShutdown"
	DEREGISTRATIONREASON_AGENT_SUSPENDED DeregistrationReason = "AgentSuspended"
	DEREGISTRATIONREASON_AGENT_REQUESTED DeregistrationReason = "AgentRequested"
	DEREGISTRATIONREASON_INCOMPATIBLE_VERSION DeregistrationReason = "IncompatibleVersion"
	DEREGISTRATIONREASON_AGENT_ADDRESS_RESOLUTION_FAILED DeregistrationReason = "AgentAddressResolutionFailed"
	DEREGISTRATIONREASON_AGENT_NOT_CONTACTABLE DeregistrationReason = "AgentNotContactable"
	DEREGISTRATIONREASON_AGENT_WRONG_ACTIVE_DIRECTORY_OU DeregistrationReason = "AgentWrongActiveDirectoryOU"
	DEREGISTRATIONREASON_EMPTY_REGISTRATION_REQUEST DeregistrationReason = "EmptyRegistrationRequest"
	DEREGISTRATIONREASON_MISSING_REGISTRATION_CAPABILITIES DeregistrationReason = "MissingRegistrationCapabilities"
	DEREGISTRATIONREASON_MISSING_AGENT_VERSION DeregistrationReason = "MissingAgentVersion"
	DEREGISTRATIONREASON_INCONSISTENT_REGISTRATION_CAPABILITIES DeregistrationReason = "InconsistentRegistrationCapabilities"
	DEREGISTRATIONREASON_NOT_LICENSED_FOR_FEATURE DeregistrationReason = "NotLicensedForFeature"
	DEREGISTRATIONREASON_OS_NOT_COMPATIBLE_WITH_DDC DeregistrationReason = "OSNotCompatibleWithDdc"
	DEREGISTRATIONREASON_VM_NOT_COMPATIBLE_WITH_DDC DeregistrationReason = "VMNotCompatibleWithDdc"
	DEREGISTRATIONREASON_UNSUPPORTED_CREDENTIAL_SECURITY_VERSION DeregistrationReason = "UnsupportedCredentialSecurityVersion"
	DEREGISTRATIONREASON_INVALID_REGISTRATION_REQUEST DeregistrationReason = "InvalidRegistrationRequest"
	DEREGISTRATIONREASON_SINGLE_MULTI_SESSION_MISMATCH DeregistrationReason = "SingleMultiSessionMismatch"
	DEREGISTRATIONREASON_FUNCTIONAL_LEVEL_TOO_LOW_FOR_CATALOG DeregistrationReason = "FunctionalLevelTooLowForCatalog"
	DEREGISTRATIONREASON_FUNCTIONAL_LEVEL_TOO_LOW_FOR_DESKTOP_GROUP DeregistrationReason = "FunctionalLevelTooLowForDesktopGroup"
	DEREGISTRATIONREASON_POWER_OFF DeregistrationReason = "PowerOff"
	DEREGISTRATIONREASON_DESKTOP_RESTART DeregistrationReason = "DesktopRestart"
	DEREGISTRATIONREASON_DESKTOP_REMOVED DeregistrationReason = "DesktopRemoved"
	DEREGISTRATIONREASON_AGENT_REJECTED_SETTINGS_UPDATE DeregistrationReason = "AgentRejectedSettingsUpdate"
	DEREGISTRATIONREASON_SEND_SETTINGS_FAILURE DeregistrationReason = "SendSettingsFailure"
	DEREGISTRATIONREASON_SESSION_AUDIT_FAILURE DeregistrationReason = "SessionAuditFailure"
	DEREGISTRATIONREASON_SESSION_PREPARE_FAILURE DeregistrationReason = "SessionPrepareFailure"
	DEREGISTRATIONREASON_CONTACT_LOST DeregistrationReason = "ContactLost"
	DEREGISTRATIONREASON_SETTINGS_CREATION_FAILURE DeregistrationReason = "SettingsCreationFailure"
	DEREGISTRATIONREASON_UNKNOWN_ERROR DeregistrationReason = "UnknownError"
	DEREGISTRATIONREASON_BROKER_REGISTRATION_LIMIT_REACHED DeregistrationReason = "BrokerRegistrationLimitReached"
	DEREGISTRATIONREASON_REGISTRATION_STATE_MISMATCH DeregistrationReason = "RegistrationStateMismatch"
)

// All allowed values of DeregistrationReason enum
var AllowedDeregistrationReasonEnumValues = []DeregistrationReason{
	"Unknown",
	"AgentShutdown",
	"AgentSuspended",
	"AgentRequested",
	"IncompatibleVersion",
	"AgentAddressResolutionFailed",
	"AgentNotContactable",
	"AgentWrongActiveDirectoryOU",
	"EmptyRegistrationRequest",
	"MissingRegistrationCapabilities",
	"MissingAgentVersion",
	"InconsistentRegistrationCapabilities",
	"NotLicensedForFeature",
	"OSNotCompatibleWithDdc",
	"VMNotCompatibleWithDdc",
	"UnsupportedCredentialSecurityVersion",
	"InvalidRegistrationRequest",
	"SingleMultiSessionMismatch",
	"FunctionalLevelTooLowForCatalog",
	"FunctionalLevelTooLowForDesktopGroup",
	"PowerOff",
	"DesktopRestart",
	"DesktopRemoved",
	"AgentRejectedSettingsUpdate",
	"SendSettingsFailure",
	"SessionAuditFailure",
	"SessionPrepareFailure",
	"ContactLost",
	"SettingsCreationFailure",
	"UnknownError",
	"BrokerRegistrationLimitReached",
	"RegistrationStateMismatch",
}

func (v *DeregistrationReason) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DeregistrationReason(value)
	for _, existing := range AllowedDeregistrationReasonEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DeregistrationReason", value)
}

// NewDeregistrationReasonFromValue returns a pointer to a valid DeregistrationReason
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDeregistrationReasonFromValue(v string) (*DeregistrationReason, error) {
	ev := DeregistrationReason(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DeregistrationReason: valid values are %v", v, AllowedDeregistrationReasonEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DeregistrationReason) IsValid() bool {
	for _, existing := range AllowedDeregistrationReasonEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DeregistrationReason value
func (v DeregistrationReason) Ptr() *DeregistrationReason {
	return &v
}

type NullableDeregistrationReason struct {
	value *DeregistrationReason
	isSet bool
}

func (v NullableDeregistrationReason) Get() *DeregistrationReason {
	return v.value
}

func (v *NullableDeregistrationReason) Set(val *DeregistrationReason) {
	v.value = val
	v.isSet = true
}

func (v NullableDeregistrationReason) IsSet() bool {
	return v.isSet
}

func (v *NullableDeregistrationReason) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeregistrationReason(val *DeregistrationReason) *NullableDeregistrationReason {
	return &NullableDeregistrationReason{value: val, isSet: true}
}

func (v NullableDeregistrationReason) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeregistrationReason) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

