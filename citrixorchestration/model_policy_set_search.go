/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-onprem-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
)

// checks if the PolicySetSearch type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PolicySetSearch{}

// PolicySetSearch Policy set search data.
type PolicySetSearch struct {
	// List of advanced search filters.
	SearchFilters []SearchFilter `json:"SearchFilters,omitempty"`
	SortCriteria *SortingMethod `json:"SortCriteria,omitempty"`
}

// NewPolicySetSearch instantiates a new PolicySetSearch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPolicySetSearch() *PolicySetSearch {
	this := PolicySetSearch{}
	return &this
}

// NewPolicySetSearchWithDefaults instantiates a new PolicySetSearch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPolicySetSearchWithDefaults() *PolicySetSearch {
	this := PolicySetSearch{}
	return &this
}

// GetSearchFilters returns the SearchFilters field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PolicySetSearch) GetSearchFilters() []SearchFilter {
	if o == nil {
		var ret []SearchFilter
		return ret
	}
	return o.SearchFilters
}

// GetSearchFiltersOk returns a tuple with the SearchFilters field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PolicySetSearch) GetSearchFiltersOk() ([]SearchFilter, bool) {
	if o == nil || IsNil(o.SearchFilters) {
		return nil, false
	}
	return o.SearchFilters, true
}

// HasSearchFilters returns a boolean if a field has been set.
func (o *PolicySetSearch) HasSearchFilters() bool {
	if o != nil && IsNil(o.SearchFilters) {
		return true
	}

	return false
}

// SetSearchFilters gets a reference to the given []SearchFilter and assigns it to the SearchFilters field.
func (o *PolicySetSearch) SetSearchFilters(v []SearchFilter) {
	o.SearchFilters = v
}

// GetSortCriteria returns the SortCriteria field value if set, zero value otherwise.
func (o *PolicySetSearch) GetSortCriteria() SortingMethod {
	if o == nil || IsNil(o.SortCriteria) {
		var ret SortingMethod
		return ret
	}
	return *o.SortCriteria
}

// GetSortCriteriaOk returns a tuple with the SortCriteria field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicySetSearch) GetSortCriteriaOk() (*SortingMethod, bool) {
	if o == nil || IsNil(o.SortCriteria) {
		return nil, false
	}
	return o.SortCriteria, true
}

// HasSortCriteria returns a boolean if a field has been set.
func (o *PolicySetSearch) HasSortCriteria() bool {
	if o != nil && !IsNil(o.SortCriteria) {
		return true
	}

	return false
}

// SetSortCriteria gets a reference to the given SortingMethod and assigns it to the SortCriteria field.
func (o *PolicySetSearch) SetSortCriteria(v SortingMethod) {
	o.SortCriteria = &v
}

func (o PolicySetSearch) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PolicySetSearch) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.SearchFilters != nil {
		toSerialize["SearchFilters"] = o.SearchFilters
	}
	if !IsNil(o.SortCriteria) {
		toSerialize["SortCriteria"] = o.SortCriteria
	}
	return toSerialize, nil
}

type NullablePolicySetSearch struct {
	value *PolicySetSearch
	isSet bool
}

func (v NullablePolicySetSearch) Get() *PolicySetSearch {
	return v.value
}

func (v *NullablePolicySetSearch) Set(val *PolicySetSearch) {
	v.value = val
	v.isSet = true
}

func (v NullablePolicySetSearch) IsSet() bool {
	return v.isSet
}

func (v *NullablePolicySetSearch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePolicySetSearch(val *PolicySetSearch) *NullablePolicySetSearch {
	return &NullablePolicySetSearch{value: val, isSet: true}
}

func (v NullablePolicySetSearch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePolicySetSearch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


