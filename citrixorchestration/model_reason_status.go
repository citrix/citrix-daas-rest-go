/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-onprem-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
	"fmt"
)

// ReasonStatus The combinations of filter status (allow/deny) and filter conditions indicating the outcome.
type ReasonStatus string

// List of ReasonStatus
const (
	REASONSTATUS_ALLOW_POSITIVE ReasonStatus = "AllowPositive"
	REASONSTATUS_ALLOW_NO_MATCH ReasonStatus = "AllowNoMatch"
	REASONSTATUS_DENY_POSITIVE ReasonStatus = "DenyPositive"
	REASONSTATUS_DENY_NEGATIVE ReasonStatus = "DenyNegative"
	REASONSTATUS_ALLOW_INSUFFICIENT ReasonStatus = "AllowInsufficient"
	REASONSTATUS_ALLOW_NEGATIVE ReasonStatus = "AllowNegative"
	REASONSTATUS_POLICY_DISABLED ReasonStatus = "PolicyDisabled"
	REASONSTATUS_POLICY_NO_SETTINGS ReasonStatus = "PolicyNoSettings"
	REASONSTATUS_POLICY_NOT_FILTERED ReasonStatus = "PolicyNotFiltered"
)

// All allowed values of ReasonStatus enum
var AllowedReasonStatusEnumValues = []ReasonStatus{
	"AllowPositive",
	"AllowNoMatch",
	"DenyPositive",
	"DenyNegative",
	"AllowInsufficient",
	"AllowNegative",
	"PolicyDisabled",
	"PolicyNoSettings",
	"PolicyNotFiltered",
}

func (v *ReasonStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	
	*v = ReasonStatus(value)
	return nil
}

// NewReasonStatusFromValue returns a pointer to a valid ReasonStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewReasonStatusFromValue(v string) (*ReasonStatus, error) {
	ev := ReasonStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ReasonStatus: valid values are %v", v, AllowedReasonStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ReasonStatus) IsValid() bool {
	for _, existing := range AllowedReasonStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ReasonStatus value
func (v ReasonStatus) Ptr() *ReasonStatus {
	return &v
}

type NullableReasonStatus struct {
	value *ReasonStatus
	isSet bool
}

func (v NullableReasonStatus) Get() *ReasonStatus {
	return v.value
}

func (v *NullableReasonStatus) Set(val *ReasonStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableReasonStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableReasonStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReasonStatus(val *ReasonStatus) *NullableReasonStatus {
	return &NullableReasonStatus{value: val, isSet: true}
}

func (v NullableReasonStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReasonStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

