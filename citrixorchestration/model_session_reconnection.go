/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-onprem-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
	"fmt"
)

// SessionReconnection Session reconnection modes.
type SessionReconnection string

// List of SessionReconnection
const (
	SESSIONRECONNECTION_UNKNOWN SessionReconnection = "Unknown"
	SESSIONRECONNECTION_ALWAYS SessionReconnection = "Always"
	SESSIONRECONNECTION_DISCONNECTED_ONLY SessionReconnection = "DisconnectedOnly"
	SESSIONRECONNECTION_SAME_ENDPOINT_ONLY SessionReconnection = "SameEndpointOnly"
)

// All allowed values of SessionReconnection enum
var AllowedSessionReconnectionEnumValues = []SessionReconnection{
	"Unknown",
	"Always",
	"DisconnectedOnly",
	"SameEndpointOnly",
}

func (v *SessionReconnection) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SessionReconnection(value)
	for _, existing := range AllowedSessionReconnectionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SessionReconnection", value)
}

// NewSessionReconnectionFromValue returns a pointer to a valid SessionReconnection
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSessionReconnectionFromValue(v string) (*SessionReconnection, error) {
	ev := SessionReconnection(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SessionReconnection: valid values are %v", v, AllowedSessionReconnectionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SessionReconnection) IsValid() bool {
	for _, existing := range AllowedSessionReconnectionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SessionReconnection value
func (v SessionReconnection) Ptr() *SessionReconnection {
	return &v
}

type NullableSessionReconnection struct {
	value *SessionReconnection
	isSet bool
}

func (v NullableSessionReconnection) Get() *SessionReconnection {
	return v.value
}

func (v *NullableSessionReconnection) Set(val *SessionReconnection) {
	v.value = val
	v.isSet = true
}

func (v NullableSessionReconnection) IsSet() bool {
	return v.isSet
}

func (v *NullableSessionReconnection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSessionReconnection(val *SessionReconnection) *NullableSessionReconnection {
	return &NullableSessionReconnection{value: val, isSet: true}
}

func (v NullableSessionReconnection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSessionReconnection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

