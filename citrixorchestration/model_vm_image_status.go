/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-onprem-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
	"fmt"
)

// VMImageStatus Status of a virtual machine disk image.
type VMImageStatus string

// List of VMImageStatus
const (
	VMIMAGESTATUS_UNKNOWN  VMImageStatus = "Unknown"
	VMIMAGESTATUS_DELETED  VMImageStatus = "Deleted"
	VMIMAGESTATUS_CURRENT  VMImageStatus = "Current"
	VMIMAGESTATUS_PREPARED VMImageStatus = "Prepared"
)

// All allowed values of VMImageStatus enum
var AllowedVMImageStatusEnumValues = []VMImageStatus{
	"Unknown",
	"Deleted",
	"Current",
	"Prepared",
}

func (v *VMImageStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	*v = VMImageStatus(value)
	return nil
}

// NewVMImageStatusFromValue returns a pointer to a valid VMImageStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVMImageStatusFromValue(v string) (*VMImageStatus, error) {
	ev := VMImageStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VMImageStatus: valid values are %v", v, AllowedVMImageStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VMImageStatus) IsValid() bool {
	for _, existing := range AllowedVMImageStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VMImageStatus value
func (v VMImageStatus) Ptr() *VMImageStatus {
	return &v
}

type NullableVMImageStatus struct {
	value *VMImageStatus
	isSet bool
}

func (v NullableVMImageStatus) Get() *VMImageStatus {
	return v.value
}

func (v *NullableVMImageStatus) Set(val *VMImageStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableVMImageStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableVMImageStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVMImageStatus(val *VMImageStatus) *NullableVMImageStatus {
	return &NullableVMImageStatus{value: val, isSet: true}
}

func (v NullableVMImageStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVMImageStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
