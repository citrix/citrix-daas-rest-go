/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-onprem-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
	"fmt"
)

// ProvisioningType Types of machine provisioning.
type ProvisioningType string

// List of ProvisioningType
const (
	PROVISIONINGTYPE_UNKNOWN ProvisioningType = "Unknown"
	PROVISIONINGTYPE_MANUAL ProvisioningType = "Manual"
	PROVISIONINGTYPE_MCS ProvisioningType = "MCS"
	PROVISIONINGTYPE_MCS_IMPORT ProvisioningType = "MCSImport"
	PROVISIONINGTYPE_PVS ProvisioningType = "PVS"
	PROVISIONINGTYPE_PVS_STREAMING ProvisioningType = "PVSStreaming"
)

// All allowed values of ProvisioningType enum
var AllowedProvisioningTypeEnumValues = []ProvisioningType{
	"Unknown",
	"Manual",
	"MCS",
	"MCSImport",
	"PVS",
	"PVSStreaming",
}

func (v *ProvisioningType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	
	*v = ProvisioningType(value)
	return nil
}

// NewProvisioningTypeFromValue returns a pointer to a valid ProvisioningType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewProvisioningTypeFromValue(v string) (*ProvisioningType, error) {
	ev := ProvisioningType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ProvisioningType: valid values are %v", v, AllowedProvisioningTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ProvisioningType) IsValid() bool {
	for _, existing := range AllowedProvisioningTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ProvisioningType value
func (v ProvisioningType) Ptr() *ProvisioningType {
	return &v
}

type NullableProvisioningType struct {
	value *ProvisioningType
	isSet bool
}

func (v NullableProvisioningType) Get() *ProvisioningType {
	return v.value
}

func (v *NullableProvisioningType) Set(val *ProvisioningType) {
	v.value = val
	v.isSet = true
}

func (v NullableProvisioningType) IsSet() bool {
	return v.isSet
}

func (v *NullableProvisioningType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProvisioningType(val *ProvisioningType) *NullableProvisioningType {
	return &NullableProvisioningType{value: val, isSet: true}
}

func (v NullableProvisioningType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProvisioningType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

