/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-onprem-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
	"fmt"
)

// MessageStyle Style of message box to use.
type MessageStyle string

// List of MessageStyle
const (
	MESSAGESTYLE_UNKNOWN     MessageStyle = "Unknown"
	MESSAGESTYLE_CRITICAL    MessageStyle = "Critical"
	MESSAGESTYLE_QUESTION    MessageStyle = "Question"
	MESSAGESTYLE_EXCLAMATION MessageStyle = "Exclamation"
	MESSAGESTYLE_INFORMATION MessageStyle = "Information"
)

// All allowed values of MessageStyle enum
var AllowedMessageStyleEnumValues = []MessageStyle{
	"Unknown",
	"Critical",
	"Question",
	"Exclamation",
	"Information",
}

func (v *MessageStyle) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	*v = MessageStyle(value)
	return nil
}

// NewMessageStyleFromValue returns a pointer to a valid MessageStyle
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMessageStyleFromValue(v string) (*MessageStyle, error) {
	ev := MessageStyle(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MessageStyle: valid values are %v", v, AllowedMessageStyleEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MessageStyle) IsValid() bool {
	for _, existing := range AllowedMessageStyleEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MessageStyle value
func (v MessageStyle) Ptr() *MessageStyle {
	return &v
}

type NullableMessageStyle struct {
	value *MessageStyle
	isSet bool
}

func (v NullableMessageStyle) Get() *MessageStyle {
	return v.value
}

func (v *NullableMessageStyle) Set(val *MessageStyle) {
	v.value = val
	v.isSet = true
}

func (v NullableMessageStyle) IsSet() bool {
	return v.isSet
}

func (v *NullableMessageStyle) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMessageStyle(val *MessageStyle) *NullableMessageStyle {
	return &NullableMessageStyle{value: val, isSet: true}
}

func (v NullableMessageStyle) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMessageStyle) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
