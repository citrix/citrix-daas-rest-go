/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-onprem-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
	"fmt"
)

// ApplicationType Application types.
type ApplicationType string

// List of ApplicationType
const (
	APPLICATIONTYPE_UNKNOWN              ApplicationType = "Unknown"
	APPLICATIONTYPE_HOSTED_ON_DESKTOP    ApplicationType = "HostedOnDesktop"
	APPLICATIONTYPE_INSTALLED_ON_CLIENT  ApplicationType = "InstalledOnClient"
	APPLICATIONTYPE_SESSION_PRE_LAUNCHER ApplicationType = "SessionPreLauncher"
	APPLICATIONTYPE_PUBLISHED_CONTENT    ApplicationType = "PublishedContent"
	APPLICATIONTYPE_PACKAGED_APPLICATION ApplicationType = "PackagedApplication"
	APPLICATIONTYPE_FLEX_APP             ApplicationType = "FlexApp"
	APPLICATIONTYPE_ELASTIC_APP_LAYER    ApplicationType = "ElasticAppLayer"
	APPLICATIONTYPE_APP_V                ApplicationType = "AppV"
	APPLICATIONTYPE_APP_LIBRARY_APP_V    ApplicationType = "AppLibraryAppV"
	APPLICATIONTYPE_MSIX                 ApplicationType = "Msix"
	APPLICATIONTYPE_APP_ATTACH           ApplicationType = "AppAttach"
)

// All allowed values of ApplicationType enum
var AllowedApplicationTypeEnumValues = []ApplicationType{
	"Unknown",
	"HostedOnDesktop",
	"InstalledOnClient",
	"SessionPreLauncher",
	"PublishedContent",
	"PackagedApplication",
	"FlexApp",
	"ElasticAppLayer",
	"AppV",
	"AppLibraryAppV",
	"Msix",
	"AppAttach",
}

func (v *ApplicationType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	*v = ApplicationType(value)
	return nil
}

// NewApplicationTypeFromValue returns a pointer to a valid ApplicationType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewApplicationTypeFromValue(v string) (*ApplicationType, error) {
	ev := ApplicationType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ApplicationType: valid values are %v", v, AllowedApplicationTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ApplicationType) IsValid() bool {
	for _, existing := range AllowedApplicationTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ApplicationType value
func (v ApplicationType) Ptr() *ApplicationType {
	return &v
}

type NullableApplicationType struct {
	value *ApplicationType
	isSet bool
}

func (v NullableApplicationType) Get() *ApplicationType {
	return v.value
}

func (v *NullableApplicationType) Set(val *ApplicationType) {
	v.value = val
	v.isSet = true
}

func (v NullableApplicationType) IsSet() bool {
	return v.isSet
}

func (v *NullableApplicationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplicationType(val *ApplicationType) *NullableApplicationType {
	return &NullableApplicationType{value: val, isSet: true}
}

func (v NullableApplicationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplicationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
