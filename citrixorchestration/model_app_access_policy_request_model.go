/*
Citrix Virtual Apps and Desktops REST API TECHPREVIEW

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: techpreview
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
)

// checks if the AppAccessPolicyRequestModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AppAccessPolicyRequestModel{}

// AppAccessPolicyRequestModel Request object for the app access rules attached to a delivery group. When the delivery group type=AppsOnly and SharingKind=Private, this turns into New-BrokerAppAssignmentPolicyRule. When type=(AppsOnly or DesktopsAndApps) and SharingKind=Shared, this turns into New-BrokerAppEntitlementPolicyRule. When type=DesktopsOnly and SharingKind=Private, it is not allowed to specify this policy. The combination of type=AppsAndDesktops and SharingKind=Private is also not allowed.
type AppAccessPolicyRequestModel struct {
	// Specifies whether the app access policy is enabled.
	Enabled *bool `json:"Enabled,omitempty"`
	// Specifies whether the ExcludedUsers filter is enabled.  If the filter is disabled then any user entries in the filter are ignored when determining which applications are available for a user.
	ExcludedUserFilterEnabled *bool `json:"ExcludedUserFilterEnabled,omitempty"`
	// Specifies the excluded users filter for applications published on the delivery group; that is, the users and groups who are explicitly denied access to ALL applications published on the delivery group.
	ExcludedUsers []string `json:"ExcludedUsers,omitempty"`
	// Specifies whether the IncludedUsers filter is enabled.  If the filter is disabled then any user who satisfies the requirements of the delivery group's access policy may access applications published on the delivery group.
	IncludedUserFilterEnabled *bool `json:"IncludedUserFilterEnabled,omitempty"`
	// Specifies the included users filter for applications published on the delivery group; that is, the users and groups who are explicitly granted access to applications published on the delivery group.
	IncludedUsers []string `json:"IncludedUsers,omitempty"`
	LeasingBehavior *LeasingBehavior `json:"LeasingBehavior,omitempty"`
	SessionReconnection *SessionReconnection `json:"SessionReconnection,omitempty"`
}

// NewAppAccessPolicyRequestModel instantiates a new AppAccessPolicyRequestModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppAccessPolicyRequestModel() *AppAccessPolicyRequestModel {
	this := AppAccessPolicyRequestModel{}
	return &this
}

// NewAppAccessPolicyRequestModelWithDefaults instantiates a new AppAccessPolicyRequestModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppAccessPolicyRequestModelWithDefaults() *AppAccessPolicyRequestModel {
	this := AppAccessPolicyRequestModel{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *AppAccessPolicyRequestModel) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppAccessPolicyRequestModel) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *AppAccessPolicyRequestModel) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *AppAccessPolicyRequestModel) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetExcludedUserFilterEnabled returns the ExcludedUserFilterEnabled field value if set, zero value otherwise.
func (o *AppAccessPolicyRequestModel) GetExcludedUserFilterEnabled() bool {
	if o == nil || IsNil(o.ExcludedUserFilterEnabled) {
		var ret bool
		return ret
	}
	return *o.ExcludedUserFilterEnabled
}

// GetExcludedUserFilterEnabledOk returns a tuple with the ExcludedUserFilterEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppAccessPolicyRequestModel) GetExcludedUserFilterEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.ExcludedUserFilterEnabled) {
		return nil, false
	}
	return o.ExcludedUserFilterEnabled, true
}

// HasExcludedUserFilterEnabled returns a boolean if a field has been set.
func (o *AppAccessPolicyRequestModel) HasExcludedUserFilterEnabled() bool {
	if o != nil && !IsNil(o.ExcludedUserFilterEnabled) {
		return true
	}

	return false
}

// SetExcludedUserFilterEnabled gets a reference to the given bool and assigns it to the ExcludedUserFilterEnabled field.
func (o *AppAccessPolicyRequestModel) SetExcludedUserFilterEnabled(v bool) {
	o.ExcludedUserFilterEnabled = &v
}

// GetExcludedUsers returns the ExcludedUsers field value if set, zero value otherwise.
func (o *AppAccessPolicyRequestModel) GetExcludedUsers() []string {
	if o == nil || IsNil(o.ExcludedUsers) {
		var ret []string
		return ret
	}
	return o.ExcludedUsers
}

// GetExcludedUsersOk returns a tuple with the ExcludedUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppAccessPolicyRequestModel) GetExcludedUsersOk() ([]string, bool) {
	if o == nil || IsNil(o.ExcludedUsers) {
		return nil, false
	}
	return o.ExcludedUsers, true
}

// HasExcludedUsers returns a boolean if a field has been set.
func (o *AppAccessPolicyRequestModel) HasExcludedUsers() bool {
	if o != nil && !IsNil(o.ExcludedUsers) {
		return true
	}

	return false
}

// SetExcludedUsers gets a reference to the given []string and assigns it to the ExcludedUsers field.
func (o *AppAccessPolicyRequestModel) SetExcludedUsers(v []string) {
	o.ExcludedUsers = v
}

// GetIncludedUserFilterEnabled returns the IncludedUserFilterEnabled field value if set, zero value otherwise.
func (o *AppAccessPolicyRequestModel) GetIncludedUserFilterEnabled() bool {
	if o == nil || IsNil(o.IncludedUserFilterEnabled) {
		var ret bool
		return ret
	}
	return *o.IncludedUserFilterEnabled
}

// GetIncludedUserFilterEnabledOk returns a tuple with the IncludedUserFilterEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppAccessPolicyRequestModel) GetIncludedUserFilterEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IncludedUserFilterEnabled) {
		return nil, false
	}
	return o.IncludedUserFilterEnabled, true
}

// HasIncludedUserFilterEnabled returns a boolean if a field has been set.
func (o *AppAccessPolicyRequestModel) HasIncludedUserFilterEnabled() bool {
	if o != nil && !IsNil(o.IncludedUserFilterEnabled) {
		return true
	}

	return false
}

// SetIncludedUserFilterEnabled gets a reference to the given bool and assigns it to the IncludedUserFilterEnabled field.
func (o *AppAccessPolicyRequestModel) SetIncludedUserFilterEnabled(v bool) {
	o.IncludedUserFilterEnabled = &v
}

// GetIncludedUsers returns the IncludedUsers field value if set, zero value otherwise.
func (o *AppAccessPolicyRequestModel) GetIncludedUsers() []string {
	if o == nil || IsNil(o.IncludedUsers) {
		var ret []string
		return ret
	}
	return o.IncludedUsers
}

// GetIncludedUsersOk returns a tuple with the IncludedUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppAccessPolicyRequestModel) GetIncludedUsersOk() ([]string, bool) {
	if o == nil || IsNil(o.IncludedUsers) {
		return nil, false
	}
	return o.IncludedUsers, true
}

// HasIncludedUsers returns a boolean if a field has been set.
func (o *AppAccessPolicyRequestModel) HasIncludedUsers() bool {
	if o != nil && !IsNil(o.IncludedUsers) {
		return true
	}

	return false
}

// SetIncludedUsers gets a reference to the given []string and assigns it to the IncludedUsers field.
func (o *AppAccessPolicyRequestModel) SetIncludedUsers(v []string) {
	o.IncludedUsers = v
}

// GetLeasingBehavior returns the LeasingBehavior field value if set, zero value otherwise.
func (o *AppAccessPolicyRequestModel) GetLeasingBehavior() LeasingBehavior {
	if o == nil || IsNil(o.LeasingBehavior) {
		var ret LeasingBehavior
		return ret
	}
	return *o.LeasingBehavior
}

// GetLeasingBehaviorOk returns a tuple with the LeasingBehavior field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppAccessPolicyRequestModel) GetLeasingBehaviorOk() (*LeasingBehavior, bool) {
	if o == nil || IsNil(o.LeasingBehavior) {
		return nil, false
	}
	return o.LeasingBehavior, true
}

// HasLeasingBehavior returns a boolean if a field has been set.
func (o *AppAccessPolicyRequestModel) HasLeasingBehavior() bool {
	if o != nil && !IsNil(o.LeasingBehavior) {
		return true
	}

	return false
}

// SetLeasingBehavior gets a reference to the given LeasingBehavior and assigns it to the LeasingBehavior field.
func (o *AppAccessPolicyRequestModel) SetLeasingBehavior(v LeasingBehavior) {
	o.LeasingBehavior = &v
}

// GetSessionReconnection returns the SessionReconnection field value if set, zero value otherwise.
func (o *AppAccessPolicyRequestModel) GetSessionReconnection() SessionReconnection {
	if o == nil || IsNil(o.SessionReconnection) {
		var ret SessionReconnection
		return ret
	}
	return *o.SessionReconnection
}

// GetSessionReconnectionOk returns a tuple with the SessionReconnection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppAccessPolicyRequestModel) GetSessionReconnectionOk() (*SessionReconnection, bool) {
	if o == nil || IsNil(o.SessionReconnection) {
		return nil, false
	}
	return o.SessionReconnection, true
}

// HasSessionReconnection returns a boolean if a field has been set.
func (o *AppAccessPolicyRequestModel) HasSessionReconnection() bool {
	if o != nil && !IsNil(o.SessionReconnection) {
		return true
	}

	return false
}

// SetSessionReconnection gets a reference to the given SessionReconnection and assigns it to the SessionReconnection field.
func (o *AppAccessPolicyRequestModel) SetSessionReconnection(v SessionReconnection) {
	o.SessionReconnection = &v
}

func (o AppAccessPolicyRequestModel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AppAccessPolicyRequestModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enabled) {
		toSerialize["Enabled"] = o.Enabled
	}
	if !IsNil(o.ExcludedUserFilterEnabled) {
		toSerialize["ExcludedUserFilterEnabled"] = o.ExcludedUserFilterEnabled
	}
	if !IsNil(o.ExcludedUsers) {
		toSerialize["ExcludedUsers"] = o.ExcludedUsers
	}
	if !IsNil(o.IncludedUserFilterEnabled) {
		toSerialize["IncludedUserFilterEnabled"] = o.IncludedUserFilterEnabled
	}
	if !IsNil(o.IncludedUsers) {
		toSerialize["IncludedUsers"] = o.IncludedUsers
	}
	if !IsNil(o.LeasingBehavior) {
		toSerialize["LeasingBehavior"] = o.LeasingBehavior
	}
	if !IsNil(o.SessionReconnection) {
		toSerialize["SessionReconnection"] = o.SessionReconnection
	}
	return toSerialize, nil
}

type NullableAppAccessPolicyRequestModel struct {
	value *AppAccessPolicyRequestModel
	isSet bool
}

func (v NullableAppAccessPolicyRequestModel) Get() *AppAccessPolicyRequestModel {
	return v.value
}

func (v *NullableAppAccessPolicyRequestModel) Set(val *AppAccessPolicyRequestModel) {
	v.value = val
	v.isSet = true
}

func (v NullableAppAccessPolicyRequestModel) IsSet() bool {
	return v.isSet
}

func (v *NullableAppAccessPolicyRequestModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppAccessPolicyRequestModel(val *AppAccessPolicyRequestModel) *NullableAppAccessPolicyRequestModel {
	return &NullableAppAccessPolicyRequestModel{value: val, isSet: true}
}

func (v NullableAppAccessPolicyRequestModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppAccessPolicyRequestModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


