/*
Citrix Virtual Apps and Desktops REST API TECHPREVIEW

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: techpreview
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
)

// checks if the SettingDefinitionContract type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SettingDefinitionContract{}

// SettingDefinitionContract Setting definition contract. This class should be read-only.
type SettingDefinitionContract struct {
	// The setting editor name.
	EditorName *string `json:"EditorName,omitempty"`
	// Setting name; Is globally unique
	SettingName *string `json:"SettingName,omitempty"`
	// The setting type as defined by its value.
	SettingType *string `json:"SettingType,omitempty"`
	// Translated setting name. Is globally unique.
	DisplayName *string `json:"DisplayName,omitempty"`
	// Setting category, e.g., ICA\\Printing.
	Category *string `json:"Category,omitempty"`
	// Setting detailed description
	Explanation *string `json:"Explanation,omitempty"`
	// true = user, false = machine
	IsUserSetting *bool `json:"IsUserSetting,omitempty"`
	// Type of setting value
	ValueType *string `json:"ValueType,omitempty"`
	// Label test for a boolean setting, display enable/disable if true, otherwise allow/prohibit
	IsEnableDisable *bool `json:"IsEnableDisable,omitempty"`
	// Setting default value
	DefaultValue *string `json:"DefaultValue,omitempty"`
	// Disabled value for toggled settings
	DisabledValue *string `json:"DisabledValue,omitempty"`
	// Initial value for taggled settings when value is not disabled.
	InitialValue *string `json:"InitialValue,omitempty"`
	// Minimal value for integer setting
	ValueMinimum *string `json:"ValueMinimum,omitempty"`
	// Maximal value for integer settin
	ValueMaximum *string `json:"ValueMaximum,omitempty"`
	// An expression executed to validate the value
	ValueValidator *string `json:"ValueValidator,omitempty"`
	// Warning message issued when validator fails (throws exception)
	ValidatorError *string `json:"ValidatorError,omitempty"`
	// Related settings.
	RelatedSettings *map[string]string `json:"RelatedSettings,omitempty"`
	// Unit of value in translated text
	ValueUnit *string `json:"ValueUnit,omitempty"`
	// Custom text for the allowed explanation for some boolean settings.
	AllowedText *string `json:"AllowedText,omitempty"`
	// Custom text for the denied explaination for some boolean settings.
	DeniedText *string `json:"DeniedText,omitempty"`
	EnumType *SettingDefinitionContractEnumType `json:"EnumType,omitempty"`
	// VDA versions honoring this setting.
	VdaVersions []VdaVersionContract `json:"VdaVersions,omitempty"`
	// Scope, e.g. ConfigSlot
	GpoScope *string `json:"GpoScope,omitempty"`
	// Group, e.g., UPM.
	ProductGroup *string `json:"ProductGroup,omitempty"`
}

// NewSettingDefinitionContract instantiates a new SettingDefinitionContract object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSettingDefinitionContract() *SettingDefinitionContract {
	this := SettingDefinitionContract{}
	return &this
}

// NewSettingDefinitionContractWithDefaults instantiates a new SettingDefinitionContract object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSettingDefinitionContractWithDefaults() *SettingDefinitionContract {
	this := SettingDefinitionContract{}
	return &this
}

// GetEditorName returns the EditorName field value if set, zero value otherwise.
func (o *SettingDefinitionContract) GetEditorName() string {
	if o == nil || IsNil(o.EditorName) {
		var ret string
		return ret
	}
	return *o.EditorName
}

// GetEditorNameOk returns a tuple with the EditorName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingDefinitionContract) GetEditorNameOk() (*string, bool) {
	if o == nil || IsNil(o.EditorName) {
		return nil, false
	}
	return o.EditorName, true
}

// HasEditorName returns a boolean if a field has been set.
func (o *SettingDefinitionContract) HasEditorName() bool {
	if o != nil && !IsNil(o.EditorName) {
		return true
	}

	return false
}

// SetEditorName gets a reference to the given string and assigns it to the EditorName field.
func (o *SettingDefinitionContract) SetEditorName(v string) {
	o.EditorName = &v
}

// GetSettingName returns the SettingName field value if set, zero value otherwise.
func (o *SettingDefinitionContract) GetSettingName() string {
	if o == nil || IsNil(o.SettingName) {
		var ret string
		return ret
	}
	return *o.SettingName
}

// GetSettingNameOk returns a tuple with the SettingName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingDefinitionContract) GetSettingNameOk() (*string, bool) {
	if o == nil || IsNil(o.SettingName) {
		return nil, false
	}
	return o.SettingName, true
}

// HasSettingName returns a boolean if a field has been set.
func (o *SettingDefinitionContract) HasSettingName() bool {
	if o != nil && !IsNil(o.SettingName) {
		return true
	}

	return false
}

// SetSettingName gets a reference to the given string and assigns it to the SettingName field.
func (o *SettingDefinitionContract) SetSettingName(v string) {
	o.SettingName = &v
}

// GetSettingType returns the SettingType field value if set, zero value otherwise.
func (o *SettingDefinitionContract) GetSettingType() string {
	if o == nil || IsNil(o.SettingType) {
		var ret string
		return ret
	}
	return *o.SettingType
}

// GetSettingTypeOk returns a tuple with the SettingType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingDefinitionContract) GetSettingTypeOk() (*string, bool) {
	if o == nil || IsNil(o.SettingType) {
		return nil, false
	}
	return o.SettingType, true
}

// HasSettingType returns a boolean if a field has been set.
func (o *SettingDefinitionContract) HasSettingType() bool {
	if o != nil && !IsNil(o.SettingType) {
		return true
	}

	return false
}

// SetSettingType gets a reference to the given string and assigns it to the SettingType field.
func (o *SettingDefinitionContract) SetSettingType(v string) {
	o.SettingType = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *SettingDefinitionContract) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingDefinitionContract) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *SettingDefinitionContract) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *SettingDefinitionContract) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *SettingDefinitionContract) GetCategory() string {
	if o == nil || IsNil(o.Category) {
		var ret string
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingDefinitionContract) GetCategoryOk() (*string, bool) {
	if o == nil || IsNil(o.Category) {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *SettingDefinitionContract) HasCategory() bool {
	if o != nil && !IsNil(o.Category) {
		return true
	}

	return false
}

// SetCategory gets a reference to the given string and assigns it to the Category field.
func (o *SettingDefinitionContract) SetCategory(v string) {
	o.Category = &v
}

// GetExplanation returns the Explanation field value if set, zero value otherwise.
func (o *SettingDefinitionContract) GetExplanation() string {
	if o == nil || IsNil(o.Explanation) {
		var ret string
		return ret
	}
	return *o.Explanation
}

// GetExplanationOk returns a tuple with the Explanation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingDefinitionContract) GetExplanationOk() (*string, bool) {
	if o == nil || IsNil(o.Explanation) {
		return nil, false
	}
	return o.Explanation, true
}

// HasExplanation returns a boolean if a field has been set.
func (o *SettingDefinitionContract) HasExplanation() bool {
	if o != nil && !IsNil(o.Explanation) {
		return true
	}

	return false
}

// SetExplanation gets a reference to the given string and assigns it to the Explanation field.
func (o *SettingDefinitionContract) SetExplanation(v string) {
	o.Explanation = &v
}

// GetIsUserSetting returns the IsUserSetting field value if set, zero value otherwise.
func (o *SettingDefinitionContract) GetIsUserSetting() bool {
	if o == nil || IsNil(o.IsUserSetting) {
		var ret bool
		return ret
	}
	return *o.IsUserSetting
}

// GetIsUserSettingOk returns a tuple with the IsUserSetting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingDefinitionContract) GetIsUserSettingOk() (*bool, bool) {
	if o == nil || IsNil(o.IsUserSetting) {
		return nil, false
	}
	return o.IsUserSetting, true
}

// HasIsUserSetting returns a boolean if a field has been set.
func (o *SettingDefinitionContract) HasIsUserSetting() bool {
	if o != nil && !IsNil(o.IsUserSetting) {
		return true
	}

	return false
}

// SetIsUserSetting gets a reference to the given bool and assigns it to the IsUserSetting field.
func (o *SettingDefinitionContract) SetIsUserSetting(v bool) {
	o.IsUserSetting = &v
}

// GetValueType returns the ValueType field value if set, zero value otherwise.
func (o *SettingDefinitionContract) GetValueType() string {
	if o == nil || IsNil(o.ValueType) {
		var ret string
		return ret
	}
	return *o.ValueType
}

// GetValueTypeOk returns a tuple with the ValueType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingDefinitionContract) GetValueTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ValueType) {
		return nil, false
	}
	return o.ValueType, true
}

// HasValueType returns a boolean if a field has been set.
func (o *SettingDefinitionContract) HasValueType() bool {
	if o != nil && !IsNil(o.ValueType) {
		return true
	}

	return false
}

// SetValueType gets a reference to the given string and assigns it to the ValueType field.
func (o *SettingDefinitionContract) SetValueType(v string) {
	o.ValueType = &v
}

// GetIsEnableDisable returns the IsEnableDisable field value if set, zero value otherwise.
func (o *SettingDefinitionContract) GetIsEnableDisable() bool {
	if o == nil || IsNil(o.IsEnableDisable) {
		var ret bool
		return ret
	}
	return *o.IsEnableDisable
}

// GetIsEnableDisableOk returns a tuple with the IsEnableDisable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingDefinitionContract) GetIsEnableDisableOk() (*bool, bool) {
	if o == nil || IsNil(o.IsEnableDisable) {
		return nil, false
	}
	return o.IsEnableDisable, true
}

// HasIsEnableDisable returns a boolean if a field has been set.
func (o *SettingDefinitionContract) HasIsEnableDisable() bool {
	if o != nil && !IsNil(o.IsEnableDisable) {
		return true
	}

	return false
}

// SetIsEnableDisable gets a reference to the given bool and assigns it to the IsEnableDisable field.
func (o *SettingDefinitionContract) SetIsEnableDisable(v bool) {
	o.IsEnableDisable = &v
}

// GetDefaultValue returns the DefaultValue field value if set, zero value otherwise.
func (o *SettingDefinitionContract) GetDefaultValue() string {
	if o == nil || IsNil(o.DefaultValue) {
		var ret string
		return ret
	}
	return *o.DefaultValue
}

// GetDefaultValueOk returns a tuple with the DefaultValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingDefinitionContract) GetDefaultValueOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultValue) {
		return nil, false
	}
	return o.DefaultValue, true
}

// HasDefaultValue returns a boolean if a field has been set.
func (o *SettingDefinitionContract) HasDefaultValue() bool {
	if o != nil && !IsNil(o.DefaultValue) {
		return true
	}

	return false
}

// SetDefaultValue gets a reference to the given string and assigns it to the DefaultValue field.
func (o *SettingDefinitionContract) SetDefaultValue(v string) {
	o.DefaultValue = &v
}

// GetDisabledValue returns the DisabledValue field value if set, zero value otherwise.
func (o *SettingDefinitionContract) GetDisabledValue() string {
	if o == nil || IsNil(o.DisabledValue) {
		var ret string
		return ret
	}
	return *o.DisabledValue
}

// GetDisabledValueOk returns a tuple with the DisabledValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingDefinitionContract) GetDisabledValueOk() (*string, bool) {
	if o == nil || IsNil(o.DisabledValue) {
		return nil, false
	}
	return o.DisabledValue, true
}

// HasDisabledValue returns a boolean if a field has been set.
func (o *SettingDefinitionContract) HasDisabledValue() bool {
	if o != nil && !IsNil(o.DisabledValue) {
		return true
	}

	return false
}

// SetDisabledValue gets a reference to the given string and assigns it to the DisabledValue field.
func (o *SettingDefinitionContract) SetDisabledValue(v string) {
	o.DisabledValue = &v
}

// GetInitialValue returns the InitialValue field value if set, zero value otherwise.
func (o *SettingDefinitionContract) GetInitialValue() string {
	if o == nil || IsNil(o.InitialValue) {
		var ret string
		return ret
	}
	return *o.InitialValue
}

// GetInitialValueOk returns a tuple with the InitialValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingDefinitionContract) GetInitialValueOk() (*string, bool) {
	if o == nil || IsNil(o.InitialValue) {
		return nil, false
	}
	return o.InitialValue, true
}

// HasInitialValue returns a boolean if a field has been set.
func (o *SettingDefinitionContract) HasInitialValue() bool {
	if o != nil && !IsNil(o.InitialValue) {
		return true
	}

	return false
}

// SetInitialValue gets a reference to the given string and assigns it to the InitialValue field.
func (o *SettingDefinitionContract) SetInitialValue(v string) {
	o.InitialValue = &v
}

// GetValueMinimum returns the ValueMinimum field value if set, zero value otherwise.
func (o *SettingDefinitionContract) GetValueMinimum() string {
	if o == nil || IsNil(o.ValueMinimum) {
		var ret string
		return ret
	}
	return *o.ValueMinimum
}

// GetValueMinimumOk returns a tuple with the ValueMinimum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingDefinitionContract) GetValueMinimumOk() (*string, bool) {
	if o == nil || IsNil(o.ValueMinimum) {
		return nil, false
	}
	return o.ValueMinimum, true
}

// HasValueMinimum returns a boolean if a field has been set.
func (o *SettingDefinitionContract) HasValueMinimum() bool {
	if o != nil && !IsNil(o.ValueMinimum) {
		return true
	}

	return false
}

// SetValueMinimum gets a reference to the given string and assigns it to the ValueMinimum field.
func (o *SettingDefinitionContract) SetValueMinimum(v string) {
	o.ValueMinimum = &v
}

// GetValueMaximum returns the ValueMaximum field value if set, zero value otherwise.
func (o *SettingDefinitionContract) GetValueMaximum() string {
	if o == nil || IsNil(o.ValueMaximum) {
		var ret string
		return ret
	}
	return *o.ValueMaximum
}

// GetValueMaximumOk returns a tuple with the ValueMaximum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingDefinitionContract) GetValueMaximumOk() (*string, bool) {
	if o == nil || IsNil(o.ValueMaximum) {
		return nil, false
	}
	return o.ValueMaximum, true
}

// HasValueMaximum returns a boolean if a field has been set.
func (o *SettingDefinitionContract) HasValueMaximum() bool {
	if o != nil && !IsNil(o.ValueMaximum) {
		return true
	}

	return false
}

// SetValueMaximum gets a reference to the given string and assigns it to the ValueMaximum field.
func (o *SettingDefinitionContract) SetValueMaximum(v string) {
	o.ValueMaximum = &v
}

// GetValueValidator returns the ValueValidator field value if set, zero value otherwise.
func (o *SettingDefinitionContract) GetValueValidator() string {
	if o == nil || IsNil(o.ValueValidator) {
		var ret string
		return ret
	}
	return *o.ValueValidator
}

// GetValueValidatorOk returns a tuple with the ValueValidator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingDefinitionContract) GetValueValidatorOk() (*string, bool) {
	if o == nil || IsNil(o.ValueValidator) {
		return nil, false
	}
	return o.ValueValidator, true
}

// HasValueValidator returns a boolean if a field has been set.
func (o *SettingDefinitionContract) HasValueValidator() bool {
	if o != nil && !IsNil(o.ValueValidator) {
		return true
	}

	return false
}

// SetValueValidator gets a reference to the given string and assigns it to the ValueValidator field.
func (o *SettingDefinitionContract) SetValueValidator(v string) {
	o.ValueValidator = &v
}

// GetValidatorError returns the ValidatorError field value if set, zero value otherwise.
func (o *SettingDefinitionContract) GetValidatorError() string {
	if o == nil || IsNil(o.ValidatorError) {
		var ret string
		return ret
	}
	return *o.ValidatorError
}

// GetValidatorErrorOk returns a tuple with the ValidatorError field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingDefinitionContract) GetValidatorErrorOk() (*string, bool) {
	if o == nil || IsNil(o.ValidatorError) {
		return nil, false
	}
	return o.ValidatorError, true
}

// HasValidatorError returns a boolean if a field has been set.
func (o *SettingDefinitionContract) HasValidatorError() bool {
	if o != nil && !IsNil(o.ValidatorError) {
		return true
	}

	return false
}

// SetValidatorError gets a reference to the given string and assigns it to the ValidatorError field.
func (o *SettingDefinitionContract) SetValidatorError(v string) {
	o.ValidatorError = &v
}

// GetRelatedSettings returns the RelatedSettings field value if set, zero value otherwise.
func (o *SettingDefinitionContract) GetRelatedSettings() map[string]string {
	if o == nil || IsNil(o.RelatedSettings) {
		var ret map[string]string
		return ret
	}
	return *o.RelatedSettings
}

// GetRelatedSettingsOk returns a tuple with the RelatedSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingDefinitionContract) GetRelatedSettingsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.RelatedSettings) {
		return nil, false
	}
	return o.RelatedSettings, true
}

// HasRelatedSettings returns a boolean if a field has been set.
func (o *SettingDefinitionContract) HasRelatedSettings() bool {
	if o != nil && !IsNil(o.RelatedSettings) {
		return true
	}

	return false
}

// SetRelatedSettings gets a reference to the given map[string]string and assigns it to the RelatedSettings field.
func (o *SettingDefinitionContract) SetRelatedSettings(v map[string]string) {
	o.RelatedSettings = &v
}

// GetValueUnit returns the ValueUnit field value if set, zero value otherwise.
func (o *SettingDefinitionContract) GetValueUnit() string {
	if o == nil || IsNil(o.ValueUnit) {
		var ret string
		return ret
	}
	return *o.ValueUnit
}

// GetValueUnitOk returns a tuple with the ValueUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingDefinitionContract) GetValueUnitOk() (*string, bool) {
	if o == nil || IsNil(o.ValueUnit) {
		return nil, false
	}
	return o.ValueUnit, true
}

// HasValueUnit returns a boolean if a field has been set.
func (o *SettingDefinitionContract) HasValueUnit() bool {
	if o != nil && !IsNil(o.ValueUnit) {
		return true
	}

	return false
}

// SetValueUnit gets a reference to the given string and assigns it to the ValueUnit field.
func (o *SettingDefinitionContract) SetValueUnit(v string) {
	o.ValueUnit = &v
}

// GetAllowedText returns the AllowedText field value if set, zero value otherwise.
func (o *SettingDefinitionContract) GetAllowedText() string {
	if o == nil || IsNil(o.AllowedText) {
		var ret string
		return ret
	}
	return *o.AllowedText
}

// GetAllowedTextOk returns a tuple with the AllowedText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingDefinitionContract) GetAllowedTextOk() (*string, bool) {
	if o == nil || IsNil(o.AllowedText) {
		return nil, false
	}
	return o.AllowedText, true
}

// HasAllowedText returns a boolean if a field has been set.
func (o *SettingDefinitionContract) HasAllowedText() bool {
	if o != nil && !IsNil(o.AllowedText) {
		return true
	}

	return false
}

// SetAllowedText gets a reference to the given string and assigns it to the AllowedText field.
func (o *SettingDefinitionContract) SetAllowedText(v string) {
	o.AllowedText = &v
}

// GetDeniedText returns the DeniedText field value if set, zero value otherwise.
func (o *SettingDefinitionContract) GetDeniedText() string {
	if o == nil || IsNil(o.DeniedText) {
		var ret string
		return ret
	}
	return *o.DeniedText
}

// GetDeniedTextOk returns a tuple with the DeniedText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingDefinitionContract) GetDeniedTextOk() (*string, bool) {
	if o == nil || IsNil(o.DeniedText) {
		return nil, false
	}
	return o.DeniedText, true
}

// HasDeniedText returns a boolean if a field has been set.
func (o *SettingDefinitionContract) HasDeniedText() bool {
	if o != nil && !IsNil(o.DeniedText) {
		return true
	}

	return false
}

// SetDeniedText gets a reference to the given string and assigns it to the DeniedText field.
func (o *SettingDefinitionContract) SetDeniedText(v string) {
	o.DeniedText = &v
}

// GetEnumType returns the EnumType field value if set, zero value otherwise.
func (o *SettingDefinitionContract) GetEnumType() SettingDefinitionContractEnumType {
	if o == nil || IsNil(o.EnumType) {
		var ret SettingDefinitionContractEnumType
		return ret
	}
	return *o.EnumType
}

// GetEnumTypeOk returns a tuple with the EnumType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingDefinitionContract) GetEnumTypeOk() (*SettingDefinitionContractEnumType, bool) {
	if o == nil || IsNil(o.EnumType) {
		return nil, false
	}
	return o.EnumType, true
}

// HasEnumType returns a boolean if a field has been set.
func (o *SettingDefinitionContract) HasEnumType() bool {
	if o != nil && !IsNil(o.EnumType) {
		return true
	}

	return false
}

// SetEnumType gets a reference to the given SettingDefinitionContractEnumType and assigns it to the EnumType field.
func (o *SettingDefinitionContract) SetEnumType(v SettingDefinitionContractEnumType) {
	o.EnumType = &v
}

// GetVdaVersions returns the VdaVersions field value if set, zero value otherwise.
func (o *SettingDefinitionContract) GetVdaVersions() []VdaVersionContract {
	if o == nil || IsNil(o.VdaVersions) {
		var ret []VdaVersionContract
		return ret
	}
	return o.VdaVersions
}

// GetVdaVersionsOk returns a tuple with the VdaVersions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingDefinitionContract) GetVdaVersionsOk() ([]VdaVersionContract, bool) {
	if o == nil || IsNil(o.VdaVersions) {
		return nil, false
	}
	return o.VdaVersions, true
}

// HasVdaVersions returns a boolean if a field has been set.
func (o *SettingDefinitionContract) HasVdaVersions() bool {
	if o != nil && !IsNil(o.VdaVersions) {
		return true
	}

	return false
}

// SetVdaVersions gets a reference to the given []VdaVersionContract and assigns it to the VdaVersions field.
func (o *SettingDefinitionContract) SetVdaVersions(v []VdaVersionContract) {
	o.VdaVersions = v
}

// GetGpoScope returns the GpoScope field value if set, zero value otherwise.
func (o *SettingDefinitionContract) GetGpoScope() string {
	if o == nil || IsNil(o.GpoScope) {
		var ret string
		return ret
	}
	return *o.GpoScope
}

// GetGpoScopeOk returns a tuple with the GpoScope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingDefinitionContract) GetGpoScopeOk() (*string, bool) {
	if o == nil || IsNil(o.GpoScope) {
		return nil, false
	}
	return o.GpoScope, true
}

// HasGpoScope returns a boolean if a field has been set.
func (o *SettingDefinitionContract) HasGpoScope() bool {
	if o != nil && !IsNil(o.GpoScope) {
		return true
	}

	return false
}

// SetGpoScope gets a reference to the given string and assigns it to the GpoScope field.
func (o *SettingDefinitionContract) SetGpoScope(v string) {
	o.GpoScope = &v
}

// GetProductGroup returns the ProductGroup field value if set, zero value otherwise.
func (o *SettingDefinitionContract) GetProductGroup() string {
	if o == nil || IsNil(o.ProductGroup) {
		var ret string
		return ret
	}
	return *o.ProductGroup
}

// GetProductGroupOk returns a tuple with the ProductGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingDefinitionContract) GetProductGroupOk() (*string, bool) {
	if o == nil || IsNil(o.ProductGroup) {
		return nil, false
	}
	return o.ProductGroup, true
}

// HasProductGroup returns a boolean if a field has been set.
func (o *SettingDefinitionContract) HasProductGroup() bool {
	if o != nil && !IsNil(o.ProductGroup) {
		return true
	}

	return false
}

// SetProductGroup gets a reference to the given string and assigns it to the ProductGroup field.
func (o *SettingDefinitionContract) SetProductGroup(v string) {
	o.ProductGroup = &v
}

func (o SettingDefinitionContract) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SettingDefinitionContract) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EditorName) {
		toSerialize["EditorName"] = o.EditorName
	}
	if !IsNil(o.SettingName) {
		toSerialize["SettingName"] = o.SettingName
	}
	if !IsNil(o.SettingType) {
		toSerialize["SettingType"] = o.SettingType
	}
	if !IsNil(o.DisplayName) {
		toSerialize["DisplayName"] = o.DisplayName
	}
	if !IsNil(o.Category) {
		toSerialize["Category"] = o.Category
	}
	if !IsNil(o.Explanation) {
		toSerialize["Explanation"] = o.Explanation
	}
	if !IsNil(o.IsUserSetting) {
		toSerialize["IsUserSetting"] = o.IsUserSetting
	}
	if !IsNil(o.ValueType) {
		toSerialize["ValueType"] = o.ValueType
	}
	if !IsNil(o.IsEnableDisable) {
		toSerialize["IsEnableDisable"] = o.IsEnableDisable
	}
	if !IsNil(o.DefaultValue) {
		toSerialize["DefaultValue"] = o.DefaultValue
	}
	if !IsNil(o.DisabledValue) {
		toSerialize["DisabledValue"] = o.DisabledValue
	}
	if !IsNil(o.InitialValue) {
		toSerialize["InitialValue"] = o.InitialValue
	}
	if !IsNil(o.ValueMinimum) {
		toSerialize["ValueMinimum"] = o.ValueMinimum
	}
	if !IsNil(o.ValueMaximum) {
		toSerialize["ValueMaximum"] = o.ValueMaximum
	}
	if !IsNil(o.ValueValidator) {
		toSerialize["ValueValidator"] = o.ValueValidator
	}
	if !IsNil(o.ValidatorError) {
		toSerialize["ValidatorError"] = o.ValidatorError
	}
	if !IsNil(o.RelatedSettings) {
		toSerialize["RelatedSettings"] = o.RelatedSettings
	}
	if !IsNil(o.ValueUnit) {
		toSerialize["ValueUnit"] = o.ValueUnit
	}
	if !IsNil(o.AllowedText) {
		toSerialize["AllowedText"] = o.AllowedText
	}
	if !IsNil(o.DeniedText) {
		toSerialize["DeniedText"] = o.DeniedText
	}
	if !IsNil(o.EnumType) {
		toSerialize["EnumType"] = o.EnumType
	}
	if !IsNil(o.VdaVersions) {
		toSerialize["VdaVersions"] = o.VdaVersions
	}
	if !IsNil(o.GpoScope) {
		toSerialize["GpoScope"] = o.GpoScope
	}
	if !IsNil(o.ProductGroup) {
		toSerialize["ProductGroup"] = o.ProductGroup
	}
	return toSerialize, nil
}

type NullableSettingDefinitionContract struct {
	value *SettingDefinitionContract
	isSet bool
}

func (v NullableSettingDefinitionContract) Get() *SettingDefinitionContract {
	return v.value
}

func (v *NullableSettingDefinitionContract) Set(val *SettingDefinitionContract) {
	v.value = val
	v.isSet = true
}

func (v NullableSettingDefinitionContract) IsSet() bool {
	return v.isSet
}

func (v *NullableSettingDefinitionContract) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSettingDefinitionContract(val *SettingDefinitionContract) *NullableSettingDefinitionContract {
	return &NullableSettingDefinitionContract{value: val, isSet: true}
}

func (v NullableSettingDefinitionContract) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSettingDefinitionContract) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


