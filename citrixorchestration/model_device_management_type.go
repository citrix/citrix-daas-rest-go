/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-onprem-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
	"fmt"
)

// DeviceManagementType Device management type for machines
type DeviceManagementType string

// List of DeviceManagementType
const (
	DEVICEMANAGEMENTTYPE_UNKNOWN                 DeviceManagementType = "Unknown"
	DEVICEMANAGEMENTTYPE_NONE                    DeviceManagementType = "None"
	DEVICEMANAGEMENTTYPE_INTUNE                  DeviceManagementType = "Intune"
	DEVICEMANAGEMENTTYPE_INTUNE_WITH_CITRIX_TAGS DeviceManagementType = "IntuneWithCitrixTags"
	DEVICEMANAGEMENTTYPE_INTUNE_WITH_SCCM        DeviceManagementType = "IntuneWithSCCM"
)

// All allowed values of DeviceManagementType enum
var AllowedDeviceManagementTypeEnumValues = []DeviceManagementType{
	"Unknown",
	"None",
	"Intune",
	"IntuneWithCitrixTags",
	"IntuneWithSCCM",
}

func (v *DeviceManagementType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	*v = DeviceManagementType(value)
	return nil
}

// NewDeviceManagementTypeFromValue returns a pointer to a valid DeviceManagementType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDeviceManagementTypeFromValue(v string) (*DeviceManagementType, error) {
	ev := DeviceManagementType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DeviceManagementType: valid values are %v", v, AllowedDeviceManagementTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DeviceManagementType) IsValid() bool {
	for _, existing := range AllowedDeviceManagementTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DeviceManagementType value
func (v DeviceManagementType) Ptr() *DeviceManagementType {
	return &v
}

type NullableDeviceManagementType struct {
	value *DeviceManagementType
	isSet bool
}

func (v NullableDeviceManagementType) Get() *DeviceManagementType {
	return v.value
}

func (v *NullableDeviceManagementType) Set(val *DeviceManagementType) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceManagementType) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceManagementType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceManagementType(val *DeviceManagementType) *NullableDeviceManagementType {
	return &NullableDeviceManagementType{value: val, isSet: true}
}

func (v NullableDeviceManagementType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceManagementType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
