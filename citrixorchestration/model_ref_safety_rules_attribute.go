/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-onprem-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
)

// checks if the RefSafetyRulesAttribute type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RefSafetyRulesAttribute{}

// RefSafetyRulesAttribute struct for RefSafetyRulesAttribute
type RefSafetyRulesAttribute struct {
	TypeId  map[string]interface{} `json:"TypeId,omitempty"`
	Version *int32                 `json:"Version,omitempty"`
}

// NewRefSafetyRulesAttribute instantiates a new RefSafetyRulesAttribute object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRefSafetyRulesAttribute() *RefSafetyRulesAttribute {
	this := RefSafetyRulesAttribute{}
	return &this
}

// NewRefSafetyRulesAttributeWithDefaults instantiates a new RefSafetyRulesAttribute object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRefSafetyRulesAttributeWithDefaults() *RefSafetyRulesAttribute {
	this := RefSafetyRulesAttribute{}
	return &this
}

// GetTypeId returns the TypeId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RefSafetyRulesAttribute) GetTypeId() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.TypeId
}

// GetTypeIdOk returns a tuple with the TypeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RefSafetyRulesAttribute) GetTypeIdOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.TypeId) {
		return map[string]interface{}{}, false
	}
	return o.TypeId, true
}

// HasTypeId returns a boolean if a field has been set.
func (o *RefSafetyRulesAttribute) HasTypeId() bool {
	if o != nil && !IsNil(o.TypeId) {
		return true
	}

	return false
}

// SetTypeId gets a reference to the given map[string]interface{} and assigns it to the TypeId field.
func (o *RefSafetyRulesAttribute) SetTypeId(v map[string]interface{}) {
	o.TypeId = v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *RefSafetyRulesAttribute) GetVersion() int32 {
	if o == nil || IsNil(o.Version) {
		var ret int32
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RefSafetyRulesAttribute) GetVersionOk() (*int32, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *RefSafetyRulesAttribute) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int32 and assigns it to the Version field.
func (o *RefSafetyRulesAttribute) SetVersion(v int32) {
	o.Version = &v
}

func (o RefSafetyRulesAttribute) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RefSafetyRulesAttribute) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.TypeId != nil {
		toSerialize["TypeId"] = o.TypeId
	}
	if !IsNil(o.Version) {
		toSerialize["Version"] = o.Version
	}
	return toSerialize, nil
}

type NullableRefSafetyRulesAttribute struct {
	value *RefSafetyRulesAttribute
	isSet bool
}

func (v NullableRefSafetyRulesAttribute) Get() *RefSafetyRulesAttribute {
	return v.value
}

func (v *NullableRefSafetyRulesAttribute) Set(val *RefSafetyRulesAttribute) {
	v.value = val
	v.isSet = true
}

func (v NullableRefSafetyRulesAttribute) IsSet() bool {
	return v.isSet
}

func (v *NullableRefSafetyRulesAttribute) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRefSafetyRulesAttribute(val *RefSafetyRulesAttribute) *NullableRefSafetyRulesAttribute {
	return &NullableRefSafetyRulesAttribute{value: val, isSet: true}
}

func (v NullableRefSafetyRulesAttribute) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRefSafetyRulesAttribute) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
