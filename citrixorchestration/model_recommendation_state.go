/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-onprem-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
	"fmt"
)

// RecommendationState 
type RecommendationState string

// List of RecommendationState
const (
	RECOMMENDATIONSTATE_UNKNOWN RecommendationState = "Unknown"
	RECOMMENDATIONSTATE_DISMISS RecommendationState = "Dismiss"
	RECOMMENDATIONSTATE_ACCEPT RecommendationState = "Accept"
)

// All allowed values of RecommendationState enum
var AllowedRecommendationStateEnumValues = []RecommendationState{
	"Unknown",
	"Dismiss",
	"Accept",
}

func (v *RecommendationState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	
	*v = RecommendationState(value)
	return nil
}

// NewRecommendationStateFromValue returns a pointer to a valid RecommendationState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRecommendationStateFromValue(v string) (*RecommendationState, error) {
	ev := RecommendationState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RecommendationState: valid values are %v", v, AllowedRecommendationStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RecommendationState) IsValid() bool {
	for _, existing := range AllowedRecommendationStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RecommendationState value
func (v RecommendationState) Ptr() *RecommendationState {
	return &v
}

type NullableRecommendationState struct {
	value *RecommendationState
	isSet bool
}

func (v NullableRecommendationState) Get() *RecommendationState {
	return v.value
}

func (v *NullableRecommendationState) Set(val *RecommendationState) {
	v.value = val
	v.isSet = true
}

func (v NullableRecommendationState) IsSet() bool {
	return v.isSet
}

func (v *NullableRecommendationState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecommendationState(val *RecommendationState) *NullableRecommendationState {
	return &NullableRecommendationState{value: val, isSet: true}
}

func (v NullableRecommendationState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecommendationState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

