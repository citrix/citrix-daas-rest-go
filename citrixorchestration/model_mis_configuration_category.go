/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-onprem-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
	"fmt"
)

// MisConfigurationCategory 
type MisConfigurationCategory string

// List of MisConfigurationCategory
const (
	MISCONFIGURATIONCATEGORY_UNKNOWN MisConfigurationCategory = "Unknown"
	MISCONFIGURATIONCATEGORY_WARNING MisConfigurationCategory = "Warning"
	MISCONFIGURATIONCATEGORY_ERROR MisConfigurationCategory = "Error"
	MISCONFIGURATIONCATEGORY_INFO MisConfigurationCategory = "Info"
)

// All allowed values of MisConfigurationCategory enum
var AllowedMisConfigurationCategoryEnumValues = []MisConfigurationCategory{
	"Unknown",
	"Warning",
	"Error",
	"Info",
}

func (v *MisConfigurationCategory) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MisConfigurationCategory(value)
	for _, existing := range AllowedMisConfigurationCategoryEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MisConfigurationCategory", value)
}

// NewMisConfigurationCategoryFromValue returns a pointer to a valid MisConfigurationCategory
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMisConfigurationCategoryFromValue(v string) (*MisConfigurationCategory, error) {
	ev := MisConfigurationCategory(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MisConfigurationCategory: valid values are %v", v, AllowedMisConfigurationCategoryEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MisConfigurationCategory) IsValid() bool {
	for _, existing := range AllowedMisConfigurationCategoryEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MisConfigurationCategory value
func (v MisConfigurationCategory) Ptr() *MisConfigurationCategory {
	return &v
}

type NullableMisConfigurationCategory struct {
	value *MisConfigurationCategory
	isSet bool
}

func (v NullableMisConfigurationCategory) Get() *MisConfigurationCategory {
	return v.value
}

func (v *NullableMisConfigurationCategory) Set(val *MisConfigurationCategory) {
	v.value = val
	v.isSet = true
}

func (v NullableMisConfigurationCategory) IsSet() bool {
	return v.isSet
}

func (v *NullableMisConfigurationCategory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMisConfigurationCategory(val *MisConfigurationCategory) *NullableMisConfigurationCategory {
	return &NullableMisConfigurationCategory{value: val, isSet: true}
}

func (v NullableMisConfigurationCategory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMisConfigurationCategory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

