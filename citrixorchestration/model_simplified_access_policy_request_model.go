/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
)

// checks if the SimplifiedAccessPolicyRequestModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SimplifiedAccessPolicyRequestModel{}

// SimplifiedAccessPolicyRequestModel Request object for a simplified access policy for delivery groups.
type SimplifiedAccessPolicyRequestModel struct {
	// Whether to allow anonymous connections to the delivery group.
	AllowAnonymous NullableBool `json:"AllowAnonymous,omitempty"`
	// Whether to allow connections using HDX. Was: AllowsHdxAccess
	AllowHdxAccess NullableBool `json:"AllowHdxAccess,omitempty"`
	// Whether to allow users to self-service restart machines.
	AllowMachineRestart NullableBool `json:"AllowMachineRestart,omitempty"`
	// Whether to allow connections using RDP. Was: AllowsRdpAccess
	AllowRdpAccess NullableBool `json:"AllowRdpAccess,omitempty"`
	// Whether to allow connections that do not come through NetScaler Gateway.
	ConnectNotViaNetScalerGatewayAllowed NullableBool `json:"ConnectNotViaNetScalerGatewayAllowed,omitempty"`
	// Whether to allow connections that come through NetScaler Gateway.
	ConnectViaNetScalerGatewayAllowed NullableBool `json:"ConnectViaNetScalerGatewayAllowed,omitempty"`
	// Specifies whether the IncludedSmartAccessTags filter is enabled.  If the filter is disabled, it is ignored when the access policy is evaluated.
	IncludedSmartAccessFilterEnabled NullableBool `json:"IncludedSmartAccessFilterEnabled,omitempty"`
	// Specifies the SmartAccess tags which grant access to the delivery group, if any occur in those provided by NetScaler Gateway with the user's connection.
	IncludedSmartAccessTags []SmartAccessTagRequestModel `json:"IncludedSmartAccessTags,omitempty"`
	// Specifies whether the IncludedUsers filter is enabled. If the filter is disabled, it is ignored when the access policy is evaluated.
	IncludedUserFilterEnabled NullableBool `json:"IncludedUserFilterEnabled,omitempty"`
	// Specifies the users and groups who are granted access to the delivery group.
	IncludedUsers []string `json:"IncludedUsers,omitempty"`
	// Specifies whether the ExcludedUsers filter is enabled. If the filter is disabled, it is ignored when the access policy is evaluated.
	ExcludedUserFilterEnabled NullableBool `json:"ExcludedUserFilterEnabled,omitempty"`
	// Specifies the users and groups who are denied access to the delivery group.
	ExcludedUsers []string `json:"ExcludedUsers,omitempty"`
}

// NewSimplifiedAccessPolicyRequestModel instantiates a new SimplifiedAccessPolicyRequestModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSimplifiedAccessPolicyRequestModel() *SimplifiedAccessPolicyRequestModel {
	this := SimplifiedAccessPolicyRequestModel{}
	var allowHdxAccess bool = true
	this.AllowHdxAccess = *NewNullableBool(&allowHdxAccess)
	var allowMachineRestart bool = true
	this.AllowMachineRestart = *NewNullableBool(&allowMachineRestart)
	var allowRdpAccess bool = true
	this.AllowRdpAccess = *NewNullableBool(&allowRdpAccess)
	var connectNotViaNetScalerGatewayAllowed bool = true
	this.ConnectNotViaNetScalerGatewayAllowed = *NewNullableBool(&connectNotViaNetScalerGatewayAllowed)
	var connectViaNetScalerGatewayAllowed bool = true
	this.ConnectViaNetScalerGatewayAllowed = *NewNullableBool(&connectViaNetScalerGatewayAllowed)
	var includedSmartAccessFilterEnabled bool = true
	this.IncludedSmartAccessFilterEnabled = *NewNullableBool(&includedSmartAccessFilterEnabled)
	var includedUserFilterEnabled bool = false
	this.IncludedUserFilterEnabled = *NewNullableBool(&includedUserFilterEnabled)
	var excludedUserFilterEnabled bool = false
	this.ExcludedUserFilterEnabled = *NewNullableBool(&excludedUserFilterEnabled)
	return &this
}

// NewSimplifiedAccessPolicyRequestModelWithDefaults instantiates a new SimplifiedAccessPolicyRequestModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSimplifiedAccessPolicyRequestModelWithDefaults() *SimplifiedAccessPolicyRequestModel {
	this := SimplifiedAccessPolicyRequestModel{}
	var allowHdxAccess bool = true
	this.AllowHdxAccess = *NewNullableBool(&allowHdxAccess)
	var allowMachineRestart bool = true
	this.AllowMachineRestart = *NewNullableBool(&allowMachineRestart)
	var allowRdpAccess bool = true
	this.AllowRdpAccess = *NewNullableBool(&allowRdpAccess)
	var connectNotViaNetScalerGatewayAllowed bool = true
	this.ConnectNotViaNetScalerGatewayAllowed = *NewNullableBool(&connectNotViaNetScalerGatewayAllowed)
	var connectViaNetScalerGatewayAllowed bool = true
	this.ConnectViaNetScalerGatewayAllowed = *NewNullableBool(&connectViaNetScalerGatewayAllowed)
	var includedSmartAccessFilterEnabled bool = true
	this.IncludedSmartAccessFilterEnabled = *NewNullableBool(&includedSmartAccessFilterEnabled)
	var includedUserFilterEnabled bool = false
	this.IncludedUserFilterEnabled = *NewNullableBool(&includedUserFilterEnabled)
	var excludedUserFilterEnabled bool = false
	this.ExcludedUserFilterEnabled = *NewNullableBool(&excludedUserFilterEnabled)
	return &this
}

// GetAllowAnonymous returns the AllowAnonymous field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SimplifiedAccessPolicyRequestModel) GetAllowAnonymous() bool {
	if o == nil || IsNil(o.AllowAnonymous.Get()) {
		var ret bool
		return ret
	}
	return *o.AllowAnonymous.Get()
}

// GetAllowAnonymousOk returns a tuple with the AllowAnonymous field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SimplifiedAccessPolicyRequestModel) GetAllowAnonymousOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AllowAnonymous.Get(), o.AllowAnonymous.IsSet()
}

// HasAllowAnonymous returns a boolean if a field has been set.
func (o *SimplifiedAccessPolicyRequestModel) HasAllowAnonymous() bool {
	if o != nil && o.AllowAnonymous.IsSet() {
		return true
	}

	return false
}

// SetAllowAnonymous gets a reference to the given NullableBool and assigns it to the AllowAnonymous field.
func (o *SimplifiedAccessPolicyRequestModel) SetAllowAnonymous(v bool) {
	o.AllowAnonymous.Set(&v)
}
// SetAllowAnonymousNil sets the value for AllowAnonymous to be an explicit nil
func (o *SimplifiedAccessPolicyRequestModel) SetAllowAnonymousNil() {
	o.AllowAnonymous.Set(nil)
}

// UnsetAllowAnonymous ensures that no value is present for AllowAnonymous, not even an explicit nil
func (o *SimplifiedAccessPolicyRequestModel) UnsetAllowAnonymous() {
	o.AllowAnonymous.Unset()
}

// GetAllowHdxAccess returns the AllowHdxAccess field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SimplifiedAccessPolicyRequestModel) GetAllowHdxAccess() bool {
	if o == nil || IsNil(o.AllowHdxAccess.Get()) {
		var ret bool
		return ret
	}
	return *o.AllowHdxAccess.Get()
}

// GetAllowHdxAccessOk returns a tuple with the AllowHdxAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SimplifiedAccessPolicyRequestModel) GetAllowHdxAccessOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AllowHdxAccess.Get(), o.AllowHdxAccess.IsSet()
}

// HasAllowHdxAccess returns a boolean if a field has been set.
func (o *SimplifiedAccessPolicyRequestModel) HasAllowHdxAccess() bool {
	if o != nil && o.AllowHdxAccess.IsSet() {
		return true
	}

	return false
}

// SetAllowHdxAccess gets a reference to the given NullableBool and assigns it to the AllowHdxAccess field.
func (o *SimplifiedAccessPolicyRequestModel) SetAllowHdxAccess(v bool) {
	o.AllowHdxAccess.Set(&v)
}
// SetAllowHdxAccessNil sets the value for AllowHdxAccess to be an explicit nil
func (o *SimplifiedAccessPolicyRequestModel) SetAllowHdxAccessNil() {
	o.AllowHdxAccess.Set(nil)
}

// UnsetAllowHdxAccess ensures that no value is present for AllowHdxAccess, not even an explicit nil
func (o *SimplifiedAccessPolicyRequestModel) UnsetAllowHdxAccess() {
	o.AllowHdxAccess.Unset()
}

// GetAllowMachineRestart returns the AllowMachineRestart field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SimplifiedAccessPolicyRequestModel) GetAllowMachineRestart() bool {
	if o == nil || IsNil(o.AllowMachineRestart.Get()) {
		var ret bool
		return ret
	}
	return *o.AllowMachineRestart.Get()
}

// GetAllowMachineRestartOk returns a tuple with the AllowMachineRestart field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SimplifiedAccessPolicyRequestModel) GetAllowMachineRestartOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AllowMachineRestart.Get(), o.AllowMachineRestart.IsSet()
}

// HasAllowMachineRestart returns a boolean if a field has been set.
func (o *SimplifiedAccessPolicyRequestModel) HasAllowMachineRestart() bool {
	if o != nil && o.AllowMachineRestart.IsSet() {
		return true
	}

	return false
}

// SetAllowMachineRestart gets a reference to the given NullableBool and assigns it to the AllowMachineRestart field.
func (o *SimplifiedAccessPolicyRequestModel) SetAllowMachineRestart(v bool) {
	o.AllowMachineRestart.Set(&v)
}
// SetAllowMachineRestartNil sets the value for AllowMachineRestart to be an explicit nil
func (o *SimplifiedAccessPolicyRequestModel) SetAllowMachineRestartNil() {
	o.AllowMachineRestart.Set(nil)
}

// UnsetAllowMachineRestart ensures that no value is present for AllowMachineRestart, not even an explicit nil
func (o *SimplifiedAccessPolicyRequestModel) UnsetAllowMachineRestart() {
	o.AllowMachineRestart.Unset()
}

// GetAllowRdpAccess returns the AllowRdpAccess field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SimplifiedAccessPolicyRequestModel) GetAllowRdpAccess() bool {
	if o == nil || IsNil(o.AllowRdpAccess.Get()) {
		var ret bool
		return ret
	}
	return *o.AllowRdpAccess.Get()
}

// GetAllowRdpAccessOk returns a tuple with the AllowRdpAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SimplifiedAccessPolicyRequestModel) GetAllowRdpAccessOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AllowRdpAccess.Get(), o.AllowRdpAccess.IsSet()
}

// HasAllowRdpAccess returns a boolean if a field has been set.
func (o *SimplifiedAccessPolicyRequestModel) HasAllowRdpAccess() bool {
	if o != nil && o.AllowRdpAccess.IsSet() {
		return true
	}

	return false
}

// SetAllowRdpAccess gets a reference to the given NullableBool and assigns it to the AllowRdpAccess field.
func (o *SimplifiedAccessPolicyRequestModel) SetAllowRdpAccess(v bool) {
	o.AllowRdpAccess.Set(&v)
}
// SetAllowRdpAccessNil sets the value for AllowRdpAccess to be an explicit nil
func (o *SimplifiedAccessPolicyRequestModel) SetAllowRdpAccessNil() {
	o.AllowRdpAccess.Set(nil)
}

// UnsetAllowRdpAccess ensures that no value is present for AllowRdpAccess, not even an explicit nil
func (o *SimplifiedAccessPolicyRequestModel) UnsetAllowRdpAccess() {
	o.AllowRdpAccess.Unset()
}

// GetConnectNotViaNetScalerGatewayAllowed returns the ConnectNotViaNetScalerGatewayAllowed field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SimplifiedAccessPolicyRequestModel) GetConnectNotViaNetScalerGatewayAllowed() bool {
	if o == nil || IsNil(o.ConnectNotViaNetScalerGatewayAllowed.Get()) {
		var ret bool
		return ret
	}
	return *o.ConnectNotViaNetScalerGatewayAllowed.Get()
}

// GetConnectNotViaNetScalerGatewayAllowedOk returns a tuple with the ConnectNotViaNetScalerGatewayAllowed field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SimplifiedAccessPolicyRequestModel) GetConnectNotViaNetScalerGatewayAllowedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ConnectNotViaNetScalerGatewayAllowed.Get(), o.ConnectNotViaNetScalerGatewayAllowed.IsSet()
}

// HasConnectNotViaNetScalerGatewayAllowed returns a boolean if a field has been set.
func (o *SimplifiedAccessPolicyRequestModel) HasConnectNotViaNetScalerGatewayAllowed() bool {
	if o != nil && o.ConnectNotViaNetScalerGatewayAllowed.IsSet() {
		return true
	}

	return false
}

// SetConnectNotViaNetScalerGatewayAllowed gets a reference to the given NullableBool and assigns it to the ConnectNotViaNetScalerGatewayAllowed field.
func (o *SimplifiedAccessPolicyRequestModel) SetConnectNotViaNetScalerGatewayAllowed(v bool) {
	o.ConnectNotViaNetScalerGatewayAllowed.Set(&v)
}
// SetConnectNotViaNetScalerGatewayAllowedNil sets the value for ConnectNotViaNetScalerGatewayAllowed to be an explicit nil
func (o *SimplifiedAccessPolicyRequestModel) SetConnectNotViaNetScalerGatewayAllowedNil() {
	o.ConnectNotViaNetScalerGatewayAllowed.Set(nil)
}

// UnsetConnectNotViaNetScalerGatewayAllowed ensures that no value is present for ConnectNotViaNetScalerGatewayAllowed, not even an explicit nil
func (o *SimplifiedAccessPolicyRequestModel) UnsetConnectNotViaNetScalerGatewayAllowed() {
	o.ConnectNotViaNetScalerGatewayAllowed.Unset()
}

// GetConnectViaNetScalerGatewayAllowed returns the ConnectViaNetScalerGatewayAllowed field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SimplifiedAccessPolicyRequestModel) GetConnectViaNetScalerGatewayAllowed() bool {
	if o == nil || IsNil(o.ConnectViaNetScalerGatewayAllowed.Get()) {
		var ret bool
		return ret
	}
	return *o.ConnectViaNetScalerGatewayAllowed.Get()
}

// GetConnectViaNetScalerGatewayAllowedOk returns a tuple with the ConnectViaNetScalerGatewayAllowed field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SimplifiedAccessPolicyRequestModel) GetConnectViaNetScalerGatewayAllowedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ConnectViaNetScalerGatewayAllowed.Get(), o.ConnectViaNetScalerGatewayAllowed.IsSet()
}

// HasConnectViaNetScalerGatewayAllowed returns a boolean if a field has been set.
func (o *SimplifiedAccessPolicyRequestModel) HasConnectViaNetScalerGatewayAllowed() bool {
	if o != nil && o.ConnectViaNetScalerGatewayAllowed.IsSet() {
		return true
	}

	return false
}

// SetConnectViaNetScalerGatewayAllowed gets a reference to the given NullableBool and assigns it to the ConnectViaNetScalerGatewayAllowed field.
func (o *SimplifiedAccessPolicyRequestModel) SetConnectViaNetScalerGatewayAllowed(v bool) {
	o.ConnectViaNetScalerGatewayAllowed.Set(&v)
}
// SetConnectViaNetScalerGatewayAllowedNil sets the value for ConnectViaNetScalerGatewayAllowed to be an explicit nil
func (o *SimplifiedAccessPolicyRequestModel) SetConnectViaNetScalerGatewayAllowedNil() {
	o.ConnectViaNetScalerGatewayAllowed.Set(nil)
}

// UnsetConnectViaNetScalerGatewayAllowed ensures that no value is present for ConnectViaNetScalerGatewayAllowed, not even an explicit nil
func (o *SimplifiedAccessPolicyRequestModel) UnsetConnectViaNetScalerGatewayAllowed() {
	o.ConnectViaNetScalerGatewayAllowed.Unset()
}

// GetIncludedSmartAccessFilterEnabled returns the IncludedSmartAccessFilterEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SimplifiedAccessPolicyRequestModel) GetIncludedSmartAccessFilterEnabled() bool {
	if o == nil || IsNil(o.IncludedSmartAccessFilterEnabled.Get()) {
		var ret bool
		return ret
	}
	return *o.IncludedSmartAccessFilterEnabled.Get()
}

// GetIncludedSmartAccessFilterEnabledOk returns a tuple with the IncludedSmartAccessFilterEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SimplifiedAccessPolicyRequestModel) GetIncludedSmartAccessFilterEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IncludedSmartAccessFilterEnabled.Get(), o.IncludedSmartAccessFilterEnabled.IsSet()
}

// HasIncludedSmartAccessFilterEnabled returns a boolean if a field has been set.
func (o *SimplifiedAccessPolicyRequestModel) HasIncludedSmartAccessFilterEnabled() bool {
	if o != nil && o.IncludedSmartAccessFilterEnabled.IsSet() {
		return true
	}

	return false
}

// SetIncludedSmartAccessFilterEnabled gets a reference to the given NullableBool and assigns it to the IncludedSmartAccessFilterEnabled field.
func (o *SimplifiedAccessPolicyRequestModel) SetIncludedSmartAccessFilterEnabled(v bool) {
	o.IncludedSmartAccessFilterEnabled.Set(&v)
}
// SetIncludedSmartAccessFilterEnabledNil sets the value for IncludedSmartAccessFilterEnabled to be an explicit nil
func (o *SimplifiedAccessPolicyRequestModel) SetIncludedSmartAccessFilterEnabledNil() {
	o.IncludedSmartAccessFilterEnabled.Set(nil)
}

// UnsetIncludedSmartAccessFilterEnabled ensures that no value is present for IncludedSmartAccessFilterEnabled, not even an explicit nil
func (o *SimplifiedAccessPolicyRequestModel) UnsetIncludedSmartAccessFilterEnabled() {
	o.IncludedSmartAccessFilterEnabled.Unset()
}

// GetIncludedSmartAccessTags returns the IncludedSmartAccessTags field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SimplifiedAccessPolicyRequestModel) GetIncludedSmartAccessTags() []SmartAccessTagRequestModel {
	if o == nil {
		var ret []SmartAccessTagRequestModel
		return ret
	}
	return o.IncludedSmartAccessTags
}

// GetIncludedSmartAccessTagsOk returns a tuple with the IncludedSmartAccessTags field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SimplifiedAccessPolicyRequestModel) GetIncludedSmartAccessTagsOk() ([]SmartAccessTagRequestModel, bool) {
	if o == nil || IsNil(o.IncludedSmartAccessTags) {
		return nil, false
	}
	return o.IncludedSmartAccessTags, true
}

// HasIncludedSmartAccessTags returns a boolean if a field has been set.
func (o *SimplifiedAccessPolicyRequestModel) HasIncludedSmartAccessTags() bool {
	if o != nil && IsNil(o.IncludedSmartAccessTags) {
		return true
	}

	return false
}

// SetIncludedSmartAccessTags gets a reference to the given []SmartAccessTagRequestModel and assigns it to the IncludedSmartAccessTags field.
func (o *SimplifiedAccessPolicyRequestModel) SetIncludedSmartAccessTags(v []SmartAccessTagRequestModel) {
	o.IncludedSmartAccessTags = v
}

// GetIncludedUserFilterEnabled returns the IncludedUserFilterEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SimplifiedAccessPolicyRequestModel) GetIncludedUserFilterEnabled() bool {
	if o == nil || IsNil(o.IncludedUserFilterEnabled.Get()) {
		var ret bool
		return ret
	}
	return *o.IncludedUserFilterEnabled.Get()
}

// GetIncludedUserFilterEnabledOk returns a tuple with the IncludedUserFilterEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SimplifiedAccessPolicyRequestModel) GetIncludedUserFilterEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IncludedUserFilterEnabled.Get(), o.IncludedUserFilterEnabled.IsSet()
}

// HasIncludedUserFilterEnabled returns a boolean if a field has been set.
func (o *SimplifiedAccessPolicyRequestModel) HasIncludedUserFilterEnabled() bool {
	if o != nil && o.IncludedUserFilterEnabled.IsSet() {
		return true
	}

	return false
}

// SetIncludedUserFilterEnabled gets a reference to the given NullableBool and assigns it to the IncludedUserFilterEnabled field.
func (o *SimplifiedAccessPolicyRequestModel) SetIncludedUserFilterEnabled(v bool) {
	o.IncludedUserFilterEnabled.Set(&v)
}
// SetIncludedUserFilterEnabledNil sets the value for IncludedUserFilterEnabled to be an explicit nil
func (o *SimplifiedAccessPolicyRequestModel) SetIncludedUserFilterEnabledNil() {
	o.IncludedUserFilterEnabled.Set(nil)
}

// UnsetIncludedUserFilterEnabled ensures that no value is present for IncludedUserFilterEnabled, not even an explicit nil
func (o *SimplifiedAccessPolicyRequestModel) UnsetIncludedUserFilterEnabled() {
	o.IncludedUserFilterEnabled.Unset()
}

// GetIncludedUsers returns the IncludedUsers field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SimplifiedAccessPolicyRequestModel) GetIncludedUsers() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.IncludedUsers
}

// GetIncludedUsersOk returns a tuple with the IncludedUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SimplifiedAccessPolicyRequestModel) GetIncludedUsersOk() ([]string, bool) {
	if o == nil || IsNil(o.IncludedUsers) {
		return nil, false
	}
	return o.IncludedUsers, true
}

// HasIncludedUsers returns a boolean if a field has been set.
func (o *SimplifiedAccessPolicyRequestModel) HasIncludedUsers() bool {
	if o != nil && IsNil(o.IncludedUsers) {
		return true
	}

	return false
}

// SetIncludedUsers gets a reference to the given []string and assigns it to the IncludedUsers field.
func (o *SimplifiedAccessPolicyRequestModel) SetIncludedUsers(v []string) {
	o.IncludedUsers = v
}

// GetExcludedUserFilterEnabled returns the ExcludedUserFilterEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SimplifiedAccessPolicyRequestModel) GetExcludedUserFilterEnabled() bool {
	if o == nil || IsNil(o.ExcludedUserFilterEnabled.Get()) {
		var ret bool
		return ret
	}
	return *o.ExcludedUserFilterEnabled.Get()
}

// GetExcludedUserFilterEnabledOk returns a tuple with the ExcludedUserFilterEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SimplifiedAccessPolicyRequestModel) GetExcludedUserFilterEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExcludedUserFilterEnabled.Get(), o.ExcludedUserFilterEnabled.IsSet()
}

// HasExcludedUserFilterEnabled returns a boolean if a field has been set.
func (o *SimplifiedAccessPolicyRequestModel) HasExcludedUserFilterEnabled() bool {
	if o != nil && o.ExcludedUserFilterEnabled.IsSet() {
		return true
	}

	return false
}

// SetExcludedUserFilterEnabled gets a reference to the given NullableBool and assigns it to the ExcludedUserFilterEnabled field.
func (o *SimplifiedAccessPolicyRequestModel) SetExcludedUserFilterEnabled(v bool) {
	o.ExcludedUserFilterEnabled.Set(&v)
}
// SetExcludedUserFilterEnabledNil sets the value for ExcludedUserFilterEnabled to be an explicit nil
func (o *SimplifiedAccessPolicyRequestModel) SetExcludedUserFilterEnabledNil() {
	o.ExcludedUserFilterEnabled.Set(nil)
}

// UnsetExcludedUserFilterEnabled ensures that no value is present for ExcludedUserFilterEnabled, not even an explicit nil
func (o *SimplifiedAccessPolicyRequestModel) UnsetExcludedUserFilterEnabled() {
	o.ExcludedUserFilterEnabled.Unset()
}

// GetExcludedUsers returns the ExcludedUsers field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SimplifiedAccessPolicyRequestModel) GetExcludedUsers() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.ExcludedUsers
}

// GetExcludedUsersOk returns a tuple with the ExcludedUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SimplifiedAccessPolicyRequestModel) GetExcludedUsersOk() ([]string, bool) {
	if o == nil || IsNil(o.ExcludedUsers) {
		return nil, false
	}
	return o.ExcludedUsers, true
}

// HasExcludedUsers returns a boolean if a field has been set.
func (o *SimplifiedAccessPolicyRequestModel) HasExcludedUsers() bool {
	if o != nil && IsNil(o.ExcludedUsers) {
		return true
	}

	return false
}

// SetExcludedUsers gets a reference to the given []string and assigns it to the ExcludedUsers field.
func (o *SimplifiedAccessPolicyRequestModel) SetExcludedUsers(v []string) {
	o.ExcludedUsers = v
}

func (o SimplifiedAccessPolicyRequestModel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SimplifiedAccessPolicyRequestModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AllowAnonymous.IsSet() {
		toSerialize["AllowAnonymous"] = o.AllowAnonymous.Get()
	}
	if o.AllowHdxAccess.IsSet() {
		toSerialize["AllowHdxAccess"] = o.AllowHdxAccess.Get()
	}
	if o.AllowMachineRestart.IsSet() {
		toSerialize["AllowMachineRestart"] = o.AllowMachineRestart.Get()
	}
	if o.AllowRdpAccess.IsSet() {
		toSerialize["AllowRdpAccess"] = o.AllowRdpAccess.Get()
	}
	if o.ConnectNotViaNetScalerGatewayAllowed.IsSet() {
		toSerialize["ConnectNotViaNetScalerGatewayAllowed"] = o.ConnectNotViaNetScalerGatewayAllowed.Get()
	}
	if o.ConnectViaNetScalerGatewayAllowed.IsSet() {
		toSerialize["ConnectViaNetScalerGatewayAllowed"] = o.ConnectViaNetScalerGatewayAllowed.Get()
	}
	if o.IncludedSmartAccessFilterEnabled.IsSet() {
		toSerialize["IncludedSmartAccessFilterEnabled"] = o.IncludedSmartAccessFilterEnabled.Get()
	}
	if o.IncludedSmartAccessTags != nil {
		toSerialize["IncludedSmartAccessTags"] = o.IncludedSmartAccessTags
	}
	if o.IncludedUserFilterEnabled.IsSet() {
		toSerialize["IncludedUserFilterEnabled"] = o.IncludedUserFilterEnabled.Get()
	}
	if o.IncludedUsers != nil {
		toSerialize["IncludedUsers"] = o.IncludedUsers
	}
	if o.ExcludedUserFilterEnabled.IsSet() {
		toSerialize["ExcludedUserFilterEnabled"] = o.ExcludedUserFilterEnabled.Get()
	}
	if o.ExcludedUsers != nil {
		toSerialize["ExcludedUsers"] = o.ExcludedUsers
	}
	return toSerialize, nil
}

type NullableSimplifiedAccessPolicyRequestModel struct {
	value *SimplifiedAccessPolicyRequestModel
	isSet bool
}

func (v NullableSimplifiedAccessPolicyRequestModel) Get() *SimplifiedAccessPolicyRequestModel {
	return v.value
}

func (v *NullableSimplifiedAccessPolicyRequestModel) Set(val *SimplifiedAccessPolicyRequestModel) {
	v.value = val
	v.isSet = true
}

func (v NullableSimplifiedAccessPolicyRequestModel) IsSet() bool {
	return v.isSet
}

func (v *NullableSimplifiedAccessPolicyRequestModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSimplifiedAccessPolicyRequestModel(val *SimplifiedAccessPolicyRequestModel) *NullableSimplifiedAccessPolicyRequestModel {
	return &NullableSimplifiedAccessPolicyRequestModel{value: val, isSet: true}
}

func (v NullableSimplifiedAccessPolicyRequestModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSimplifiedAccessPolicyRequestModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


