/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
	"fmt"
)

// ColorDepth Color depth of HDX session.
type ColorDepth string

// List of ColorDepth
const (
	COLORDEPTH_UNKNOWN ColorDepth = "Unknown"
	COLORDEPTH_FOUR_BIT ColorDepth = "FourBit"
	COLORDEPTH_EIGHT_BIT ColorDepth = "EightBit"
	COLORDEPTH_SIXTEEN_BIT ColorDepth = "SixteenBit"
	COLORDEPTH_TWENTY_FOUR_BIT ColorDepth = "TwentyFourBit"
)

// All allowed values of ColorDepth enum
var AllowedColorDepthEnumValues = []ColorDepth{
	"Unknown",
	"FourBit",
	"EightBit",
	"SixteenBit",
	"TwentyFourBit",
}

func (v *ColorDepth) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ColorDepth(value)
	for _, existing := range AllowedColorDepthEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ColorDepth", value)
}

// NewColorDepthFromValue returns a pointer to a valid ColorDepth
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewColorDepthFromValue(v string) (*ColorDepth, error) {
	ev := ColorDepth(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ColorDepth: valid values are %v", v, AllowedColorDepthEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ColorDepth) IsValid() bool {
	for _, existing := range AllowedColorDepthEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ColorDepth value
func (v ColorDepth) Ptr() *ColorDepth {
	return &v
}

type NullableColorDepth struct {
	value *ColorDepth
	isSet bool
}

func (v NullableColorDepth) Get() *ColorDepth {
	return v.value
}

func (v *NullableColorDepth) Set(val *ColorDepth) {
	v.value = val
	v.isSet = true
}

func (v NullableColorDepth) IsSet() bool {
	return v.isSet
}

func (v *NullableColorDepth) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableColorDepth(val *ColorDepth) *NullableColorDepth {
	return &NullableColorDepth{value: val, isSet: true}
}

func (v NullableColorDepth) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableColorDepth) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

