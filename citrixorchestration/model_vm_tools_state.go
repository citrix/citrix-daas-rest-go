/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-onprem-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
	"fmt"
)

// VMToolsState VM tools state
type VMToolsState string

// List of VMToolsState
const (
	VMTOOLSSTATE_UNKNOWN     VMToolsState = "Unknown"
	VMTOOLSSTATE_NOT_PRESENT VMToolsState = "NotPresent"
	VMTOOLSSTATE_NOT_STARTED VMToolsState = "NotStarted"
	VMTOOLSSTATE_RUNNING     VMToolsState = "Running"
)

// All allowed values of VMToolsState enum
var AllowedVMToolsStateEnumValues = []VMToolsState{
	"Unknown",
	"NotPresent",
	"NotStarted",
	"Running",
}

func (v *VMToolsState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	*v = VMToolsState(value)
	return nil
}

// NewVMToolsStateFromValue returns a pointer to a valid VMToolsState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVMToolsStateFromValue(v string) (*VMToolsState, error) {
	ev := VMToolsState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VMToolsState: valid values are %v", v, AllowedVMToolsStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VMToolsState) IsValid() bool {
	for _, existing := range AllowedVMToolsStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VMToolsState value
func (v VMToolsState) Ptr() *VMToolsState {
	return &v
}

type NullableVMToolsState struct {
	value *VMToolsState
	isSet bool
}

func (v NullableVMToolsState) Get() *VMToolsState {
	return v.value
}

func (v *NullableVMToolsState) Set(val *VMToolsState) {
	v.value = val
	v.isSet = true
}

func (v NullableVMToolsState) IsSet() bool {
	return v.isSet
}

func (v *NullableVMToolsState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVMToolsState(val *VMToolsState) *NullableVMToolsState {
	return &NullableVMToolsState{value: val, isSet: true}
}

func (v NullableVMToolsState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVMToolsState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
