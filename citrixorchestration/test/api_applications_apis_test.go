/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

Testing ApplicationsAPIsDAASService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package citrixorchestration

import (
	"context"
	"testing"

	openapiclient "github.com/citrix/citrix-daas-rest-go/citrixorchestration"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_citrixorchestration_ApplicationsAPIsDAASService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ApplicationsAPIsDAASService ApplicationsAddApplicationTags", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nameOrId string
		var tagNameOrId string

		resp, httpRes, err := apiClient.ApplicationsAPIsDAAS.ApplicationsAddApplicationTags(context.Background(), nameOrId, tagNameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationsAPIsDAASService ApplicationsAddApplications", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.ApplicationsAPIsDAAS.ApplicationsAddApplications(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationsAPIsDAASService ApplicationsCheckApplicationExists", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var name string

		httpRes, err := apiClient.ApplicationsAPIsDAAS.ApplicationsCheckApplicationExists(context.Background(), name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationsAPIsDAASService ApplicationsDeleteApplication", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nameOrId string

		httpRes, err := apiClient.ApplicationsAPIsDAAS.ApplicationsDeleteApplication(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationsAPIsDAASService ApplicationsDisableApplicationFta", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nameOrId string
		var extensionName string

		httpRes, err := apiClient.ApplicationsAPIsDAAS.ApplicationsDisableApplicationFta(context.Background(), nameOrId, extensionName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationsAPIsDAASService ApplicationsDoApplicationSearch", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ApplicationsAPIsDAAS.ApplicationsDoApplicationSearch(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationsAPIsDAASService ApplicationsDuplicateApplication", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.ApplicationsAPIsDAAS.ApplicationsDuplicateApplication(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationsAPIsDAASService ApplicationsEnableApplicationFta", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nameOrId string

		httpRes, err := apiClient.ApplicationsAPIsDAAS.ApplicationsEnableApplicationFta(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationsAPIsDAASService ApplicationsGetApplication", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.ApplicationsAPIsDAAS.ApplicationsGetApplication(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationsAPIsDAASService ApplicationsGetApplicationAdministrators", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.ApplicationsAPIsDAAS.ApplicationsGetApplicationAdministrators(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationsAPIsDAASService ApplicationsGetApplicationApplicationGroups", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.ApplicationsAPIsDAAS.ApplicationsGetApplicationApplicationGroups(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationsAPIsDAASService ApplicationsGetApplicationDeliveryGroups", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.ApplicationsAPIsDAAS.ApplicationsGetApplicationDeliveryGroups(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationsAPIsDAASService ApplicationsGetApplicationFta", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nameOrId string
		var extensionName string

		resp, httpRes, err := apiClient.ApplicationsAPIsDAAS.ApplicationsGetApplicationFta(context.Background(), nameOrId, extensionName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationsAPIsDAASService ApplicationsGetApplicationFtas", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.ApplicationsAPIsDAAS.ApplicationsGetApplicationFtas(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationsAPIsDAASService ApplicationsGetApplicationRecommendName", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.ApplicationsAPIsDAAS.ApplicationsGetApplicationRecommendName(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationsAPIsDAASService ApplicationsGetApplicationSessions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.ApplicationsAPIsDAAS.ApplicationsGetApplicationSessions(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationsAPIsDAASService ApplicationsGetApplicationTags", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.ApplicationsAPIsDAAS.ApplicationsGetApplicationTags(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationsAPIsDAASService ApplicationsGetApplications", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ApplicationsAPIsDAAS.ApplicationsGetApplications(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationsAPIsDAASService ApplicationsGetApplicationsV2", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ApplicationsAPIsDAAS.ApplicationsGetApplicationsV2(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationsAPIsDAASService ApplicationsImportFileTypes", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nameOrId string

		httpRes, err := apiClient.ApplicationsAPIsDAAS.ApplicationsImportFileTypes(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationsAPIsDAASService ApplicationsPatchApplication", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nameOrId string

		httpRes, err := apiClient.ApplicationsAPIsDAAS.ApplicationsPatchApplication(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationsAPIsDAASService ApplicationsRefreshAppVApplications", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ApplicationsAPIsDAAS.ApplicationsRefreshAppVApplications(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationsAPIsDAASService ApplicationsRemoveApplicationTags", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nameOrId string
		var tagNameOrId string

		httpRes, err := apiClient.ApplicationsAPIsDAAS.ApplicationsRemoveApplicationTags(context.Background(), nameOrId, tagNameOrId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationsAPIsDAASService ApplicationsSearchStartMenuApplications", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ApplicationsAPIsDAAS.ApplicationsSearchStartMenuApplications(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationsAPIsDAASService ApplicationsSetApplicationTags", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nameOrId string

		httpRes, err := apiClient.ApplicationsAPIsDAAS.ApplicationsSetApplicationTags(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
