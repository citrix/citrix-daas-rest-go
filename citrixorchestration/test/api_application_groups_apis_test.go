/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

Testing ApplicationGroupsAPIsDAASService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package citrixorchestration

import (
	"context"
	"testing"

	openapiclient "github.com/citrix/citrix-daas-rest-go/citrixorchestration"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_citrixorchestration_ApplicationGroupsAPIsDAASService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ApplicationGroupsAPIsDAASService ApplicationGroupsAddApplicationGroupTag", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nameOrId string
		var tagNameOrId string

		resp, httpRes, err := apiClient.ApplicationGroupsAPIsDAAS.ApplicationGroupsAddApplicationGroupTag(context.Background(), nameOrId, tagNameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationGroupsAPIsDAASService ApplicationGroupsAddApplications", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nameOrId string

		httpRes, err := apiClient.ApplicationGroupsAPIsDAAS.ApplicationGroupsAddApplications(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationGroupsAPIsDAASService ApplicationGroupsCheckApplicationGroupExists", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var name string

		httpRes, err := apiClient.ApplicationGroupsAPIsDAAS.ApplicationGroupsCheckApplicationGroupExists(context.Background(), name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationGroupsAPIsDAASService ApplicationGroupsCreateApplicationGroup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ApplicationGroupsAPIsDAAS.ApplicationGroupsCreateApplicationGroup(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationGroupsAPIsDAASService ApplicationGroupsDeleteApplicationGroup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nameOrId string

		httpRes, err := apiClient.ApplicationGroupsAPIsDAAS.ApplicationGroupsDeleteApplicationGroup(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationGroupsAPIsDAASService ApplicationGroupsDoApplicationGroupSearch", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ApplicationGroupsAPIsDAAS.ApplicationGroupsDoApplicationGroupSearch(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationGroupsAPIsDAASService ApplicationGroupsGetApplicationGroup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.ApplicationGroupsAPIsDAAS.ApplicationGroupsGetApplicationGroup(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationGroupsAPIsDAASService ApplicationGroupsGetApplicationGroupApplications", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.ApplicationGroupsAPIsDAAS.ApplicationGroupsGetApplicationGroupApplications(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationGroupsAPIsDAASService ApplicationGroupsGetApplicationGroupDeliveryGroups", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.ApplicationGroupsAPIsDAAS.ApplicationGroupsGetApplicationGroupDeliveryGroups(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationGroupsAPIsDAASService ApplicationGroupsGetApplicationGroupTags", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.ApplicationGroupsAPIsDAAS.ApplicationGroupsGetApplicationGroupTags(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationGroupsAPIsDAASService ApplicationGroupsGetApplicationGroups", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ApplicationGroupsAPIsDAAS.ApplicationGroupsGetApplicationGroups(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationGroupsAPIsDAASService ApplicationGroupsGetApplicationGroupsV2", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ApplicationGroupsAPIsDAAS.ApplicationGroupsGetApplicationGroupsV2(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationGroupsAPIsDAASService ApplicationGroupsRemoveApplication", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nameOrId string
		var appNameOrId string

		httpRes, err := apiClient.ApplicationGroupsAPIsDAAS.ApplicationGroupsRemoveApplication(context.Background(), nameOrId, appNameOrId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationGroupsAPIsDAASService ApplicationGroupsRemoveApplicationGroupTag", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nameOrId string
		var tagNameOrId string

		httpRes, err := apiClient.ApplicationGroupsAPIsDAAS.ApplicationGroupsRemoveApplicationGroupTag(context.Background(), nameOrId, tagNameOrId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationGroupsAPIsDAASService ApplicationGroupsSetApplicationGroupTags", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nameOrId string

		httpRes, err := apiClient.ApplicationGroupsAPIsDAAS.ApplicationGroupsSetApplicationGroupTags(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationGroupsAPIsDAASService ApplicationGroupsTestApplicationGroupExists", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.ApplicationGroupsAPIsDAAS.ApplicationGroupsTestApplicationGroupExists(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationGroupsAPIsDAASService ApplicationGroupsUpdateApplicationGroup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nameOrId string

		httpRes, err := apiClient.ApplicationGroupsAPIsDAAS.ApplicationGroupsUpdateApplicationGroup(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
