/*
Citrix Virtual Apps and Desktops REST API TECHPREVIEW

Testing DatabasesTPApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package citrixorchestration

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/citrix/citrix-daas-rest-go/citrixorchestration"
)

func Test_citrixorchestration_DatabasesTPApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test DatabasesTPApiService DatabasesTPChanageDatabase", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var dataStore string
		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.DatabasesTPApi.DatabasesTPChanageDatabase(context.Background(), dataStore, customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DatabasesTPApiService DatabasesTPGenerateDatabaseChangeScript", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var dataStore string
		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.DatabasesTPApi.DatabasesTPGenerateDatabaseChangeScript(context.Background(), dataStore, customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DatabasesTPApiService DatabasesTPGetDatabase", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var dataStore string
		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.DatabasesTPApi.DatabasesTPGetDatabase(context.Background(), dataStore, customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DatabasesTPApiService DatabasesTPGetDatabases", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.DatabasesTPApi.DatabasesTPGetDatabases(context.Background(), customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
