/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

Testing AppLibPackageDiscoveryAPIs Service

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package citrixorchestration

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/citrix/citrix-daas-rest-go/citrixorchestration"
)

func Test_citrixorchestration_AppLibPackageDiscoveryAPIs Service(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test AppLibPackageDiscoveryAPIs Service AppLibPackageDiscoveryCreateAppLibPackageDiscovery", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AppLibPackageDiscoveryAPIs .AppLibPackageDiscoveryCreateAppLibPackageDiscovery(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppLibPackageDiscoveryAPIs Service AppLibPackageDiscoveryCreateAppLibPackageDiscoveryProfile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AppLibPackageDiscoveryAPIs .AppLibPackageDiscoveryCreateAppLibPackageDiscoveryProfile(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppLibPackageDiscoveryAPIs Service AppLibPackageDiscoveryGetAppLibPackageDiscovery", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.AppLibPackageDiscoveryAPIs .AppLibPackageDiscoveryGetAppLibPackageDiscovery(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppLibPackageDiscoveryAPIs Service AppLibPackageDiscoveryGetAppLibPackageDiscoveryLatestSessionByProfileId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var uid int32

		resp, httpRes, err := apiClient.AppLibPackageDiscoveryAPIs .AppLibPackageDiscoveryGetAppLibPackageDiscoveryLatestSessionByProfileId(context.Background(), uid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppLibPackageDiscoveryAPIs Service AppLibPackageDiscoveryGetAppLibPackageDiscoveryProfile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var uid int32

		resp, httpRes, err := apiClient.AppLibPackageDiscoveryAPIs .AppLibPackageDiscoveryGetAppLibPackageDiscoveryProfile(context.Background(), uid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppLibPackageDiscoveryAPIs Service AppLibPackageDiscoveryGetAppLibPackageDiscoveryProfiles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AppLibPackageDiscoveryAPIs .AppLibPackageDiscoveryGetAppLibPackageDiscoveryProfiles(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppLibPackageDiscoveryAPIs Service AppLibPackageDiscoveryGetAppLibPackageDiscoverySessions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AppLibPackageDiscoveryAPIs .AppLibPackageDiscoveryGetAppLibPackageDiscoverySessions(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppLibPackageDiscoveryAPIs Service AppLibPackageDiscoveryRemoveAppLibPackageDiscoveryProfile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var uid int32

		httpRes, err := apiClient.AppLibPackageDiscoveryAPIs .AppLibPackageDiscoveryRemoveAppLibPackageDiscoveryProfile(context.Background(), uid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppLibPackageDiscoveryAPIs Service AppLibPackageDiscoveryUpdateAppLibPackageDiscoveryProfile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var uid int32

		httpRes, err := apiClient.AppLibPackageDiscoveryAPIs .AppLibPackageDiscoveryUpdateAppLibPackageDiscoveryProfile(context.Background(), uid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
