/*
Citrix Virtual Apps and Desktops REST API TECHPREVIEW

Testing ZonesTPApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package citrixorchestration

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/citrix/citrix-daas-rest-go/citrixorchestration"
)

func Test_citrixorchestration_ZonesTPApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ZonesTPApiService ZonesTPAddItemsIntoZone", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var customerid string
		var siteid string

		httpRes, err := apiClient.ZonesTPApi.ZonesTPAddItemsIntoZone(context.Background(), nameOrId, customerid, siteid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ZonesTPApiService ZonesTPCreateUserZonePreference", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.ZonesTPApi.ZonesTPCreateUserZonePreference(context.Background(), customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ZonesTPApiService ZonesTPCreateZone", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerid string
		var siteid string

		httpRes, err := apiClient.ZonesTPApi.ZonesTPCreateZone(context.Background(), customerid, siteid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ZonesTPApiService ZonesTPDeleteUserZonePreference", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string
		var customerid string
		var siteid string

		httpRes, err := apiClient.ZonesTPApi.ZonesTPDeleteUserZonePreference(context.Background(), name, customerid, siteid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ZonesTPApiService ZonesTPDeleteZone", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var customerid string
		var siteid string

		httpRes, err := apiClient.ZonesTPApi.ZonesTPDeleteZone(context.Background(), nameOrId, customerid, siteid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ZonesTPApiService ZonesTPDoZoneSearch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.ZonesTPApi.ZonesTPDoZoneSearch(context.Background(), customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ZonesTPApiService ZonesTPEditZone", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var customerid string
		var siteid string

		httpRes, err := apiClient.ZonesTPApi.ZonesTPEditZone(context.Background(), nameOrId, customerid, siteid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ZonesTPApiService ZonesTPGetUserZonePreference", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string
		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.ZonesTPApi.ZonesTPGetUserZonePreference(context.Background(), name, customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ZonesTPApiService ZonesTPGetUserZonePreferenceList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.ZonesTPApi.ZonesTPGetUserZonePreferenceList(context.Background(), customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ZonesTPApiService ZonesTPGetUserZonePreferencesByZone", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.ZonesTPApi.ZonesTPGetUserZonePreferencesByZone(context.Background(), nameOrId, customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ZonesTPApiService ZonesTPGetZone", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.ZonesTPApi.ZonesTPGetZone(context.Background(), nameOrId, customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ZonesTPApiService ZonesTPGetZones", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.ZonesTPApi.ZonesTPGetZones(context.Background(), customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ZonesTPApiService ZonesTPMoveItemsIntoZone", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var customerid string
		var siteid string

		httpRes, err := apiClient.ZonesTPApi.ZonesTPMoveItemsIntoZone(context.Background(), nameOrId, customerid, siteid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ZonesTPApiService ZonesTPRemoveItemsFromZone", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerid string
		var siteid string

		httpRes, err := apiClient.ZonesTPApi.ZonesTPRemoveItemsFromZone(context.Background(), customerid, siteid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ZonesTPApiService ZonesTPUpdateUserZonePreference", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string
		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.ZonesTPApi.ZonesTPUpdateUserZonePreference(context.Background(), name, customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
