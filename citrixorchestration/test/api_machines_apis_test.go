/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

Testing MachinesAPIsDAASService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package citrixorchestration

import (
	"context"
	"testing"

	openapiclient "github.com/citrix/citrix-daas-rest-go/citrixorchestration"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_citrixorchestration_MachinesAPIsDAASService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test MachinesAPIsDAASService MachinesAddMachineTags", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nameOrId string
		var tagNameOrId string

		resp, httpRes, err := apiClient.MachinesAPIsDAAS.MachinesAddMachineTags(context.Background(), nameOrId, tagNameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachinesAPIsDAASService MachinesCheckMachineExists", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var name string

		httpRes, err := apiClient.MachinesAPIsDAAS.MachinesCheckMachineExists(context.Background(), name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachinesAPIsDAASService MachinesCreateMachineUpgradeSchedule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nameOrId string

		httpRes, err := apiClient.MachinesAPIsDAAS.MachinesCreateMachineUpgradeSchedule(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachinesAPIsDAASService MachinesDisconnectSessions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.MachinesAPIsDAAS.MachinesDisconnectSessions(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachinesAPIsDAASService MachinesDoMachineSearch", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.MachinesAPIsDAAS.MachinesDoMachineSearch(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachinesAPIsDAASService MachinesGetMachine", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.MachinesAPIsDAAS.MachinesGetMachine(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachinesAPIsDAASService MachinesGetMachineApplications", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.MachinesAPIsDAAS.MachinesGetMachineApplications(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachinesAPIsDAASService MachinesGetMachineDeliveryGroup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.MachinesAPIsDAAS.MachinesGetMachineDeliveryGroup(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachinesAPIsDAASService MachinesGetMachineDesktop", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.MachinesAPIsDAAS.MachinesGetMachineDesktop(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachinesAPIsDAASService MachinesGetMachineMachineCatalog", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.MachinesAPIsDAAS.MachinesGetMachineMachineCatalog(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachinesAPIsDAASService MachinesGetMachinePowerActionSchedules", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.MachinesAPIsDAAS.MachinesGetMachinePowerActionSchedules(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachinesAPIsDAASService MachinesGetMachineSessions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.MachinesAPIsDAAS.MachinesGetMachineSessions(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachinesAPIsDAASService MachinesGetMachineStartMenuShortcutIcon", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.MachinesAPIsDAAS.MachinesGetMachineStartMenuShortcutIcon(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachinesAPIsDAASService MachinesGetMachineStartMenuShortcuts", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.MachinesAPIsDAAS.MachinesGetMachineStartMenuShortcuts(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachinesAPIsDAASService MachinesGetMachineTags", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.MachinesAPIsDAAS.MachinesGetMachineTags(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachinesAPIsDAASService MachinesGetMachineUpgradeVersions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.MachinesAPIsDAAS.MachinesGetMachineUpgradeVersions(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachinesAPIsDAASService MachinesGetMachines", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.MachinesAPIsDAAS.MachinesGetMachines(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachinesAPIsDAASService MachinesGetMachinesAdministrators", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.MachinesAPIsDAAS.MachinesGetMachinesAdministrators(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachinesAPIsDAASService MachinesGetMachinesV2", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.MachinesAPIsDAAS.MachinesGetMachinesV2(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachinesAPIsDAASService MachinesGetTestMachineReport", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nameOrId string
		var reportId string

		resp, httpRes, err := apiClient.MachinesAPIsDAAS.MachinesGetTestMachineReport(context.Background(), nameOrId, reportId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachinesAPIsDAASService MachinesGetVDAComponentsAndFeatures", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.MachinesAPIsDAAS.MachinesGetVDAComponentsAndFeatures(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachinesAPIsDAASService MachinesGroupMachine", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.MachinesAPIsDAAS.MachinesGroupMachine(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachinesAPIsDAASService MachinesImportFileTypes", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.MachinesAPIsDAAS.MachinesImportFileTypes(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachinesAPIsDAASService MachinesLogoffMachineSessions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.MachinesAPIsDAAS.MachinesLogoffMachineSessions(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachinesAPIsDAASService MachinesRebootMachine", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.MachinesAPIsDAAS.MachinesRebootMachine(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachinesAPIsDAASService MachinesRemoveMachine", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nameOrId string

		httpRes, err := apiClient.MachinesAPIsDAAS.MachinesRemoveMachine(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachinesAPIsDAASService MachinesRemoveMachineTags", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nameOrId string
		var tagNameOrId string

		httpRes, err := apiClient.MachinesAPIsDAAS.MachinesRemoveMachineTags(context.Background(), nameOrId, tagNameOrId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachinesAPIsDAASService MachinesRemoveMachineUpgradeSchedule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nameOrId string

		httpRes, err := apiClient.MachinesAPIsDAAS.MachinesRemoveMachineUpgradeSchedule(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachinesAPIsDAASService MachinesRemovePowerActionSchedule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nameOrId string

		httpRes, err := apiClient.MachinesAPIsDAAS.MachinesRemovePowerActionSchedule(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachinesAPIsDAASService MachinesResumeMachine", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.MachinesAPIsDAAS.MachinesResumeMachine(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachinesAPIsDAASService MachinesSetMachineTags", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nameOrId string

		httpRes, err := apiClient.MachinesAPIsDAAS.MachinesSetMachineTags(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachinesAPIsDAASService MachinesShutdownMachine", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.MachinesAPIsDAAS.MachinesShutdownMachine(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachinesAPIsDAASService MachinesStartMachine", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.MachinesAPIsDAAS.MachinesStartMachine(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachinesAPIsDAASService MachinesSuspendMachine", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.MachinesAPIsDAAS.MachinesSuspendMachine(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachinesAPIsDAASService MachinesTestMachine", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.MachinesAPIsDAAS.MachinesTestMachine(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachinesAPIsDAASService MachinesUpdateMachineCatalogMachine", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nameOrId string

		httpRes, err := apiClient.MachinesAPIsDAAS.MachinesUpdateMachineCatalogMachine(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachinesAPIsDAASService MachinesUpdateMachineUpgradeSchedule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nameOrId string

		httpRes, err := apiClient.MachinesAPIsDAAS.MachinesUpdateMachineUpgradeSchedule(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachinesAPIsDAASService MachinesValidateVDAComponentsAndFeaturesSelection", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.MachinesAPIsDAAS.MachinesValidateVDAComponentsAndFeaturesSelection(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
