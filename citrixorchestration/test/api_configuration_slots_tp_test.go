/*
Citrix Virtual Apps and Desktops REST API TECHPREVIEW

Testing ConfigurationSlotsTPApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package citrixorchestration

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/citrix/citrix-daas-rest-go/citrixorchestration"
)

func Test_citrixorchestration_ConfigurationSlotsTPApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ConfigurationSlotsTPApiService ConfigurationSlotsTPAddMachineConfigurationDeliveryGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var uid int32
		var deliveryGroupNameOrId string
		var customerid string
		var siteid string

		httpRes, err := apiClient.ConfigurationSlotsTPApi.ConfigurationSlotsTPAddMachineConfigurationDeliveryGroup(context.Background(), uid, deliveryGroupNameOrId, customerid, siteid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigurationSlotsTPApiService ConfigurationSlotsTPCreateConfigurationSlot", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.ConfigurationSlotsTPApi.ConfigurationSlotsTPCreateConfigurationSlot(context.Background(), customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigurationSlotsTPApiService ConfigurationSlotsTPCreateMachineConfiguration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.ConfigurationSlotsTPApi.ConfigurationSlotsTPCreateMachineConfiguration(context.Background(), customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigurationSlotsTPApiService ConfigurationSlotsTPDeleteConfigurationSlot", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var customerid string
		var siteid string

		httpRes, err := apiClient.ConfigurationSlotsTPApi.ConfigurationSlotsTPDeleteConfigurationSlot(context.Background(), nameOrId, customerid, siteid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigurationSlotsTPApiService ConfigurationSlotsTPDeleteMachineConfiguration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var uid int32
		var customerid string
		var siteid string

		httpRes, err := apiClient.ConfigurationSlotsTPApi.ConfigurationSlotsTPDeleteMachineConfiguration(context.Background(), uid, customerid, siteid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigurationSlotsTPApiService ConfigurationSlotsTPGetConfigurationSlot", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.ConfigurationSlotsTPApi.ConfigurationSlotsTPGetConfigurationSlot(context.Background(), nameOrId, customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigurationSlotsTPApiService ConfigurationSlotsTPGetConfigurationSlotMachineConfigurations", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.ConfigurationSlotsTPApi.ConfigurationSlotsTPGetConfigurationSlotMachineConfigurations(context.Background(), nameOrId, customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigurationSlotsTPApiService ConfigurationSlotsTPGetConfigurationSlots", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.ConfigurationSlotsTPApi.ConfigurationSlotsTPGetConfigurationSlots(context.Background(), customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigurationSlotsTPApiService ConfigurationSlotsTPGetMachineConfiguration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var uid int32
		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.ConfigurationSlotsTPApi.ConfigurationSlotsTPGetMachineConfiguration(context.Background(), uid, customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigurationSlotsTPApiService ConfigurationSlotsTPGetMachineConfigurations", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.ConfigurationSlotsTPApi.ConfigurationSlotsTPGetMachineConfigurations(context.Background(), customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigurationSlotsTPApiService ConfigurationSlotsTPRemoveMachineConfigurationDeliveryGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var uid int32
		var deliveryGroupNameOrId string
		var customerid string
		var siteid string

		httpRes, err := apiClient.ConfigurationSlotsTPApi.ConfigurationSlotsTPRemoveMachineConfigurationDeliveryGroup(context.Background(), uid, deliveryGroupNameOrId, customerid, siteid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigurationSlotsTPApiService ConfigurationSlotsTPUpdateMachineConfiguration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var uid int32
		var customerid string
		var siteid string

		httpRes, err := apiClient.ConfigurationSlotsTPApi.ConfigurationSlotsTPUpdateMachineConfiguration(context.Background(), uid, customerid, siteid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
