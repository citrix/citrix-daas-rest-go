/*
Citrix Virtual Apps and Desktops REST API TECHPREVIEW

Testing MachineCatalogsTPApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package citrixorchestration

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/citrix/citrix-daas-rest-go/citrixorchestration"
)

func Test_citrixorchestration_MachineCatalogsTPApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test MachineCatalogsTPApiService MachineCatalogsTPAddMachineCatalogMachine", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.MachineCatalogsTPApi.MachineCatalogsTPAddMachineCatalogMachine(context.Background(), nameOrId, customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsTPApiService MachineCatalogsTPAddMachineCatalogMachineAccount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.MachineCatalogsTPApi.MachineCatalogsTPAddMachineCatalogMachineAccount(context.Background(), nameOrId, customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsTPApiService MachineCatalogsTPAddMachineCatalogTags", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var tagNameOrId string
		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.MachineCatalogsTPApi.MachineCatalogsTPAddMachineCatalogTags(context.Background(), nameOrId, tagNameOrId, customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsTPApiService MachineCatalogsTPCheckMachineCatalogExists", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string
		var customerid string
		var siteid string

		httpRes, err := apiClient.MachineCatalogsTPApi.MachineCatalogsTPCheckMachineCatalogExists(context.Background(), name, customerid, siteid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsTPApiService MachineCatalogsTPCheckRemotePCEnrollmentScopeExists", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var name string
		var customerid string
		var siteid string

		httpRes, err := apiClient.MachineCatalogsTPApi.MachineCatalogsTPCheckRemotePCEnrollmentScopeExists(context.Background(), nameOrId, name, customerid, siteid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsTPApiService MachineCatalogsTPCreateMachineCatalog", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.MachineCatalogsTPApi.MachineCatalogsTPCreateMachineCatalog(context.Background(), customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsTPApiService MachineCatalogsTPCreateMachineCatalogUpgradeSchedule", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var customerid string
		var siteid string

		httpRes, err := apiClient.MachineCatalogsTPApi.MachineCatalogsTPCreateMachineCatalogUpgradeSchedule(context.Background(), nameOrId, customerid, siteid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsTPApiService MachineCatalogsTPDeleteMachineCatalog", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var customerid string
		var siteid string

		httpRes, err := apiClient.MachineCatalogsTPApi.MachineCatalogsTPDeleteMachineCatalog(context.Background(), nameOrId, customerid, siteid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsTPApiService MachineCatalogsTPDoMachineCatalogSearch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.MachineCatalogsTPApi.MachineCatalogsTPDoMachineCatalogSearch(context.Background(), customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsTPApiService MachineCatalogsTPGetMachineCatalog", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.MachineCatalogsTPApi.MachineCatalogsTPGetMachineCatalog(context.Background(), nameOrId, customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsTPApiService MachineCatalogsTPGetMachineCatalogDeliveryGroupAssociations", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.MachineCatalogsTPApi.MachineCatalogsTPGetMachineCatalogDeliveryGroupAssociations(context.Background(), nameOrId, customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsTPApiService MachineCatalogsTPGetMachineCatalogLastMasterImage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.MachineCatalogsTPApi.MachineCatalogsTPGetMachineCatalogLastMasterImage(context.Background(), nameOrId, customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsTPApiService MachineCatalogsTPGetMachineCatalogMachineAccounts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.MachineCatalogsTPApi.MachineCatalogsTPGetMachineCatalogMachineAccounts(context.Background(), nameOrId, customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsTPApiService MachineCatalogsTPGetMachineCatalogMachines", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.MachineCatalogsTPApi.MachineCatalogsTPGetMachineCatalogMachines(context.Background(), nameOrId, customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsTPApiService MachineCatalogsTPGetMachineCatalogMasterImageHistory", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.MachineCatalogsTPApi.MachineCatalogsTPGetMachineCatalogMasterImageHistory(context.Background(), nameOrId, customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsTPApiService MachineCatalogsTPGetMachineCatalogStartMenuApplications", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.MachineCatalogsTPApi.MachineCatalogsTPGetMachineCatalogStartMenuApplications(context.Background(), nameOrId, customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsTPApiService MachineCatalogsTPGetMachineCatalogTags", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.MachineCatalogsTPApi.MachineCatalogsTPGetMachineCatalogTags(context.Background(), nameOrId, customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsTPApiService MachineCatalogsTPGetMachineCatalogTestReport", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.MachineCatalogsTPApi.MachineCatalogsTPGetMachineCatalogTestReport(context.Background(), nameOrId, customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsTPApiService MachineCatalogsTPGetMachineCatalogVDAComponentsAndFeatures", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.MachineCatalogsTPApi.MachineCatalogsTPGetMachineCatalogVDAComponentsAndFeatures(context.Background(), nameOrId, customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsTPApiService MachineCatalogsTPGetMachineCatalogs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.MachineCatalogsTPApi.MachineCatalogsTPGetMachineCatalogs(context.Background(), customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsTPApiService MachineCatalogsTPGetMachineCatalogsAdministrators", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.MachineCatalogsTPApi.MachineCatalogsTPGetMachineCatalogsAdministrators(context.Background(), nameOrId, customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsTPApiService MachineCatalogsTPRebootMachineCatalogMachines", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var customerid string
		var siteid string

		httpRes, err := apiClient.MachineCatalogsTPApi.MachineCatalogsTPRebootMachineCatalogMachines(context.Background(), nameOrId, customerid, siteid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsTPApiService MachineCatalogsTPRemoveMachineCatalogMachine", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var machine string
		var customerid string
		var siteid string

		httpRes, err := apiClient.MachineCatalogsTPApi.MachineCatalogsTPRemoveMachineCatalogMachine(context.Background(), nameOrId, machine, customerid, siteid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsTPApiService MachineCatalogsTPRemoveMachineCatalogMachineAccount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var machine string
		var customerid string
		var siteid string

		httpRes, err := apiClient.MachineCatalogsTPApi.MachineCatalogsTPRemoveMachineCatalogMachineAccount(context.Background(), nameOrId, machine, customerid, siteid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsTPApiService MachineCatalogsTPRemoveMachineCatalogTags", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var tagNameOrId string
		var customerid string
		var siteid string

		httpRes, err := apiClient.MachineCatalogsTPApi.MachineCatalogsTPRemoveMachineCatalogTags(context.Background(), nameOrId, tagNameOrId, customerid, siteid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsTPApiService MachineCatalogsTPRemoveMachineCatalogUpgradeSchedule", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var customerid string
		var siteid string

		httpRes, err := apiClient.MachineCatalogsTPApi.MachineCatalogsTPRemoveMachineCatalogUpgradeSchedule(context.Background(), nameOrId, customerid, siteid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsTPApiService MachineCatalogsTPRollbackMachineCatalogProvisioningScheme", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.MachineCatalogsTPApi.MachineCatalogsTPRollbackMachineCatalogProvisioningScheme(context.Background(), nameOrId, customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsTPApiService MachineCatalogsTPSetMachineCatalogTags", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var customerid string
		var siteid string

		httpRes, err := apiClient.MachineCatalogsTPApi.MachineCatalogsTPSetMachineCatalogTags(context.Background(), nameOrId, customerid, siteid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsTPApiService MachineCatalogsTPTestMachineCatalog", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.MachineCatalogsTPApi.MachineCatalogsTPTestMachineCatalog(context.Background(), nameOrId, customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsTPApiService MachineCatalogsTPTestMachineCatalogExists", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerid string
		var siteid string

		httpRes, err := apiClient.MachineCatalogsTPApi.MachineCatalogsTPTestMachineCatalogExists(context.Background(), customerid, siteid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsTPApiService MachineCatalogsTPTestRemotePCEnrollmentScopeExists", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var customerid string
		var siteid string

		httpRes, err := apiClient.MachineCatalogsTPApi.MachineCatalogsTPTestRemotePCEnrollmentScopeExists(context.Background(), nameOrId, customerid, siteid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsTPApiService MachineCatalogsTPUpdateMachineCatalog", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.MachineCatalogsTPApi.MachineCatalogsTPUpdateMachineCatalog(context.Background(), nameOrId, customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsTPApiService MachineCatalogsTPUpdateMachineCatalogExistingMachines", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var customerid string
		var siteid string

		httpRes, err := apiClient.MachineCatalogsTPApi.MachineCatalogsTPUpdateMachineCatalogExistingMachines(context.Background(), nameOrId, customerid, siteid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsTPApiService MachineCatalogsTPUpdateMachineCatalogMachineAccount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var machine string
		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.MachineCatalogsTPApi.MachineCatalogsTPUpdateMachineCatalogMachineAccount(context.Background(), nameOrId, machine, customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsTPApiService MachineCatalogsTPUpdateMachineCatalogProvisioningScheme", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.MachineCatalogsTPApi.MachineCatalogsTPUpdateMachineCatalogProvisioningScheme(context.Background(), nameOrId, customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsTPApiService MachineCatalogsTPUpdateMachineCatalogUpgradeSchedule", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var customerid string
		var siteid string

		httpRes, err := apiClient.MachineCatalogsTPApi.MachineCatalogsTPUpdateMachineCatalogUpgradeSchedule(context.Background(), nameOrId, customerid, siteid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsTPApiService MachineCatalogsTPValidateMachineCatalogVDAComponentsAndFeaturesSelection", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.MachineCatalogsTPApi.MachineCatalogsTPValidateMachineCatalogVDAComponentsAndFeaturesSelection(context.Background(), nameOrId, customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
