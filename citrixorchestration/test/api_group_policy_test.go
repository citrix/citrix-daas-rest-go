/*
Citrix Virtual Apps and Desktops REST API TECHPREVIEW

Testing GroupPolicyApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package citrixorchestration

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/citrix/citrix-daas-rest-go/citrixorchestration"
)

func Test_citrixorchestration_GroupPolicyApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test GroupPolicyApiService GroupPolicyCreateFilter", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerid string
		var siteid string
		var policyName string

		resp, httpRes, err := apiClient.GroupPolicyApi.GroupPolicyCreateFilter(context.Background(), customerid, siteid, policyName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupPolicyApiService GroupPolicyCreatePolicy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.GroupPolicyApi.GroupPolicyCreatePolicy(context.Background(), customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupPolicyApiService GroupPolicyCreateTemplate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.GroupPolicyApi.GroupPolicyCreateTemplate(context.Background(), customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupPolicyApiService GroupPolicyDeleteFilter", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerid string
		var siteid string
		var policyName string
		var filterName string

		resp, httpRes, err := apiClient.GroupPolicyApi.GroupPolicyDeleteFilter(context.Background(), customerid, siteid, policyName, filterName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupPolicyApiService GroupPolicyDeletePolicy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerid string
		var siteid string
		var policyName string

		resp, httpRes, err := apiClient.GroupPolicyApi.GroupPolicyDeletePolicy(context.Background(), customerid, siteid, policyName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupPolicyApiService GroupPolicyDeletePolicySetting", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerid string
		var siteid string
		var policyName string
		var settingName string

		resp, httpRes, err := apiClient.GroupPolicyApi.GroupPolicyDeletePolicySetting(context.Background(), customerid, siteid, policyName, settingName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupPolicyApiService GroupPolicyDeleteTemplate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerid string
		var siteid string
		var templateName string

		resp, httpRes, err := apiClient.GroupPolicyApi.GroupPolicyDeleteTemplate(context.Background(), customerid, siteid, templateName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupPolicyApiService GroupPolicyDeleteTemplateSetting", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerid string
		var siteid string
		var templateName string
		var settingName string

		resp, httpRes, err := apiClient.GroupPolicyApi.GroupPolicyDeleteTemplateSetting(context.Background(), customerid, siteid, templateName, settingName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupPolicyApiService GroupPolicyGetComparison", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.GroupPolicyApi.GroupPolicyGetComparison(context.Background(), customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupPolicyApiService GroupPolicyGetFilterDefinitions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.GroupPolicyApi.GroupPolicyGetFilterDefinitions(context.Background(), customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupPolicyApiService GroupPolicyGetModeling", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.GroupPolicyApi.GroupPolicyGetModeling(context.Background(), customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupPolicyApiService GroupPolicyGetSettingDefinitions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.GroupPolicyApi.GroupPolicyGetSettingDefinitions(context.Background(), customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupPolicyApiService GroupPolicyPrioritizePolicies", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.GroupPolicyApi.GroupPolicyPrioritizePolicies(context.Background(), customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupPolicyApiService GroupPolicyReplacePolicy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerid string
		var siteid string
		var policyName string

		resp, httpRes, err := apiClient.GroupPolicyApi.GroupPolicyReplacePolicy(context.Background(), customerid, siteid, policyName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupPolicyApiService GroupPolicyRetrieveAllData", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.GroupPolicyApi.GroupPolicyRetrieveAllData(context.Background(), customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupPolicyApiService GroupPolicyRetrieveFilter", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerid string
		var siteid string
		var policyName string
		var filterName string

		resp, httpRes, err := apiClient.GroupPolicyApi.GroupPolicyRetrieveFilter(context.Background(), customerid, siteid, policyName, filterName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupPolicyApiService GroupPolicyRetrieveFilters", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerid string
		var siteid string
		var policyName string

		resp, httpRes, err := apiClient.GroupPolicyApi.GroupPolicyRetrieveFilters(context.Background(), customerid, siteid, policyName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupPolicyApiService GroupPolicyRetrievePolicies", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.GroupPolicyApi.GroupPolicyRetrievePolicies(context.Background(), customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupPolicyApiService GroupPolicyRetrievePoliciesTemplates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.GroupPolicyApi.GroupPolicyRetrievePoliciesTemplates(context.Background(), customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupPolicyApiService GroupPolicyRetrievePolicy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerid string
		var siteid string
		var policyName string

		resp, httpRes, err := apiClient.GroupPolicyApi.GroupPolicyRetrievePolicy(context.Background(), customerid, siteid, policyName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupPolicyApiService GroupPolicyRetrievePolicySetting", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerid string
		var siteid string
		var policyName string
		var settingName string

		resp, httpRes, err := apiClient.GroupPolicyApi.GroupPolicyRetrievePolicySetting(context.Background(), customerid, siteid, policyName, settingName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupPolicyApiService GroupPolicyRetrievePolicySettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerid string
		var siteid string
		var policyName string

		resp, httpRes, err := apiClient.GroupPolicyApi.GroupPolicyRetrievePolicySettings(context.Background(), customerid, siteid, policyName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupPolicyApiService GroupPolicyRetrieveTemplate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerid string
		var siteid string
		var templateName string

		resp, httpRes, err := apiClient.GroupPolicyApi.GroupPolicyRetrieveTemplate(context.Background(), customerid, siteid, templateName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupPolicyApiService GroupPolicyRetrieveTemplateSetting", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerid string
		var siteid string
		var templateName string
		var settingName string

		resp, httpRes, err := apiClient.GroupPolicyApi.GroupPolicyRetrieveTemplateSetting(context.Background(), customerid, siteid, templateName, settingName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupPolicyApiService GroupPolicyRetrieveTemplateSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerid string
		var siteid string
		var templateName string

		resp, httpRes, err := apiClient.GroupPolicyApi.GroupPolicyRetrieveTemplateSettings(context.Background(), customerid, siteid, templateName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupPolicyApiService GroupPolicyRetrieveTemplates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.GroupPolicyApi.GroupPolicyRetrieveTemplates(context.Background(), customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupPolicyApiService GroupPolicySelectPolicySetting", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerid string
		var siteid string
		var policyName string

		resp, httpRes, err := apiClient.GroupPolicyApi.GroupPolicySelectPolicySetting(context.Background(), customerid, siteid, policyName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupPolicyApiService GroupPolicySelectTemplateSetting", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerid string
		var siteid string
		var templateName string

		resp, httpRes, err := apiClient.GroupPolicyApi.GroupPolicySelectTemplateSetting(context.Background(), customerid, siteid, templateName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupPolicyApiService GroupPolicyUpdateFilter", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerid string
		var siteid string
		var policyName string
		var filterName string

		resp, httpRes, err := apiClient.GroupPolicyApi.GroupPolicyUpdateFilter(context.Background(), customerid, siteid, policyName, filterName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupPolicyApiService GroupPolicyUpdatePolicy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerid string
		var siteid string
		var policyName string

		resp, httpRes, err := apiClient.GroupPolicyApi.GroupPolicyUpdatePolicy(context.Background(), customerid, siteid, policyName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupPolicyApiService GroupPolicyUpdatePolicySetting", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerid string
		var siteid string
		var policyName string
		var settingName string

		resp, httpRes, err := apiClient.GroupPolicyApi.GroupPolicyUpdatePolicySetting(context.Background(), customerid, siteid, policyName, settingName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupPolicyApiService GroupPolicyUpdateTemplate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerid string
		var siteid string
		var templateName string

		resp, httpRes, err := apiClient.GroupPolicyApi.GroupPolicyUpdateTemplate(context.Background(), customerid, siteid, templateName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupPolicyApiService GroupPolicyUpdateTemplateSetting", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerid string
		var siteid string
		var templateName string
		var settingName string

		resp, httpRes, err := apiClient.GroupPolicyApi.GroupPolicyUpdateTemplateSetting(context.Background(), customerid, siteid, templateName, settingName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
