/*
Citrix Virtual Apps and Desktops REST API TECHPREVIEW

Testing HypervisorsTPApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package citrixorchestration

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/citrix/citrix-daas-rest-go/citrixorchestration"
)

func Test_citrixorchestration_HypervisorsTPApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test HypervisorsTPApiService HypervisorsTPCheckHypervisorExists", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string
		var customerid string
		var siteid string

		httpRes, err := apiClient.HypervisorsTPApi.HypervisorsTPCheckHypervisorExists(context.Background(), name, customerid, siteid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsTPApiService HypervisorsTPCheckHypervisorResourcePoolExists", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var name string
		var customerid string
		var siteid string

		httpRes, err := apiClient.HypervisorsTPApi.HypervisorsTPCheckHypervisorResourcePoolExists(context.Background(), nameOrId, name, customerid, siteid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsTPApiService HypervisorsTPCreateHypervisor", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.HypervisorsTPApi.HypervisorsTPCreateHypervisor(context.Background(), customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsTPApiService HypervisorsTPCreateResourcePool", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.HypervisorsTPApi.HypervisorsTPCreateResourcePool(context.Background(), nameOrId, customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsTPApiService HypervisorsTPDeleteHypervisor", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var customerid string
		var siteid string

		httpRes, err := apiClient.HypervisorsTPApi.HypervisorsTPDeleteHypervisor(context.Background(), nameOrId, customerid, siteid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsTPApiService HypervisorsTPDeleteHypervisorResourcePool", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var poolId string
		var customerid string
		var siteid string

		httpRes, err := apiClient.HypervisorsTPApi.HypervisorsTPDeleteHypervisorResourcePool(context.Background(), nameOrId, poolId, customerid, siteid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsTPApiService HypervisorsTPDoHypervisorResourceSearch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var poolId string
		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.HypervisorsTPApi.HypervisorsTPDoHypervisorResourceSearch(context.Background(), nameOrId, poolId, customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsTPApiService HypervisorsTPGetHypervisor", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.HypervisorsTPApi.HypervisorsTPGetHypervisor(context.Background(), nameOrId, customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsTPApiService HypervisorsTPGetHypervisorAdministrators", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.HypervisorsTPApi.HypervisorsTPGetHypervisorAdministrators(context.Background(), nameOrId, customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsTPApiService HypervisorsTPGetHypervisorAllResources", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.HypervisorsTPApi.HypervisorsTPGetHypervisorAllResources(context.Background(), nameOrId, customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsTPApiService HypervisorsTPGetHypervisorAllResourcesWithoutConnection", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.HypervisorsTPApi.HypervisorsTPGetHypervisorAllResourcesWithoutConnection(context.Background(), customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsTPApiService HypervisorsTPGetHypervisorDeletePreview", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.HypervisorsTPApi.HypervisorsTPGetHypervisorDeletePreview(context.Background(), nameOrId, customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsTPApiService HypervisorsTPGetHypervisorJobs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.HypervisorsTPApi.HypervisorsTPGetHypervisorJobs(context.Background(), nameOrId, customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsTPApiService HypervisorsTPGetHypervisorMachineCatalogs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.HypervisorsTPApi.HypervisorsTPGetHypervisorMachineCatalogs(context.Background(), nameOrId, customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsTPApiService HypervisorsTPGetHypervisorResourcePool", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var poolId string
		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.HypervisorsTPApi.HypervisorsTPGetHypervisorResourcePool(context.Background(), nameOrId, poolId, customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsTPApiService HypervisorsTPGetHypervisorResourcePoolAdministrators", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var poolId string
		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.HypervisorsTPApi.HypervisorsTPGetHypervisorResourcePoolAdministrators(context.Background(), nameOrId, poolId, customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsTPApiService HypervisorsTPGetHypervisorResourcePoolDeletePreview", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var poolId string
		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.HypervisorsTPApi.HypervisorsTPGetHypervisorResourcePoolDeletePreview(context.Background(), nameOrId, poolId, customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsTPApiService HypervisorsTPGetHypervisorResourcePoolJobs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var poolId string
		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.HypervisorsTPApi.HypervisorsTPGetHypervisorResourcePoolJobs(context.Background(), nameOrId, poolId, customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsTPApiService HypervisorsTPGetHypervisorResourcePoolMachineCatalogs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var poolId string
		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.HypervisorsTPApi.HypervisorsTPGetHypervisorResourcePoolMachineCatalogs(context.Background(), nameOrId, poolId, customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsTPApiService HypervisorsTPGetHypervisorResourcePoolPatchPreview", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var poolId string
		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.HypervisorsTPApi.HypervisorsTPGetHypervisorResourcePoolPatchPreview(context.Background(), nameOrId, poolId, customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsTPApiService HypervisorsTPGetHypervisorResourcePoolResources", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var poolId string
		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.HypervisorsTPApi.HypervisorsTPGetHypervisorResourcePoolResources(context.Background(), nameOrId, poolId, customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsTPApiService HypervisorsTPGetHypervisorResourcePoolTestReport", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var poolId string
		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.HypervisorsTPApi.HypervisorsTPGetHypervisorResourcePoolTestReport(context.Background(), nameOrId, poolId, customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsTPApiService HypervisorsTPGetHypervisorResourcePools", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.HypervisorsTPApi.HypervisorsTPGetHypervisorResourcePools(context.Background(), nameOrId, customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsTPApiService HypervisorsTPGetHypervisorServerHAAddresses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.HypervisorsTPApi.HypervisorsTPGetHypervisorServerHAAddresses(context.Background(), nameOrId, customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsTPApiService HypervisorsTPGetHypervisorTestReport", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.HypervisorsTPApi.HypervisorsTPGetHypervisorTestReport(context.Background(), nameOrId, customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsTPApiService HypervisorsTPGetHypervisorWithoutConnection", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.HypervisorsTPApi.HypervisorsTPGetHypervisorWithoutConnection(context.Background(), customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsTPApiService HypervisorsTPGetHypervisors", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.HypervisorsTPApi.HypervisorsTPGetHypervisors(context.Background(), customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsTPApiService HypervisorsTPGetHypervisorsAndResourcePools", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.HypervisorsTPApi.HypervisorsTPGetHypervisorsAndResourcePools(context.Background(), customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsTPApiService HypervisorsTPGetSupportHypervisors", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.HypervisorsTPApi.HypervisorsTPGetSupportHypervisors(context.Background(), customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsTPApiService HypervisorsTPPatchHypervisor", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var customerid string
		var siteid string

		httpRes, err := apiClient.HypervisorsTPApi.HypervisorsTPPatchHypervisor(context.Background(), nameOrId, customerid, siteid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsTPApiService HypervisorsTPPatchHypervisorResourcePool", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var poolId string
		var customerid string
		var siteid string

		httpRes, err := apiClient.HypervisorsTPApi.HypervisorsTPPatchHypervisorResourcePool(context.Background(), nameOrId, poolId, customerid, siteid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsTPApiService HypervisorsTPPutBrokerHypervisorConnection", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var customerid string
		var siteid string

		httpRes, err := apiClient.HypervisorsTPApi.HypervisorsTPPutBrokerHypervisorConnection(context.Background(), nameOrId, customerid, siteid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsTPApiService HypervisorsTPResetBrokerHypervisorConnection", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var customerid string
		var siteid string

		httpRes, err := apiClient.HypervisorsTPApi.HypervisorsTPResetBrokerHypervisorConnection(context.Background(), nameOrId, customerid, siteid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsTPApiService HypervisorsTPTestHypervisor", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.HypervisorsTPApi.HypervisorsTPTestHypervisor(context.Background(), nameOrId, customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsTPApiService HypervisorsTPTestHypervisorResourcePool", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var poolId string
		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.HypervisorsTPApi.HypervisorsTPTestHypervisorResourcePool(context.Background(), nameOrId, poolId, customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsTPApiService HypervisorsTPValidateHypervisorResourcePoolResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var poolId string
		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.HypervisorsTPApi.HypervisorsTPValidateHypervisorResourcePoolResource(context.Background(), nameOrId, poolId, customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsTPApiService HypervisorsTPValidateVmPath", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.HypervisorsTPApi.HypervisorsTPValidateVmPath(context.Background(), customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
