/*
Citrix Virtual Apps and Desktops REST API TECHPREVIEW

Testing SessionsTPApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package citrixorchestration

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/citrix/citrix-daas-rest-go/citrixorchestration"
)

func Test_citrixorchestration_SessionsTPApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test SessionsTPApiService SessionsTPDisconnectSession", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.SessionsTPApi.SessionsTPDisconnectSession(context.Background(), id, customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SessionsTPApiService SessionsTPDoSessionSearch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.SessionsTPApi.SessionsTPDoSessionSearch(context.Background(), customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SessionsTPApiService SessionsTPGetSession", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.SessionsTPApi.SessionsTPGetSession(context.Background(), id, customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SessionsTPApiService SessionsTPGetSessionApplications", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.SessionsTPApi.SessionsTPGetSessionApplications(context.Background(), id, customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SessionsTPApiService SessionsTPGetSessionMachine", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.SessionsTPApi.SessionsTPGetSessionMachine(context.Background(), id, customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SessionsTPApiService SessionsTPGetSessionRecordingStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.SessionsTPApi.SessionsTPGetSessionRecordingStatus(context.Background(), customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SessionsTPApiService SessionsTPGetSessions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.SessionsTPApi.SessionsTPGetSessions(context.Background(), customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SessionsTPApiService SessionsTPHideSession", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var customerid string
		var siteid string

		httpRes, err := apiClient.SessionsTPApi.SessionsTPHideSession(context.Background(), id, customerid, siteid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SessionsTPApiService SessionsTPLogoffSession", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var customerid string
		var siteid string

		httpRes, err := apiClient.SessionsTPApi.SessionsTPLogoffSession(context.Background(), id, customerid, siteid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SessionsTPApiService SessionsTPSendSessionMessage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.SessionsTPApi.SessionsTPSendSessionMessage(context.Background(), id, customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SessionsTPApiService SessionsTPStartSessionRecording", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.SessionsTPApi.SessionsTPStartSessionRecording(context.Background(), id, customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SessionsTPApiService SessionsTPStopSessionRecording", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.SessionsTPApi.SessionsTPStopSessionRecording(context.Background(), id, customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SessionsTPApiService SessionsTPUnhideSession", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var customerid string
		var siteid string

		httpRes, err := apiClient.SessionsTPApi.SessionsTPUnhideSession(context.Background(), id, customerid, siteid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
