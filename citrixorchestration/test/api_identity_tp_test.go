/*
Citrix Virtual Apps and Desktops REST API TECHPREVIEW

Testing IdentityTPApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package citrixorchestration

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/citrix/citrix-daas-rest-go/citrixorchestration"
)

func Test_citrixorchestration_IdentityTPApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test IdentityTPApiService IdentityTPAddAzureAdSecurityGroupMember", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var azureAdTenantId string
		var groupId string
		var refGroupId string
		var customerid string
		var siteid string

		httpRes, err := apiClient.IdentityTPApi.IdentityTPAddAzureAdSecurityGroupMember(context.Background(), azureAdTenantId, groupId, refGroupId, customerid, siteid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityTPApiService IdentityTPCreateMachine", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.IdentityTPApi.IdentityTPCreateMachine(context.Background(), customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityTPApiService IdentityTPDeleteMachine", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var machine string
		var customerid string
		var siteid string

		httpRes, err := apiClient.IdentityTPApi.IdentityTPDeleteMachine(context.Background(), machine, customerid, siteid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityTPApiService IdentityTPGetAzureADSecurityGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var azureAdTenantId string
		var groupId string
		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.IdentityTPApi.IdentityTPGetAzureADSecurityGroups(context.Background(), azureAdTenantId, groupId, customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityTPApiService IdentityTPGetAzureAdSecurityGroupMember", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var azureAdTenantId string
		var groupId string
		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.IdentityTPApi.IdentityTPGetAzureAdSecurityGroupMember(context.Background(), azureAdTenantId, groupId, customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityTPApiService IdentityTPGetContainer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var container string
		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.IdentityTPApi.IdentityTPGetContainer(context.Background(), container, customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityTPApiService IdentityTPGetContainers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.IdentityTPApi.IdentityTPGetContainers(context.Background(), customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityTPApiService IdentityTPGetDirectories", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.IdentityTPApi.IdentityTPGetDirectories(context.Background(), customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityTPApiService IdentityTPGetDomain", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domain string
		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.IdentityTPApi.IdentityTPGetDomain(context.Background(), domain, customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityTPApiService IdentityTPGetDomainAzureADCustomDomain", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domain string
		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.IdentityTPApi.IdentityTPGetDomainAzureADCustomDomain(context.Background(), domain, customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityTPApiService IdentityTPGetDomains", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.IdentityTPApi.IdentityTPGetDomains(context.Background(), customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityTPApiService IdentityTPGetForest", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var forest string
		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.IdentityTPApi.IdentityTPGetForest(context.Background(), forest, customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityTPApiService IdentityTPGetForests", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.IdentityTPApi.IdentityTPGetForests(context.Background(), customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityTPApiService IdentityTPGetMachine", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var machine string
		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.IdentityTPApi.IdentityTPGetMachine(context.Background(), machine, customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityTPApiService IdentityTPGetMachines", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.IdentityTPApi.IdentityTPGetMachines(context.Background(), customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityTPApiService IdentityTPGetSite", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var site string
		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.IdentityTPApi.IdentityTPGetSite(context.Background(), site, customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityTPApiService IdentityTPGetSites", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.IdentityTPApi.IdentityTPGetSites(context.Background(), customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityTPApiService IdentityTPGetUser", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userOrGroup string
		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.IdentityTPApi.IdentityTPGetUser(context.Background(), userOrGroup, customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityTPApiService IdentityTPGetUsers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.IdentityTPApi.IdentityTPGetUsers(context.Background(), customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityTPApiService IdentityTPQueryAzureAdSecurityGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var azureAdTenantId string
		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.IdentityTPApi.IdentityTPQueryAzureAdSecurityGroups(context.Background(), azureAdTenantId, customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityTPApiService IdentityTPUpdateMachine", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var machine string
		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.IdentityTPApi.IdentityTPUpdateMachine(context.Background(), machine, customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityTPApiService IdentityTPUpdateUser", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var user string
		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.IdentityTPApi.IdentityTPUpdateUser(context.Background(), user, customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityTPApiService IdentityTPValidateUser", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.IdentityTPApi.IdentityTPValidateUser(context.Background(), customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
