/*
Citrix Virtual Apps and Desktops REST API TECHPREVIEW

Testing GpoApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package citrixorchestration

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/citrix/citrix-daas-rest-go/citrixorchestration"
)

func Test_citrixorchestration_GpoApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test GpoApiService GpoComparePolicies", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerId string
		var siteId string

		resp, httpRes, err := apiClient.GpoApi.GpoComparePolicies(context.Background(), customerId, siteId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GpoApiService GpoCreateGpoFilter", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerId string
		var siteId string

		resp, httpRes, err := apiClient.GpoApi.GpoCreateGpoFilter(context.Background(), customerId, siteId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GpoApiService GpoCreateGpoPolicy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerId string
		var siteId string

		resp, httpRes, err := apiClient.GpoApi.GpoCreateGpoPolicy(context.Background(), customerId, siteId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GpoApiService GpoCreateGpoPolicySet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerId string
		var siteId string

		resp, httpRes, err := apiClient.GpoApi.GpoCreateGpoPolicySet(context.Background(), customerId, siteId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GpoApiService GpoCreateGpoSetting", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerId string
		var siteId string

		resp, httpRes, err := apiClient.GpoApi.GpoCreateGpoSetting(context.Background(), customerId, siteId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GpoApiService GpoDeleteGpoFilter", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerId string
		var siteId string
		var filterGuid string

		httpRes, err := apiClient.GpoApi.GpoDeleteGpoFilter(context.Background(), customerId, siteId, filterGuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GpoApiService GpoDeleteGpoPolicy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerId string
		var siteId string
		var policyGuid string

		httpRes, err := apiClient.GpoApi.GpoDeleteGpoPolicy(context.Background(), customerId, siteId, policyGuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GpoApiService GpoDeleteGpoPolicySet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerId string
		var siteId string
		var policySetGuid string

		httpRes, err := apiClient.GpoApi.GpoDeleteGpoPolicySet(context.Background(), customerId, siteId, policySetGuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GpoApiService GpoDeleteGpoSetting", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerId string
		var siteId string
		var settingGuid string

		httpRes, err := apiClient.GpoApi.GpoDeleteGpoSetting(context.Background(), customerId, siteId, settingGuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GpoApiService GpoGetFilterDefinitions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerId string
		var siteId string

		resp, httpRes, err := apiClient.GpoApi.GpoGetFilterDefinitions(context.Background(), customerId, siteId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GpoApiService GpoGetSettingDefinitions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerId string
		var siteId string

		resp, httpRes, err := apiClient.GpoApi.GpoGetSettingDefinitions(context.Background(), customerId, siteId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GpoApiService GpoGetSettingFullDetail", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerId string
		var siteId string

		resp, httpRes, err := apiClient.GpoApi.GpoGetSettingFullDetail(context.Background(), customerId, siteId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GpoApiService GpoRankGpoPolicies", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerId string
		var siteId string

		resp, httpRes, err := apiClient.GpoApi.GpoRankGpoPolicies(context.Background(), customerId, siteId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GpoApiService GpoReadGpoFilter", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerId string
		var siteId string
		var filterGuid string

		resp, httpRes, err := apiClient.GpoApi.GpoReadGpoFilter(context.Background(), customerId, siteId, filterGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GpoApiService GpoReadGpoFilters", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerId string
		var siteId string

		resp, httpRes, err := apiClient.GpoApi.GpoReadGpoFilters(context.Background(), customerId, siteId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GpoApiService GpoReadGpoPolicies", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerId string
		var siteId string

		resp, httpRes, err := apiClient.GpoApi.GpoReadGpoPolicies(context.Background(), customerId, siteId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GpoApiService GpoReadGpoPolicy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerId string
		var siteId string
		var policyGuid string

		resp, httpRes, err := apiClient.GpoApi.GpoReadGpoPolicy(context.Background(), customerId, siteId, policyGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GpoApiService GpoReadGpoPolicySet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerId string
		var siteId string
		var policySetGuid string

		resp, httpRes, err := apiClient.GpoApi.GpoReadGpoPolicySet(context.Background(), customerId, siteId, policySetGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GpoApiService GpoReadGpoPolicySets", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerId string
		var siteId string

		resp, httpRes, err := apiClient.GpoApi.GpoReadGpoPolicySets(context.Background(), customerId, siteId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GpoApiService GpoReadGpoSetting", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerId string
		var siteId string
		var settingGuid string

		resp, httpRes, err := apiClient.GpoApi.GpoReadGpoSetting(context.Background(), customerId, siteId, settingGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GpoApiService GpoReadGpoSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerId string
		var siteId string

		resp, httpRes, err := apiClient.GpoApi.GpoReadGpoSettings(context.Background(), customerId, siteId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GpoApiService GpoUpdateGpoFilter", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerId string
		var siteId string
		var filterGuid string

		httpRes, err := apiClient.GpoApi.GpoUpdateGpoFilter(context.Background(), customerId, siteId, filterGuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GpoApiService GpoUpdateGpoPolicy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerId string
		var siteId string
		var policyGuid string

		httpRes, err := apiClient.GpoApi.GpoUpdateGpoPolicy(context.Background(), customerId, siteId, policyGuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GpoApiService GpoUpdateGpoPolicySet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerId string
		var siteId string
		var policySetGuid string

		httpRes, err := apiClient.GpoApi.GpoUpdateGpoPolicySet(context.Background(), customerId, siteId, policySetGuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GpoApiService GpoUpdateGpoSetting", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerId string
		var siteId string
		var settingGuid string

		httpRes, err := apiClient.GpoApi.GpoUpdateGpoSetting(context.Background(), customerId, siteId, settingGuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GpoApiService GpoUpdatePolicySetBlob", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerId string
		var siteId string
		var policySetGuid string

		httpRes, err := apiClient.GpoApi.GpoUpdatePolicySetBlob(context.Background(), customerId, siteId, policySetGuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
