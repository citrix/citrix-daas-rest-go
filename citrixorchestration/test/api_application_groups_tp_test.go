/*
Citrix Virtual Apps and Desktops REST API TECHPREVIEW

Testing ApplicationGroupsTPApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package citrixorchestration

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/citrix/citrix-daas-rest-go/citrixorchestration"
)

func Test_citrixorchestration_ApplicationGroupsTPApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ApplicationGroupsTPApiService ApplicationGroupsTPAddApplicationGroupTag", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var tagNameOrId string
		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.ApplicationGroupsTPApi.ApplicationGroupsTPAddApplicationGroupTag(context.Background(), nameOrId, tagNameOrId, customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationGroupsTPApiService ApplicationGroupsTPAddApplications", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var customerid string
		var siteid string

		httpRes, err := apiClient.ApplicationGroupsTPApi.ApplicationGroupsTPAddApplications(context.Background(), nameOrId, customerid, siteid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationGroupsTPApiService ApplicationGroupsTPCheckApplicationGroupExists", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string
		var customerid string
		var siteid string

		httpRes, err := apiClient.ApplicationGroupsTPApi.ApplicationGroupsTPCheckApplicationGroupExists(context.Background(), name, customerid, siteid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationGroupsTPApiService ApplicationGroupsTPCreateApplicationGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.ApplicationGroupsTPApi.ApplicationGroupsTPCreateApplicationGroup(context.Background(), customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationGroupsTPApiService ApplicationGroupsTPDeleteApplicationGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var customerid string
		var siteid string

		httpRes, err := apiClient.ApplicationGroupsTPApi.ApplicationGroupsTPDeleteApplicationGroup(context.Background(), nameOrId, customerid, siteid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationGroupsTPApiService ApplicationGroupsTPGetApplicationGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.ApplicationGroupsTPApi.ApplicationGroupsTPGetApplicationGroup(context.Background(), nameOrId, customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationGroupsTPApiService ApplicationGroupsTPGetApplicationGroupApplications", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.ApplicationGroupsTPApi.ApplicationGroupsTPGetApplicationGroupApplications(context.Background(), nameOrId, customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationGroupsTPApiService ApplicationGroupsTPGetApplicationGroupDeliveryGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.ApplicationGroupsTPApi.ApplicationGroupsTPGetApplicationGroupDeliveryGroups(context.Background(), nameOrId, customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationGroupsTPApiService ApplicationGroupsTPGetApplicationGroupTags", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.ApplicationGroupsTPApi.ApplicationGroupsTPGetApplicationGroupTags(context.Background(), nameOrId, customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationGroupsTPApiService ApplicationGroupsTPGetApplicationGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.ApplicationGroupsTPApi.ApplicationGroupsTPGetApplicationGroups(context.Background(), customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationGroupsTPApiService ApplicationGroupsTPRemoveApplication", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var appNameOrId string
		var customerid string
		var siteid string

		httpRes, err := apiClient.ApplicationGroupsTPApi.ApplicationGroupsTPRemoveApplication(context.Background(), nameOrId, appNameOrId, customerid, siteid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationGroupsTPApiService ApplicationGroupsTPRemoveApplicationGroupTag", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var tagNameOrId string
		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.ApplicationGroupsTPApi.ApplicationGroupsTPRemoveApplicationGroupTag(context.Background(), nameOrId, tagNameOrId, customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationGroupsTPApiService ApplicationGroupsTPSetApplicationGroupTags", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.ApplicationGroupsTPApi.ApplicationGroupsTPSetApplicationGroupTags(context.Background(), nameOrId, customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationGroupsTPApiService ApplicationGroupsTPTestApplicationGroupExists", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerid string
		var siteid string

		httpRes, err := apiClient.ApplicationGroupsTPApi.ApplicationGroupsTPTestApplicationGroupExists(context.Background(), customerid, siteid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationGroupsTPApiService ApplicationGroupsTPUpdateApplicationGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var customerid string
		var siteid string

		httpRes, err := apiClient.ApplicationGroupsTPApi.ApplicationGroupsTPUpdateApplicationGroup(context.Background(), nameOrId, customerid, siteid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
