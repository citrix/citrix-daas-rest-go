/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

Testing ProvisionedVirtualMachineAPIsDAASService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package citrixorchestration

import (
	"context"
	"testing"

	openapiclient "github.com/citrix/citrix-daas-rest-go/citrixorchestration"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_citrixorchestration_ProvisionedVirtualMachineAPIsDAASService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ProvisionedVirtualMachineAPIsDAASService ProvisionedVirtualMachineApplyProvisionedVirtualMachineConfigurationUpdate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var vmSid string

		httpRes, err := apiClient.ProvisionedVirtualMachineAPIsDAAS.ProvisionedVirtualMachineApplyProvisionedVirtualMachineConfigurationUpdate(context.Background(), vmSid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvisionedVirtualMachineAPIsDAASService ProvisionedVirtualMachineGetMaintenanceCycleVMOperationJobs", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var vmSid string

		resp, httpRes, err := apiClient.ProvisionedVirtualMachineAPIsDAAS.ProvisionedVirtualMachineGetMaintenanceCycleVMOperationJobs(context.Background(), vmSid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvisionedVirtualMachineAPIsDAASService ProvisionedVirtualMachineResetProvisionedVirtualMachineOSDisk", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var vmSid string

		httpRes, err := apiClient.ProvisionedVirtualMachineAPIsDAAS.ProvisionedVirtualMachineResetProvisionedVirtualMachineOSDisk(context.Background(), vmSid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProvisionedVirtualMachineAPIsDAASService ProvisionedVirtualMachineUpdateProvisionedVirtualMachine", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var vmSid string

		httpRes, err := apiClient.ProvisionedVirtualMachineAPIsDAAS.ProvisionedVirtualMachineUpdateProvisionedVirtualMachine(context.Background(), vmSid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
