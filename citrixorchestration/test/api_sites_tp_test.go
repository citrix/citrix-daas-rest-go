/*
Citrix Virtual Apps and Desktops REST API TECHPREVIEW

Testing SitesTPApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package citrixorchestration

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/citrix/citrix-daas-rest-go/citrixorchestration"
)

func Test_citrixorchestration_SitesTPApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test SitesTPApiService SitesTPGetCeipParticipation", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var customerid string

		resp, httpRes, err := apiClient.SitesTPApi.SitesTPGetCeipParticipation(context.Background(), nameOrId, customerid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesTPApiService SitesTPGetDnsResolution", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var customerid string

		resp, httpRes, err := apiClient.SitesTPApi.SitesTPGetDnsResolution(context.Background(), nameOrId, customerid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesTPApiService SitesTPGetLocalAppAccessConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var customerid string

		resp, httpRes, err := apiClient.SitesTPApi.SitesTPGetLocalAppAccessConfig(context.Background(), nameOrId, customerid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesTPApiService SitesTPGetMultipleRemotePCAssignments", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var customerid string

		resp, httpRes, err := apiClient.SitesTPApi.SitesTPGetMultipleRemotePCAssignments(context.Background(), nameOrId, customerid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesTPApiService SitesTPGetNewSiteSecurityKey", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var customerid string

		resp, httpRes, err := apiClient.SitesTPApi.SitesTPGetNewSiteSecurityKey(context.Background(), nameOrId, customerid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesTPApiService SitesTPGetSessionsTrend", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerid string
		var nameOrId string

		resp, httpRes, err := apiClient.SitesTPApi.SitesTPGetSessionsTrend(context.Background(), customerid, nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesTPApiService SitesTPGetSite", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var customerid string

		resp, httpRes, err := apiClient.SitesTPApi.SitesTPGetSite(context.Background(), nameOrId, customerid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesTPApiService SitesTPGetSiteLicense", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var customerid string

		resp, httpRes, err := apiClient.SitesTPApi.SitesTPGetSiteLicense(context.Background(), nameOrId, customerid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesTPApiService SitesTPGetSiteLoadBalancingOption", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var customerid string

		resp, httpRes, err := apiClient.SitesTPApi.SitesTPGetSiteLoadBalancingOption(context.Background(), nameOrId, customerid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesTPApiService SitesTPGetSiteSecurityKeyConfiguration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var customerid string

		resp, httpRes, err := apiClient.SitesTPApi.SitesTPGetSiteSecurityKeyConfiguration(context.Background(), nameOrId, customerid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesTPApiService SitesTPGetSiteSecurityKeyManagementConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var customerid string

		resp, httpRes, err := apiClient.SitesTPApi.SitesTPGetSiteSecurityKeyManagementConfig(context.Background(), nameOrId, customerid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesTPApiService SitesTPGetSiteSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var customerid string

		resp, httpRes, err := apiClient.SitesTPApi.SitesTPGetSiteSettings(context.Background(), nameOrId, customerid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesTPApiService SitesTPGetSiteStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var customerid string

		resp, httpRes, err := apiClient.SitesTPApi.SitesTPGetSiteStatus(context.Background(), nameOrId, customerid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesTPApiService SitesTPGetSiteTestReport", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var customerid string

		resp, httpRes, err := apiClient.SitesTPApi.SitesTPGetSiteTestReport(context.Background(), nameOrId, customerid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesTPApiService SitesTPGetSiteValidLicenses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var customerid string

		resp, httpRes, err := apiClient.SitesTPApi.SitesTPGetSiteValidLicenses(context.Background(), nameOrId, customerid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesTPApiService SitesTPGetSites", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerid string

		resp, httpRes, err := apiClient.SitesTPApi.SitesTPGetSites(context.Background(), customerid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesTPApiService SitesTPGetUpgradePackageVersions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var customerid string

		resp, httpRes, err := apiClient.SitesTPApi.SitesTPGetUpgradePackageVersions(context.Background(), nameOrId, customerid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesTPApiService SitesTPPatchCeipParticipation", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var customerid string

		httpRes, err := apiClient.SitesTPApi.SitesTPPatchCeipParticipation(context.Background(), nameOrId, customerid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesTPApiService SitesTPPatchDnsResolution", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var customerid string

		httpRes, err := apiClient.SitesTPApi.SitesTPPatchDnsResolution(context.Background(), nameOrId, customerid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesTPApiService SitesTPPatchMultipleRemotePCAssignments", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var customerid string

		httpRes, err := apiClient.SitesTPApi.SitesTPPatchMultipleRemotePCAssignments(context.Background(), nameOrId, customerid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesTPApiService SitesTPPatchSiteLicense", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var customerid string

		httpRes, err := apiClient.SitesTPApi.SitesTPPatchSiteLicense(context.Background(), nameOrId, customerid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesTPApiService SitesTPPatchSiteLoadBalancingOption", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var customerid string

		httpRes, err := apiClient.SitesTPApi.SitesTPPatchSiteLoadBalancingOption(context.Background(), nameOrId, customerid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesTPApiService SitesTPPatchSiteSecurityKeyConfiguration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var customerid string

		httpRes, err := apiClient.SitesTPApi.SitesTPPatchSiteSecurityKeyConfiguration(context.Background(), nameOrId, customerid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesTPApiService SitesTPPatchSiteSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var customerid string

		httpRes, err := apiClient.SitesTPApi.SitesTPPatchSiteSettings(context.Background(), nameOrId, customerid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesTPApiService SitesTPTestSite", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var customerid string

		resp, httpRes, err := apiClient.SitesTPApi.SitesTPTestSite(context.Background(), nameOrId, customerid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
