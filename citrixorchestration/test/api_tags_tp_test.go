/*
Citrix Virtual Apps and Desktops REST API TECHPREVIEW

Testing TagsTPApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package citrixorchestration

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/citrix/citrix-daas-rest-go/citrixorchestration"
)

func Test_citrixorchestration_TagsTPApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test TagsTPApiService TagsTPCheckTagExists", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string
		var customerid string
		var siteid string

		httpRes, err := apiClient.TagsTPApi.TagsTPCheckTagExists(context.Background(), name, customerid, siteid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TagsTPApiService TagsTPCreateTag", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.TagsTPApi.TagsTPCreateTag(context.Background(), customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TagsTPApiService TagsTPDeleteTag", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var customerid string
		var siteid string

		httpRes, err := apiClient.TagsTPApi.TagsTPDeleteTag(context.Background(), nameOrId, customerid, siteid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TagsTPApiService TagsTPGetTag", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.TagsTPApi.TagsTPGetTag(context.Background(), nameOrId, customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TagsTPApiService TagsTPGetTagApplicationGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.TagsTPApi.TagsTPGetTagApplicationGroups(context.Background(), nameOrId, customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TagsTPApiService TagsTPGetTagApplications", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.TagsTPApi.TagsTPGetTagApplications(context.Background(), nameOrId, customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TagsTPApiService TagsTPGetTagDeliveryGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.TagsTPApi.TagsTPGetTagDeliveryGroups(context.Background(), nameOrId, customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TagsTPApiService TagsTPGetTagMachineCatalogs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.TagsTPApi.TagsTPGetTagMachineCatalogs(context.Background(), nameOrId, customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TagsTPApiService TagsTPGetTagMachines", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.TagsTPApi.TagsTPGetTagMachines(context.Background(), nameOrId, customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TagsTPApiService TagsTPGetTags", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.TagsTPApi.TagsTPGetTags(context.Background(), customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TagsTPApiService TagsTPPatchTag", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.TagsTPApi.TagsTPPatchTag(context.Background(), nameOrId, customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TagsTPApiService TagsTPSetTagApplications", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.TagsTPApi.TagsTPSetTagApplications(context.Background(), nameOrId, customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TagsTPApiService TagsTPSetTagDeliveryGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.TagsTPApi.TagsTPSetTagDeliveryGroups(context.Background(), nameOrId, customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
