/*
Citrix Virtual Apps and Desktops REST API TECHPREVIEW

Testing ImagesTPApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package citrixorchestration

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/citrix/citrix-daas-rest-go/citrixorchestration"
)

func Test_citrixorchestration_ImagesTPApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ImagesTPApiService ImagesTPAddImageVersion", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.ImagesTPApi.ImagesTPAddImageVersion(context.Background(), nameOrId, customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImagesTPApiService ImagesTPCheckImageDefinitionExists", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string
		var customerid string
		var siteid string

		httpRes, err := apiClient.ImagesTPApi.ImagesTPCheckImageDefinitionExists(context.Background(), name, customerid, siteid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImagesTPApiService ImagesTPGetCatalogsByImageVersion", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var versionId string
		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.ImagesTPApi.ImagesTPGetCatalogsByImageVersion(context.Background(), versionId, customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImagesTPApiService ImagesTPGetImageDefinition", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.ImagesTPApi.ImagesTPGetImageDefinition(context.Background(), nameOrId, customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImagesTPApiService ImagesTPGetImageDefinitionImageVersion", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var versionNameOrId string
		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.ImagesTPApi.ImagesTPGetImageDefinitionImageVersion(context.Background(), nameOrId, versionNameOrId, customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImagesTPApiService ImagesTPGetImageDefinitions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.ImagesTPApi.ImagesTPGetImageDefinitions(context.Background(), customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImagesTPApiService ImagesTPGetImageVersion", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.ImagesTPApi.ImagesTPGetImageVersion(context.Background(), id, customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImagesTPApiService ImagesTPGetImageVersionsByDefinition", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.ImagesTPApi.ImagesTPGetImageVersionsByDefinition(context.Background(), nameOrId, customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImagesTPApiService ImagesTPNewImageDefinitionAndVersion", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.ImagesTPApi.ImagesTPNewImageDefinitionAndVersion(context.Background(), customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImagesTPApiService ImagesTPPatchImageDefinition", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.ImagesTPApi.ImagesTPPatchImageDefinition(context.Background(), nameOrId, customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImagesTPApiService ImagesTPPatchImageDefinitionImageVersion", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var versionNameOrId string
		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.ImagesTPApi.ImagesTPPatchImageDefinitionImageVersion(context.Background(), nameOrId, versionNameOrId, customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImagesTPApiService ImagesTPPatchImageVersion", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.ImagesTPApi.ImagesTPPatchImageVersion(context.Background(), id, customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImagesTPApiService ImagesTPRemoveImageDefinition", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var customerid string
		var siteid string

		httpRes, err := apiClient.ImagesTPApi.ImagesTPRemoveImageDefinition(context.Background(), nameOrId, customerid, siteid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImagesTPApiService ImagesTPRemoveImageDefinitionImageVersion", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var versionNameOrId string
		var customerid string
		var siteid string

		httpRes, err := apiClient.ImagesTPApi.ImagesTPRemoveImageDefinitionImageVersion(context.Background(), nameOrId, versionNameOrId, customerid, siteid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImagesTPApiService ImagesTPRemoveImageVersion", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var customerid string
		var siteid string

		httpRes, err := apiClient.ImagesTPApi.ImagesTPRemoveImageVersion(context.Background(), id, customerid, siteid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
