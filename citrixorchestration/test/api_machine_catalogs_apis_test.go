/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

Testing MachineCatalogsAPIs Service

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package citrixorchestration

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/citrix/citrix-daas-rest-go/citrixorchestration"
)

func Test_citrixorchestration_MachineCatalogsAPIs Service(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test MachineCatalogsAPIs Service MachineCatalogsAddMachineCatalogMachine", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.MachineCatalogsAPIs .MachineCatalogsAddMachineCatalogMachine(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsAPIs Service MachineCatalogsAddMachineCatalogMachineAccount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.MachineCatalogsAPIs .MachineCatalogsAddMachineCatalogMachineAccount(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsAPIs Service MachineCatalogsAddMachineCatalogTags", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var tagNameOrId string

		resp, httpRes, err := apiClient.MachineCatalogsAPIs .MachineCatalogsAddMachineCatalogTags(context.Background(), nameOrId, tagNameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsAPIs Service MachineCatalogsCheckMachineCatalogExists", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		httpRes, err := apiClient.MachineCatalogsAPIs .MachineCatalogsCheckMachineCatalogExists(context.Background(), name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsAPIs Service MachineCatalogsCheckRemotePCEnrollmentScopeExists", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var name string

		httpRes, err := apiClient.MachineCatalogsAPIs .MachineCatalogsCheckRemotePCEnrollmentScopeExists(context.Background(), nameOrId, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsAPIs Service MachineCatalogsCreateMachineCatalog", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MachineCatalogsAPIs .MachineCatalogsCreateMachineCatalog(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsAPIs Service MachineCatalogsCreateMachineCatalogUpgradeSchedule", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string

		httpRes, err := apiClient.MachineCatalogsAPIs .MachineCatalogsCreateMachineCatalogUpgradeSchedule(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsAPIs Service MachineCatalogsDeleteMachineCatalog", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string

		httpRes, err := apiClient.MachineCatalogsAPIs .MachineCatalogsDeleteMachineCatalog(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsAPIs Service MachineCatalogsDoMachineCatalogSearch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MachineCatalogsAPIs .MachineCatalogsDoMachineCatalogSearch(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsAPIs Service MachineCatalogsGetMachineCatalog", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.MachineCatalogsAPIs .MachineCatalogsGetMachineCatalog(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsAPIs Service MachineCatalogsGetMachineCatalogDeliveryGroupAssociations", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.MachineCatalogsAPIs .MachineCatalogsGetMachineCatalogDeliveryGroupAssociations(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsAPIs Service MachineCatalogsGetMachineCatalogLastMasterImage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.MachineCatalogsAPIs .MachineCatalogsGetMachineCatalogLastMasterImage(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsAPIs Service MachineCatalogsGetMachineCatalogMachineAccounts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.MachineCatalogsAPIs .MachineCatalogsGetMachineCatalogMachineAccounts(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsAPIs Service MachineCatalogsGetMachineCatalogMachines", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.MachineCatalogsAPIs .MachineCatalogsGetMachineCatalogMachines(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsAPIs Service MachineCatalogsGetMachineCatalogMasterImageHistory", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.MachineCatalogsAPIs .MachineCatalogsGetMachineCatalogMasterImageHistory(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsAPIs Service MachineCatalogsGetMachineCatalogStartMenuApplications", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.MachineCatalogsAPIs .MachineCatalogsGetMachineCatalogStartMenuApplications(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsAPIs Service MachineCatalogsGetMachineCatalogTags", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.MachineCatalogsAPIs .MachineCatalogsGetMachineCatalogTags(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsAPIs Service MachineCatalogsGetMachineCatalogTestReport", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.MachineCatalogsAPIs .MachineCatalogsGetMachineCatalogTestReport(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsAPIs Service MachineCatalogsGetMachineCatalogVDAComponentsAndFeatures", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.MachineCatalogsAPIs .MachineCatalogsGetMachineCatalogVDAComponentsAndFeatures(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsAPIs Service MachineCatalogsGetMachineCatalogs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MachineCatalogsAPIs .MachineCatalogsGetMachineCatalogs(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsAPIs Service MachineCatalogsGetMachineCatalogsAdministrators", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.MachineCatalogsAPIs .MachineCatalogsGetMachineCatalogsAdministrators(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsAPIs Service MachineCatalogsRebootMachineCatalogMachines", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string

		httpRes, err := apiClient.MachineCatalogsAPIs .MachineCatalogsRebootMachineCatalogMachines(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsAPIs Service MachineCatalogsRemoveMachineCatalogMachine", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var machine string

		httpRes, err := apiClient.MachineCatalogsAPIs .MachineCatalogsRemoveMachineCatalogMachine(context.Background(), nameOrId, machine).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsAPIs Service MachineCatalogsRemoveMachineCatalogMachineAccount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var machine string

		httpRes, err := apiClient.MachineCatalogsAPIs .MachineCatalogsRemoveMachineCatalogMachineAccount(context.Background(), nameOrId, machine).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsAPIs Service MachineCatalogsRemoveMachineCatalogTags", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var tagNameOrId string

		httpRes, err := apiClient.MachineCatalogsAPIs .MachineCatalogsRemoveMachineCatalogTags(context.Background(), nameOrId, tagNameOrId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsAPIs Service MachineCatalogsRemoveMachineCatalogUpgradeSchedule", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string

		httpRes, err := apiClient.MachineCatalogsAPIs .MachineCatalogsRemoveMachineCatalogUpgradeSchedule(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsAPIs Service MachineCatalogsRollbackMachineCatalogProvisioningScheme", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.MachineCatalogsAPIs .MachineCatalogsRollbackMachineCatalogProvisioningScheme(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsAPIs Service MachineCatalogsSetMachineCatalogTags", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string

		httpRes, err := apiClient.MachineCatalogsAPIs .MachineCatalogsSetMachineCatalogTags(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsAPIs Service MachineCatalogsTestMachineCatalog", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.MachineCatalogsAPIs .MachineCatalogsTestMachineCatalog(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsAPIs Service MachineCatalogsTestMachineCatalogExists", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.MachineCatalogsAPIs .MachineCatalogsTestMachineCatalogExists(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsAPIs Service MachineCatalogsTestRemotePCEnrollmentScopeExists", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string

		httpRes, err := apiClient.MachineCatalogsAPIs .MachineCatalogsTestRemotePCEnrollmentScopeExists(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsAPIs Service MachineCatalogsUpdateMachineCatalog", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.MachineCatalogsAPIs .MachineCatalogsUpdateMachineCatalog(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsAPIs Service MachineCatalogsUpdateMachineCatalogMachineAccount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var machine string

		resp, httpRes, err := apiClient.MachineCatalogsAPIs .MachineCatalogsUpdateMachineCatalogMachineAccount(context.Background(), nameOrId, machine).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsAPIs Service MachineCatalogsUpdateMachineCatalogProvisioningScheme", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.MachineCatalogsAPIs .MachineCatalogsUpdateMachineCatalogProvisioningScheme(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsAPIs Service MachineCatalogsUpdateMachineCatalogUpgradeSchedule", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string

		httpRes, err := apiClient.MachineCatalogsAPIs .MachineCatalogsUpdateMachineCatalogUpgradeSchedule(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsAPIs Service MachineCatalogsValidateMachineCatalogVDAComponentsAndFeaturesSelection", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.MachineCatalogsAPIs .MachineCatalogsValidateMachineCatalogVDAComponentsAndFeaturesSelection(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
