/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

Testing MachineCatalogsAPIsDAASService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package citrixorchestration

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/citrix/citrix-daas-rest-go/citrixorchestration"
)

func Test_citrixorchestration_MachineCatalogsAPIsDAASService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test MachineCatalogsAPIsDAASService MachineCatalogsAddMachineCatalogMachine", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.MachineCatalogsAPIsDAAS.MachineCatalogsAddMachineCatalogMachine(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsAPIsDAASService MachineCatalogsAddMachineCatalogMachineAccount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.MachineCatalogsAPIsDAAS.MachineCatalogsAddMachineCatalogMachineAccount(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsAPIsDAASService MachineCatalogsAddMachineCatalogTags", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var tagNameOrId string

		resp, httpRes, err := apiClient.MachineCatalogsAPIsDAAS.MachineCatalogsAddMachineCatalogTags(context.Background(), nameOrId, tagNameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsAPIsDAASService MachineCatalogsCheckMachineCatalogExists", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		httpRes, err := apiClient.MachineCatalogsAPIsDAAS.MachineCatalogsCheckMachineCatalogExists(context.Background(), name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsAPIsDAASService MachineCatalogsCheckRemotePCEnrollmentScopeExists", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var name string

		httpRes, err := apiClient.MachineCatalogsAPIsDAAS.MachineCatalogsCheckRemotePCEnrollmentScopeExists(context.Background(), nameOrId, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsAPIsDAASService MachineCatalogsCreateMachineCatalog", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MachineCatalogsAPIsDAAS.MachineCatalogsCreateMachineCatalog(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsAPIsDAASService MachineCatalogsCreateMachineCatalogUpgradeSchedule", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string

		httpRes, err := apiClient.MachineCatalogsAPIsDAAS.MachineCatalogsCreateMachineCatalogUpgradeSchedule(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsAPIsDAASService MachineCatalogsDeleteMachineCatalog", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string

		httpRes, err := apiClient.MachineCatalogsAPIsDAAS.MachineCatalogsDeleteMachineCatalog(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsAPIsDAASService MachineCatalogsDoMachineCatalogSearch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MachineCatalogsAPIsDAAS.MachineCatalogsDoMachineCatalogSearch(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsAPIsDAASService MachineCatalogsExport", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.MachineCatalogsAPIsDAAS.MachineCatalogsExport(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsAPIsDAASService MachineCatalogsExportMachineProfile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.MachineCatalogsAPIsDAAS.MachineCatalogsExportMachineProfile(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsAPIsDAASService MachineCatalogsGetMachineCatalog", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.MachineCatalogsAPIsDAAS.MachineCatalogsGetMachineCatalog(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsAPIsDAASService MachineCatalogsGetMachineCatalogDeliveryGroupAssociations", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.MachineCatalogsAPIsDAAS.MachineCatalogsGetMachineCatalogDeliveryGroupAssociations(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsAPIsDAASService MachineCatalogsGetMachineCatalogEnrollments", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.MachineCatalogsAPIsDAAS.MachineCatalogsGetMachineCatalogEnrollments(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsAPIsDAASService MachineCatalogsGetMachineCatalogLastMasterImage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.MachineCatalogsAPIsDAAS.MachineCatalogsGetMachineCatalogLastMasterImage(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsAPIsDAASService MachineCatalogsGetMachineCatalogMachineAccounts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.MachineCatalogsAPIsDAAS.MachineCatalogsGetMachineCatalogMachineAccounts(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsAPIsDAASService MachineCatalogsGetMachineCatalogMachines", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.MachineCatalogsAPIsDAAS.MachineCatalogsGetMachineCatalogMachines(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsAPIsDAASService MachineCatalogsGetMachineCatalogMasterImageHistory", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.MachineCatalogsAPIsDAAS.MachineCatalogsGetMachineCatalogMasterImageHistory(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsAPIsDAASService MachineCatalogsGetMachineCatalogStartMenuApplications", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.MachineCatalogsAPIsDAAS.MachineCatalogsGetMachineCatalogStartMenuApplications(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsAPIsDAASService MachineCatalogsGetMachineCatalogTags", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.MachineCatalogsAPIsDAAS.MachineCatalogsGetMachineCatalogTags(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsAPIsDAASService MachineCatalogsGetMachineCatalogTestReport", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.MachineCatalogsAPIsDAAS.MachineCatalogsGetMachineCatalogTestReport(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsAPIsDAASService MachineCatalogsGetMachineCatalogVDAComponentsAndFeatures", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.MachineCatalogsAPIsDAAS.MachineCatalogsGetMachineCatalogVDAComponentsAndFeatures(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsAPIsDAASService MachineCatalogsGetMachineCatalogVDAUpgradeVersions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.MachineCatalogsAPIsDAAS.MachineCatalogsGetMachineCatalogVDAUpgradeVersions(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsAPIsDAASService MachineCatalogsGetMachineCatalogs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MachineCatalogsAPIsDAAS.MachineCatalogsGetMachineCatalogs(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsAPIsDAASService MachineCatalogsGetMachineCatalogsAdministrators", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.MachineCatalogsAPIsDAAS.MachineCatalogsGetMachineCatalogsAdministrators(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsAPIsDAASService MachineCatalogsGetMachineCatalogsV2", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MachineCatalogsAPIsDAAS.MachineCatalogsGetMachineCatalogsV2(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsAPIsDAASService MachineCatalogsImportProvisionedVirtualMachines", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.MachineCatalogsAPIsDAAS.MachineCatalogsImportProvisionedVirtualMachines(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsAPIsDAASService MachineCatalogsRebootMachineCatalogMachines", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string

		httpRes, err := apiClient.MachineCatalogsAPIsDAAS.MachineCatalogsRebootMachineCatalogMachines(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsAPIsDAASService MachineCatalogsRemoveMachineCatalogMachine", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var machine string

		httpRes, err := apiClient.MachineCatalogsAPIsDAAS.MachineCatalogsRemoveMachineCatalogMachine(context.Background(), nameOrId, machine).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsAPIsDAASService MachineCatalogsRemoveMachineCatalogMachineAccount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var machine string

		httpRes, err := apiClient.MachineCatalogsAPIsDAAS.MachineCatalogsRemoveMachineCatalogMachineAccount(context.Background(), nameOrId, machine).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsAPIsDAASService MachineCatalogsRemoveMachineCatalogTags", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var tagNameOrId string

		httpRes, err := apiClient.MachineCatalogsAPIsDAAS.MachineCatalogsRemoveMachineCatalogTags(context.Background(), nameOrId, tagNameOrId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsAPIsDAASService MachineCatalogsRemoveMachineCatalogUpgradeSchedule", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string

		httpRes, err := apiClient.MachineCatalogsAPIsDAAS.MachineCatalogsRemoveMachineCatalogUpgradeSchedule(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsAPIsDAASService MachineCatalogsRepairMachineCatalogMachineAccounts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string

		httpRes, err := apiClient.MachineCatalogsAPIsDAAS.MachineCatalogsRepairMachineCatalogMachineAccounts(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsAPIsDAASService MachineCatalogsRollbackMachineCatalogProvisioningScheme", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.MachineCatalogsAPIsDAAS.MachineCatalogsRollbackMachineCatalogProvisioningScheme(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsAPIsDAASService MachineCatalogsSetMachineCatalogTags", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string

		httpRes, err := apiClient.MachineCatalogsAPIsDAAS.MachineCatalogsSetMachineCatalogTags(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsAPIsDAASService MachineCatalogsTestMachineCatalog", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.MachineCatalogsAPIsDAAS.MachineCatalogsTestMachineCatalog(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsAPIsDAASService MachineCatalogsTestMachineCatalogExists", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.MachineCatalogsAPIsDAAS.MachineCatalogsTestMachineCatalogExists(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsAPIsDAASService MachineCatalogsTestRemotePCEnrollmentScopeExists", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string

		httpRes, err := apiClient.MachineCatalogsAPIsDAAS.MachineCatalogsTestRemotePCEnrollmentScopeExists(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsAPIsDAASService MachineCatalogsUpdateMachineCatalog", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.MachineCatalogsAPIsDAAS.MachineCatalogsUpdateMachineCatalog(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsAPIsDAASService MachineCatalogsUpdateMachineCatalogMachineAccount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var machine string

		resp, httpRes, err := apiClient.MachineCatalogsAPIsDAAS.MachineCatalogsUpdateMachineCatalogMachineAccount(context.Background(), nameOrId, machine).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsAPIsDAASService MachineCatalogsUpdateMachineCatalogProvisioningScheme", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.MachineCatalogsAPIsDAAS.MachineCatalogsUpdateMachineCatalogProvisioningScheme(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsAPIsDAASService MachineCatalogsUpdateMachineCatalogUpgradeSchedule", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string

		httpRes, err := apiClient.MachineCatalogsAPIsDAAS.MachineCatalogsUpdateMachineCatalogUpgradeSchedule(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MachineCatalogsAPIsDAASService MachineCatalogsValidateMachineCatalogVDAComponentsAndFeaturesSelection", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.MachineCatalogsAPIsDAAS.MachineCatalogsValidateMachineCatalogVDAComponentsAndFeaturesSelection(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
