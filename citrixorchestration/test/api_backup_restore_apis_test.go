/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

Testing BackupRestoreAPIsDAASService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package citrixorchestration

import (
	"context"
	"testing"

	openapiclient "github.com/citrix/citrix-daas-rest-go/citrixorchestration"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_citrixorchestration_BackupRestoreAPIsDAASService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test BackupRestoreAPIsDAASService BackupRestoreCreateBackupSchedule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.BackupRestoreAPIsDAAS.BackupRestoreCreateBackupSchedule(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BackupRestoreAPIsDAASService BackupRestoreDeleteBackup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var backupName string

		httpRes, err := apiClient.BackupRestoreAPIsDAAS.BackupRestoreDeleteBackup(context.Background(), backupName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BackupRestoreAPIsDAASService BackupRestoreDeleteBackupSchedule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var uid int32

		httpRes, err := apiClient.BackupRestoreAPIsDAAS.BackupRestoreDeleteBackupSchedule(context.Background(), uid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BackupRestoreAPIsDAASService BackupRestoreDisableSingleBackupSchedule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var uid int32

		httpRes, err := apiClient.BackupRestoreAPIsDAAS.BackupRestoreDisableSingleBackupSchedule(context.Background(), uid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BackupRestoreAPIsDAASService BackupRestoreDoBackup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.BackupRestoreAPIsDAAS.BackupRestoreDoBackup(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BackupRestoreAPIsDAASService BackupRestoreDownloadSingleBackup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var backupName string

		resp, httpRes, err := apiClient.BackupRestoreAPIsDAAS.BackupRestoreDownloadSingleBackup(context.Background(), backupName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BackupRestoreAPIsDAASService BackupRestoreEnableSingleBackupSchedule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var uid int32

		httpRes, err := apiClient.BackupRestoreAPIsDAAS.BackupRestoreEnableSingleBackupSchedule(context.Background(), uid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BackupRestoreAPIsDAASService BackupRestoreGetAllBackupHistory", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.BackupRestoreAPIsDAAS.BackupRestoreGetAllBackupHistory(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BackupRestoreAPIsDAASService BackupRestoreGetBackupHistoryForSpecificHistory", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var uid string

		resp, httpRes, err := apiClient.BackupRestoreAPIsDAAS.BackupRestoreGetBackupHistoryForSpecificHistory(context.Background(), uid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BackupRestoreAPIsDAASService BackupRestoreGetBackupRestoreOptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.BackupRestoreAPIsDAAS.BackupRestoreGetBackupRestoreOptions(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BackupRestoreAPIsDAASService BackupRestoreGetBackupSchedule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var uid int32

		resp, httpRes, err := apiClient.BackupRestoreAPIsDAAS.BackupRestoreGetBackupSchedule(context.Background(), uid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BackupRestoreAPIsDAASService BackupRestoreGetBackupSchedules", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.BackupRestoreAPIsDAAS.BackupRestoreGetBackupSchedules(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BackupRestoreAPIsDAASService BackupRestoreGetBackups", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.BackupRestoreAPIsDAAS.BackupRestoreGetBackups(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BackupRestoreAPIsDAASService BackupRestoreGetBlobStorage", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.BackupRestoreAPIsDAAS.BackupRestoreGetBlobStorage(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BackupRestoreAPIsDAASService BackupRestoreGetComponentMembers", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var backupName string

		resp, httpRes, err := apiClient.BackupRestoreAPIsDAAS.BackupRestoreGetComponentMembers(context.Background(), backupName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BackupRestoreAPIsDAASService BackupRestoreGetCurrentActionStatus", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.BackupRestoreAPIsDAAS.BackupRestoreGetCurrentActionStatus(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BackupRestoreAPIsDAASService BackupRestoreGetHistoryForSpecificBackup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var backupName string

		resp, httpRes, err := apiClient.BackupRestoreAPIsDAAS.BackupRestoreGetHistoryForSpecificBackup(context.Background(), backupName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BackupRestoreAPIsDAASService BackupRestoreGetInformation", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.BackupRestoreAPIsDAAS.BackupRestoreGetInformation(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BackupRestoreAPIsDAASService BackupRestoreGetResultLog", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var backupName string

		resp, httpRes, err := apiClient.BackupRestoreAPIsDAAS.BackupRestoreGetResultLog(context.Background(), backupName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BackupRestoreAPIsDAASService BackupRestoreModifyBackupSchedule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var uid int32

		resp, httpRes, err := apiClient.BackupRestoreAPIsDAAS.BackupRestoreModifyBackupSchedule(context.Background(), uid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BackupRestoreAPIsDAASService BackupRestorePinSingleBackup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var backupName string

		resp, httpRes, err := apiClient.BackupRestoreAPIsDAAS.BackupRestorePinSingleBackup(context.Background(), backupName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BackupRestoreAPIsDAASService BackupRestoreRestoreBackupToSite", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var backupName string

		resp, httpRes, err := apiClient.BackupRestoreAPIsDAAS.BackupRestoreRestoreBackupToSite(context.Background(), backupName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BackupRestoreAPIsDAASService BackupRestoreSetBackupRestoreOptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.BackupRestoreAPIsDAAS.BackupRestoreSetBackupRestoreOptions(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BackupRestoreAPIsDAASService BackupRestoreSetBlobStorage", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.BackupRestoreAPIsDAAS.BackupRestoreSetBlobStorage(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BackupRestoreAPIsDAASService BackupRestoreSetCurrentActionStatus", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.BackupRestoreAPIsDAAS.BackupRestoreSetCurrentActionStatus(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BackupRestoreAPIsDAASService BackupRestoreUnpinSingleBackup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var backupName string

		resp, httpRes, err := apiClient.BackupRestoreAPIsDAAS.BackupRestoreUnpinSingleBackup(context.Background(), backupName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BackupRestoreAPIsDAASService BackupRestoreUpdateBckRstrHistoryNotes", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var uid int32

		resp, httpRes, err := apiClient.BackupRestoreAPIsDAAS.BackupRestoreUpdateBckRstrHistoryNotes(context.Background(), uid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BackupRestoreAPIsDAASService BackupRestoreValidateStorage", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.BackupRestoreAPIsDAAS.BackupRestoreValidateStorage(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
