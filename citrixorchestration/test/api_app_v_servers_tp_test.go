/*
Citrix Virtual Apps and Desktops REST API TECHPREVIEW

Testing AppVServersTPApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package citrixorchestration

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/citrix/citrix-daas-rest-go/citrixorchestration"
)

func Test_citrixorchestration_AppVServersTPApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test AppVServersTPApiService AppVServersTPAddAppVServer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerid string
		var siteid string

		httpRes, err := apiClient.AppVServersTPApi.AppVServersTPAddAppVServer(context.Background(), customerid, siteid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppVServersTPApiService AppVServersTPGetAppVServerPackage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var server string
		var id string
		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.AppVServersTPApi.AppVServersTPGetAppVServerPackage(context.Background(), server, id, customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppVServersTPApiService AppVServersTPGetAppVServerPackageApplication", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var server string
		var id string
		var appId string
		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.AppVServersTPApi.AppVServersTPGetAppVServerPackageApplication(context.Background(), server, id, appId, customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppVServersTPApiService AppVServersTPGetAppVServerPackageApplicationIcon", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var server string
		var id string
		var appId string
		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.AppVServersTPApi.AppVServersTPGetAppVServerPackageApplicationIcon(context.Background(), server, id, appId, customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppVServersTPApiService AppVServersTPGetAppVServerPackageApplications", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var server string
		var id string
		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.AppVServersTPApi.AppVServersTPGetAppVServerPackageApplications(context.Background(), server, id, customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppVServersTPApiService AppVServersTPGetAppVServerPackageIcon", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var server string
		var id string
		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.AppVServersTPApi.AppVServersTPGetAppVServerPackageIcon(context.Background(), server, id, customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppVServersTPApiService AppVServersTPGetAppVServerPackages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var server string
		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.AppVServersTPApi.AppVServersTPGetAppVServerPackages(context.Background(), server, customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppVServersTPApiService AppVServersTPGetAppVServers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.AppVServersTPApi.AppVServersTPGetAppVServers(context.Background(), customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppVServersTPApiService AppVServersTPRemoveAppVServer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var uid int32
		var customerid string
		var siteid string

		httpRes, err := apiClient.AppVServersTPApi.AppVServersTPRemoveAppVServer(context.Background(), uid, customerid, siteid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppVServersTPApiService AppVServersTPUpdateAppVServer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var uid int32
		var customerid string
		var siteid string

		httpRes, err := apiClient.AppVServersTPApi.AppVServersTPUpdateAppVServer(context.Background(), uid, customerid, siteid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
