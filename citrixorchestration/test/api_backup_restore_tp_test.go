/*
Citrix Virtual Apps and Desktops REST API TECHPREVIEW

Testing BackupRestoreTPApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package citrixorchestration

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/citrix/citrix-daas-rest-go/citrixorchestration"
)

func Test_citrixorchestration_BackupRestoreTPApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test BackupRestoreTPApiService BackupRestoreTPCreateBackupSchedule", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.BackupRestoreTPApi.BackupRestoreTPCreateBackupSchedule(context.Background(), customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BackupRestoreTPApiService BackupRestoreTPDeleteBackup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerid string
		var siteid string
		var backupName string

		resp, httpRes, err := apiClient.BackupRestoreTPApi.BackupRestoreTPDeleteBackup(context.Background(), customerid, siteid, backupName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BackupRestoreTPApiService BackupRestoreTPDeleteBackupSchedule", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerid string
		var siteid string
		var uid int32

		httpRes, err := apiClient.BackupRestoreTPApi.BackupRestoreTPDeleteBackupSchedule(context.Background(), customerid, siteid, uid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BackupRestoreTPApiService BackupRestoreTPDisableBackupSchedule", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerid string
		var siteid string
		var uid int32

		httpRes, err := apiClient.BackupRestoreTPApi.BackupRestoreTPDisableBackupSchedule(context.Background(), customerid, siteid, uid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BackupRestoreTPApiService BackupRestoreTPDoBackup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.BackupRestoreTPApi.BackupRestoreTPDoBackup(context.Background(), customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BackupRestoreTPApiService BackupRestoreTPEnableBackupSchedule", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerid string
		var siteid string
		var uid int32

		httpRes, err := apiClient.BackupRestoreTPApi.BackupRestoreTPEnableBackupSchedule(context.Background(), customerid, siteid, uid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BackupRestoreTPApiService BackupRestoreTPGetAllBackupHistory", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.BackupRestoreTPApi.BackupRestoreTPGetAllBackupHistory(context.Background(), customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BackupRestoreTPApiService BackupRestoreTPGetBackupHistoryForSpecificBackup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerid string
		var siteid string
		var backupName string

		resp, httpRes, err := apiClient.BackupRestoreTPApi.BackupRestoreTPGetBackupHistoryForSpecificBackup(context.Background(), customerid, siteid, backupName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BackupRestoreTPApiService BackupRestoreTPGetBackupHistoryForSpecificHistory", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerid string
		var siteid string
		var uid string

		resp, httpRes, err := apiClient.BackupRestoreTPApi.BackupRestoreTPGetBackupHistoryForSpecificHistory(context.Background(), customerid, siteid, uid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BackupRestoreTPApiService BackupRestoreTPGetBackupSchedule", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerid string
		var siteid string
		var uid int32

		resp, httpRes, err := apiClient.BackupRestoreTPApi.BackupRestoreTPGetBackupSchedule(context.Background(), customerid, siteid, uid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BackupRestoreTPApiService BackupRestoreTPGetBackupSchedules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.BackupRestoreTPApi.BackupRestoreTPGetBackupSchedules(context.Background(), customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BackupRestoreTPApiService BackupRestoreTPGetBackups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.BackupRestoreTPApi.BackupRestoreTPGetBackups(context.Background(), customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BackupRestoreTPApiService BackupRestoreTPGetComponentMembers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerid string
		var siteid string
		var backupName string

		resp, httpRes, err := apiClient.BackupRestoreTPApi.BackupRestoreTPGetComponentMembers(context.Background(), customerid, siteid, backupName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BackupRestoreTPApiService BackupRestoreTPGetCurrentActionStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.BackupRestoreTPApi.BackupRestoreTPGetCurrentActionStatus(context.Background(), customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BackupRestoreTPApiService BackupRestoreTPGetInformation", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.BackupRestoreTPApi.BackupRestoreTPGetInformation(context.Background(), customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BackupRestoreTPApiService BackupRestoreTPModifyBackupSchedule", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerid string
		var siteid string
		var uid int32

		resp, httpRes, err := apiClient.BackupRestoreTPApi.BackupRestoreTPModifyBackupSchedule(context.Background(), customerid, siteid, uid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BackupRestoreTPApiService BackupRestoreTPPinBackup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerid string
		var siteid string
		var backupName string

		resp, httpRes, err := apiClient.BackupRestoreTPApi.BackupRestoreTPPinBackup(context.Background(), customerid, siteid, backupName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BackupRestoreTPApiService BackupRestoreTPRemoveBackupHistory", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerid string
		var siteid string

		httpRes, err := apiClient.BackupRestoreTPApi.BackupRestoreTPRemoveBackupHistory(context.Background(), customerid, siteid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BackupRestoreTPApiService BackupRestoreTPRestoreBackup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerid string
		var siteid string
		var backupName string

		resp, httpRes, err := apiClient.BackupRestoreTPApi.BackupRestoreTPRestoreBackup(context.Background(), customerid, siteid, backupName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BackupRestoreTPApiService BackupRestoreTPSetCurrentActionStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.BackupRestoreTPApi.BackupRestoreTPSetCurrentActionStatus(context.Background(), customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BackupRestoreTPApiService BackupRestoreTPSetInformation", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerid string
		var siteid string

		httpRes, err := apiClient.BackupRestoreTPApi.BackupRestoreTPSetInformation(context.Background(), customerid, siteid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BackupRestoreTPApiService BackupRestoreTPUnpinBackup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerid string
		var siteid string
		var backupName string

		resp, httpRes, err := apiClient.BackupRestoreTPApi.BackupRestoreTPUnpinBackup(context.Background(), customerid, siteid, backupName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BackupRestoreTPApiService BackupRestoreTPUpdateBckRstrHistoryNotes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var uid int32
		var customerid string
		var siteid string

		resp, httpRes, err := apiClient.BackupRestoreTPApi.BackupRestoreTPUpdateBckRstrHistoryNotes(context.Background(), uid, customerid, siteid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
