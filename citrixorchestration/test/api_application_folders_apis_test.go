/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

Testing ApplicationFoldersAPIs Service

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package citrixorchestration

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/citrix/citrix-daas-rest-go/citrixorchestration"
)

func Test_citrixorchestration_ApplicationFoldersAPIs Service(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ApplicationFoldersAPIs Service ApplicationFoldersCheckApplicationFolderPathExists", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var path string

		httpRes, err := apiClient.ApplicationFoldersAPIs .ApplicationFoldersCheckApplicationFolderPathExists(context.Background(), path).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationFoldersAPIs Service ApplicationFoldersCreateApplicationFolder", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ApplicationFoldersAPIs .ApplicationFoldersCreateApplicationFolder(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationFoldersAPIs Service ApplicationFoldersDeleteApplicationFolder", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pathOrId string

		httpRes, err := apiClient.ApplicationFoldersAPIs .ApplicationFoldersDeleteApplicationFolder(context.Background(), pathOrId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationFoldersAPIs Service ApplicationFoldersGetApplicationFolder", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pathOrId string

		resp, httpRes, err := apiClient.ApplicationFoldersAPIs .ApplicationFoldersGetApplicationFolder(context.Background(), pathOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationFoldersAPIs Service ApplicationFoldersGetApplicationFolderApplications", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pathOrId string

		resp, httpRes, err := apiClient.ApplicationFoldersAPIs .ApplicationFoldersGetApplicationFolderApplications(context.Background(), pathOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationFoldersAPIs Service ApplicationFoldersGetApplicationFolders", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ApplicationFoldersAPIs .ApplicationFoldersGetApplicationFolders(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationFoldersAPIs Service ApplicationFoldersUpdateApplicationFolder", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pathOrId string

		resp, httpRes, err := apiClient.ApplicationFoldersAPIs .ApplicationFoldersUpdateApplicationFolder(context.Background(), pathOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
