/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

Testing HypervisorsAPIs Service

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package citrixorchestration

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/citrix/citrix-daas-rest-go/citrixorchestration"
)

func Test_citrixorchestration_HypervisorsAPIs Service(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test HypervisorsAPIs Service HypervisorsCheckHypervisorExists", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		httpRes, err := apiClient.HypervisorsAPIs .HypervisorsCheckHypervisorExists(context.Background(), name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsAPIs Service HypervisorsCheckHypervisorResourcePoolExists", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var name string

		httpRes, err := apiClient.HypervisorsAPIs .HypervisorsCheckHypervisorResourcePoolExists(context.Background(), nameOrId, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsAPIs Service HypervisorsCreateHypervisor", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HypervisorsAPIs .HypervisorsCreateHypervisor(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsAPIs Service HypervisorsCreateResourcePool", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.HypervisorsAPIs .HypervisorsCreateResourcePool(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsAPIs Service HypervisorsDeleteHypervisor", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string

		httpRes, err := apiClient.HypervisorsAPIs .HypervisorsDeleteHypervisor(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsAPIs Service HypervisorsDeleteHypervisorResourcePool", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var poolId string

		httpRes, err := apiClient.HypervisorsAPIs .HypervisorsDeleteHypervisorResourcePool(context.Background(), nameOrId, poolId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsAPIs Service HypervisorsDoHypervisorResourceSearch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var poolId string

		resp, httpRes, err := apiClient.HypervisorsAPIs .HypervisorsDoHypervisorResourceSearch(context.Background(), nameOrId, poolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsAPIs Service HypervisorsGetHypervisor", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.HypervisorsAPIs .HypervisorsGetHypervisor(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsAPIs Service HypervisorsGetHypervisorAdministrators", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.HypervisorsAPIs .HypervisorsGetHypervisorAdministrators(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsAPIs Service HypervisorsGetHypervisorAllResources", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.HypervisorsAPIs .HypervisorsGetHypervisorAllResources(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsAPIs Service HypervisorsGetHypervisorAllResourcesWithoutConnection", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HypervisorsAPIs .HypervisorsGetHypervisorAllResourcesWithoutConnection(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsAPIs Service HypervisorsGetHypervisorDeletePreview", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.HypervisorsAPIs .HypervisorsGetHypervisorDeletePreview(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsAPIs Service HypervisorsGetHypervisorJobs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.HypervisorsAPIs .HypervisorsGetHypervisorJobs(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsAPIs Service HypervisorsGetHypervisorMachineCatalogs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.HypervisorsAPIs .HypervisorsGetHypervisorMachineCatalogs(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsAPIs Service HypervisorsGetHypervisorResourcePool", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var poolId string

		resp, httpRes, err := apiClient.HypervisorsAPIs .HypervisorsGetHypervisorResourcePool(context.Background(), nameOrId, poolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsAPIs Service HypervisorsGetHypervisorResourcePoolAdministrators", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var poolId string

		resp, httpRes, err := apiClient.HypervisorsAPIs .HypervisorsGetHypervisorResourcePoolAdministrators(context.Background(), nameOrId, poolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsAPIs Service HypervisorsGetHypervisorResourcePoolDeletePreview", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var poolId string

		resp, httpRes, err := apiClient.HypervisorsAPIs .HypervisorsGetHypervisorResourcePoolDeletePreview(context.Background(), nameOrId, poolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsAPIs Service HypervisorsGetHypervisorResourcePoolJobs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var poolId string

		resp, httpRes, err := apiClient.HypervisorsAPIs .HypervisorsGetHypervisorResourcePoolJobs(context.Background(), nameOrId, poolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsAPIs Service HypervisorsGetHypervisorResourcePoolMachineCatalogs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var poolId string

		resp, httpRes, err := apiClient.HypervisorsAPIs .HypervisorsGetHypervisorResourcePoolMachineCatalogs(context.Background(), nameOrId, poolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsAPIs Service HypervisorsGetHypervisorResourcePoolPatchPreview", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var poolId string

		resp, httpRes, err := apiClient.HypervisorsAPIs .HypervisorsGetHypervisorResourcePoolPatchPreview(context.Background(), nameOrId, poolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsAPIs Service HypervisorsGetHypervisorResourcePoolResources", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var poolId string

		resp, httpRes, err := apiClient.HypervisorsAPIs .HypervisorsGetHypervisorResourcePoolResources(context.Background(), nameOrId, poolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsAPIs Service HypervisorsGetHypervisorResourcePoolTestReport", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var poolId string

		resp, httpRes, err := apiClient.HypervisorsAPIs .HypervisorsGetHypervisorResourcePoolTestReport(context.Background(), nameOrId, poolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsAPIs Service HypervisorsGetHypervisorResourcePools", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.HypervisorsAPIs .HypervisorsGetHypervisorResourcePools(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsAPIs Service HypervisorsGetHypervisorServerHAAddresses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.HypervisorsAPIs .HypervisorsGetHypervisorServerHAAddresses(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsAPIs Service HypervisorsGetHypervisorTestReport", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.HypervisorsAPIs .HypervisorsGetHypervisorTestReport(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsAPIs Service HypervisorsGetHypervisorWithoutConnection", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HypervisorsAPIs .HypervisorsGetHypervisorWithoutConnection(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsAPIs Service HypervisorsGetHypervisors", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HypervisorsAPIs .HypervisorsGetHypervisors(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsAPIs Service HypervisorsGetHypervisorsAndResourcePools", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HypervisorsAPIs .HypervisorsGetHypervisorsAndResourcePools(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsAPIs Service HypervisorsGetSupportHypervisors", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HypervisorsAPIs .HypervisorsGetSupportHypervisors(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsAPIs Service HypervisorsPatchHypervisor", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string

		httpRes, err := apiClient.HypervisorsAPIs .HypervisorsPatchHypervisor(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsAPIs Service HypervisorsPatchHypervisorResourcePool", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var poolId string

		httpRes, err := apiClient.HypervisorsAPIs .HypervisorsPatchHypervisorResourcePool(context.Background(), nameOrId, poolId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsAPIs Service HypervisorsPutBrokerHypervisorConnection", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string

		httpRes, err := apiClient.HypervisorsAPIs .HypervisorsPutBrokerHypervisorConnection(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsAPIs Service HypervisorsResetBrokerHypervisorConnection", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string

		httpRes, err := apiClient.HypervisorsAPIs .HypervisorsResetBrokerHypervisorConnection(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsAPIs Service HypervisorsTestHypervisor", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.HypervisorsAPIs .HypervisorsTestHypervisor(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsAPIs Service HypervisorsTestHypervisorResourcePool", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var poolId string

		resp, httpRes, err := apiClient.HypervisorsAPIs .HypervisorsTestHypervisorResourcePool(context.Background(), nameOrId, poolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsAPIs Service HypervisorsValidateHypervisorResourcePoolResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var poolId string

		resp, httpRes, err := apiClient.HypervisorsAPIs .HypervisorsValidateHypervisorResourcePoolResource(context.Background(), nameOrId, poolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsAPIs Service HypervisorsValidateVmPath", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HypervisorsAPIs .HypervisorsValidateVmPath(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
