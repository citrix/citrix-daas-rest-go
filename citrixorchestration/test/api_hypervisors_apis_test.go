/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

Testing HypervisorsAPIsDAASService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package citrixorchestration

import (
	"context"
	"testing"

	openapiclient "github.com/citrix/citrix-daas-rest-go/citrixorchestration"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_citrixorchestration_HypervisorsAPIsDAASService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test HypervisorsAPIsDAASService HypervisorsCheckHypervisorExists", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var name string

		httpRes, err := apiClient.HypervisorsAPIsDAAS.HypervisorsCheckHypervisorExists(context.Background(), name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsAPIsDAASService HypervisorsCheckHypervisorResourcePoolExists", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nameOrId string
		var name string

		httpRes, err := apiClient.HypervisorsAPIsDAAS.HypervisorsCheckHypervisorResourcePoolExists(context.Background(), nameOrId, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsAPIsDAASService HypervisorsCreateHypervisor", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.HypervisorsAPIsDAAS.HypervisorsCreateHypervisor(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsAPIsDAASService HypervisorsCreateResourcePool", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.HypervisorsAPIsDAAS.HypervisorsCreateResourcePool(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsAPIsDAASService HypervisorsDeleteHypervisor", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nameOrId string

		httpRes, err := apiClient.HypervisorsAPIsDAAS.HypervisorsDeleteHypervisor(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsAPIsDAASService HypervisorsDeleteHypervisorResourcePool", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nameOrId string
		var poolId string

		httpRes, err := apiClient.HypervisorsAPIsDAAS.HypervisorsDeleteHypervisorResourcePool(context.Background(), nameOrId, poolId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsAPIsDAASService HypervisorsDoHypervisorAllResourcesSearch", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.HypervisorsAPIsDAAS.HypervisorsDoHypervisorAllResourcesSearch(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsAPIsDAASService HypervisorsDoHypervisorAllResourcesSearchWithoutConnection", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.HypervisorsAPIsDAAS.HypervisorsDoHypervisorAllResourcesSearchWithoutConnection(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsAPIsDAASService HypervisorsDoHypervisorResourceSearch", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nameOrId string
		var poolId string

		resp, httpRes, err := apiClient.HypervisorsAPIsDAAS.HypervisorsDoHypervisorResourceSearch(context.Background(), nameOrId, poolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsAPIsDAASService HypervisorsGetHypervisor", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.HypervisorsAPIsDAAS.HypervisorsGetHypervisor(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsAPIsDAASService HypervisorsGetHypervisorAdministrators", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.HypervisorsAPIsDAAS.HypervisorsGetHypervisorAdministrators(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsAPIsDAASService HypervisorsGetHypervisorAllResourcePools", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.HypervisorsAPIsDAAS.HypervisorsGetHypervisorAllResourcePools(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsAPIsDAASService HypervisorsGetHypervisorAllResources", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.HypervisorsAPIsDAAS.HypervisorsGetHypervisorAllResources(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsAPIsDAASService HypervisorsGetHypervisorAllResourcesWithoutConnection", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.HypervisorsAPIsDAAS.HypervisorsGetHypervisorAllResourcesWithoutConnection(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsAPIsDAASService HypervisorsGetHypervisorDeletePreview", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.HypervisorsAPIsDAAS.HypervisorsGetHypervisorDeletePreview(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsAPIsDAASService HypervisorsGetHypervisorJobs", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.HypervisorsAPIsDAAS.HypervisorsGetHypervisorJobs(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsAPIsDAASService HypervisorsGetHypervisorMachineCatalogs", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.HypervisorsAPIsDAAS.HypervisorsGetHypervisorMachineCatalogs(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsAPIsDAASService HypervisorsGetHypervisorOrphanedResources", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.HypervisorsAPIsDAAS.HypervisorsGetHypervisorOrphanedResources(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsAPIsDAASService HypervisorsGetHypervisorResourcePool", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nameOrId string
		var poolId string

		resp, httpRes, err := apiClient.HypervisorsAPIsDAAS.HypervisorsGetHypervisorResourcePool(context.Background(), nameOrId, poolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsAPIsDAASService HypervisorsGetHypervisorResourcePoolAdministrators", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nameOrId string
		var poolId string

		resp, httpRes, err := apiClient.HypervisorsAPIsDAAS.HypervisorsGetHypervisorResourcePoolAdministrators(context.Background(), nameOrId, poolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsAPIsDAASService HypervisorsGetHypervisorResourcePoolAllAvailableNetworks", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.HypervisorsAPIsDAAS.HypervisorsGetHypervisorResourcePoolAllAvailableNetworks(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsAPIsDAASService HypervisorsGetHypervisorResourcePoolDeletePreview", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nameOrId string
		var poolId string

		resp, httpRes, err := apiClient.HypervisorsAPIsDAAS.HypervisorsGetHypervisorResourcePoolDeletePreview(context.Background(), nameOrId, poolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsAPIsDAASService HypervisorsGetHypervisorResourcePoolJobs", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nameOrId string
		var poolId string

		resp, httpRes, err := apiClient.HypervisorsAPIsDAAS.HypervisorsGetHypervisorResourcePoolJobs(context.Background(), nameOrId, poolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsAPIsDAASService HypervisorsGetHypervisorResourcePoolMachineCatalogs", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nameOrId string
		var poolId string

		resp, httpRes, err := apiClient.HypervisorsAPIsDAAS.HypervisorsGetHypervisorResourcePoolMachineCatalogs(context.Background(), nameOrId, poolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsAPIsDAASService HypervisorsGetHypervisorResourcePoolPatchPreview", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nameOrId string
		var poolId string

		resp, httpRes, err := apiClient.HypervisorsAPIsDAAS.HypervisorsGetHypervisorResourcePoolPatchPreview(context.Background(), nameOrId, poolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsAPIsDAASService HypervisorsGetHypervisorResourcePoolResources", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nameOrId string
		var poolId string

		resp, httpRes, err := apiClient.HypervisorsAPIsDAAS.HypervisorsGetHypervisorResourcePoolResources(context.Background(), nameOrId, poolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsAPIsDAASService HypervisorsGetHypervisorResourcePoolTestReport", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nameOrId string
		var poolId string

		resp, httpRes, err := apiClient.HypervisorsAPIsDAAS.HypervisorsGetHypervisorResourcePoolTestReport(context.Background(), nameOrId, poolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsAPIsDAASService HypervisorsGetHypervisorResourcePools", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.HypervisorsAPIsDAAS.HypervisorsGetHypervisorResourcePools(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsAPIsDAASService HypervisorsGetHypervisorResourcePrices", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.HypervisorsAPIsDAAS.HypervisorsGetHypervisorResourcePrices(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsAPIsDAASService HypervisorsGetHypervisorServerHAAddresses", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.HypervisorsAPIsDAAS.HypervisorsGetHypervisorServerHAAddresses(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsAPIsDAASService HypervisorsGetHypervisorTestReport", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.HypervisorsAPIsDAAS.HypervisorsGetHypervisorTestReport(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsAPIsDAASService HypervisorsGetHypervisorWithoutConnection", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.HypervisorsAPIsDAAS.HypervisorsGetHypervisorWithoutConnection(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsAPIsDAASService HypervisorsGetHypervisors", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.HypervisorsAPIsDAAS.HypervisorsGetHypervisors(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsAPIsDAASService HypervisorsGetHypervisorsAndResourcePools", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.HypervisorsAPIsDAAS.HypervisorsGetHypervisorsAndResourcePools(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsAPIsDAASService HypervisorsGetSupportHypervisors", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.HypervisorsAPIsDAAS.HypervisorsGetSupportHypervisors(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsAPIsDAASService HypervisorsPatchHypervisor", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nameOrId string

		httpRes, err := apiClient.HypervisorsAPIsDAAS.HypervisorsPatchHypervisor(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsAPIsDAASService HypervisorsPatchHypervisorResourcePool", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nameOrId string
		var poolId string

		httpRes, err := apiClient.HypervisorsAPIsDAAS.HypervisorsPatchHypervisorResourcePool(context.Background(), nameOrId, poolId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsAPIsDAASService HypervisorsPutBrokerHypervisorConnection", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nameOrId string

		httpRes, err := apiClient.HypervisorsAPIsDAAS.HypervisorsPutBrokerHypervisorConnection(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsAPIsDAASService HypervisorsResetBrokerHypervisorConnection", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nameOrId string

		httpRes, err := apiClient.HypervisorsAPIsDAAS.HypervisorsResetBrokerHypervisorConnection(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsAPIsDAASService HypervisorsTestHypervisor", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.HypervisorsAPIsDAAS.HypervisorsTestHypervisor(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsAPIsDAASService HypervisorsTestHypervisorResourcePool", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nameOrId string
		var poolId string

		resp, httpRes, err := apiClient.HypervisorsAPIsDAAS.HypervisorsTestHypervisorResourcePool(context.Background(), nameOrId, poolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsAPIsDAASService HypervisorsValidateHypervisorResourcePoolResource", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var nameOrId string
		var poolId string

		resp, httpRes, err := apiClient.HypervisorsAPIsDAAS.HypervisorsValidateHypervisorResourcePoolResource(context.Background(), nameOrId, poolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HypervisorsAPIsDAASService HypervisorsValidateVmPath", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.HypervisorsAPIsDAAS.HypervisorsValidateVmPath(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
