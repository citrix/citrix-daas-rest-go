/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

Testing AppVPackagesAPIs Service

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package citrixorchestration

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/citrix/citrix-daas-rest-go/citrixorchestration"
)

func Test_citrixorchestration_AppVPackagesAPIs Service(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test AppVPackagesAPIs Service AppVPackagesGetAppVPackage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.AppVPackagesAPIs .AppVPackagesGetAppVPackage(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppVPackagesAPIs Service AppVPackagesGetAppVPackageApplication", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var appId string

		resp, httpRes, err := apiClient.AppVPackagesAPIs .AppVPackagesGetAppVPackageApplication(context.Background(), id, appId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppVPackagesAPIs Service AppVPackagesGetAppVPackageApplicationIcon", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var appId string

		resp, httpRes, err := apiClient.AppVPackagesAPIs .AppVPackagesGetAppVPackageApplicationIcon(context.Background(), id, appId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppVPackagesAPIs Service AppVPackagesGetAppVPackageApplications", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.AppVPackagesAPIs .AppVPackagesGetAppVPackageApplications(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppVPackagesAPIs Service AppVPackagesGetAppVPackageBrokerApplications", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.AppVPackagesAPIs .AppVPackagesGetAppVPackageBrokerApplications(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppVPackagesAPIs Service AppVPackagesGetAppVPackageDeliveryGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.AppVPackagesAPIs .AppVPackagesGetAppVPackageDeliveryGroups(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppVPackagesAPIs Service AppVPackagesGetAppVPackageIcon", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.AppVPackagesAPIs .AppVPackagesGetAppVPackageIcon(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppVPackagesAPIs Service AppVPackagesGetAppVPackages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AppVPackagesAPIs .AppVPackagesGetAppVPackages(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppVPackagesAPIs Service AppVPackagesImportAppVPackages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.AppVPackagesAPIs .AppVPackagesImportAppVPackages(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppVPackagesAPIs Service AppVPackagesRemoveAppVPackage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.AppVPackagesAPIs .AppVPackagesRemoveAppVPackage(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
