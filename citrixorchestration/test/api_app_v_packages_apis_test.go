/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

Testing AppVPackagesAPIsDAASService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package citrixorchestration

import (
	"context"
	"testing"

	openapiclient "github.com/citrix/citrix-daas-rest-go/citrixorchestration"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_citrixorchestration_AppVPackagesAPIsDAASService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test AppVPackagesAPIsDAASService AppVPackagesGetAppVPackage", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string

		resp, httpRes, err := apiClient.AppVPackagesAPIsDAAS.AppVPackagesGetAppVPackage(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppVPackagesAPIsDAASService AppVPackagesGetAppVPackageApplication", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string
		var appId string

		resp, httpRes, err := apiClient.AppVPackagesAPIsDAAS.AppVPackagesGetAppVPackageApplication(context.Background(), id, appId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppVPackagesAPIsDAASService AppVPackagesGetAppVPackageApplicationIcon", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string
		var appId string

		resp, httpRes, err := apiClient.AppVPackagesAPIsDAAS.AppVPackagesGetAppVPackageApplicationIcon(context.Background(), id, appId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppVPackagesAPIsDAASService AppVPackagesGetAppVPackageApplications", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string

		resp, httpRes, err := apiClient.AppVPackagesAPIsDAAS.AppVPackagesGetAppVPackageApplications(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppVPackagesAPIsDAASService AppVPackagesGetAppVPackageBrokerApplications", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string

		resp, httpRes, err := apiClient.AppVPackagesAPIsDAAS.AppVPackagesGetAppVPackageBrokerApplications(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppVPackagesAPIsDAASService AppVPackagesGetAppVPackageDeliveryGroups", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string

		resp, httpRes, err := apiClient.AppVPackagesAPIsDAAS.AppVPackagesGetAppVPackageDeliveryGroups(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppVPackagesAPIsDAASService AppVPackagesGetAppVPackageIcon", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string

		resp, httpRes, err := apiClient.AppVPackagesAPIsDAAS.AppVPackagesGetAppVPackageIcon(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppVPackagesAPIsDAASService AppVPackagesGetAppVPackages", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.AppVPackagesAPIsDAAS.AppVPackagesGetAppVPackages(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppVPackagesAPIsDAASService AppVPackagesGetPackageApplicationFileTypes", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string
		var appId string

		resp, httpRes, err := apiClient.AppVPackagesAPIsDAAS.AppVPackagesGetPackageApplicationFileTypes(context.Background(), id, appId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppVPackagesAPIsDAASService AppVPackagesImportAppVPackages", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.AppVPackagesAPIsDAAS.AppVPackagesImportAppVPackages(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppVPackagesAPIsDAASService AppVPackagesRemoveAppVPackage", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string

		httpRes, err := apiClient.AppVPackagesAPIsDAAS.AppVPackagesRemoveAppVPackage(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
