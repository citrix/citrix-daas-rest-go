/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

Testing DeliveryGroupsAPIs Service

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package citrixorchestration

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/citrix/citrix-daas-rest-go/citrixorchestration"
)

func Test_citrixorchestration_DeliveryGroupsAPIs Service(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test DeliveryGroupsAPIs Service DeliveryGroupsAddDeliveryGroupMachineCatalog", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.DeliveryGroupsAPIs .DeliveryGroupsAddDeliveryGroupMachineCatalog(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeliveryGroupsAPIs Service DeliveryGroupsAddDeliveryGroupTags", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var tagNameOrId string

		resp, httpRes, err := apiClient.DeliveryGroupsAPIs .DeliveryGroupsAddDeliveryGroupTags(context.Background(), nameOrId, tagNameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeliveryGroupsAPIs Service DeliveryGroupsCheckDeliveryGroupExists", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		httpRes, err := apiClient.DeliveryGroupsAPIs .DeliveryGroupsCheckDeliveryGroupExists(context.Background(), name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeliveryGroupsAPIs Service DeliveryGroupsCheckRebootScheduleNameExists", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var name string

		httpRes, err := apiClient.DeliveryGroupsAPIs .DeliveryGroupsCheckRebootScheduleNameExists(context.Background(), nameOrId, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeliveryGroupsAPIs Service DeliveryGroupsCreateDeliveryGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DeliveryGroupsAPIs .DeliveryGroupsCreateDeliveryGroup(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeliveryGroupsAPIs Service DeliveryGroupsCreateDeliveryGroupAdvancedAccessPolicy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.DeliveryGroupsAPIs .DeliveryGroupsCreateDeliveryGroupAdvancedAccessPolicy(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeliveryGroupsAPIs Service DeliveryGroupsCreateDeliveryGroupPowerTimeScheme", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.DeliveryGroupsAPIs .DeliveryGroupsCreateDeliveryGroupPowerTimeScheme(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeliveryGroupsAPIs Service DeliveryGroupsCreateDeliveryGroupRebootSchedule", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.DeliveryGroupsAPIs .DeliveryGroupsCreateDeliveryGroupRebootSchedule(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeliveryGroupsAPIs Service DeliveryGroupsDeleteDeliveryGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string

		httpRes, err := apiClient.DeliveryGroupsAPIs .DeliveryGroupsDeleteDeliveryGroup(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeliveryGroupsAPIs Service DeliveryGroupsDeleteDeliveryGroupAdvancedAccessPolicy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var policyId string

		httpRes, err := apiClient.DeliveryGroupsAPIs .DeliveryGroupsDeleteDeliveryGroupAdvancedAccessPolicy(context.Background(), nameOrId, policyId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeliveryGroupsAPIs Service DeliveryGroupsDeleteDeliveryGroupPowerTimeScheme", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var schemeNameOrId string

		httpRes, err := apiClient.DeliveryGroupsAPIs .DeliveryGroupsDeleteDeliveryGroupPowerTimeScheme(context.Background(), nameOrId, schemeNameOrId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeliveryGroupsAPIs Service DeliveryGroupsDeleteDeliveryGroupRebootSchedule", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var scheduleNameOrId string

		httpRes, err := apiClient.DeliveryGroupsAPIs .DeliveryGroupsDeleteDeliveryGroupRebootSchedule(context.Background(), nameOrId, scheduleNameOrId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeliveryGroupsAPIs Service DeliveryGroupsDoAddApplications", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string

		httpRes, err := apiClient.DeliveryGroupsAPIs .DeliveryGroupsDoAddApplications(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeliveryGroupsAPIs Service DeliveryGroupsDoAddMachines", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.DeliveryGroupsAPIs .DeliveryGroupsDoAddMachines(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeliveryGroupsAPIs Service DeliveryGroupsDoDeliveryGroupSearch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DeliveryGroupsAPIs .DeliveryGroupsDoDeliveryGroupSearch(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeliveryGroupsAPIs Service DeliveryGroupsDoRemoveApplicationGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var appGroupNameOrId string

		httpRes, err := apiClient.DeliveryGroupsAPIs .DeliveryGroupsDoRemoveApplicationGroups(context.Background(), nameOrId, appGroupNameOrId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeliveryGroupsAPIs Service DeliveryGroupsDoRemoveApplications", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var appNameOrId string

		httpRes, err := apiClient.DeliveryGroupsAPIs .DeliveryGroupsDoRemoveApplications(context.Background(), nameOrId, appNameOrId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeliveryGroupsAPIs Service DeliveryGroupsDoRemoveMachines", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var machineNameOrId string

		httpRes, err := apiClient.DeliveryGroupsAPIs .DeliveryGroupsDoRemoveMachines(context.Background(), nameOrId, machineNameOrId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeliveryGroupsAPIs Service DeliveryGroupsGetDeiliveryGroupProjectedAutoscaleMachines", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.DeliveryGroupsAPIs .DeliveryGroupsGetDeiliveryGroupProjectedAutoscaleMachines(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeliveryGroupsAPIs Service DeliveryGroupsGetDeliveryGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.DeliveryGroupsAPIs .DeliveryGroupsGetDeliveryGroup(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeliveryGroupsAPIs Service DeliveryGroupsGetDeliveryGroupAdvancedAccessPolicies", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.DeliveryGroupsAPIs .DeliveryGroupsGetDeliveryGroupAdvancedAccessPolicies(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeliveryGroupsAPIs Service DeliveryGroupsGetDeliveryGroupAdvancedAccessPolicy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var policyId string

		resp, httpRes, err := apiClient.DeliveryGroupsAPIs .DeliveryGroupsGetDeliveryGroupAdvancedAccessPolicy(context.Background(), nameOrId, policyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeliveryGroupsAPIs Service DeliveryGroupsGetDeliveryGroupApplications", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.DeliveryGroupsAPIs .DeliveryGroupsGetDeliveryGroupApplications(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeliveryGroupsAPIs Service DeliveryGroupsGetDeliveryGroupMachines", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.DeliveryGroupsAPIs .DeliveryGroupsGetDeliveryGroupMachines(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeliveryGroupsAPIs Service DeliveryGroupsGetDeliveryGroupPowerTimeScheme", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var schemeNameOrId string

		resp, httpRes, err := apiClient.DeliveryGroupsAPIs .DeliveryGroupsGetDeliveryGroupPowerTimeScheme(context.Background(), nameOrId, schemeNameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeliveryGroupsAPIs Service DeliveryGroupsGetDeliveryGroupPowerTimeSchemes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.DeliveryGroupsAPIs .DeliveryGroupsGetDeliveryGroupPowerTimeSchemes(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeliveryGroupsAPIs Service DeliveryGroupsGetDeliveryGroupRebootSchedule", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var scheduleNameOrId string

		resp, httpRes, err := apiClient.DeliveryGroupsAPIs .DeliveryGroupsGetDeliveryGroupRebootSchedule(context.Background(), nameOrId, scheduleNameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeliveryGroupsAPIs Service DeliveryGroupsGetDeliveryGroupRebootSchedules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.DeliveryGroupsAPIs .DeliveryGroupsGetDeliveryGroupRebootSchedules(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeliveryGroupsAPIs Service DeliveryGroupsGetDeliveryGroupStartMenuApplications", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.DeliveryGroupsAPIs .DeliveryGroupsGetDeliveryGroupStartMenuApplications(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeliveryGroupsAPIs Service DeliveryGroupsGetDeliveryGroupTags", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.DeliveryGroupsAPIs .DeliveryGroupsGetDeliveryGroupTags(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeliveryGroupsAPIs Service DeliveryGroupsGetDeliveryGroupTestReport", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.DeliveryGroupsAPIs .DeliveryGroupsGetDeliveryGroupTestReport(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeliveryGroupsAPIs Service DeliveryGroupsGetDeliveryGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DeliveryGroupsAPIs .DeliveryGroupsGetDeliveryGroups(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeliveryGroupsAPIs Service DeliveryGroupsGetDeliveryGroupsAdministrators", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.DeliveryGroupsAPIs .DeliveryGroupsGetDeliveryGroupsAdministrators(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeliveryGroupsAPIs Service DeliveryGroupsGetDeliveryGroupsApplicationGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.DeliveryGroupsAPIs .DeliveryGroupsGetDeliveryGroupsApplicationGroups(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeliveryGroupsAPIs Service DeliveryGroupsGetDeliveryGroupsDesktops", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.DeliveryGroupsAPIs .DeliveryGroupsGetDeliveryGroupsDesktops(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeliveryGroupsAPIs Service DeliveryGroupsGetDeliveryGroupsMachineCatalogDetails", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var id string

		resp, httpRes, err := apiClient.DeliveryGroupsAPIs .DeliveryGroupsGetDeliveryGroupsMachineCatalogDetails(context.Background(), nameOrId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeliveryGroupsAPIs Service DeliveryGroupsGetDeliveryGroupsMachineCatalogs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.DeliveryGroupsAPIs .DeliveryGroupsGetDeliveryGroupsMachineCatalogs(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeliveryGroupsAPIs Service DeliveryGroupsGetDeliveryGroupsUsage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.DeliveryGroupsAPIs .DeliveryGroupsGetDeliveryGroupsUsage(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeliveryGroupsAPIs Service DeliveryGroupsPatchDeliveryGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string

		httpRes, err := apiClient.DeliveryGroupsAPIs .DeliveryGroupsPatchDeliveryGroup(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeliveryGroupsAPIs Service DeliveryGroupsPatchDeliveryGroupAdvancedAccessPolicy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var policyId string

		resp, httpRes, err := apiClient.DeliveryGroupsAPIs .DeliveryGroupsPatchDeliveryGroupAdvancedAccessPolicy(context.Background(), nameOrId, policyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeliveryGroupsAPIs Service DeliveryGroupsPatchDeliveryGroupPowerTimeScheme", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var schemeNameOrId string

		resp, httpRes, err := apiClient.DeliveryGroupsAPIs .DeliveryGroupsPatchDeliveryGroupPowerTimeScheme(context.Background(), nameOrId, schemeNameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeliveryGroupsAPIs Service DeliveryGroupsPatchDeliveryGroupRebootSchedule", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var scheduleNameOrId string

		resp, httpRes, err := apiClient.DeliveryGroupsAPIs .DeliveryGroupsPatchDeliveryGroupRebootSchedule(context.Background(), nameOrId, scheduleNameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeliveryGroupsAPIs Service DeliveryGroupsRemoveDeliveryGroupMachineCatalog", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var catalogNameOrId string

		httpRes, err := apiClient.DeliveryGroupsAPIs .DeliveryGroupsRemoveDeliveryGroupMachineCatalog(context.Background(), nameOrId, catalogNameOrId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeliveryGroupsAPIs Service DeliveryGroupsRemoveDeliveryGroupTags", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string
		var tagNameOrId string

		httpRes, err := apiClient.DeliveryGroupsAPIs .DeliveryGroupsRemoveDeliveryGroupTags(context.Background(), nameOrId, tagNameOrId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeliveryGroupsAPIs Service DeliveryGroupsSetDeliveryGroupTags", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string

		httpRes, err := apiClient.DeliveryGroupsAPIs .DeliveryGroupsSetDeliveryGroupTags(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeliveryGroupsAPIs Service DeliveryGroupsStartDeliveryGroupRebootCycle", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string

		httpRes, err := apiClient.DeliveryGroupsAPIs .DeliveryGroupsStartDeliveryGroupRebootCycle(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeliveryGroupsAPIs Service DeliveryGroupsTestDeliveryGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameOrId string

		resp, httpRes, err := apiClient.DeliveryGroupsAPIs .DeliveryGroupsTestDeliveryGroup(context.Background(), nameOrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeliveryGroupsAPIs Service DeliveryGroupsTestDeliveryGroupExists", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DeliveryGroupsAPIs .DeliveryGroupsTestDeliveryGroupExists(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
