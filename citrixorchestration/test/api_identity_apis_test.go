/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

Testing IdentityAPIsDAASService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package citrixorchestration

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/citrix/citrix-daas-rest-go/citrixorchestration"
)

func Test_citrixorchestration_IdentityAPIsDAASService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test IdentityAPIsDAASService IdentityAddAzureAdSecurityGroupMember", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var azureAdTenantId string
		var groupId string
		var refGroupId string

		httpRes, err := apiClient.IdentityAPIsDAAS.IdentityAddAzureAdSecurityGroupMember(context.Background(), azureAdTenantId, groupId, refGroupId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityAPIsDAASService IdentityCreateMachine", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.IdentityAPIsDAAS.IdentityCreateMachine(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityAPIsDAASService IdentityCreateServiceAccount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.IdentityAPIsDAAS.IdentityCreateServiceAccount(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityAPIsDAASService IdentityDeleteMachine", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var machine string

		httpRes, err := apiClient.IdentityAPIsDAAS.IdentityDeleteMachine(context.Background(), machine).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityAPIsDAASService IdentityDeleteServiceAccount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceAccountUid string

		httpRes, err := apiClient.IdentityAPIsDAAS.IdentityDeleteServiceAccount(context.Background(), serviceAccountUid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityAPIsDAASService IdentityGetAzureADSecurityGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var azureAdTenantId string
		var groupId string

		resp, httpRes, err := apiClient.IdentityAPIsDAAS.IdentityGetAzureADSecurityGroups(context.Background(), azureAdTenantId, groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityAPIsDAASService IdentityGetAzureAdSecurityGroupMember", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var azureAdTenantId string
		var groupId string

		resp, httpRes, err := apiClient.IdentityAPIsDAAS.IdentityGetAzureAdSecurityGroupMember(context.Background(), azureAdTenantId, groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityAPIsDAASService IdentityGetContainer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var container string

		resp, httpRes, err := apiClient.IdentityAPIsDAAS.IdentityGetContainer(context.Background(), container).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityAPIsDAASService IdentityGetContainers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.IdentityAPIsDAAS.IdentityGetContainers(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityAPIsDAASService IdentityGetDirectories", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.IdentityAPIsDAAS.IdentityGetDirectories(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityAPIsDAASService IdentityGetDomain", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domain string

		resp, httpRes, err := apiClient.IdentityAPIsDAAS.IdentityGetDomain(context.Background(), domain).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityAPIsDAASService IdentityGetDomainAzureADCustomDomain", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domain string

		resp, httpRes, err := apiClient.IdentityAPIsDAAS.IdentityGetDomainAzureADCustomDomain(context.Background(), domain).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityAPIsDAASService IdentityGetDomains", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.IdentityAPIsDAAS.IdentityGetDomains(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityAPIsDAASService IdentityGetForest", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var forest string

		resp, httpRes, err := apiClient.IdentityAPIsDAAS.IdentityGetForest(context.Background(), forest).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityAPIsDAASService IdentityGetForests", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.IdentityAPIsDAAS.IdentityGetForests(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityAPIsDAASService IdentityGetMachine", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var machine string

		resp, httpRes, err := apiClient.IdentityAPIsDAAS.IdentityGetMachine(context.Background(), machine).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityAPIsDAASService IdentityGetMachines", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.IdentityAPIsDAAS.IdentityGetMachines(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityAPIsDAASService IdentityGetServiceAccount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceAccountUid string

		resp, httpRes, err := apiClient.IdentityAPIsDAAS.IdentityGetServiceAccount(context.Background(), serviceAccountUid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityAPIsDAASService IdentityGetServiceAccountCapabilityPatchPreview", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceAccountUid string

		resp, httpRes, err := apiClient.IdentityAPIsDAAS.IdentityGetServiceAccountCapabilityPatchPreview(context.Background(), serviceAccountUid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityAPIsDAASService IdentityGetServiceAccountTestReport", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceAccountUid string

		resp, httpRes, err := apiClient.IdentityAPIsDAAS.IdentityGetServiceAccountTestReport(context.Background(), serviceAccountUid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityAPIsDAASService IdentityGetServiceAccounts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.IdentityAPIsDAAS.IdentityGetServiceAccounts(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityAPIsDAASService IdentityGetSite", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var site string

		resp, httpRes, err := apiClient.IdentityAPIsDAAS.IdentityGetSite(context.Background(), site).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityAPIsDAASService IdentityGetSites", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.IdentityAPIsDAAS.IdentityGetSites(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityAPIsDAASService IdentityGetUser", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userOrGroup string

		resp, httpRes, err := apiClient.IdentityAPIsDAAS.IdentityGetUser(context.Background(), userOrGroup).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityAPIsDAASService IdentityGetUsers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.IdentityAPIsDAAS.IdentityGetUsers(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityAPIsDAASService IdentityQueryAzureAdSecurityGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var azureAdTenantId string

		resp, httpRes, err := apiClient.IdentityAPIsDAAS.IdentityQueryAzureAdSecurityGroups(context.Background(), azureAdTenantId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityAPIsDAASService IdentitySetServiceAccount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceAccountUid string

		resp, httpRes, err := apiClient.IdentityAPIsDAAS.IdentitySetServiceAccount(context.Background(), serviceAccountUid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityAPIsDAASService IdentityTestServiceAccount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceAccountUid string

		resp, httpRes, err := apiClient.IdentityAPIsDAAS.IdentityTestServiceAccount(context.Background(), serviceAccountUid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityAPIsDAASService IdentityUpdateMachine", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var machine string

		resp, httpRes, err := apiClient.IdentityAPIsDAAS.IdentityUpdateMachine(context.Background(), machine).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityAPIsDAASService IdentityUpdateUser", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var user string

		resp, httpRes, err := apiClient.IdentityAPIsDAAS.IdentityUpdateUser(context.Background(), user).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityAPIsDAASService IdentityValidateUser", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.IdentityAPIsDAAS.IdentityValidateUser(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
