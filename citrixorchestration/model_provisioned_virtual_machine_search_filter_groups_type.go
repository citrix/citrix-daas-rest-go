/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-onprem-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
	"fmt"
)

// ProvisionedVirtualMachineSearchFilterGroupsType The search filter groups type
type ProvisionedVirtualMachineSearchFilterGroupsType string

// List of ProvisionedVirtualMachineSearchFilterGroupsType
const (
	PROVISIONEDVIRTUALMACHINESEARCHFILTERGROUPSTYPE_OR ProvisionedVirtualMachineSearchFilterGroupsType = "Or"
	PROVISIONEDVIRTUALMACHINESEARCHFILTERGROUPSTYPE_AND ProvisionedVirtualMachineSearchFilterGroupsType = "And"
)

// All allowed values of ProvisionedVirtualMachineSearchFilterGroupsType enum
var AllowedProvisionedVirtualMachineSearchFilterGroupsTypeEnumValues = []ProvisionedVirtualMachineSearchFilterGroupsType{
	"Or",
	"And",
}

func (v *ProvisionedVirtualMachineSearchFilterGroupsType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	
	*v = ProvisionedVirtualMachineSearchFilterGroupsType(value)
	return nil
}

// NewProvisionedVirtualMachineSearchFilterGroupsTypeFromValue returns a pointer to a valid ProvisionedVirtualMachineSearchFilterGroupsType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewProvisionedVirtualMachineSearchFilterGroupsTypeFromValue(v string) (*ProvisionedVirtualMachineSearchFilterGroupsType, error) {
	ev := ProvisionedVirtualMachineSearchFilterGroupsType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ProvisionedVirtualMachineSearchFilterGroupsType: valid values are %v", v, AllowedProvisionedVirtualMachineSearchFilterGroupsTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ProvisionedVirtualMachineSearchFilterGroupsType) IsValid() bool {
	for _, existing := range AllowedProvisionedVirtualMachineSearchFilterGroupsTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ProvisionedVirtualMachineSearchFilterGroupsType value
func (v ProvisionedVirtualMachineSearchFilterGroupsType) Ptr() *ProvisionedVirtualMachineSearchFilterGroupsType {
	return &v
}

type NullableProvisionedVirtualMachineSearchFilterGroupsType struct {
	value *ProvisionedVirtualMachineSearchFilterGroupsType
	isSet bool
}

func (v NullableProvisionedVirtualMachineSearchFilterGroupsType) Get() *ProvisionedVirtualMachineSearchFilterGroupsType {
	return v.value
}

func (v *NullableProvisionedVirtualMachineSearchFilterGroupsType) Set(val *ProvisionedVirtualMachineSearchFilterGroupsType) {
	v.value = val
	v.isSet = true
}

func (v NullableProvisionedVirtualMachineSearchFilterGroupsType) IsSet() bool {
	return v.isSet
}

func (v *NullableProvisionedVirtualMachineSearchFilterGroupsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProvisionedVirtualMachineSearchFilterGroupsType(val *ProvisionedVirtualMachineSearchFilterGroupsType) *NullableProvisionedVirtualMachineSearchFilterGroupsType {
	return &NullableProvisionedVirtualMachineSearchFilterGroupsType{value: val, isSet: true}
}

func (v NullableProvisionedVirtualMachineSearchFilterGroupsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProvisionedVirtualMachineSearchFilterGroupsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

