/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
)

// checks if the EnumerationType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EnumerationType{}

// EnumerationType Enumeration type
type EnumerationType struct {
	// Name of the type.
	TypeName NullableString `json:"typeName,omitempty"`
	// Members of the type.
	Members []EnumerationMember `json:"members,omitempty"`
}

// NewEnumerationType instantiates a new EnumerationType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnumerationType() *EnumerationType {
	this := EnumerationType{}
	return &this
}

// NewEnumerationTypeWithDefaults instantiates a new EnumerationType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnumerationTypeWithDefaults() *EnumerationType {
	this := EnumerationType{}
	return &this
}

// GetTypeName returns the TypeName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EnumerationType) GetTypeName() string {
	if o == nil || IsNil(o.TypeName.Get()) {
		var ret string
		return ret
	}
	return *o.TypeName.Get()
}

// GetTypeNameOk returns a tuple with the TypeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EnumerationType) GetTypeNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TypeName.Get(), o.TypeName.IsSet()
}

// HasTypeName returns a boolean if a field has been set.
func (o *EnumerationType) HasTypeName() bool {
	if o != nil && o.TypeName.IsSet() {
		return true
	}

	return false
}

// SetTypeName gets a reference to the given NullableString and assigns it to the TypeName field.
func (o *EnumerationType) SetTypeName(v string) {
	o.TypeName.Set(&v)
}
// SetTypeNameNil sets the value for TypeName to be an explicit nil
func (o *EnumerationType) SetTypeNameNil() {
	o.TypeName.Set(nil)
}

// UnsetTypeName ensures that no value is present for TypeName, not even an explicit nil
func (o *EnumerationType) UnsetTypeName() {
	o.TypeName.Unset()
}

// GetMembers returns the Members field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EnumerationType) GetMembers() []EnumerationMember {
	if o == nil {
		var ret []EnumerationMember
		return ret
	}
	return o.Members
}

// GetMembersOk returns a tuple with the Members field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EnumerationType) GetMembersOk() ([]EnumerationMember, bool) {
	if o == nil || IsNil(o.Members) {
		return nil, false
	}
	return o.Members, true
}

// HasMembers returns a boolean if a field has been set.
func (o *EnumerationType) HasMembers() bool {
	if o != nil && IsNil(o.Members) {
		return true
	}

	return false
}

// SetMembers gets a reference to the given []EnumerationMember and assigns it to the Members field.
func (o *EnumerationType) SetMembers(v []EnumerationMember) {
	o.Members = v
}

func (o EnumerationType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EnumerationType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.TypeName.IsSet() {
		toSerialize["typeName"] = o.TypeName.Get()
	}
	if o.Members != nil {
		toSerialize["members"] = o.Members
	}
	return toSerialize, nil
}

type NullableEnumerationType struct {
	value *EnumerationType
	isSet bool
}

func (v NullableEnumerationType) Get() *EnumerationType {
	return v.value
}

func (v *NullableEnumerationType) Set(val *EnumerationType) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumerationType) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumerationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumerationType(val *EnumerationType) *NullableEnumerationType {
	return &NullableEnumerationType{value: val, isSet: true}
}

func (v NullableEnumerationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumerationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


