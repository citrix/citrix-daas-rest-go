/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-onprem-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
)

// checks if the EditLicenseProductEditionRequestModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EditLicenseProductEditionRequestModel{}

// EditLicenseProductEditionRequestModel Request model to edit license product edition
type EditLicenseProductEditionRequestModel struct {
	// Use License Activation Service and should be used exclusively
	UseLicenseActivationService NullableBool    `json:"UseLicenseActivationService,omitempty"`
	LicenseProduct              *LicenseProduct `json:"LicenseProduct,omitempty"`
	ProductEdition              *ProductEdition `json:"ProductEdition,omitempty"`
	LicenseModel                *LicenseModel   `json:"LicenseModel,omitempty"`
}

// NewEditLicenseProductEditionRequestModel instantiates a new EditLicenseProductEditionRequestModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEditLicenseProductEditionRequestModel() *EditLicenseProductEditionRequestModel {
	this := EditLicenseProductEditionRequestModel{}
	return &this
}

// NewEditLicenseProductEditionRequestModelWithDefaults instantiates a new EditLicenseProductEditionRequestModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEditLicenseProductEditionRequestModelWithDefaults() *EditLicenseProductEditionRequestModel {
	this := EditLicenseProductEditionRequestModel{}
	return &this
}

// GetUseLicenseActivationService returns the UseLicenseActivationService field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EditLicenseProductEditionRequestModel) GetUseLicenseActivationService() bool {
	if o == nil || IsNil(o.UseLicenseActivationService.Get()) {
		var ret bool
		return ret
	}
	return *o.UseLicenseActivationService.Get()
}

// GetUseLicenseActivationServiceOk returns a tuple with the UseLicenseActivationService field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EditLicenseProductEditionRequestModel) GetUseLicenseActivationServiceOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.UseLicenseActivationService.Get(), o.UseLicenseActivationService.IsSet()
}

// HasUseLicenseActivationService returns a boolean if a field has been set.
func (o *EditLicenseProductEditionRequestModel) HasUseLicenseActivationService() bool {
	if o != nil && o.UseLicenseActivationService.IsSet() {
		return true
	}

	return false
}

// SetUseLicenseActivationService gets a reference to the given NullableBool and assigns it to the UseLicenseActivationService field.
func (o *EditLicenseProductEditionRequestModel) SetUseLicenseActivationService(v bool) {
	o.UseLicenseActivationService.Set(&v)
}

// SetUseLicenseActivationServiceNil sets the value for UseLicenseActivationService to be an explicit nil
func (o *EditLicenseProductEditionRequestModel) SetUseLicenseActivationServiceNil() {
	o.UseLicenseActivationService.Set(nil)
}

// UnsetUseLicenseActivationService ensures that no value is present for UseLicenseActivationService, not even an explicit nil
func (o *EditLicenseProductEditionRequestModel) UnsetUseLicenseActivationService() {
	o.UseLicenseActivationService.Unset()
}

// GetLicenseProduct returns the LicenseProduct field value if set, zero value otherwise.
func (o *EditLicenseProductEditionRequestModel) GetLicenseProduct() LicenseProduct {
	if o == nil || IsNil(o.LicenseProduct) {
		var ret LicenseProduct
		return ret
	}
	return *o.LicenseProduct
}

// GetLicenseProductOk returns a tuple with the LicenseProduct field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditLicenseProductEditionRequestModel) GetLicenseProductOk() (*LicenseProduct, bool) {
	if o == nil || IsNil(o.LicenseProduct) {
		return nil, false
	}
	return o.LicenseProduct, true
}

// HasLicenseProduct returns a boolean if a field has been set.
func (o *EditLicenseProductEditionRequestModel) HasLicenseProduct() bool {
	if o != nil && !IsNil(o.LicenseProduct) {
		return true
	}

	return false
}

// SetLicenseProduct gets a reference to the given LicenseProduct and assigns it to the LicenseProduct field.
func (o *EditLicenseProductEditionRequestModel) SetLicenseProduct(v LicenseProduct) {
	o.LicenseProduct = &v
}

// GetProductEdition returns the ProductEdition field value if set, zero value otherwise.
func (o *EditLicenseProductEditionRequestModel) GetProductEdition() ProductEdition {
	if o == nil || IsNil(o.ProductEdition) {
		var ret ProductEdition
		return ret
	}
	return *o.ProductEdition
}

// GetProductEditionOk returns a tuple with the ProductEdition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditLicenseProductEditionRequestModel) GetProductEditionOk() (*ProductEdition, bool) {
	if o == nil || IsNil(o.ProductEdition) {
		return nil, false
	}
	return o.ProductEdition, true
}

// HasProductEdition returns a boolean if a field has been set.
func (o *EditLicenseProductEditionRequestModel) HasProductEdition() bool {
	if o != nil && !IsNil(o.ProductEdition) {
		return true
	}

	return false
}

// SetProductEdition gets a reference to the given ProductEdition and assigns it to the ProductEdition field.
func (o *EditLicenseProductEditionRequestModel) SetProductEdition(v ProductEdition) {
	o.ProductEdition = &v
}

// GetLicenseModel returns the LicenseModel field value if set, zero value otherwise.
func (o *EditLicenseProductEditionRequestModel) GetLicenseModel() LicenseModel {
	if o == nil || IsNil(o.LicenseModel) {
		var ret LicenseModel
		return ret
	}
	return *o.LicenseModel
}

// GetLicenseModelOk returns a tuple with the LicenseModel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditLicenseProductEditionRequestModel) GetLicenseModelOk() (*LicenseModel, bool) {
	if o == nil || IsNil(o.LicenseModel) {
		return nil, false
	}
	return o.LicenseModel, true
}

// HasLicenseModel returns a boolean if a field has been set.
func (o *EditLicenseProductEditionRequestModel) HasLicenseModel() bool {
	if o != nil && !IsNil(o.LicenseModel) {
		return true
	}

	return false
}

// SetLicenseModel gets a reference to the given LicenseModel and assigns it to the LicenseModel field.
func (o *EditLicenseProductEditionRequestModel) SetLicenseModel(v LicenseModel) {
	o.LicenseModel = &v
}

func (o EditLicenseProductEditionRequestModel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EditLicenseProductEditionRequestModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.UseLicenseActivationService.IsSet() {
		toSerialize["UseLicenseActivationService"] = o.UseLicenseActivationService.Get()
	}
	if !IsNil(o.LicenseProduct) {
		toSerialize["LicenseProduct"] = o.LicenseProduct
	}
	if !IsNil(o.ProductEdition) {
		toSerialize["ProductEdition"] = o.ProductEdition
	}
	if !IsNil(o.LicenseModel) {
		toSerialize["LicenseModel"] = o.LicenseModel
	}
	return toSerialize, nil
}

type NullableEditLicenseProductEditionRequestModel struct {
	value *EditLicenseProductEditionRequestModel
	isSet bool
}

func (v NullableEditLicenseProductEditionRequestModel) Get() *EditLicenseProductEditionRequestModel {
	return v.value
}

func (v *NullableEditLicenseProductEditionRequestModel) Set(val *EditLicenseProductEditionRequestModel) {
	v.value = val
	v.isSet = true
}

func (v NullableEditLicenseProductEditionRequestModel) IsSet() bool {
	return v.isSet
}

func (v *NullableEditLicenseProductEditionRequestModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEditLicenseProductEditionRequestModel(val *EditLicenseProductEditionRequestModel) *NullableEditLicenseProductEditionRequestModel {
	return &NullableEditLicenseProductEditionRequestModel{value: val, isSet: true}
}

func (v NullableEditLicenseProductEditionRequestModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEditLicenseProductEditionRequestModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
