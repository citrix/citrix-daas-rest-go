/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// AppVIsolationGroupsAPIsDAASService AppVIsolationGroupsAPIsDAAS service
type AppVIsolationGroupsAPIsDAASService service

type ApiAppVIsolationGroupsCreateAppVIsolationGroupRequest struct {
	ctx context.Context
	ApiService *AppVIsolationGroupsAPIsDAASService
	citrixCustomerId *string
	citrixInstanceId *string
	userAgent *string
	createAppVIsolationGroupRequestModel *CreateAppVIsolationGroupRequestModel
	async *bool
	authorization *string
	citrixTransactionId *string
	xActionName *string
	accept *string
	citrixLocale *string
}

// Citrix Cloud Customer ID.
func (r ApiAppVIsolationGroupsCreateAppVIsolationGroupRequest) CitrixCustomerId(citrixCustomerId string) ApiAppVIsolationGroupsCreateAppVIsolationGroupRequest {
	r.citrixCustomerId = &citrixCustomerId
	return r
}

// Citrix Cloud Instance (Site) ID.
func (r ApiAppVIsolationGroupsCreateAppVIsolationGroupRequest) CitrixInstanceId(citrixInstanceId string) ApiAppVIsolationGroupsCreateAppVIsolationGroupRequest {
	r.citrixInstanceId = &citrixInstanceId
	return r
}

// User Agent type of the request.
func (r ApiAppVIsolationGroupsCreateAppVIsolationGroupRequest) UserAgent(userAgent string) ApiAppVIsolationGroupsCreateAppVIsolationGroupRequest {
	r.userAgent = &userAgent
	return r
}

// Request model of the new IsolationGroup.
func (r ApiAppVIsolationGroupsCreateAppVIsolationGroupRequest) CreateAppVIsolationGroupRequestModel(createAppVIsolationGroupRequestModel CreateAppVIsolationGroupRequestModel) ApiAppVIsolationGroupsCreateAppVIsolationGroupRequest {
	r.createAppVIsolationGroupRequestModel = &createAppVIsolationGroupRequestModel
	return r
}

// If &#x60;true&#x60;, the tags will be modified as a background task. The task will have JobType CreateAppVIsolationGroup. When the task is complete it will redirect to GetAppVIsolationGroups.
func (r ApiAppVIsolationGroupsCreateAppVIsolationGroupRequest) Async(async bool) ApiAppVIsolationGroupsCreateAppVIsolationGroupRequest {
	r.async = &async
	return r
}

// Citrix Cloud authorization header: CWSAuth Bearer&#x3D;{token}
func (r ApiAppVIsolationGroupsCreateAppVIsolationGroupRequest) Authorization(authorization string) ApiAppVIsolationGroupsCreateAppVIsolationGroupRequest {
	r.authorization = &authorization
	return r
}

// Transaction ID that will be used to track this request. If not provided, a new GUID will be generated and returned.
func (r ApiAppVIsolationGroupsCreateAppVIsolationGroupRequest) CitrixTransactionId(citrixTransactionId string) ApiAppVIsolationGroupsCreateAppVIsolationGroupRequest {
	r.citrixTransactionId = &citrixTransactionId
	return r
}

// Orchestration Action Name
func (r ApiAppVIsolationGroupsCreateAppVIsolationGroupRequest) XActionName(xActionName string) ApiAppVIsolationGroupsCreateAppVIsolationGroupRequest {
	r.xActionName = &xActionName
	return r
}

// Must accept application/json.
func (r ApiAppVIsolationGroupsCreateAppVIsolationGroupRequest) Accept(accept string) ApiAppVIsolationGroupsCreateAppVIsolationGroupRequest {
	r.accept = &accept
	return r
}

// Locale of the request.
func (r ApiAppVIsolationGroupsCreateAppVIsolationGroupRequest) CitrixLocale(citrixLocale string) ApiAppVIsolationGroupsCreateAppVIsolationGroupRequest {
	r.citrixLocale = &citrixLocale
	return r
}

func (r ApiAppVIsolationGroupsCreateAppVIsolationGroupRequest) Execute() (*http.Response, error) {
	return r.ApiService.AppVIsolationGroupsCreateAppVIsolationGroupExecute(r)
}

/*
AppVIsolationGroupsCreateAppVIsolationGroup Create an App-V IsolationGroup in the site

Create requested App-V IsolationGroup in the site.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAppVIsolationGroupsCreateAppVIsolationGroupRequest
*/
func (a *AppVIsolationGroupsAPIsDAASService) AppVIsolationGroupsCreateAppVIsolationGroup(ctx context.Context) ApiAppVIsolationGroupsCreateAppVIsolationGroupRequest {
	return ApiAppVIsolationGroupsCreateAppVIsolationGroupRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *AppVIsolationGroupsAPIsDAASService) AppVIsolationGroupsCreateAppVIsolationGroupExecute(r ApiAppVIsolationGroupsCreateAppVIsolationGroupRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppVIsolationGroupsAPIsDAASService.AppVIsolationGroupsCreateAppVIsolationGroup")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/AppVIsolationGroups"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.citrixCustomerId == nil {
		return nil, reportError("citrixCustomerId is required and must be specified")
	}
	if r.citrixInstanceId == nil {
		return nil, reportError("citrixInstanceId is required and must be specified")
	}
	if r.userAgent == nil {
		return nil, reportError("userAgent is required and must be specified")
	}
	if r.createAppVIsolationGroupRequestModel == nil {
		return nil, reportError("createAppVIsolationGroupRequestModel is required and must be specified")
	}

	if r.async != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "async", r.async, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-CustomerId", r.citrixCustomerId, "")
	parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-InstanceId", r.citrixInstanceId, "")
	parameterAddToHeaderOrQuery(localVarHeaderParams, "User-Agent", r.userAgent, "")
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Authorization", r.authorization, "")
	}
	if r.citrixTransactionId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-TransactionId", r.citrixTransactionId, "")
	}
	if r.xActionName != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-ActionName", r.xActionName, "")
	}
	if r.accept != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept", r.accept, "")
	}
	if r.citrixLocale != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-Locale", r.citrixLocale, "")
	}
	// body params
	localVarPostBody = r.createAppVIsolationGroupRequestModel
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 406 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 415 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAppVIsolationGroupsDeleteAppVIsolationGroupRequest struct {
	ctx context.Context
	ApiService *AppVIsolationGroupsAPIsDAASService
	nameOrId string
	citrixCustomerId *string
	citrixInstanceId *string
	userAgent *string
	async *bool
	authorization *string
	citrixTransactionId *string
	xActionName *string
	accept *string
	citrixLocale *string
}

// Citrix Cloud Customer ID.
func (r ApiAppVIsolationGroupsDeleteAppVIsolationGroupRequest) CitrixCustomerId(citrixCustomerId string) ApiAppVIsolationGroupsDeleteAppVIsolationGroupRequest {
	r.citrixCustomerId = &citrixCustomerId
	return r
}

// Citrix Cloud Instance (Site) ID.
func (r ApiAppVIsolationGroupsDeleteAppVIsolationGroupRequest) CitrixInstanceId(citrixInstanceId string) ApiAppVIsolationGroupsDeleteAppVIsolationGroupRequest {
	r.citrixInstanceId = &citrixInstanceId
	return r
}

// User Agent type of the request.
func (r ApiAppVIsolationGroupsDeleteAppVIsolationGroupRequest) UserAgent(userAgent string) ApiAppVIsolationGroupsDeleteAppVIsolationGroupRequest {
	r.userAgent = &userAgent
	return r
}

// If &#x60;true&#x60;, the tags will be modified as a background task. The task will have JobType CreateAppVIsolationGroup. When the task is complete it will redirect to GetAppVIsolationGroups.
func (r ApiAppVIsolationGroupsDeleteAppVIsolationGroupRequest) Async(async bool) ApiAppVIsolationGroupsDeleteAppVIsolationGroupRequest {
	r.async = &async
	return r
}

// Citrix Cloud authorization header: CWSAuth Bearer&#x3D;{token}
func (r ApiAppVIsolationGroupsDeleteAppVIsolationGroupRequest) Authorization(authorization string) ApiAppVIsolationGroupsDeleteAppVIsolationGroupRequest {
	r.authorization = &authorization
	return r
}

// Transaction ID that will be used to track this request. If not provided, a new GUID will be generated and returned.
func (r ApiAppVIsolationGroupsDeleteAppVIsolationGroupRequest) CitrixTransactionId(citrixTransactionId string) ApiAppVIsolationGroupsDeleteAppVIsolationGroupRequest {
	r.citrixTransactionId = &citrixTransactionId
	return r
}

// Orchestration Action Name
func (r ApiAppVIsolationGroupsDeleteAppVIsolationGroupRequest) XActionName(xActionName string) ApiAppVIsolationGroupsDeleteAppVIsolationGroupRequest {
	r.xActionName = &xActionName
	return r
}

// Must accept application/json.
func (r ApiAppVIsolationGroupsDeleteAppVIsolationGroupRequest) Accept(accept string) ApiAppVIsolationGroupsDeleteAppVIsolationGroupRequest {
	r.accept = &accept
	return r
}

// Locale of the request.
func (r ApiAppVIsolationGroupsDeleteAppVIsolationGroupRequest) CitrixLocale(citrixLocale string) ApiAppVIsolationGroupsDeleteAppVIsolationGroupRequest {
	r.citrixLocale = &citrixLocale
	return r
}

func (r ApiAppVIsolationGroupsDeleteAppVIsolationGroupRequest) Execute() (*http.Response, error) {
	return r.ApiService.AppVIsolationGroupsDeleteAppVIsolationGroupExecute(r)
}

/*
AppVIsolationGroupsDeleteAppVIsolationGroup Delete an App-V IsolationGroup configured in the site.

Delete the specified App-V IsolationGroup .

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param nameOrId Name or UID of an isolationGroup.
 @return ApiAppVIsolationGroupsDeleteAppVIsolationGroupRequest
*/
func (a *AppVIsolationGroupsAPIsDAASService) AppVIsolationGroupsDeleteAppVIsolationGroup(ctx context.Context, nameOrId string) ApiAppVIsolationGroupsDeleteAppVIsolationGroupRequest {
	return ApiAppVIsolationGroupsDeleteAppVIsolationGroupRequest{
		ApiService: a,
		ctx: ctx,
		nameOrId: nameOrId,
	}
}

// Execute executes the request
func (a *AppVIsolationGroupsAPIsDAASService) AppVIsolationGroupsDeleteAppVIsolationGroupExecute(r ApiAppVIsolationGroupsDeleteAppVIsolationGroupRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppVIsolationGroupsAPIsDAASService.AppVIsolationGroupsDeleteAppVIsolationGroup")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/AppVIsolationGroups/{nameOrId}"
	localVarPath = strings.Replace(localVarPath, "{"+"nameOrId"+"}", url.PathEscape(parameterValueToString(r.nameOrId, "nameOrId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.citrixCustomerId == nil {
		return nil, reportError("citrixCustomerId is required and must be specified")
	}
	if r.citrixInstanceId == nil {
		return nil, reportError("citrixInstanceId is required and must be specified")
	}
	if r.userAgent == nil {
		return nil, reportError("userAgent is required and must be specified")
	}

	if r.async != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "async", r.async, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-CustomerId", r.citrixCustomerId, "")
	parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-InstanceId", r.citrixInstanceId, "")
	parameterAddToHeaderOrQuery(localVarHeaderParams, "User-Agent", r.userAgent, "")
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Authorization", r.authorization, "")
	}
	if r.citrixTransactionId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-TransactionId", r.citrixTransactionId, "")
	}
	if r.xActionName != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-ActionName", r.xActionName, "")
	}
	if r.accept != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept", r.accept, "")
	}
	if r.citrixLocale != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-Locale", r.citrixLocale, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 406 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAppVIsolationGroupsGetAppVIsolationGroupRequest struct {
	ctx context.Context
	ApiService *AppVIsolationGroupsAPIsDAASService
	nameOrId string
	citrixCustomerId *string
	citrixInstanceId *string
	userAgent *string
	async *bool
	authorization *string
	citrixTransactionId *string
	xActionName *string
	accept *string
	citrixLocale *string
}

// Citrix Cloud Customer ID.
func (r ApiAppVIsolationGroupsGetAppVIsolationGroupRequest) CitrixCustomerId(citrixCustomerId string) ApiAppVIsolationGroupsGetAppVIsolationGroupRequest {
	r.citrixCustomerId = &citrixCustomerId
	return r
}

// Citrix Cloud Instance (Site) ID.
func (r ApiAppVIsolationGroupsGetAppVIsolationGroupRequest) CitrixInstanceId(citrixInstanceId string) ApiAppVIsolationGroupsGetAppVIsolationGroupRequest {
	r.citrixInstanceId = &citrixInstanceId
	return r
}

// User Agent type of the request.
func (r ApiAppVIsolationGroupsGetAppVIsolationGroupRequest) UserAgent(userAgent string) ApiAppVIsolationGroupsGetAppVIsolationGroupRequest {
	r.userAgent = &userAgent
	return r
}

// If &#x60;true&#x60;, the tags will be modified as a background task. The task will have JobType GetAppVIsolationGroup.
func (r ApiAppVIsolationGroupsGetAppVIsolationGroupRequest) Async(async bool) ApiAppVIsolationGroupsGetAppVIsolationGroupRequest {
	r.async = &async
	return r
}

// Citrix Cloud authorization header: CWSAuth Bearer&#x3D;{token}
func (r ApiAppVIsolationGroupsGetAppVIsolationGroupRequest) Authorization(authorization string) ApiAppVIsolationGroupsGetAppVIsolationGroupRequest {
	r.authorization = &authorization
	return r
}

// Transaction ID that will be used to track this request. If not provided, a new GUID will be generated and returned.
func (r ApiAppVIsolationGroupsGetAppVIsolationGroupRequest) CitrixTransactionId(citrixTransactionId string) ApiAppVIsolationGroupsGetAppVIsolationGroupRequest {
	r.citrixTransactionId = &citrixTransactionId
	return r
}

// Orchestration Action Name
func (r ApiAppVIsolationGroupsGetAppVIsolationGroupRequest) XActionName(xActionName string) ApiAppVIsolationGroupsGetAppVIsolationGroupRequest {
	r.xActionName = &xActionName
	return r
}

// Must accept application/json.
func (r ApiAppVIsolationGroupsGetAppVIsolationGroupRequest) Accept(accept string) ApiAppVIsolationGroupsGetAppVIsolationGroupRequest {
	r.accept = &accept
	return r
}

// Locale of the request.
func (r ApiAppVIsolationGroupsGetAppVIsolationGroupRequest) CitrixLocale(citrixLocale string) ApiAppVIsolationGroupsGetAppVIsolationGroupRequest {
	r.citrixLocale = &citrixLocale
	return r
}

func (r ApiAppVIsolationGroupsGetAppVIsolationGroupRequest) Execute() (*AppVIsolationGroupResponseModel, *http.Response, error) {
	return r.ApiService.AppVIsolationGroupsGetAppVIsolationGroupExecute(r)
}

/*
AppVIsolationGroupsGetAppVIsolationGroup Get the specified App-V IsolationGroups configured in the site

Get the specified App-V IsolationGroups configured in the site.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param nameOrId Name or UID of an isolationGroup.
 @return ApiAppVIsolationGroupsGetAppVIsolationGroupRequest
*/
func (a *AppVIsolationGroupsAPIsDAASService) AppVIsolationGroupsGetAppVIsolationGroup(ctx context.Context, nameOrId string) ApiAppVIsolationGroupsGetAppVIsolationGroupRequest {
	return ApiAppVIsolationGroupsGetAppVIsolationGroupRequest{
		ApiService: a,
		ctx: ctx,
		nameOrId: nameOrId,
	}
}

// Execute executes the request
//  @return AppVIsolationGroupResponseModel
func (a *AppVIsolationGroupsAPIsDAASService) AppVIsolationGroupsGetAppVIsolationGroupExecute(r ApiAppVIsolationGroupsGetAppVIsolationGroupRequest) (*AppVIsolationGroupResponseModel, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppVIsolationGroupResponseModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppVIsolationGroupsAPIsDAASService.AppVIsolationGroupsGetAppVIsolationGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/AppVIsolationGroups/{nameOrId}"
	localVarPath = strings.Replace(localVarPath, "{"+"nameOrId"+"}", url.PathEscape(parameterValueToString(r.nameOrId, "nameOrId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.citrixCustomerId == nil {
		return localVarReturnValue, nil, reportError("citrixCustomerId is required and must be specified")
	}
	if r.citrixInstanceId == nil {
		return localVarReturnValue, nil, reportError("citrixInstanceId is required and must be specified")
	}
	if r.userAgent == nil {
		return localVarReturnValue, nil, reportError("userAgent is required and must be specified")
	}

	if r.async != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "async", r.async, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-CustomerId", r.citrixCustomerId, "")
	parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-InstanceId", r.citrixInstanceId, "")
	parameterAddToHeaderOrQuery(localVarHeaderParams, "User-Agent", r.userAgent, "")
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Authorization", r.authorization, "")
	}
	if r.citrixTransactionId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-TransactionId", r.citrixTransactionId, "")
	}
	if r.xActionName != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-ActionName", r.xActionName, "")
	}
	if r.accept != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept", r.accept, "")
	}
	if r.citrixLocale != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-Locale", r.citrixLocale, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 406 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAppVIsolationGroupsGetAppVIsolationGroupsRequest struct {
	ctx context.Context
	ApiService *AppVIsolationGroupsAPIsDAASService
	citrixCustomerId *string
	citrixInstanceId *string
	userAgent *string
	async *bool
	authorization *string
	citrixTransactionId *string
	xActionName *string
	accept *string
	citrixLocale *string
}

// Citrix Cloud Customer ID.
func (r ApiAppVIsolationGroupsGetAppVIsolationGroupsRequest) CitrixCustomerId(citrixCustomerId string) ApiAppVIsolationGroupsGetAppVIsolationGroupsRequest {
	r.citrixCustomerId = &citrixCustomerId
	return r
}

// Citrix Cloud Instance (Site) ID.
func (r ApiAppVIsolationGroupsGetAppVIsolationGroupsRequest) CitrixInstanceId(citrixInstanceId string) ApiAppVIsolationGroupsGetAppVIsolationGroupsRequest {
	r.citrixInstanceId = &citrixInstanceId
	return r
}

// User Agent type of the request.
func (r ApiAppVIsolationGroupsGetAppVIsolationGroupsRequest) UserAgent(userAgent string) ApiAppVIsolationGroupsGetAppVIsolationGroupsRequest {
	r.userAgent = &userAgent
	return r
}

func (r ApiAppVIsolationGroupsGetAppVIsolationGroupsRequest) Async(async bool) ApiAppVIsolationGroupsGetAppVIsolationGroupsRequest {
	r.async = &async
	return r
}

// Citrix Cloud authorization header: CWSAuth Bearer&#x3D;{token}
func (r ApiAppVIsolationGroupsGetAppVIsolationGroupsRequest) Authorization(authorization string) ApiAppVIsolationGroupsGetAppVIsolationGroupsRequest {
	r.authorization = &authorization
	return r
}

// Transaction ID that will be used to track this request. If not provided, a new GUID will be generated and returned.
func (r ApiAppVIsolationGroupsGetAppVIsolationGroupsRequest) CitrixTransactionId(citrixTransactionId string) ApiAppVIsolationGroupsGetAppVIsolationGroupsRequest {
	r.citrixTransactionId = &citrixTransactionId
	return r
}

// Orchestration Action Name
func (r ApiAppVIsolationGroupsGetAppVIsolationGroupsRequest) XActionName(xActionName string) ApiAppVIsolationGroupsGetAppVIsolationGroupsRequest {
	r.xActionName = &xActionName
	return r
}

// Must accept application/json.
func (r ApiAppVIsolationGroupsGetAppVIsolationGroupsRequest) Accept(accept string) ApiAppVIsolationGroupsGetAppVIsolationGroupsRequest {
	r.accept = &accept
	return r
}

// Locale of the request.
func (r ApiAppVIsolationGroupsGetAppVIsolationGroupsRequest) CitrixLocale(citrixLocale string) ApiAppVIsolationGroupsGetAppVIsolationGroupsRequest {
	r.citrixLocale = &citrixLocale
	return r
}

func (r ApiAppVIsolationGroupsGetAppVIsolationGroupsRequest) Execute() (*AppVIsolationGroupResponseModelCollection, *http.Response, error) {
	return r.ApiService.AppVIsolationGroupsGetAppVIsolationGroupsExecute(r)
}

/*
AppVIsolationGroupsGetAppVIsolationGroups Get the App-V IsolationGroups configured in the site

Get all App-V IsolationGroups configured in the site.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAppVIsolationGroupsGetAppVIsolationGroupsRequest
*/
func (a *AppVIsolationGroupsAPIsDAASService) AppVIsolationGroupsGetAppVIsolationGroups(ctx context.Context) ApiAppVIsolationGroupsGetAppVIsolationGroupsRequest {
	return ApiAppVIsolationGroupsGetAppVIsolationGroupsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AppVIsolationGroupResponseModelCollection
func (a *AppVIsolationGroupsAPIsDAASService) AppVIsolationGroupsGetAppVIsolationGroupsExecute(r ApiAppVIsolationGroupsGetAppVIsolationGroupsRequest) (*AppVIsolationGroupResponseModelCollection, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppVIsolationGroupResponseModelCollection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppVIsolationGroupsAPIsDAASService.AppVIsolationGroupsGetAppVIsolationGroups")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/AppVIsolationGroups"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.citrixCustomerId == nil {
		return localVarReturnValue, nil, reportError("citrixCustomerId is required and must be specified")
	}
	if r.citrixInstanceId == nil {
		return localVarReturnValue, nil, reportError("citrixInstanceId is required and must be specified")
	}
	if r.userAgent == nil {
		return localVarReturnValue, nil, reportError("userAgent is required and must be specified")
	}

	if r.async != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "async", r.async, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-CustomerId", r.citrixCustomerId, "")
	parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-InstanceId", r.citrixInstanceId, "")
	parameterAddToHeaderOrQuery(localVarHeaderParams, "User-Agent", r.userAgent, "")
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Authorization", r.authorization, "")
	}
	if r.citrixTransactionId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-TransactionId", r.citrixTransactionId, "")
	}
	if r.xActionName != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-ActionName", r.xActionName, "")
	}
	if r.accept != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept", r.accept, "")
	}
	if r.citrixLocale != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-Locale", r.citrixLocale, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 406 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAppVIsolationGroupsUpdateAppVIsolationGroupRequest struct {
	ctx context.Context
	ApiService *AppVIsolationGroupsAPIsDAASService
	nameOrId string
	citrixCustomerId *string
	citrixInstanceId *string
	userAgent *string
	updateAppVIsolationGroupRequestModel *UpdateAppVIsolationGroupRequestModel
	async *bool
	authorization *string
	citrixTransactionId *string
	xActionName *string
	accept *string
	citrixLocale *string
}

// Citrix Cloud Customer ID.
func (r ApiAppVIsolationGroupsUpdateAppVIsolationGroupRequest) CitrixCustomerId(citrixCustomerId string) ApiAppVIsolationGroupsUpdateAppVIsolationGroupRequest {
	r.citrixCustomerId = &citrixCustomerId
	return r
}

// Citrix Cloud Instance (Site) ID.
func (r ApiAppVIsolationGroupsUpdateAppVIsolationGroupRequest) CitrixInstanceId(citrixInstanceId string) ApiAppVIsolationGroupsUpdateAppVIsolationGroupRequest {
	r.citrixInstanceId = &citrixInstanceId
	return r
}

// User Agent type of the request.
func (r ApiAppVIsolationGroupsUpdateAppVIsolationGroupRequest) UserAgent(userAgent string) ApiAppVIsolationGroupsUpdateAppVIsolationGroupRequest {
	r.userAgent = &userAgent
	return r
}

// request model to update isolationGroup.
func (r ApiAppVIsolationGroupsUpdateAppVIsolationGroupRequest) UpdateAppVIsolationGroupRequestModel(updateAppVIsolationGroupRequestModel UpdateAppVIsolationGroupRequestModel) ApiAppVIsolationGroupsUpdateAppVIsolationGroupRequest {
	r.updateAppVIsolationGroupRequestModel = &updateAppVIsolationGroupRequestModel
	return r
}

// If &#x60;true&#x60;, the tags will be modified as a background task. The task will have JobType UpdateAppVIsolationGroup. When the task is complete it will redirect to GetAppVIsolationGroups.
func (r ApiAppVIsolationGroupsUpdateAppVIsolationGroupRequest) Async(async bool) ApiAppVIsolationGroupsUpdateAppVIsolationGroupRequest {
	r.async = &async
	return r
}

// Citrix Cloud authorization header: CWSAuth Bearer&#x3D;{token}
func (r ApiAppVIsolationGroupsUpdateAppVIsolationGroupRequest) Authorization(authorization string) ApiAppVIsolationGroupsUpdateAppVIsolationGroupRequest {
	r.authorization = &authorization
	return r
}

// Transaction ID that will be used to track this request. If not provided, a new GUID will be generated and returned.
func (r ApiAppVIsolationGroupsUpdateAppVIsolationGroupRequest) CitrixTransactionId(citrixTransactionId string) ApiAppVIsolationGroupsUpdateAppVIsolationGroupRequest {
	r.citrixTransactionId = &citrixTransactionId
	return r
}

// Orchestration Action Name
func (r ApiAppVIsolationGroupsUpdateAppVIsolationGroupRequest) XActionName(xActionName string) ApiAppVIsolationGroupsUpdateAppVIsolationGroupRequest {
	r.xActionName = &xActionName
	return r
}

// Must accept application/json.
func (r ApiAppVIsolationGroupsUpdateAppVIsolationGroupRequest) Accept(accept string) ApiAppVIsolationGroupsUpdateAppVIsolationGroupRequest {
	r.accept = &accept
	return r
}

// Locale of the request.
func (r ApiAppVIsolationGroupsUpdateAppVIsolationGroupRequest) CitrixLocale(citrixLocale string) ApiAppVIsolationGroupsUpdateAppVIsolationGroupRequest {
	r.citrixLocale = &citrixLocale
	return r
}

func (r ApiAppVIsolationGroupsUpdateAppVIsolationGroupRequest) Execute() (*http.Response, error) {
	return r.ApiService.AppVIsolationGroupsUpdateAppVIsolationGroupExecute(r)
}

/*
AppVIsolationGroupsUpdateAppVIsolationGroup Update the App-V IsolationGroup configured in the site.

Update the requested App-V IsolationGroup in the site.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param nameOrId Name or UID of an isolationGroup.
 @return ApiAppVIsolationGroupsUpdateAppVIsolationGroupRequest
*/
func (a *AppVIsolationGroupsAPIsDAASService) AppVIsolationGroupsUpdateAppVIsolationGroup(ctx context.Context, nameOrId string) ApiAppVIsolationGroupsUpdateAppVIsolationGroupRequest {
	return ApiAppVIsolationGroupsUpdateAppVIsolationGroupRequest{
		ApiService: a,
		ctx: ctx,
		nameOrId: nameOrId,
	}
}

// Execute executes the request
func (a *AppVIsolationGroupsAPIsDAASService) AppVIsolationGroupsUpdateAppVIsolationGroupExecute(r ApiAppVIsolationGroupsUpdateAppVIsolationGroupRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppVIsolationGroupsAPIsDAASService.AppVIsolationGroupsUpdateAppVIsolationGroup")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/AppVIsolationGroups/{nameOrId}"
	localVarPath = strings.Replace(localVarPath, "{"+"nameOrId"+"}", url.PathEscape(parameterValueToString(r.nameOrId, "nameOrId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.citrixCustomerId == nil {
		return nil, reportError("citrixCustomerId is required and must be specified")
	}
	if r.citrixInstanceId == nil {
		return nil, reportError("citrixInstanceId is required and must be specified")
	}
	if r.userAgent == nil {
		return nil, reportError("userAgent is required and must be specified")
	}
	if r.updateAppVIsolationGroupRequestModel == nil {
		return nil, reportError("updateAppVIsolationGroupRequestModel is required and must be specified")
	}

	if r.async != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "async", r.async, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-CustomerId", r.citrixCustomerId, "")
	parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-InstanceId", r.citrixInstanceId, "")
	parameterAddToHeaderOrQuery(localVarHeaderParams, "User-Agent", r.userAgent, "")
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Authorization", r.authorization, "")
	}
	if r.citrixTransactionId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-TransactionId", r.citrixTransactionId, "")
	}
	if r.xActionName != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-ActionName", r.xActionName, "")
	}
	if r.accept != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept", r.accept, "")
	}
	if r.citrixLocale != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-Locale", r.citrixLocale, "")
	}
	// body params
	localVarPostBody = r.updateAppVIsolationGroupRequestModel
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["BearerAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 406 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 415 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
