/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-onprem-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
	"fmt"
)

// IdentityPasswordFormat Supported formats for specifying a password.
type IdentityPasswordFormat string

// List of IdentityPasswordFormat
const (
	IDENTITYPASSWORDFORMAT_UNKNOWN IdentityPasswordFormat = "Unknown"
	IDENTITYPASSWORDFORMAT_PLAIN_TEXT IdentityPasswordFormat = "PlainText"
	IDENTITYPASSWORDFORMAT_BASE64 IdentityPasswordFormat = "Base64"
)

// All allowed values of IdentityPasswordFormat enum
var AllowedIdentityPasswordFormatEnumValues = []IdentityPasswordFormat{
	"Unknown",
	"PlainText",
	"Base64",
}

func (v *IdentityPasswordFormat) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := IdentityPasswordFormat(value)
	for _, existing := range AllowedIdentityPasswordFormatEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid IdentityPasswordFormat", value)
}

// NewIdentityPasswordFormatFromValue returns a pointer to a valid IdentityPasswordFormat
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewIdentityPasswordFormatFromValue(v string) (*IdentityPasswordFormat, error) {
	ev := IdentityPasswordFormat(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for IdentityPasswordFormat: valid values are %v", v, AllowedIdentityPasswordFormatEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v IdentityPasswordFormat) IsValid() bool {
	for _, existing := range AllowedIdentityPasswordFormatEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to IdentityPasswordFormat value
func (v IdentityPasswordFormat) Ptr() *IdentityPasswordFormat {
	return &v
}

type NullableIdentityPasswordFormat struct {
	value *IdentityPasswordFormat
	isSet bool
}

func (v NullableIdentityPasswordFormat) Get() *IdentityPasswordFormat {
	return v.value
}

func (v *NullableIdentityPasswordFormat) Set(val *IdentityPasswordFormat) {
	v.value = val
	v.isSet = true
}

func (v NullableIdentityPasswordFormat) IsSet() bool {
	return v.isSet
}

func (v *NullableIdentityPasswordFormat) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdentityPasswordFormat(val *IdentityPasswordFormat) *NullableIdentityPasswordFormat {
	return &NullableIdentityPasswordFormat{value: val, isSet: true}
}

func (v NullableIdentityPasswordFormat) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdentityPasswordFormat) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

