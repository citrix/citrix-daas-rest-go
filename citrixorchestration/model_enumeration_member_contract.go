/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-onprem-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
)

// checks if the EnumerationMemberContract type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EnumerationMemberContract{}

// EnumerationMemberContract Member of enum type.
type EnumerationMemberContract struct {
	// Member name
	Name NullableString `json:"Name,omitempty"`
	// Integer value of the member.
	Value *int32 `json:"Value,omitempty"`
	// Translated names of the member.
	DisplayName NullableString `json:"DisplayName,omitempty"`
}

// NewEnumerationMemberContract instantiates a new EnumerationMemberContract object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnumerationMemberContract() *EnumerationMemberContract {
	this := EnumerationMemberContract{}
	return &this
}

// NewEnumerationMemberContractWithDefaults instantiates a new EnumerationMemberContract object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnumerationMemberContractWithDefaults() *EnumerationMemberContract {
	this := EnumerationMemberContract{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EnumerationMemberContract) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EnumerationMemberContract) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *EnumerationMemberContract) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *EnumerationMemberContract) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *EnumerationMemberContract) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *EnumerationMemberContract) UnsetName() {
	o.Name.Unset()
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *EnumerationMemberContract) GetValue() int32 {
	if o == nil || IsNil(o.Value) {
		var ret int32
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnumerationMemberContract) GetValueOk() (*int32, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *EnumerationMemberContract) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given int32 and assigns it to the Value field.
func (o *EnumerationMemberContract) SetValue(v int32) {
	o.Value = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EnumerationMemberContract) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName.Get()) {
		var ret string
		return ret
	}
	return *o.DisplayName.Get()
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EnumerationMemberContract) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DisplayName.Get(), o.DisplayName.IsSet()
}

// HasDisplayName returns a boolean if a field has been set.
func (o *EnumerationMemberContract) HasDisplayName() bool {
	if o != nil && o.DisplayName.IsSet() {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given NullableString and assigns it to the DisplayName field.
func (o *EnumerationMemberContract) SetDisplayName(v string) {
	o.DisplayName.Set(&v)
}
// SetDisplayNameNil sets the value for DisplayName to be an explicit nil
func (o *EnumerationMemberContract) SetDisplayNameNil() {
	o.DisplayName.Set(nil)
}

// UnsetDisplayName ensures that no value is present for DisplayName, not even an explicit nil
func (o *EnumerationMemberContract) UnsetDisplayName() {
	o.DisplayName.Unset()
}

func (o EnumerationMemberContract) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EnumerationMemberContract) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Name.IsSet() {
		toSerialize["Name"] = o.Name.Get()
	}
	if !IsNil(o.Value) {
		toSerialize["Value"] = o.Value
	}
	if o.DisplayName.IsSet() {
		toSerialize["DisplayName"] = o.DisplayName.Get()
	}
	return toSerialize, nil
}

type NullableEnumerationMemberContract struct {
	value *EnumerationMemberContract
	isSet bool
}

func (v NullableEnumerationMemberContract) Get() *EnumerationMemberContract {
	return v.value
}

func (v *NullableEnumerationMemberContract) Set(val *EnumerationMemberContract) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumerationMemberContract) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumerationMemberContract) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumerationMemberContract(val *EnumerationMemberContract) *NullableEnumerationMemberContract {
	return &NullableEnumerationMemberContract{value: val, isSet: true}
}

func (v NullableEnumerationMemberContract) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumerationMemberContract) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


