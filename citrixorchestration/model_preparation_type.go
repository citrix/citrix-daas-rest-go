/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-onprem-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
	"fmt"
)

// PreparationType Types of image preparation.
type PreparationType string

// List of PreparationType
const (
	PREPARATIONTYPE_UNKNOWN PreparationType = "Unknown"
	PREPARATIONTYPE_NONE PreparationType = "None"
	PREPARATIONTYPE_MCS PreparationType = "Mcs"
)

// All allowed values of PreparationType enum
var AllowedPreparationTypeEnumValues = []PreparationType{
	"Unknown",
	"None",
	"Mcs",
}

func (v *PreparationType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	
	*v = PreparationType(value)
	return nil
}

// NewPreparationTypeFromValue returns a pointer to a valid PreparationType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPreparationTypeFromValue(v string) (*PreparationType, error) {
	ev := PreparationType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PreparationType: valid values are %v", v, AllowedPreparationTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PreparationType) IsValid() bool {
	for _, existing := range AllowedPreparationTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PreparationType value
func (v PreparationType) Ptr() *PreparationType {
	return &v
}

type NullablePreparationType struct {
	value *PreparationType
	isSet bool
}

func (v NullablePreparationType) Get() *PreparationType {
	return v.value
}

func (v *NullablePreparationType) Set(val *PreparationType) {
	v.value = val
	v.isSet = true
}

func (v NullablePreparationType) IsSet() bool {
	return v.isSet
}

func (v *NullablePreparationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePreparationType(val *PreparationType) *NullablePreparationType {
	return &NullablePreparationType{value: val, isSet: true}
}

func (v NullablePreparationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePreparationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

