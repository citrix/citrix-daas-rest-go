/*
Citrix Virtual Apps and Desktops REST API TECHPREVIEW

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: techpreview
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
)

// checks if the AppliedPolicy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AppliedPolicy{}

// AppliedPolicy Policy information
type AppliedPolicy struct {
	// Is policy applied
	IsApplied *bool `json:"IsApplied,omitempty"`
	// Policy name
	PolicyName *string `json:"PolicyName,omitempty"`
	// GPO name
	GpoName *string `json:"GpoName,omitempty"`
	// Reasons why the policy is or is not applied
	Reasons *map[string][]string `json:"Reasons,omitempty"`
	// Reasons why the policy is or is not applied.
	Details *map[string][]FilterDetail `json:"Details,omitempty"`
}

// NewAppliedPolicy instantiates a new AppliedPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppliedPolicy() *AppliedPolicy {
	this := AppliedPolicy{}
	return &this
}

// NewAppliedPolicyWithDefaults instantiates a new AppliedPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppliedPolicyWithDefaults() *AppliedPolicy {
	this := AppliedPolicy{}
	return &this
}

// GetIsApplied returns the IsApplied field value if set, zero value otherwise.
func (o *AppliedPolicy) GetIsApplied() bool {
	if o == nil || IsNil(o.IsApplied) {
		var ret bool
		return ret
	}
	return *o.IsApplied
}

// GetIsAppliedOk returns a tuple with the IsApplied field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppliedPolicy) GetIsAppliedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsApplied) {
		return nil, false
	}
	return o.IsApplied, true
}

// HasIsApplied returns a boolean if a field has been set.
func (o *AppliedPolicy) HasIsApplied() bool {
	if o != nil && !IsNil(o.IsApplied) {
		return true
	}

	return false
}

// SetIsApplied gets a reference to the given bool and assigns it to the IsApplied field.
func (o *AppliedPolicy) SetIsApplied(v bool) {
	o.IsApplied = &v
}

// GetPolicyName returns the PolicyName field value if set, zero value otherwise.
func (o *AppliedPolicy) GetPolicyName() string {
	if o == nil || IsNil(o.PolicyName) {
		var ret string
		return ret
	}
	return *o.PolicyName
}

// GetPolicyNameOk returns a tuple with the PolicyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppliedPolicy) GetPolicyNameOk() (*string, bool) {
	if o == nil || IsNil(o.PolicyName) {
		return nil, false
	}
	return o.PolicyName, true
}

// HasPolicyName returns a boolean if a field has been set.
func (o *AppliedPolicy) HasPolicyName() bool {
	if o != nil && !IsNil(o.PolicyName) {
		return true
	}

	return false
}

// SetPolicyName gets a reference to the given string and assigns it to the PolicyName field.
func (o *AppliedPolicy) SetPolicyName(v string) {
	o.PolicyName = &v
}

// GetGpoName returns the GpoName field value if set, zero value otherwise.
func (o *AppliedPolicy) GetGpoName() string {
	if o == nil || IsNil(o.GpoName) {
		var ret string
		return ret
	}
	return *o.GpoName
}

// GetGpoNameOk returns a tuple with the GpoName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppliedPolicy) GetGpoNameOk() (*string, bool) {
	if o == nil || IsNil(o.GpoName) {
		return nil, false
	}
	return o.GpoName, true
}

// HasGpoName returns a boolean if a field has been set.
func (o *AppliedPolicy) HasGpoName() bool {
	if o != nil && !IsNil(o.GpoName) {
		return true
	}

	return false
}

// SetGpoName gets a reference to the given string and assigns it to the GpoName field.
func (o *AppliedPolicy) SetGpoName(v string) {
	o.GpoName = &v
}

// GetReasons returns the Reasons field value if set, zero value otherwise.
func (o *AppliedPolicy) GetReasons() map[string][]string {
	if o == nil || IsNil(o.Reasons) {
		var ret map[string][]string
		return ret
	}
	return *o.Reasons
}

// GetReasonsOk returns a tuple with the Reasons field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppliedPolicy) GetReasonsOk() (*map[string][]string, bool) {
	if o == nil || IsNil(o.Reasons) {
		return nil, false
	}
	return o.Reasons, true
}

// HasReasons returns a boolean if a field has been set.
func (o *AppliedPolicy) HasReasons() bool {
	if o != nil && !IsNil(o.Reasons) {
		return true
	}

	return false
}

// SetReasons gets a reference to the given map[string][]string and assigns it to the Reasons field.
func (o *AppliedPolicy) SetReasons(v map[string][]string) {
	o.Reasons = &v
}

// GetDetails returns the Details field value if set, zero value otherwise.
func (o *AppliedPolicy) GetDetails() map[string][]FilterDetail {
	if o == nil || IsNil(o.Details) {
		var ret map[string][]FilterDetail
		return ret
	}
	return *o.Details
}

// GetDetailsOk returns a tuple with the Details field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppliedPolicy) GetDetailsOk() (*map[string][]FilterDetail, bool) {
	if o == nil || IsNil(o.Details) {
		return nil, false
	}
	return o.Details, true
}

// HasDetails returns a boolean if a field has been set.
func (o *AppliedPolicy) HasDetails() bool {
	if o != nil && !IsNil(o.Details) {
		return true
	}

	return false
}

// SetDetails gets a reference to the given map[string][]FilterDetail and assigns it to the Details field.
func (o *AppliedPolicy) SetDetails(v map[string][]FilterDetail) {
	o.Details = &v
}

func (o AppliedPolicy) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AppliedPolicy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IsApplied) {
		toSerialize["IsApplied"] = o.IsApplied
	}
	if !IsNil(o.PolicyName) {
		toSerialize["PolicyName"] = o.PolicyName
	}
	if !IsNil(o.GpoName) {
		toSerialize["GpoName"] = o.GpoName
	}
	if !IsNil(o.Reasons) {
		toSerialize["Reasons"] = o.Reasons
	}
	if !IsNil(o.Details) {
		toSerialize["Details"] = o.Details
	}
	return toSerialize, nil
}

type NullableAppliedPolicy struct {
	value *AppliedPolicy
	isSet bool
}

func (v NullableAppliedPolicy) Get() *AppliedPolicy {
	return v.value
}

func (v *NullableAppliedPolicy) Set(val *AppliedPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableAppliedPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableAppliedPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppliedPolicy(val *AppliedPolicy) *NullableAppliedPolicy {
	return &NullableAppliedPolicy{value: val, isSet: true}
}

func (v NullableAppliedPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppliedPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


