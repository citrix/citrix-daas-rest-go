/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-onprem-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
)

// checks if the AppliedPolicy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AppliedPolicy{}

// AppliedPolicy Information about an applied policy.
type AppliedPolicy struct {
	PolicyIdentity *PolicyIdentity `json:"PolicyIdentity,omitempty"`
	// Reasons why the policy is applied.
	Reasons map[string][]string `json:"Reasons,omitempty"`
}

// NewAppliedPolicy instantiates a new AppliedPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppliedPolicy() *AppliedPolicy {
	this := AppliedPolicy{}
	return &this
}

// NewAppliedPolicyWithDefaults instantiates a new AppliedPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppliedPolicyWithDefaults() *AppliedPolicy {
	this := AppliedPolicy{}
	return &this
}

// GetPolicyIdentity returns the PolicyIdentity field value if set, zero value otherwise.
func (o *AppliedPolicy) GetPolicyIdentity() PolicyIdentity {
	if o == nil || IsNil(o.PolicyIdentity) {
		var ret PolicyIdentity
		return ret
	}
	return *o.PolicyIdentity
}

// GetPolicyIdentityOk returns a tuple with the PolicyIdentity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppliedPolicy) GetPolicyIdentityOk() (*PolicyIdentity, bool) {
	if o == nil || IsNil(o.PolicyIdentity) {
		return nil, false
	}
	return o.PolicyIdentity, true
}

// HasPolicyIdentity returns a boolean if a field has been set.
func (o *AppliedPolicy) HasPolicyIdentity() bool {
	if o != nil && !IsNil(o.PolicyIdentity) {
		return true
	}

	return false
}

// SetPolicyIdentity gets a reference to the given PolicyIdentity and assigns it to the PolicyIdentity field.
func (o *AppliedPolicy) SetPolicyIdentity(v PolicyIdentity) {
	o.PolicyIdentity = &v
}

// GetReasons returns the Reasons field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AppliedPolicy) GetReasons() map[string][]string {
	if o == nil {
		var ret map[string][]string
		return ret
	}
	return o.Reasons
}

// GetReasonsOk returns a tuple with the Reasons field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AppliedPolicy) GetReasonsOk() (*map[string][]string, bool) {
	if o == nil || IsNil(o.Reasons) {
		return nil, false
	}
	return &o.Reasons, true
}

// HasReasons returns a boolean if a field has been set.
func (o *AppliedPolicy) HasReasons() bool {
	if o != nil && IsNil(o.Reasons) {
		return true
	}

	return false
}

// SetReasons gets a reference to the given map[string][]string and assigns it to the Reasons field.
func (o *AppliedPolicy) SetReasons(v map[string][]string) {
	o.Reasons = v
}

func (o AppliedPolicy) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AppliedPolicy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PolicyIdentity) {
		toSerialize["PolicyIdentity"] = o.PolicyIdentity
	}
	if o.Reasons != nil {
		toSerialize["Reasons"] = o.Reasons
	}
	return toSerialize, nil
}

type NullableAppliedPolicy struct {
	value *AppliedPolicy
	isSet bool
}

func (v NullableAppliedPolicy) Get() *AppliedPolicy {
	return v.value
}

func (v *NullableAppliedPolicy) Set(val *AppliedPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableAppliedPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableAppliedPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppliedPolicy(val *AppliedPolicy) *NullableAppliedPolicy {
	return &NullableAppliedPolicy{value: val, isSet: true}
}

func (v NullableAppliedPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppliedPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


