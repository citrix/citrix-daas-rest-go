/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-onprem-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
	"fmt"
)

// SessionType Types of sessions.
type SessionType string

// List of SessionType
const (
	SESSIONTYPE_UNKNOWN     SessionType = "Unknown"
	SESSIONTYPE_DESKTOP     SessionType = "Desktop"
	SESSIONTYPE_APPLICATION SessionType = "Application"
)

// All allowed values of SessionType enum
var AllowedSessionTypeEnumValues = []SessionType{
	"Unknown",
	"Desktop",
	"Application",
}

func (v *SessionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	*v = SessionType(value)
	return nil
}

// NewSessionTypeFromValue returns a pointer to a valid SessionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSessionTypeFromValue(v string) (*SessionType, error) {
	ev := SessionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SessionType: valid values are %v", v, AllowedSessionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SessionType) IsValid() bool {
	for _, existing := range AllowedSessionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SessionType value
func (v SessionType) Ptr() *SessionType {
	return &v
}

type NullableSessionType struct {
	value *SessionType
	isSet bool
}

func (v NullableSessionType) Get() *SessionType {
	return v.value
}

func (v *NullableSessionType) Set(val *SessionType) {
	v.value = val
	v.isSet = true
}

func (v NullableSessionType) IsSet() bool {
	return v.isSet
}

func (v *NullableSessionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSessionType(val *SessionType) *NullableSessionType {
	return &NullableSessionType{value: val, isSet: true}
}

func (v NullableSessionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSessionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
