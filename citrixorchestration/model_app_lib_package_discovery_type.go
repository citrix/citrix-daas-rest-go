/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-onprem-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
	"fmt"
)

// AppLibPackageDiscoveryType 
type AppLibPackageDiscoveryType string

// List of AppLibPackageDiscoveryType
const (
	APPLIBPACKAGEDISCOVERYTYPE_UNKNOWN AppLibPackageDiscoveryType = "Unknown"
	APPLIBPACKAGEDISCOVERYTYPE_NETWORK_SHARE_DISCOVERY AppLibPackageDiscoveryType = "NetworkShareDiscovery"
	APPLIBPACKAGEDISCOVERYTYPE_APP_V_SERVER_DISCOVERY AppLibPackageDiscoveryType = "AppVServerDiscovery"
)

// All allowed values of AppLibPackageDiscoveryType enum
var AllowedAppLibPackageDiscoveryTypeEnumValues = []AppLibPackageDiscoveryType{
	"Unknown",
	"NetworkShareDiscovery",
	"AppVServerDiscovery",
}

func (v *AppLibPackageDiscoveryType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	
	*v = AppLibPackageDiscoveryType(value)
	return nil
}

// NewAppLibPackageDiscoveryTypeFromValue returns a pointer to a valid AppLibPackageDiscoveryType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAppLibPackageDiscoveryTypeFromValue(v string) (*AppLibPackageDiscoveryType, error) {
	ev := AppLibPackageDiscoveryType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AppLibPackageDiscoveryType: valid values are %v", v, AllowedAppLibPackageDiscoveryTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AppLibPackageDiscoveryType) IsValid() bool {
	for _, existing := range AllowedAppLibPackageDiscoveryTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AppLibPackageDiscoveryType value
func (v AppLibPackageDiscoveryType) Ptr() *AppLibPackageDiscoveryType {
	return &v
}

type NullableAppLibPackageDiscoveryType struct {
	value *AppLibPackageDiscoveryType
	isSet bool
}

func (v NullableAppLibPackageDiscoveryType) Get() *AppLibPackageDiscoveryType {
	return v.value
}

func (v *NullableAppLibPackageDiscoveryType) Set(val *AppLibPackageDiscoveryType) {
	v.value = val
	v.isSet = true
}

func (v NullableAppLibPackageDiscoveryType) IsSet() bool {
	return v.isSet
}

func (v *NullableAppLibPackageDiscoveryType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppLibPackageDiscoveryType(val *AppLibPackageDiscoveryType) *NullableAppLibPackageDiscoveryType {
	return &NullableAppLibPackageDiscoveryType{value: val, isSet: true}
}

func (v NullableAppLibPackageDiscoveryType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppLibPackageDiscoveryType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

