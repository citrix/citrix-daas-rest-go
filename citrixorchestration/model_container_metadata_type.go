/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-onprem-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
	"fmt"
)

// ContainerMetadataType The type of a container, relevant to delegated administration.
type ContainerMetadataType string

// List of ContainerMetadataType
const (
	CONTAINERMETADATATYPE_UNKNOWN ContainerMetadataType = "Unknown"
	CONTAINERMETADATATYPE_DELIVERY_GROUP ContainerMetadataType = "DeliveryGroup"
	CONTAINERMETADATATYPE_MACHINE_CATALOG ContainerMetadataType = "MachineCatalog"
)

// All allowed values of ContainerMetadataType enum
var AllowedContainerMetadataTypeEnumValues = []ContainerMetadataType{
	"Unknown",
	"DeliveryGroup",
	"MachineCatalog",
}

func (v *ContainerMetadataType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ContainerMetadataType(value)
	for _, existing := range AllowedContainerMetadataTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ContainerMetadataType", value)
}

// NewContainerMetadataTypeFromValue returns a pointer to a valid ContainerMetadataType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewContainerMetadataTypeFromValue(v string) (*ContainerMetadataType, error) {
	ev := ContainerMetadataType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ContainerMetadataType: valid values are %v", v, AllowedContainerMetadataTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ContainerMetadataType) IsValid() bool {
	for _, existing := range AllowedContainerMetadataTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ContainerMetadataType value
func (v ContainerMetadataType) Ptr() *ContainerMetadataType {
	return &v
}

type NullableContainerMetadataType struct {
	value *ContainerMetadataType
	isSet bool
}

func (v NullableContainerMetadataType) Get() *ContainerMetadataType {
	return v.value
}

func (v *NullableContainerMetadataType) Set(val *ContainerMetadataType) {
	v.value = val
	v.isSet = true
}

func (v NullableContainerMetadataType) IsSet() bool {
	return v.isSet
}

func (v *NullableContainerMetadataType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContainerMetadataType(val *ContainerMetadataType) *NullableContainerMetadataType {
	return &NullableContainerMetadataType{value: val, isSet: true}
}

func (v NullableContainerMetadataType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContainerMetadataType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

