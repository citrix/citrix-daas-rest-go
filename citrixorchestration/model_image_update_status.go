/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-onprem-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
	"fmt"
)

// ImageUpdateStatus The machines image update status of a catalog
type ImageUpdateStatus string

// List of ImageUpdateStatus
const (
	IMAGEUPDATESTATUS_UNKNOWN ImageUpdateStatus = "Unknown"
	IMAGEUPDATESTATUS_UPDATE_TO_DATE ImageUpdateStatus = "UpdateToDate"
	IMAGEUPDATESTATUS_PARTIALLY_UPDATED ImageUpdateStatus = "PartiallyUpdated"
	IMAGEUPDATESTATUS_PENDING_UPDATE ImageUpdateStatus = "PendingUpdate"
	IMAGEUPDATESTATUS_PREPARING_IMAGE ImageUpdateStatus = "PreparingImage"
)

// All allowed values of ImageUpdateStatus enum
var AllowedImageUpdateStatusEnumValues = []ImageUpdateStatus{
	"Unknown",
	"UpdateToDate",
	"PartiallyUpdated",
	"PendingUpdate",
	"PreparingImage",
}

func (v *ImageUpdateStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	
	*v = ImageUpdateStatus(value)
	return nil
}

// NewImageUpdateStatusFromValue returns a pointer to a valid ImageUpdateStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewImageUpdateStatusFromValue(v string) (*ImageUpdateStatus, error) {
	ev := ImageUpdateStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ImageUpdateStatus: valid values are %v", v, AllowedImageUpdateStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ImageUpdateStatus) IsValid() bool {
	for _, existing := range AllowedImageUpdateStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ImageUpdateStatus value
func (v ImageUpdateStatus) Ptr() *ImageUpdateStatus {
	return &v
}

type NullableImageUpdateStatus struct {
	value *ImageUpdateStatus
	isSet bool
}

func (v NullableImageUpdateStatus) Get() *ImageUpdateStatus {
	return v.value
}

func (v *NullableImageUpdateStatus) Set(val *ImageUpdateStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableImageUpdateStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableImageUpdateStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImageUpdateStatus(val *ImageUpdateStatus) *NullableImageUpdateStatus {
	return &NullableImageUpdateStatus{value: val, isSet: true}
}

func (v NullableImageUpdateStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImageUpdateStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

