/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-onprem-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
	"fmt"
)

// DetectScope
type DetectScope string

// List of DetectScope
const (
	DETECTSCOPE_HOSTING_CONNECTION DetectScope = "HostingConnection"
	DETECTSCOPE_UNKNOWN            DetectScope = "Unknown"
)

// All allowed values of DetectScope enum
var AllowedDetectScopeEnumValues = []DetectScope{
	"HostingConnection",
	"Unknown",
}

func (v *DetectScope) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	*v = DetectScope(value)
	return nil
}

// NewDetectScopeFromValue returns a pointer to a valid DetectScope
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDetectScopeFromValue(v string) (*DetectScope, error) {
	ev := DetectScope(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DetectScope: valid values are %v", v, AllowedDetectScopeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DetectScope) IsValid() bool {
	for _, existing := range AllowedDetectScopeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DetectScope value
func (v DetectScope) Ptr() *DetectScope {
	return &v
}

type NullableDetectScope struct {
	value *DetectScope
	isSet bool
}

func (v NullableDetectScope) Get() *DetectScope {
	return v.value
}

func (v *NullableDetectScope) Set(val *DetectScope) {
	v.value = val
	v.isSet = true
}

func (v NullableDetectScope) IsSet() bool {
	return v.isSet
}

func (v *NullableDetectScope) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDetectScope(val *DetectScope) *NullableDetectScope {
	return &NullableDetectScope{value: val, isSet: true}
}

func (v NullableDetectScope) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDetectScope) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
