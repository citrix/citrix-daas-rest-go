/*
Citrix Virtual Apps and Desktops REST API TECHPREVIEW

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: techpreview
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
	"fmt"
)

// DefaultPrinterOption Predefined default printer.
type DefaultPrinterOption string

// List of DefaultPrinterOption
const (
	DEFAULTPRINTEROPTION_NOT_CONFIGURED DefaultPrinterOption = "NotConfigured"
	DEFAULTPRINTEROPTION_DO_NOT_ADJUST DefaultPrinterOption = "DoNotAdjust"
	DEFAULTPRINTEROPTION_CLIENT_DEFAULT DefaultPrinterOption = "ClientDefault"
	DEFAULTPRINTEROPTION_SPECIFIC_PRINTER DefaultPrinterOption = "SpecificPrinter"
	DEFAULTPRINTEROPTION_GENERIC_UNIVERSAL_PRINTER DefaultPrinterOption = "GenericUniversalPrinter"
	DEFAULTPRINTEROPTION_PDF_PRINTER DefaultPrinterOption = "PDFPrinter"
)

// All allowed values of DefaultPrinterOption enum
var AllowedDefaultPrinterOptionEnumValues = []DefaultPrinterOption{
	"NotConfigured",
	"DoNotAdjust",
	"ClientDefault",
	"SpecificPrinter",
	"GenericUniversalPrinter",
	"PDFPrinter",
}

func (v *DefaultPrinterOption) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DefaultPrinterOption(value)
	for _, existing := range AllowedDefaultPrinterOptionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DefaultPrinterOption", value)
}

// NewDefaultPrinterOptionFromValue returns a pointer to a valid DefaultPrinterOption
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDefaultPrinterOptionFromValue(v string) (*DefaultPrinterOption, error) {
	ev := DefaultPrinterOption(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DefaultPrinterOption: valid values are %v", v, AllowedDefaultPrinterOptionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DefaultPrinterOption) IsValid() bool {
	for _, existing := range AllowedDefaultPrinterOptionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DefaultPrinterOption value
func (v DefaultPrinterOption) Ptr() *DefaultPrinterOption {
	return &v
}

type NullableDefaultPrinterOption struct {
	value *DefaultPrinterOption
	isSet bool
}

func (v NullableDefaultPrinterOption) Get() *DefaultPrinterOption {
	return v.value
}

func (v *NullableDefaultPrinterOption) Set(val *DefaultPrinterOption) {
	v.value = val
	v.isSet = true
}

func (v NullableDefaultPrinterOption) IsSet() bool {
	return v.isSet
}

func (v *NullableDefaultPrinterOption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDefaultPrinterOption(val *DefaultPrinterOption) *NullableDefaultPrinterOption {
	return &NullableDefaultPrinterOption{value: val, isSet: true}
}

func (v NullableDefaultPrinterOption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDefaultPrinterOption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

