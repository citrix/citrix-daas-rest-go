/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-onprem-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
)

// checks if the SavingPlanResponseModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SavingPlanResponseModel{}

// SavingPlanResponseModel The response object indicating the saving plan.
type SavingPlanResponseModel struct {
	// Gets or sets the term.
	Term NullableString `json:"Term,omitempty"`
	// Gets or sets the effective price.
	EffectivePrice NullableFloat32 `json:"EffectivePrice,omitempty"`
	// Gets or sets the retail price.
	RetailPrice NullableFloat32 `json:"RetailPrice,omitempty"`
}

// NewSavingPlanResponseModel instantiates a new SavingPlanResponseModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSavingPlanResponseModel() *SavingPlanResponseModel {
	this := SavingPlanResponseModel{}
	return &this
}

// NewSavingPlanResponseModelWithDefaults instantiates a new SavingPlanResponseModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSavingPlanResponseModelWithDefaults() *SavingPlanResponseModel {
	this := SavingPlanResponseModel{}
	return &this
}

// GetTerm returns the Term field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SavingPlanResponseModel) GetTerm() string {
	if o == nil || IsNil(o.Term.Get()) {
		var ret string
		return ret
	}
	return *o.Term.Get()
}

// GetTermOk returns a tuple with the Term field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SavingPlanResponseModel) GetTermOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Term.Get(), o.Term.IsSet()
}

// HasTerm returns a boolean if a field has been set.
func (o *SavingPlanResponseModel) HasTerm() bool {
	if o != nil && o.Term.IsSet() {
		return true
	}

	return false
}

// SetTerm gets a reference to the given NullableString and assigns it to the Term field.
func (o *SavingPlanResponseModel) SetTerm(v string) {
	o.Term.Set(&v)
}

// SetTermNil sets the value for Term to be an explicit nil
func (o *SavingPlanResponseModel) SetTermNil() {
	o.Term.Set(nil)
}

// UnsetTerm ensures that no value is present for Term, not even an explicit nil
func (o *SavingPlanResponseModel) UnsetTerm() {
	o.Term.Unset()
}

// GetEffectivePrice returns the EffectivePrice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SavingPlanResponseModel) GetEffectivePrice() float32 {
	if o == nil || IsNil(o.EffectivePrice.Get()) {
		var ret float32
		return ret
	}
	return *o.EffectivePrice.Get()
}

// GetEffectivePriceOk returns a tuple with the EffectivePrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SavingPlanResponseModel) GetEffectivePriceOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.EffectivePrice.Get(), o.EffectivePrice.IsSet()
}

// HasEffectivePrice returns a boolean if a field has been set.
func (o *SavingPlanResponseModel) HasEffectivePrice() bool {
	if o != nil && o.EffectivePrice.IsSet() {
		return true
	}

	return false
}

// SetEffectivePrice gets a reference to the given NullableFloat32 and assigns it to the EffectivePrice field.
func (o *SavingPlanResponseModel) SetEffectivePrice(v float32) {
	o.EffectivePrice.Set(&v)
}

// SetEffectivePriceNil sets the value for EffectivePrice to be an explicit nil
func (o *SavingPlanResponseModel) SetEffectivePriceNil() {
	o.EffectivePrice.Set(nil)
}

// UnsetEffectivePrice ensures that no value is present for EffectivePrice, not even an explicit nil
func (o *SavingPlanResponseModel) UnsetEffectivePrice() {
	o.EffectivePrice.Unset()
}

// GetRetailPrice returns the RetailPrice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SavingPlanResponseModel) GetRetailPrice() float32 {
	if o == nil || IsNil(o.RetailPrice.Get()) {
		var ret float32
		return ret
	}
	return *o.RetailPrice.Get()
}

// GetRetailPriceOk returns a tuple with the RetailPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SavingPlanResponseModel) GetRetailPriceOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.RetailPrice.Get(), o.RetailPrice.IsSet()
}

// HasRetailPrice returns a boolean if a field has been set.
func (o *SavingPlanResponseModel) HasRetailPrice() bool {
	if o != nil && o.RetailPrice.IsSet() {
		return true
	}

	return false
}

// SetRetailPrice gets a reference to the given NullableFloat32 and assigns it to the RetailPrice field.
func (o *SavingPlanResponseModel) SetRetailPrice(v float32) {
	o.RetailPrice.Set(&v)
}

// SetRetailPriceNil sets the value for RetailPrice to be an explicit nil
func (o *SavingPlanResponseModel) SetRetailPriceNil() {
	o.RetailPrice.Set(nil)
}

// UnsetRetailPrice ensures that no value is present for RetailPrice, not even an explicit nil
func (o *SavingPlanResponseModel) UnsetRetailPrice() {
	o.RetailPrice.Unset()
}

func (o SavingPlanResponseModel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SavingPlanResponseModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Term.IsSet() {
		toSerialize["Term"] = o.Term.Get()
	}
	if o.EffectivePrice.IsSet() {
		toSerialize["EffectivePrice"] = o.EffectivePrice.Get()
	}
	if o.RetailPrice.IsSet() {
		toSerialize["RetailPrice"] = o.RetailPrice.Get()
	}
	return toSerialize, nil
}

type NullableSavingPlanResponseModel struct {
	value *SavingPlanResponseModel
	isSet bool
}

func (v NullableSavingPlanResponseModel) Get() *SavingPlanResponseModel {
	return v.value
}

func (v *NullableSavingPlanResponseModel) Set(val *SavingPlanResponseModel) {
	v.value = val
	v.isSet = true
}

func (v NullableSavingPlanResponseModel) IsSet() bool {
	return v.isSet
}

func (v *NullableSavingPlanResponseModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSavingPlanResponseModel(val *SavingPlanResponseModel) *NullableSavingPlanResponseModel {
	return &NullableSavingPlanResponseModel{value: val, isSet: true}
}

func (v NullableSavingPlanResponseModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSavingPlanResponseModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
