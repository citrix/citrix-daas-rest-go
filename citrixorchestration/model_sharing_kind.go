/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-onprem-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
	"fmt"
)

// SharingKind How machines are shared.
type SharingKind string

// List of SharingKind
const (
	SHARINGKIND_UNKNOWN SharingKind = "Unknown"
	SHARINGKIND_PRIVATE SharingKind = "Private"
	SHARINGKIND_SHARED SharingKind = "Shared"
)

// All allowed values of SharingKind enum
var AllowedSharingKindEnumValues = []SharingKind{
	"Unknown",
	"Private",
	"Shared",
}

func (v *SharingKind) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	
	*v = SharingKind(value)
	return nil
}

// NewSharingKindFromValue returns a pointer to a valid SharingKind
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSharingKindFromValue(v string) (*SharingKind, error) {
	ev := SharingKind(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SharingKind: valid values are %v", v, AllowedSharingKindEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SharingKind) IsValid() bool {
	for _, existing := range AllowedSharingKindEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SharingKind value
func (v SharingKind) Ptr() *SharingKind {
	return &v
}

type NullableSharingKind struct {
	value *SharingKind
	isSet bool
}

func (v NullableSharingKind) Get() *SharingKind {
	return v.value
}

func (v *NullableSharingKind) Set(val *SharingKind) {
	v.value = val
	v.isSet = true
}

func (v NullableSharingKind) IsSet() bool {
	return v.isSet
}

func (v *NullableSharingKind) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSharingKind(val *SharingKind) *NullableSharingKind {
	return &NullableSharingKind{value: val, isSet: true}
}

func (v NullableSharingKind) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSharingKind) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

