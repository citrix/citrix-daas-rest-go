/*
Citrix Virtual Apps and Desktops REST API TECHPREVIEW

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: techpreview
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
)

// checks if the DatabaseResponseModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DatabaseResponseModel{}

// DatabaseResponseModel Database response model.
type DatabaseResponseModel struct {
	DataStore *DataStore `json:"DataStore,omitempty"`
	// Name of database
	DatabaseName *string `json:"DatabaseName,omitempty"`
	// Server address of database
	DatabaseServerAddress *string `json:"DatabaseServerAddress,omitempty"`
	// Mirror address of database
	MirrorDatabaseServerAddress *string `json:"MirrorDatabaseServerAddress,omitempty"`
	// Indicates whether this database can be changed
	CanChangeDatabase *bool `json:"CanChangeDatabase,omitempty"`
}

// NewDatabaseResponseModel instantiates a new DatabaseResponseModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatabaseResponseModel() *DatabaseResponseModel {
	this := DatabaseResponseModel{}
	return &this
}

// NewDatabaseResponseModelWithDefaults instantiates a new DatabaseResponseModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatabaseResponseModelWithDefaults() *DatabaseResponseModel {
	this := DatabaseResponseModel{}
	return &this
}

// GetDataStore returns the DataStore field value if set, zero value otherwise.
func (o *DatabaseResponseModel) GetDataStore() DataStore {
	if o == nil || IsNil(o.DataStore) {
		var ret DataStore
		return ret
	}
	return *o.DataStore
}

// GetDataStoreOk returns a tuple with the DataStore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseResponseModel) GetDataStoreOk() (*DataStore, bool) {
	if o == nil || IsNil(o.DataStore) {
		return nil, false
	}
	return o.DataStore, true
}

// HasDataStore returns a boolean if a field has been set.
func (o *DatabaseResponseModel) HasDataStore() bool {
	if o != nil && !IsNil(o.DataStore) {
		return true
	}

	return false
}

// SetDataStore gets a reference to the given DataStore and assigns it to the DataStore field.
func (o *DatabaseResponseModel) SetDataStore(v DataStore) {
	o.DataStore = &v
}

// GetDatabaseName returns the DatabaseName field value if set, zero value otherwise.
func (o *DatabaseResponseModel) GetDatabaseName() string {
	if o == nil || IsNil(o.DatabaseName) {
		var ret string
		return ret
	}
	return *o.DatabaseName
}

// GetDatabaseNameOk returns a tuple with the DatabaseName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseResponseModel) GetDatabaseNameOk() (*string, bool) {
	if o == nil || IsNil(o.DatabaseName) {
		return nil, false
	}
	return o.DatabaseName, true
}

// HasDatabaseName returns a boolean if a field has been set.
func (o *DatabaseResponseModel) HasDatabaseName() bool {
	if o != nil && !IsNil(o.DatabaseName) {
		return true
	}

	return false
}

// SetDatabaseName gets a reference to the given string and assigns it to the DatabaseName field.
func (o *DatabaseResponseModel) SetDatabaseName(v string) {
	o.DatabaseName = &v
}

// GetDatabaseServerAddress returns the DatabaseServerAddress field value if set, zero value otherwise.
func (o *DatabaseResponseModel) GetDatabaseServerAddress() string {
	if o == nil || IsNil(o.DatabaseServerAddress) {
		var ret string
		return ret
	}
	return *o.DatabaseServerAddress
}

// GetDatabaseServerAddressOk returns a tuple with the DatabaseServerAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseResponseModel) GetDatabaseServerAddressOk() (*string, bool) {
	if o == nil || IsNil(o.DatabaseServerAddress) {
		return nil, false
	}
	return o.DatabaseServerAddress, true
}

// HasDatabaseServerAddress returns a boolean if a field has been set.
func (o *DatabaseResponseModel) HasDatabaseServerAddress() bool {
	if o != nil && !IsNil(o.DatabaseServerAddress) {
		return true
	}

	return false
}

// SetDatabaseServerAddress gets a reference to the given string and assigns it to the DatabaseServerAddress field.
func (o *DatabaseResponseModel) SetDatabaseServerAddress(v string) {
	o.DatabaseServerAddress = &v
}

// GetMirrorDatabaseServerAddress returns the MirrorDatabaseServerAddress field value if set, zero value otherwise.
func (o *DatabaseResponseModel) GetMirrorDatabaseServerAddress() string {
	if o == nil || IsNil(o.MirrorDatabaseServerAddress) {
		var ret string
		return ret
	}
	return *o.MirrorDatabaseServerAddress
}

// GetMirrorDatabaseServerAddressOk returns a tuple with the MirrorDatabaseServerAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseResponseModel) GetMirrorDatabaseServerAddressOk() (*string, bool) {
	if o == nil || IsNil(o.MirrorDatabaseServerAddress) {
		return nil, false
	}
	return o.MirrorDatabaseServerAddress, true
}

// HasMirrorDatabaseServerAddress returns a boolean if a field has been set.
func (o *DatabaseResponseModel) HasMirrorDatabaseServerAddress() bool {
	if o != nil && !IsNil(o.MirrorDatabaseServerAddress) {
		return true
	}

	return false
}

// SetMirrorDatabaseServerAddress gets a reference to the given string and assigns it to the MirrorDatabaseServerAddress field.
func (o *DatabaseResponseModel) SetMirrorDatabaseServerAddress(v string) {
	o.MirrorDatabaseServerAddress = &v
}

// GetCanChangeDatabase returns the CanChangeDatabase field value if set, zero value otherwise.
func (o *DatabaseResponseModel) GetCanChangeDatabase() bool {
	if o == nil || IsNil(o.CanChangeDatabase) {
		var ret bool
		return ret
	}
	return *o.CanChangeDatabase
}

// GetCanChangeDatabaseOk returns a tuple with the CanChangeDatabase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseResponseModel) GetCanChangeDatabaseOk() (*bool, bool) {
	if o == nil || IsNil(o.CanChangeDatabase) {
		return nil, false
	}
	return o.CanChangeDatabase, true
}

// HasCanChangeDatabase returns a boolean if a field has been set.
func (o *DatabaseResponseModel) HasCanChangeDatabase() bool {
	if o != nil && !IsNil(o.CanChangeDatabase) {
		return true
	}

	return false
}

// SetCanChangeDatabase gets a reference to the given bool and assigns it to the CanChangeDatabase field.
func (o *DatabaseResponseModel) SetCanChangeDatabase(v bool) {
	o.CanChangeDatabase = &v
}

func (o DatabaseResponseModel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DatabaseResponseModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DataStore) {
		toSerialize["DataStore"] = o.DataStore
	}
	if !IsNil(o.DatabaseName) {
		toSerialize["DatabaseName"] = o.DatabaseName
	}
	if !IsNil(o.DatabaseServerAddress) {
		toSerialize["DatabaseServerAddress"] = o.DatabaseServerAddress
	}
	if !IsNil(o.MirrorDatabaseServerAddress) {
		toSerialize["MirrorDatabaseServerAddress"] = o.MirrorDatabaseServerAddress
	}
	if !IsNil(o.CanChangeDatabase) {
		toSerialize["CanChangeDatabase"] = o.CanChangeDatabase
	}
	return toSerialize, nil
}

type NullableDatabaseResponseModel struct {
	value *DatabaseResponseModel
	isSet bool
}

func (v NullableDatabaseResponseModel) Get() *DatabaseResponseModel {
	return v.value
}

func (v *NullableDatabaseResponseModel) Set(val *DatabaseResponseModel) {
	v.value = val
	v.isSet = true
}

func (v NullableDatabaseResponseModel) IsSet() bool {
	return v.isSet
}

func (v *NullableDatabaseResponseModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatabaseResponseModel(val *DatabaseResponseModel) *NullableDatabaseResponseModel {
	return &NullableDatabaseResponseModel{value: val, isSet: true}
}

func (v NullableDatabaseResponseModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatabaseResponseModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


