/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-onprem-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
)

// checks if the ReasonDetail type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReasonDetail{}

// ReasonDetail Details for a reason.
type ReasonDetail struct {
	// The filter type.
	Filter NullableString `json:"Filter,omitempty"`
	// The filter value.
	Value NullableString `json:"Value,omitempty"`
	// Indicate if the filter matches the given value.
	Match *bool `json:"Match,omitempty"`
}

// NewReasonDetail instantiates a new ReasonDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReasonDetail() *ReasonDetail {
	this := ReasonDetail{}
	return &this
}

// NewReasonDetailWithDefaults instantiates a new ReasonDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReasonDetailWithDefaults() *ReasonDetail {
	this := ReasonDetail{}
	return &this
}

// GetFilter returns the Filter field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReasonDetail) GetFilter() string {
	if o == nil || IsNil(o.Filter.Get()) {
		var ret string
		return ret
	}
	return *o.Filter.Get()
}

// GetFilterOk returns a tuple with the Filter field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReasonDetail) GetFilterOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Filter.Get(), o.Filter.IsSet()
}

// HasFilter returns a boolean if a field has been set.
func (o *ReasonDetail) HasFilter() bool {
	if o != nil && o.Filter.IsSet() {
		return true
	}

	return false
}

// SetFilter gets a reference to the given NullableString and assigns it to the Filter field.
func (o *ReasonDetail) SetFilter(v string) {
	o.Filter.Set(&v)
}
// SetFilterNil sets the value for Filter to be an explicit nil
func (o *ReasonDetail) SetFilterNil() {
	o.Filter.Set(nil)
}

// UnsetFilter ensures that no value is present for Filter, not even an explicit nil
func (o *ReasonDetail) UnsetFilter() {
	o.Filter.Unset()
}

// GetValue returns the Value field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReasonDetail) GetValue() string {
	if o == nil || IsNil(o.Value.Get()) {
		var ret string
		return ret
	}
	return *o.Value.Get()
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReasonDetail) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Value.Get(), o.Value.IsSet()
}

// HasValue returns a boolean if a field has been set.
func (o *ReasonDetail) HasValue() bool {
	if o != nil && o.Value.IsSet() {
		return true
	}

	return false
}

// SetValue gets a reference to the given NullableString and assigns it to the Value field.
func (o *ReasonDetail) SetValue(v string) {
	o.Value.Set(&v)
}
// SetValueNil sets the value for Value to be an explicit nil
func (o *ReasonDetail) SetValueNil() {
	o.Value.Set(nil)
}

// UnsetValue ensures that no value is present for Value, not even an explicit nil
func (o *ReasonDetail) UnsetValue() {
	o.Value.Unset()
}

// GetMatch returns the Match field value if set, zero value otherwise.
func (o *ReasonDetail) GetMatch() bool {
	if o == nil || IsNil(o.Match) {
		var ret bool
		return ret
	}
	return *o.Match
}

// GetMatchOk returns a tuple with the Match field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReasonDetail) GetMatchOk() (*bool, bool) {
	if o == nil || IsNil(o.Match) {
		return nil, false
	}
	return o.Match, true
}

// HasMatch returns a boolean if a field has been set.
func (o *ReasonDetail) HasMatch() bool {
	if o != nil && !IsNil(o.Match) {
		return true
	}

	return false
}

// SetMatch gets a reference to the given bool and assigns it to the Match field.
func (o *ReasonDetail) SetMatch(v bool) {
	o.Match = &v
}

func (o ReasonDetail) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReasonDetail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Filter.IsSet() {
		toSerialize["Filter"] = o.Filter.Get()
	}
	if o.Value.IsSet() {
		toSerialize["Value"] = o.Value.Get()
	}
	if !IsNil(o.Match) {
		toSerialize["Match"] = o.Match
	}
	return toSerialize, nil
}

type NullableReasonDetail struct {
	value *ReasonDetail
	isSet bool
}

func (v NullableReasonDetail) Get() *ReasonDetail {
	return v.value
}

func (v *NullableReasonDetail) Set(val *ReasonDetail) {
	v.value = val
	v.isSet = true
}

func (v NullableReasonDetail) IsSet() bool {
	return v.isSet
}

func (v *NullableReasonDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReasonDetail(val *ReasonDetail) *NullableReasonDetail {
	return &NullableReasonDetail{value: val, isSet: true}
}

func (v NullableReasonDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReasonDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


