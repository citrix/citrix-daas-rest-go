/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-onprem-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
	"fmt"
)

// MaintenanceCycleVmOperationJobSearchFilterGroupsType The search filter groups type
type MaintenanceCycleVmOperationJobSearchFilterGroupsType string

// List of MaintenanceCycleVmOperationJobSearchFilterGroupsType
const (
	MAINTENANCECYCLEVMOPERATIONJOBSEARCHFILTERGROUPSTYPE_OR MaintenanceCycleVmOperationJobSearchFilterGroupsType = "Or"
	MAINTENANCECYCLEVMOPERATIONJOBSEARCHFILTERGROUPSTYPE_AND MaintenanceCycleVmOperationJobSearchFilterGroupsType = "And"
)

// All allowed values of MaintenanceCycleVmOperationJobSearchFilterGroupsType enum
var AllowedMaintenanceCycleVmOperationJobSearchFilterGroupsTypeEnumValues = []MaintenanceCycleVmOperationJobSearchFilterGroupsType{
	"Or",
	"And",
}

func (v *MaintenanceCycleVmOperationJobSearchFilterGroupsType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MaintenanceCycleVmOperationJobSearchFilterGroupsType(value)
	for _, existing := range AllowedMaintenanceCycleVmOperationJobSearchFilterGroupsTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MaintenanceCycleVmOperationJobSearchFilterGroupsType", value)
}

// NewMaintenanceCycleVmOperationJobSearchFilterGroupsTypeFromValue returns a pointer to a valid MaintenanceCycleVmOperationJobSearchFilterGroupsType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMaintenanceCycleVmOperationJobSearchFilterGroupsTypeFromValue(v string) (*MaintenanceCycleVmOperationJobSearchFilterGroupsType, error) {
	ev := MaintenanceCycleVmOperationJobSearchFilterGroupsType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MaintenanceCycleVmOperationJobSearchFilterGroupsType: valid values are %v", v, AllowedMaintenanceCycleVmOperationJobSearchFilterGroupsTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MaintenanceCycleVmOperationJobSearchFilterGroupsType) IsValid() bool {
	for _, existing := range AllowedMaintenanceCycleVmOperationJobSearchFilterGroupsTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MaintenanceCycleVmOperationJobSearchFilterGroupsType value
func (v MaintenanceCycleVmOperationJobSearchFilterGroupsType) Ptr() *MaintenanceCycleVmOperationJobSearchFilterGroupsType {
	return &v
}

type NullableMaintenanceCycleVmOperationJobSearchFilterGroupsType struct {
	value *MaintenanceCycleVmOperationJobSearchFilterGroupsType
	isSet bool
}

func (v NullableMaintenanceCycleVmOperationJobSearchFilterGroupsType) Get() *MaintenanceCycleVmOperationJobSearchFilterGroupsType {
	return v.value
}

func (v *NullableMaintenanceCycleVmOperationJobSearchFilterGroupsType) Set(val *MaintenanceCycleVmOperationJobSearchFilterGroupsType) {
	v.value = val
	v.isSet = true
}

func (v NullableMaintenanceCycleVmOperationJobSearchFilterGroupsType) IsSet() bool {
	return v.isSet
}

func (v *NullableMaintenanceCycleVmOperationJobSearchFilterGroupsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMaintenanceCycleVmOperationJobSearchFilterGroupsType(val *MaintenanceCycleVmOperationJobSearchFilterGroupsType) *NullableMaintenanceCycleVmOperationJobSearchFilterGroupsType {
	return &NullableMaintenanceCycleVmOperationJobSearchFilterGroupsType{value: val, isSet: true}
}

func (v NullableMaintenanceCycleVmOperationJobSearchFilterGroupsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMaintenanceCycleVmOperationJobSearchFilterGroupsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

