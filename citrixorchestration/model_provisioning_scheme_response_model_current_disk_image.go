/*
Citrix Virtual Apps and Desktops REST API TECHPREVIEW

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: techpreview
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
)

// checks if the ProvisioningSchemeResponseModelCurrentDiskImage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProvisioningSchemeResponseModelCurrentDiskImage{}

// ProvisioningSchemeResponseModelCurrentDiskImage The current disk image used to provision new machines in the machine catalog.
type ProvisioningSchemeResponseModelCurrentDiskImage struct {
	FunctionalLevel *FunctionalLevel `json:"FunctionalLevel,omitempty"`
	Image *VMImageResponseModelImage `json:"Image,omitempty"`
	ImageVersion *VMImageResponseModelImageVersion `json:"ImageVersion,omitempty"`
	ImageStatus VMImageStatus `json:"ImageStatus"`
	// The date and time when the snapshot was used in the provisioning scheme.
	Date string `json:"Date"`
	// The note of the provisioning scheme image.
	MasterImageNote *string `json:"MasterImageNote,omitempty"`
}

// NewProvisioningSchemeResponseModelCurrentDiskImage instantiates a new ProvisioningSchemeResponseModelCurrentDiskImage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProvisioningSchemeResponseModelCurrentDiskImage(imageStatus VMImageStatus, date string) *ProvisioningSchemeResponseModelCurrentDiskImage {
	this := ProvisioningSchemeResponseModelCurrentDiskImage{}
	this.ImageStatus = imageStatus
	this.Date = date
	return &this
}

// NewProvisioningSchemeResponseModelCurrentDiskImageWithDefaults instantiates a new ProvisioningSchemeResponseModelCurrentDiskImage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProvisioningSchemeResponseModelCurrentDiskImageWithDefaults() *ProvisioningSchemeResponseModelCurrentDiskImage {
	this := ProvisioningSchemeResponseModelCurrentDiskImage{}
	return &this
}

// GetFunctionalLevel returns the FunctionalLevel field value if set, zero value otherwise.
func (o *ProvisioningSchemeResponseModelCurrentDiskImage) GetFunctionalLevel() FunctionalLevel {
	if o == nil || IsNil(o.FunctionalLevel) {
		var ret FunctionalLevel
		return ret
	}
	return *o.FunctionalLevel
}

// GetFunctionalLevelOk returns a tuple with the FunctionalLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisioningSchemeResponseModelCurrentDiskImage) GetFunctionalLevelOk() (*FunctionalLevel, bool) {
	if o == nil || IsNil(o.FunctionalLevel) {
		return nil, false
	}
	return o.FunctionalLevel, true
}

// HasFunctionalLevel returns a boolean if a field has been set.
func (o *ProvisioningSchemeResponseModelCurrentDiskImage) HasFunctionalLevel() bool {
	if o != nil && !IsNil(o.FunctionalLevel) {
		return true
	}

	return false
}

// SetFunctionalLevel gets a reference to the given FunctionalLevel and assigns it to the FunctionalLevel field.
func (o *ProvisioningSchemeResponseModelCurrentDiskImage) SetFunctionalLevel(v FunctionalLevel) {
	o.FunctionalLevel = &v
}

// GetImage returns the Image field value if set, zero value otherwise.
func (o *ProvisioningSchemeResponseModelCurrentDiskImage) GetImage() VMImageResponseModelImage {
	if o == nil || IsNil(o.Image) {
		var ret VMImageResponseModelImage
		return ret
	}
	return *o.Image
}

// GetImageOk returns a tuple with the Image field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisioningSchemeResponseModelCurrentDiskImage) GetImageOk() (*VMImageResponseModelImage, bool) {
	if o == nil || IsNil(o.Image) {
		return nil, false
	}
	return o.Image, true
}

// HasImage returns a boolean if a field has been set.
func (o *ProvisioningSchemeResponseModelCurrentDiskImage) HasImage() bool {
	if o != nil && !IsNil(o.Image) {
		return true
	}

	return false
}

// SetImage gets a reference to the given VMImageResponseModelImage and assigns it to the Image field.
func (o *ProvisioningSchemeResponseModelCurrentDiskImage) SetImage(v VMImageResponseModelImage) {
	o.Image = &v
}

// GetImageVersion returns the ImageVersion field value if set, zero value otherwise.
func (o *ProvisioningSchemeResponseModelCurrentDiskImage) GetImageVersion() VMImageResponseModelImageVersion {
	if o == nil || IsNil(o.ImageVersion) {
		var ret VMImageResponseModelImageVersion
		return ret
	}
	return *o.ImageVersion
}

// GetImageVersionOk returns a tuple with the ImageVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisioningSchemeResponseModelCurrentDiskImage) GetImageVersionOk() (*VMImageResponseModelImageVersion, bool) {
	if o == nil || IsNil(o.ImageVersion) {
		return nil, false
	}
	return o.ImageVersion, true
}

// HasImageVersion returns a boolean if a field has been set.
func (o *ProvisioningSchemeResponseModelCurrentDiskImage) HasImageVersion() bool {
	if o != nil && !IsNil(o.ImageVersion) {
		return true
	}

	return false
}

// SetImageVersion gets a reference to the given VMImageResponseModelImageVersion and assigns it to the ImageVersion field.
func (o *ProvisioningSchemeResponseModelCurrentDiskImage) SetImageVersion(v VMImageResponseModelImageVersion) {
	o.ImageVersion = &v
}

// GetImageStatus returns the ImageStatus field value
func (o *ProvisioningSchemeResponseModelCurrentDiskImage) GetImageStatus() VMImageStatus {
	if o == nil {
		var ret VMImageStatus
		return ret
	}

	return o.ImageStatus
}

// GetImageStatusOk returns a tuple with the ImageStatus field value
// and a boolean to check if the value has been set.
func (o *ProvisioningSchemeResponseModelCurrentDiskImage) GetImageStatusOk() (*VMImageStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ImageStatus, true
}

// SetImageStatus sets field value
func (o *ProvisioningSchemeResponseModelCurrentDiskImage) SetImageStatus(v VMImageStatus) {
	o.ImageStatus = v
}

// GetDate returns the Date field value
func (o *ProvisioningSchemeResponseModelCurrentDiskImage) GetDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Date
}

// GetDateOk returns a tuple with the Date field value
// and a boolean to check if the value has been set.
func (o *ProvisioningSchemeResponseModelCurrentDiskImage) GetDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Date, true
}

// SetDate sets field value
func (o *ProvisioningSchemeResponseModelCurrentDiskImage) SetDate(v string) {
	o.Date = v
}

// GetMasterImageNote returns the MasterImageNote field value if set, zero value otherwise.
func (o *ProvisioningSchemeResponseModelCurrentDiskImage) GetMasterImageNote() string {
	if o == nil || IsNil(o.MasterImageNote) {
		var ret string
		return ret
	}
	return *o.MasterImageNote
}

// GetMasterImageNoteOk returns a tuple with the MasterImageNote field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisioningSchemeResponseModelCurrentDiskImage) GetMasterImageNoteOk() (*string, bool) {
	if o == nil || IsNil(o.MasterImageNote) {
		return nil, false
	}
	return o.MasterImageNote, true
}

// HasMasterImageNote returns a boolean if a field has been set.
func (o *ProvisioningSchemeResponseModelCurrentDiskImage) HasMasterImageNote() bool {
	if o != nil && !IsNil(o.MasterImageNote) {
		return true
	}

	return false
}

// SetMasterImageNote gets a reference to the given string and assigns it to the MasterImageNote field.
func (o *ProvisioningSchemeResponseModelCurrentDiskImage) SetMasterImageNote(v string) {
	o.MasterImageNote = &v
}

func (o ProvisioningSchemeResponseModelCurrentDiskImage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProvisioningSchemeResponseModelCurrentDiskImage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FunctionalLevel) {
		toSerialize["FunctionalLevel"] = o.FunctionalLevel
	}
	if !IsNil(o.Image) {
		toSerialize["Image"] = o.Image
	}
	if !IsNil(o.ImageVersion) {
		toSerialize["ImageVersion"] = o.ImageVersion
	}
	toSerialize["ImageStatus"] = o.ImageStatus
	toSerialize["Date"] = o.Date
	if !IsNil(o.MasterImageNote) {
		toSerialize["MasterImageNote"] = o.MasterImageNote
	}
	return toSerialize, nil
}

type NullableProvisioningSchemeResponseModelCurrentDiskImage struct {
	value *ProvisioningSchemeResponseModelCurrentDiskImage
	isSet bool
}

func (v NullableProvisioningSchemeResponseModelCurrentDiskImage) Get() *ProvisioningSchemeResponseModelCurrentDiskImage {
	return v.value
}

func (v *NullableProvisioningSchemeResponseModelCurrentDiskImage) Set(val *ProvisioningSchemeResponseModelCurrentDiskImage) {
	v.value = val
	v.isSet = true
}

func (v NullableProvisioningSchemeResponseModelCurrentDiskImage) IsSet() bool {
	return v.isSet
}

func (v *NullableProvisioningSchemeResponseModelCurrentDiskImage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProvisioningSchemeResponseModelCurrentDiskImage(val *ProvisioningSchemeResponseModelCurrentDiskImage) *NullableProvisioningSchemeResponseModelCurrentDiskImage {
	return &NullableProvisioningSchemeResponseModelCurrentDiskImage{value: val, isSet: true}
}

func (v NullableProvisioningSchemeResponseModelCurrentDiskImage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProvisioningSchemeResponseModelCurrentDiskImage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


