/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
	"fmt"
)

// OciEnvironment OCI environments
type OciEnvironment string

// List of OciEnvironment
const (
	OCIENVIRONMENT_COMMERCIAL OciEnvironment = "Commercial"
	OCIENVIRONMENT_US_GOVERNMENT OciEnvironment = "USGovernment"
	OCIENVIRONMENT_UK_GOVERNMENT OciEnvironment = "UKGovernment"
)

// All allowed values of OciEnvironment enum
var AllowedOciEnvironmentEnumValues = []OciEnvironment{
	"Commercial",
	"USGovernment",
	"UKGovernment",
}

func (v *OciEnvironment) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OciEnvironment(value)
	for _, existing := range AllowedOciEnvironmentEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OciEnvironment", value)
}

// NewOciEnvironmentFromValue returns a pointer to a valid OciEnvironment
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOciEnvironmentFromValue(v string) (*OciEnvironment, error) {
	ev := OciEnvironment(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OciEnvironment: valid values are %v", v, AllowedOciEnvironmentEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OciEnvironment) IsValid() bool {
	for _, existing := range AllowedOciEnvironmentEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OciEnvironment value
func (v OciEnvironment) Ptr() *OciEnvironment {
	return &v
}

type NullableOciEnvironment struct {
	value *OciEnvironment
	isSet bool
}

func (v NullableOciEnvironment) Get() *OciEnvironment {
	return v.value
}

func (v *NullableOciEnvironment) Set(val *OciEnvironment) {
	v.value = val
	v.isSet = true
}

func (v NullableOciEnvironment) IsSet() bool {
	return v.isSet
}

func (v *NullableOciEnvironment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOciEnvironment(val *OciEnvironment) *NullableOciEnvironment {
	return &NullableOciEnvironment{value: val, isSet: true}
}

func (v NullableOciEnvironment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOciEnvironment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

