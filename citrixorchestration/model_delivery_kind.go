/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-onprem-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
	"fmt"
)

// DeliveryKind Types of resources delivered from a delivery group.
type DeliveryKind string

// List of DeliveryKind
const (
	DELIVERYKIND_UNKNOWN           DeliveryKind = "Unknown"
	DELIVERYKIND_DESKTOPS_ONLY     DeliveryKind = "DesktopsOnly"
	DELIVERYKIND_DESKTOPS_AND_APPS DeliveryKind = "DesktopsAndApps"
	DELIVERYKIND_APPS_ONLY         DeliveryKind = "AppsOnly"
)

// All allowed values of DeliveryKind enum
var AllowedDeliveryKindEnumValues = []DeliveryKind{
	"Unknown",
	"DesktopsOnly",
	"DesktopsAndApps",
	"AppsOnly",
}

func (v *DeliveryKind) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	*v = DeliveryKind(value)
	return nil
}

// NewDeliveryKindFromValue returns a pointer to a valid DeliveryKind
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDeliveryKindFromValue(v string) (*DeliveryKind, error) {
	ev := DeliveryKind(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DeliveryKind: valid values are %v", v, AllowedDeliveryKindEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DeliveryKind) IsValid() bool {
	for _, existing := range AllowedDeliveryKindEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DeliveryKind value
func (v DeliveryKind) Ptr() *DeliveryKind {
	return &v
}

type NullableDeliveryKind struct {
	value *DeliveryKind
	isSet bool
}

func (v NullableDeliveryKind) Get() *DeliveryKind {
	return v.value
}

func (v *NullableDeliveryKind) Set(val *DeliveryKind) {
	v.value = val
	v.isSet = true
}

func (v NullableDeliveryKind) IsSet() bool {
	return v.isSet
}

func (v *NullableDeliveryKind) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeliveryKind(val *DeliveryKind) *NullableDeliveryKind {
	return &NullableDeliveryKind{value: val, isSet: true}
}

func (v NullableDeliveryKind) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeliveryKind) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
