/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-onprem-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
	"fmt"
)

// ZonableItemType Types of zonable items.
type ZonableItemType string

// List of ZonableItemType
const (
	ZONABLEITEMTYPE_UNKNOWN ZonableItemType = "Unknown"
	ZONABLEITEMTYPE_HYPERVISOR_CONNECTION ZonableItemType = "HypervisorConnection"
	ZONABLEITEMTYPE_CONTROLLER ZonableItemType = "Controller"
	ZONABLEITEMTYPE_MACHINE_CATALOG ZonableItemType = "MachineCatalog"
	ZONABLEITEMTYPE_EDGE_SERVER ZonableItemType = "EdgeServer"
	ZONABLEITEMTYPE_USER ZonableItemType = "User"
	ZONABLEITEMTYPE_APPLICATION ZonableItemType = "Application"
)

// All allowed values of ZonableItemType enum
var AllowedZonableItemTypeEnumValues = []ZonableItemType{
	"Unknown",
	"HypervisorConnection",
	"Controller",
	"MachineCatalog",
	"EdgeServer",
	"User",
	"Application",
}

func (v *ZonableItemType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ZonableItemType(value)
	for _, existing := range AllowedZonableItemTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ZonableItemType", value)
}

// NewZonableItemTypeFromValue returns a pointer to a valid ZonableItemType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewZonableItemTypeFromValue(v string) (*ZonableItemType, error) {
	ev := ZonableItemType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ZonableItemType: valid values are %v", v, AllowedZonableItemTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ZonableItemType) IsValid() bool {
	for _, existing := range AllowedZonableItemTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ZonableItemType value
func (v ZonableItemType) Ptr() *ZonableItemType {
	return &v
}

type NullableZonableItemType struct {
	value *ZonableItemType
	isSet bool
}

func (v NullableZonableItemType) Get() *ZonableItemType {
	return v.value
}

func (v *NullableZonableItemType) Set(val *ZonableItemType) {
	v.value = val
	v.isSet = true
}

func (v NullableZonableItemType) IsSet() bool {
	return v.isSet
}

func (v *NullableZonableItemType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableZonableItemType(val *ZonableItemType) *NullableZonableItemType {
	return &NullableZonableItemType{value: val, isSet: true}
}

func (v NullableZonableItemType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableZonableItemType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

