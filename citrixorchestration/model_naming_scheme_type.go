/*
Citrix Virtual Apps and Desktops REST API TECHPREVIEW

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: techpreview
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
	"fmt"
)

// NamingSchemeType Naming scheme type for creating machine account names during provisioning.
type NamingSchemeType string

// List of NamingSchemeType
const (
	NAMINGSCHEMETYPE_UNKNOWN NamingSchemeType = "Unknown"
	NAMINGSCHEMETYPE_NONE NamingSchemeType = "None"
	NAMINGSCHEMETYPE_NUMERIC NamingSchemeType = "Numeric"
	NAMINGSCHEMETYPE_ALPHABETIC NamingSchemeType = "Alphabetic"
	NAMINGSCHEMETYPE_UNICODE NamingSchemeType = "Unicode"
)

// All allowed values of NamingSchemeType enum
var AllowedNamingSchemeTypeEnumValues = []NamingSchemeType{
	"Unknown",
	"None",
	"Numeric",
	"Alphabetic",
	"Unicode",
}

func (v *NamingSchemeType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := NamingSchemeType(value)
	for _, existing := range AllowedNamingSchemeTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid NamingSchemeType", value)
}

// NewNamingSchemeTypeFromValue returns a pointer to a valid NamingSchemeType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNamingSchemeTypeFromValue(v string) (*NamingSchemeType, error) {
	ev := NamingSchemeType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for NamingSchemeType: valid values are %v", v, AllowedNamingSchemeTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NamingSchemeType) IsValid() bool {
	for _, existing := range AllowedNamingSchemeTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to NamingSchemeType value
func (v NamingSchemeType) Ptr() *NamingSchemeType {
	return &v
}

type NullableNamingSchemeType struct {
	value *NamingSchemeType
	isSet bool
}

func (v NullableNamingSchemeType) Get() *NamingSchemeType {
	return v.value
}

func (v *NullableNamingSchemeType) Set(val *NamingSchemeType) {
	v.value = val
	v.isSet = true
}

func (v NullableNamingSchemeType) IsSet() bool {
	return v.isSet
}

func (v *NullableNamingSchemeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNamingSchemeType(val *NamingSchemeType) *NullableNamingSchemeType {
	return &NullableNamingSchemeType{value: val, isSet: true}
}

func (v NullableNamingSchemeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNamingSchemeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

