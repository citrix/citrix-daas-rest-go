/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-onprem-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
	"fmt"
)

// ImageVersionSpecWarningType Types of warnings that may occur on a machine catalog.
type ImageVersionSpecWarningType string

// List of ImageVersionSpecWarningType
const (
	IMAGEVERSIONSPECWARNINGTYPE_UNKNOWN                                       ImageVersionSpecWarningType = "Unknown"
	IMAGEVERSIONSPECWARNINGTYPE_IMAGE_PREPARATION_OFFICE_REARM_COUNT_EXCEEDED ImageVersionSpecWarningType = "ImagePreparationOfficeRearmCountExceeded"
	IMAGEVERSIONSPECWARNINGTYPE_IMAGE_PREPARATION_OFFICE_REARM_FAILED         ImageVersionSpecWarningType = "ImagePreparationOfficeRearmFailed"
	IMAGEVERSIONSPECWARNINGTYPE_IMAGE_PREPARATION_OS_REARM_COUNT_EXCEEDED     ImageVersionSpecWarningType = "ImagePreparationOSRearmCountExceeded"
	IMAGEVERSIONSPECWARNINGTYPE_IMAGE_PREPARATION_OS_REARM_FAILED             ImageVersionSpecWarningType = "ImagePreparationOSRearmFailed"
	IMAGEVERSIONSPECWARNINGTYPE_GET_MACHINE_PROFILE_METADATA_FAILED           ImageVersionSpecWarningType = "GetMachineProfileMetadataFailed"
	IMAGEVERSIONSPECWARNINGTYPE_GET_CUSTOM_PROPERTIES_FAILED                  ImageVersionSpecWarningType = "GetCustomPropertiesFailed"
	IMAGEVERSIONSPECWARNINGTYPE_IMAGE_ACTION                                  ImageVersionSpecWarningType = "ImageAction"
)

// All allowed values of ImageVersionSpecWarningType enum
var AllowedImageVersionSpecWarningTypeEnumValues = []ImageVersionSpecWarningType{
	"Unknown",
	"ImagePreparationOfficeRearmCountExceeded",
	"ImagePreparationOfficeRearmFailed",
	"ImagePreparationOSRearmCountExceeded",
	"ImagePreparationOSRearmFailed",
	"GetMachineProfileMetadataFailed",
	"GetCustomPropertiesFailed",
	"ImageAction",
}

func (v *ImageVersionSpecWarningType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	*v = ImageVersionSpecWarningType(value)
	return nil
}

// NewImageVersionSpecWarningTypeFromValue returns a pointer to a valid ImageVersionSpecWarningType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewImageVersionSpecWarningTypeFromValue(v string) (*ImageVersionSpecWarningType, error) {
	ev := ImageVersionSpecWarningType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ImageVersionSpecWarningType: valid values are %v", v, AllowedImageVersionSpecWarningTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ImageVersionSpecWarningType) IsValid() bool {
	for _, existing := range AllowedImageVersionSpecWarningTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ImageVersionSpecWarningType value
func (v ImageVersionSpecWarningType) Ptr() *ImageVersionSpecWarningType {
	return &v
}

type NullableImageVersionSpecWarningType struct {
	value *ImageVersionSpecWarningType
	isSet bool
}

func (v NullableImageVersionSpecWarningType) Get() *ImageVersionSpecWarningType {
	return v.value
}

func (v *NullableImageVersionSpecWarningType) Set(val *ImageVersionSpecWarningType) {
	v.value = val
	v.isSet = true
}

func (v NullableImageVersionSpecWarningType) IsSet() bool {
	return v.isSet
}

func (v *NullableImageVersionSpecWarningType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImageVersionSpecWarningType(val *ImageVersionSpecWarningType) *NullableImageVersionSpecWarningType {
	return &NullableImageVersionSpecWarningType{value: val, isSet: true}
}

func (v NullableImageVersionSpecWarningType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImageVersionSpecWarningType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
