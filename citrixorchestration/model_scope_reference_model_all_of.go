/*
Citrix Virtual Apps and Desktops REST API TECHPREVIEW

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: techpreview
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
)

// checks if the ScopeReferenceModelAllOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScopeReferenceModelAllOf{}

// ScopeReferenceModelAllOf struct for ScopeReferenceModelAllOf
type ScopeReferenceModelAllOf struct {
	ScopeId *string `json:"ScopeId,omitempty"`
	ScopeName *string `json:"ScopeName,omitempty"`
}

// NewScopeReferenceModelAllOf instantiates a new ScopeReferenceModelAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScopeReferenceModelAllOf() *ScopeReferenceModelAllOf {
	this := ScopeReferenceModelAllOf{}
	return &this
}

// NewScopeReferenceModelAllOfWithDefaults instantiates a new ScopeReferenceModelAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScopeReferenceModelAllOfWithDefaults() *ScopeReferenceModelAllOf {
	this := ScopeReferenceModelAllOf{}
	return &this
}

// GetScopeId returns the ScopeId field value if set, zero value otherwise.
func (o *ScopeReferenceModelAllOf) GetScopeId() string {
	if o == nil || IsNil(o.ScopeId) {
		var ret string
		return ret
	}
	return *o.ScopeId
}

// GetScopeIdOk returns a tuple with the ScopeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScopeReferenceModelAllOf) GetScopeIdOk() (*string, bool) {
	if o == nil || IsNil(o.ScopeId) {
		return nil, false
	}
	return o.ScopeId, true
}

// HasScopeId returns a boolean if a field has been set.
func (o *ScopeReferenceModelAllOf) HasScopeId() bool {
	if o != nil && !IsNil(o.ScopeId) {
		return true
	}

	return false
}

// SetScopeId gets a reference to the given string and assigns it to the ScopeId field.
func (o *ScopeReferenceModelAllOf) SetScopeId(v string) {
	o.ScopeId = &v
}

// GetScopeName returns the ScopeName field value if set, zero value otherwise.
func (o *ScopeReferenceModelAllOf) GetScopeName() string {
	if o == nil || IsNil(o.ScopeName) {
		var ret string
		return ret
	}
	return *o.ScopeName
}

// GetScopeNameOk returns a tuple with the ScopeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScopeReferenceModelAllOf) GetScopeNameOk() (*string, bool) {
	if o == nil || IsNil(o.ScopeName) {
		return nil, false
	}
	return o.ScopeName, true
}

// HasScopeName returns a boolean if a field has been set.
func (o *ScopeReferenceModelAllOf) HasScopeName() bool {
	if o != nil && !IsNil(o.ScopeName) {
		return true
	}

	return false
}

// SetScopeName gets a reference to the given string and assigns it to the ScopeName field.
func (o *ScopeReferenceModelAllOf) SetScopeName(v string) {
	o.ScopeName = &v
}

func (o ScopeReferenceModelAllOf) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScopeReferenceModelAllOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ScopeId) {
		toSerialize["ScopeId"] = o.ScopeId
	}
	if !IsNil(o.ScopeName) {
		toSerialize["ScopeName"] = o.ScopeName
	}
	return toSerialize, nil
}

type NullableScopeReferenceModelAllOf struct {
	value *ScopeReferenceModelAllOf
	isSet bool
}

func (v NullableScopeReferenceModelAllOf) Get() *ScopeReferenceModelAllOf {
	return v.value
}

func (v *NullableScopeReferenceModelAllOf) Set(val *ScopeReferenceModelAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableScopeReferenceModelAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableScopeReferenceModelAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScopeReferenceModelAllOf(val *ScopeReferenceModelAllOf) *NullableScopeReferenceModelAllOf {
	return &NullableScopeReferenceModelAllOf{value: val, isSet: true}
}

func (v NullableScopeReferenceModelAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScopeReferenceModelAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


