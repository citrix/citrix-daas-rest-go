/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-onprem-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
)

// checks if the SearchFilter4 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchFilter4{}

// SearchFilter4 Search filter for filters.
type SearchFilter4 struct {
	Property FilterProperty `json:"Property"`
	// Value to match. For boolean properties this must be `\"true\"` or `\"false\"`. For string properties and enum values, this is case insensitive.
	Value    string         `json:"Value"`
	Operator SearchOperator `json:"Operator"`
}

type _SearchFilter4 SearchFilter4

// NewSearchFilter4 instantiates a new SearchFilter4 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchFilter4(property FilterProperty, value string, operator SearchOperator) *SearchFilter4 {
	this := SearchFilter4{}
	this.Property = property
	this.Value = value
	this.Operator = operator
	return &this
}

// NewSearchFilter4WithDefaults instantiates a new SearchFilter4 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchFilter4WithDefaults() *SearchFilter4 {
	this := SearchFilter4{}
	return &this
}

// GetProperty returns the Property field value
func (o *SearchFilter4) GetProperty() FilterProperty {
	if o == nil {
		var ret FilterProperty
		return ret
	}

	return o.Property
}

// GetPropertyOk returns a tuple with the Property field value
// and a boolean to check if the value has been set.
func (o *SearchFilter4) GetPropertyOk() (*FilterProperty, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Property, true
}

// SetProperty sets field value
func (o *SearchFilter4) SetProperty(v FilterProperty) {
	o.Property = v
}

// GetValue returns the Value field value
func (o *SearchFilter4) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *SearchFilter4) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *SearchFilter4) SetValue(v string) {
	o.Value = v
}

// GetOperator returns the Operator field value
func (o *SearchFilter4) GetOperator() SearchOperator {
	if o == nil {
		var ret SearchOperator
		return ret
	}

	return o.Operator
}

// GetOperatorOk returns a tuple with the Operator field value
// and a boolean to check if the value has been set.
func (o *SearchFilter4) GetOperatorOk() (*SearchOperator, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Operator, true
}

// SetOperator sets field value
func (o *SearchFilter4) SetOperator(v SearchOperator) {
	o.Operator = v
}

func (o SearchFilter4) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchFilter4) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["Property"] = o.Property
	toSerialize["Value"] = o.Value
	toSerialize["Operator"] = o.Operator
	return toSerialize, nil
}

type NullableSearchFilter4 struct {
	value *SearchFilter4
	isSet bool
}

func (v NullableSearchFilter4) Get() *SearchFilter4 {
	return v.value
}

func (v *NullableSearchFilter4) Set(val *SearchFilter4) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchFilter4) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchFilter4) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchFilter4(val *SearchFilter4) *NullableSearchFilter4 {
	return &NullableSearchFilter4{value: val, isSet: true}
}

func (v NullableSearchFilter4) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchFilter4) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
