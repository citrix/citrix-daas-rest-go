/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-onprem-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
	"fmt"
)

// ProvisioningOperationEventSearchFilterGroupsType The search filter groups type.
type ProvisioningOperationEventSearchFilterGroupsType string

// List of ProvisioningOperationEventSearchFilterGroupsType
const (
	PROVISIONINGOPERATIONEVENTSEARCHFILTERGROUPSTYPE_OR ProvisioningOperationEventSearchFilterGroupsType = "Or"
	PROVISIONINGOPERATIONEVENTSEARCHFILTERGROUPSTYPE_AND ProvisioningOperationEventSearchFilterGroupsType = "And"
)

// All allowed values of ProvisioningOperationEventSearchFilterGroupsType enum
var AllowedProvisioningOperationEventSearchFilterGroupsTypeEnumValues = []ProvisioningOperationEventSearchFilterGroupsType{
	"Or",
	"And",
}

func (v *ProvisioningOperationEventSearchFilterGroupsType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	
	*v = ProvisioningOperationEventSearchFilterGroupsType(value)
	return nil
}

// NewProvisioningOperationEventSearchFilterGroupsTypeFromValue returns a pointer to a valid ProvisioningOperationEventSearchFilterGroupsType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewProvisioningOperationEventSearchFilterGroupsTypeFromValue(v string) (*ProvisioningOperationEventSearchFilterGroupsType, error) {
	ev := ProvisioningOperationEventSearchFilterGroupsType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ProvisioningOperationEventSearchFilterGroupsType: valid values are %v", v, AllowedProvisioningOperationEventSearchFilterGroupsTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ProvisioningOperationEventSearchFilterGroupsType) IsValid() bool {
	for _, existing := range AllowedProvisioningOperationEventSearchFilterGroupsTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ProvisioningOperationEventSearchFilterGroupsType value
func (v ProvisioningOperationEventSearchFilterGroupsType) Ptr() *ProvisioningOperationEventSearchFilterGroupsType {
	return &v
}

type NullableProvisioningOperationEventSearchFilterGroupsType struct {
	value *ProvisioningOperationEventSearchFilterGroupsType
	isSet bool
}

func (v NullableProvisioningOperationEventSearchFilterGroupsType) Get() *ProvisioningOperationEventSearchFilterGroupsType {
	return v.value
}

func (v *NullableProvisioningOperationEventSearchFilterGroupsType) Set(val *ProvisioningOperationEventSearchFilterGroupsType) {
	v.value = val
	v.isSet = true
}

func (v NullableProvisioningOperationEventSearchFilterGroupsType) IsSet() bool {
	return v.isSet
}

func (v *NullableProvisioningOperationEventSearchFilterGroupsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProvisioningOperationEventSearchFilterGroupsType(val *ProvisioningOperationEventSearchFilterGroupsType) *NullableProvisioningOperationEventSearchFilterGroupsType {
	return &NullableProvisioningOperationEventSearchFilterGroupsType{value: val, isSet: true}
}

func (v NullableProvisioningOperationEventSearchFilterGroupsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProvisioningOperationEventSearchFilterGroupsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

