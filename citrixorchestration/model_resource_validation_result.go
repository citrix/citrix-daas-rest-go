/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-onprem-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
	"fmt"
)

// ResourceValidationResult The resource validation result.
type ResourceValidationResult string

// List of ResourceValidationResult
const (
	RESOURCEVALIDATIONRESULT_PASSED ResourceValidationResult = "Passed"
	RESOURCEVALIDATIONRESULT_PASSED_WITH_WARNING ResourceValidationResult = "PassedWithWarning"
	RESOURCEVALIDATIONRESULT_FAILED ResourceValidationResult = "Failed"
)

// All allowed values of ResourceValidationResult enum
var AllowedResourceValidationResultEnumValues = []ResourceValidationResult{
	"Passed",
	"PassedWithWarning",
	"Failed",
}

func (v *ResourceValidationResult) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ResourceValidationResult(value)
	for _, existing := range AllowedResourceValidationResultEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ResourceValidationResult", value)
}

// NewResourceValidationResultFromValue returns a pointer to a valid ResourceValidationResult
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewResourceValidationResultFromValue(v string) (*ResourceValidationResult, error) {
	ev := ResourceValidationResult(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ResourceValidationResult: valid values are %v", v, AllowedResourceValidationResultEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ResourceValidationResult) IsValid() bool {
	for _, existing := range AllowedResourceValidationResultEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ResourceValidationResult value
func (v ResourceValidationResult) Ptr() *ResourceValidationResult {
	return &v
}

type NullableResourceValidationResult struct {
	value *ResourceValidationResult
	isSet bool
}

func (v NullableResourceValidationResult) Get() *ResourceValidationResult {
	return v.value
}

func (v *NullableResourceValidationResult) Set(val *ResourceValidationResult) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceValidationResult) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceValidationResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceValidationResult(val *ResourceValidationResult) *NullableResourceValidationResult {
	return &NullableResourceValidationResult{value: val, isSet: true}
}

func (v NullableResourceValidationResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceValidationResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

