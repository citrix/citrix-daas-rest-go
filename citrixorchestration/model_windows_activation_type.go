/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-onprem-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
	"fmt"
)

// WindowsActivationType The Windows Activation Type.
type WindowsActivationType string

// List of WindowsActivationType
const (
	WINDOWSACTIVATIONTYPE_UNSUPPORTED_VDA WindowsActivationType = "UnsupportedVDA"
	WINDOWSACTIVATIONTYPE_KEY_MANAGEMENT_SERVICE WindowsActivationType = "KeyManagementService"
	WINDOWSACTIVATIONTYPE_MULTIPLE_ACTIVATION_KEY WindowsActivationType = "MultipleActivationKey"
	WINDOWSACTIVATIONTYPE_UNKNOWN WindowsActivationType = "Unknown"
	WINDOWSACTIVATIONTYPE_NOT_VALID WindowsActivationType = "NotValid"
)

// All allowed values of WindowsActivationType enum
var AllowedWindowsActivationTypeEnumValues = []WindowsActivationType{
	"UnsupportedVDA",
	"KeyManagementService",
	"MultipleActivationKey",
	"Unknown",
	"NotValid",
}

func (v *WindowsActivationType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WindowsActivationType(value)
	for _, existing := range AllowedWindowsActivationTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid WindowsActivationType", value)
}

// NewWindowsActivationTypeFromValue returns a pointer to a valid WindowsActivationType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWindowsActivationTypeFromValue(v string) (*WindowsActivationType, error) {
	ev := WindowsActivationType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for WindowsActivationType: valid values are %v", v, AllowedWindowsActivationTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WindowsActivationType) IsValid() bool {
	for _, existing := range AllowedWindowsActivationTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to WindowsActivationType value
func (v WindowsActivationType) Ptr() *WindowsActivationType {
	return &v
}

type NullableWindowsActivationType struct {
	value *WindowsActivationType
	isSet bool
}

func (v NullableWindowsActivationType) Get() *WindowsActivationType {
	return v.value
}

func (v *NullableWindowsActivationType) Set(val *WindowsActivationType) {
	v.value = val
	v.isSet = true
}

func (v NullableWindowsActivationType) IsSet() bool {
	return v.isSet
}

func (v *NullableWindowsActivationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWindowsActivationType(val *WindowsActivationType) *NullableWindowsActivationType {
	return &NullableWindowsActivationType{value: val, isSet: true}
}

func (v NullableWindowsActivationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWindowsActivationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

