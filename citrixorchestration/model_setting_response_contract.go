/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
)

// checks if the SettingResponseContract type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SettingResponseContract{}

// SettingResponseContract Setting instance contract
type SettingResponseContract struct {
	// Setting name. Is globally unique.
	SettingName NullableString `json:"SettingName,omitempty"`
	// The current setting value. * For boolean types, the returned value is \"True\"/\"False\". The caller should assume the value is   case-insensitive. * For all other types, if the value is null, use default value, otherwise use the specified value.
	CurrentValue NullableString `json:"CurrentValue,omitempty"`
}

// NewSettingResponseContract instantiates a new SettingResponseContract object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSettingResponseContract() *SettingResponseContract {
	this := SettingResponseContract{}
	return &this
}

// NewSettingResponseContractWithDefaults instantiates a new SettingResponseContract object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSettingResponseContractWithDefaults() *SettingResponseContract {
	this := SettingResponseContract{}
	return &this
}

// GetSettingName returns the SettingName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SettingResponseContract) GetSettingName() string {
	if o == nil || IsNil(o.SettingName.Get()) {
		var ret string
		return ret
	}
	return *o.SettingName.Get()
}

// GetSettingNameOk returns a tuple with the SettingName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SettingResponseContract) GetSettingNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SettingName.Get(), o.SettingName.IsSet()
}

// HasSettingName returns a boolean if a field has been set.
func (o *SettingResponseContract) HasSettingName() bool {
	if o != nil && o.SettingName.IsSet() {
		return true
	}

	return false
}

// SetSettingName gets a reference to the given NullableString and assigns it to the SettingName field.
func (o *SettingResponseContract) SetSettingName(v string) {
	o.SettingName.Set(&v)
}
// SetSettingNameNil sets the value for SettingName to be an explicit nil
func (o *SettingResponseContract) SetSettingNameNil() {
	o.SettingName.Set(nil)
}

// UnsetSettingName ensures that no value is present for SettingName, not even an explicit nil
func (o *SettingResponseContract) UnsetSettingName() {
	o.SettingName.Unset()
}

// GetCurrentValue returns the CurrentValue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SettingResponseContract) GetCurrentValue() string {
	if o == nil || IsNil(o.CurrentValue.Get()) {
		var ret string
		return ret
	}
	return *o.CurrentValue.Get()
}

// GetCurrentValueOk returns a tuple with the CurrentValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SettingResponseContract) GetCurrentValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CurrentValue.Get(), o.CurrentValue.IsSet()
}

// HasCurrentValue returns a boolean if a field has been set.
func (o *SettingResponseContract) HasCurrentValue() bool {
	if o != nil && o.CurrentValue.IsSet() {
		return true
	}

	return false
}

// SetCurrentValue gets a reference to the given NullableString and assigns it to the CurrentValue field.
func (o *SettingResponseContract) SetCurrentValue(v string) {
	o.CurrentValue.Set(&v)
}
// SetCurrentValueNil sets the value for CurrentValue to be an explicit nil
func (o *SettingResponseContract) SetCurrentValueNil() {
	o.CurrentValue.Set(nil)
}

// UnsetCurrentValue ensures that no value is present for CurrentValue, not even an explicit nil
func (o *SettingResponseContract) UnsetCurrentValue() {
	o.CurrentValue.Unset()
}

func (o SettingResponseContract) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SettingResponseContract) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.SettingName.IsSet() {
		toSerialize["SettingName"] = o.SettingName.Get()
	}
	if o.CurrentValue.IsSet() {
		toSerialize["CurrentValue"] = o.CurrentValue.Get()
	}
	return toSerialize, nil
}

type NullableSettingResponseContract struct {
	value *SettingResponseContract
	isSet bool
}

func (v NullableSettingResponseContract) Get() *SettingResponseContract {
	return v.value
}

func (v *NullableSettingResponseContract) Set(val *SettingResponseContract) {
	v.value = val
	v.isSet = true
}

func (v NullableSettingResponseContract) IsSet() bool {
	return v.isSet
}

func (v *NullableSettingResponseContract) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSettingResponseContract(val *SettingResponseContract) *NullableSettingResponseContract {
	return &NullableSettingResponseContract{value: val, isSet: true}
}

func (v NullableSettingResponseContract) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSettingResponseContract) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


