/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
)

// checks if the SiteSettingsResponseModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SiteSettingsResponseModel{}

// SiteSettingsResponseModel struct for SiteSettingsResponseModel
type SiteSettingsResponseModel struct {
	UseVerticalScalingForRdsLaunches NullableBool `json:"UseVerticalScalingForRdsLaunches,omitempty"`
	DnsResolutionEnabled NullableBool `json:"DnsResolutionEnabled,omitempty"`
	TrustRequestsSentToTheXmlServicePortEnabled NullableBool `json:"TrustRequestsSentToTheXmlServicePortEnabled,omitempty"`
	// The policy set in web UI is enabled or not
	WebUiPolicySetEnabled NullableBool `json:"WebUiPolicySetEnabled,omitempty"`
	SupportedAuthenticators *Authenticator `json:"SupportedAuthenticators,omitempty"`
}

// NewSiteSettingsResponseModel instantiates a new SiteSettingsResponseModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSiteSettingsResponseModel() *SiteSettingsResponseModel {
	this := SiteSettingsResponseModel{}
	return &this
}

// NewSiteSettingsResponseModelWithDefaults instantiates a new SiteSettingsResponseModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSiteSettingsResponseModelWithDefaults() *SiteSettingsResponseModel {
	this := SiteSettingsResponseModel{}
	return &this
}

// GetUseVerticalScalingForRdsLaunches returns the UseVerticalScalingForRdsLaunches field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SiteSettingsResponseModel) GetUseVerticalScalingForRdsLaunches() bool {
	if o == nil || IsNil(o.UseVerticalScalingForRdsLaunches.Get()) {
		var ret bool
		return ret
	}
	return *o.UseVerticalScalingForRdsLaunches.Get()
}

// GetUseVerticalScalingForRdsLaunchesOk returns a tuple with the UseVerticalScalingForRdsLaunches field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SiteSettingsResponseModel) GetUseVerticalScalingForRdsLaunchesOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.UseVerticalScalingForRdsLaunches.Get(), o.UseVerticalScalingForRdsLaunches.IsSet()
}

// HasUseVerticalScalingForRdsLaunches returns a boolean if a field has been set.
func (o *SiteSettingsResponseModel) HasUseVerticalScalingForRdsLaunches() bool {
	if o != nil && o.UseVerticalScalingForRdsLaunches.IsSet() {
		return true
	}

	return false
}

// SetUseVerticalScalingForRdsLaunches gets a reference to the given NullableBool and assigns it to the UseVerticalScalingForRdsLaunches field.
func (o *SiteSettingsResponseModel) SetUseVerticalScalingForRdsLaunches(v bool) {
	o.UseVerticalScalingForRdsLaunches.Set(&v)
}
// SetUseVerticalScalingForRdsLaunchesNil sets the value for UseVerticalScalingForRdsLaunches to be an explicit nil
func (o *SiteSettingsResponseModel) SetUseVerticalScalingForRdsLaunchesNil() {
	o.UseVerticalScalingForRdsLaunches.Set(nil)
}

// UnsetUseVerticalScalingForRdsLaunches ensures that no value is present for UseVerticalScalingForRdsLaunches, not even an explicit nil
func (o *SiteSettingsResponseModel) UnsetUseVerticalScalingForRdsLaunches() {
	o.UseVerticalScalingForRdsLaunches.Unset()
}

// GetDnsResolutionEnabled returns the DnsResolutionEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SiteSettingsResponseModel) GetDnsResolutionEnabled() bool {
	if o == nil || IsNil(o.DnsResolutionEnabled.Get()) {
		var ret bool
		return ret
	}
	return *o.DnsResolutionEnabled.Get()
}

// GetDnsResolutionEnabledOk returns a tuple with the DnsResolutionEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SiteSettingsResponseModel) GetDnsResolutionEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.DnsResolutionEnabled.Get(), o.DnsResolutionEnabled.IsSet()
}

// HasDnsResolutionEnabled returns a boolean if a field has been set.
func (o *SiteSettingsResponseModel) HasDnsResolutionEnabled() bool {
	if o != nil && o.DnsResolutionEnabled.IsSet() {
		return true
	}

	return false
}

// SetDnsResolutionEnabled gets a reference to the given NullableBool and assigns it to the DnsResolutionEnabled field.
func (o *SiteSettingsResponseModel) SetDnsResolutionEnabled(v bool) {
	o.DnsResolutionEnabled.Set(&v)
}
// SetDnsResolutionEnabledNil sets the value for DnsResolutionEnabled to be an explicit nil
func (o *SiteSettingsResponseModel) SetDnsResolutionEnabledNil() {
	o.DnsResolutionEnabled.Set(nil)
}

// UnsetDnsResolutionEnabled ensures that no value is present for DnsResolutionEnabled, not even an explicit nil
func (o *SiteSettingsResponseModel) UnsetDnsResolutionEnabled() {
	o.DnsResolutionEnabled.Unset()
}

// GetTrustRequestsSentToTheXmlServicePortEnabled returns the TrustRequestsSentToTheXmlServicePortEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SiteSettingsResponseModel) GetTrustRequestsSentToTheXmlServicePortEnabled() bool {
	if o == nil || IsNil(o.TrustRequestsSentToTheXmlServicePortEnabled.Get()) {
		var ret bool
		return ret
	}
	return *o.TrustRequestsSentToTheXmlServicePortEnabled.Get()
}

// GetTrustRequestsSentToTheXmlServicePortEnabledOk returns a tuple with the TrustRequestsSentToTheXmlServicePortEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SiteSettingsResponseModel) GetTrustRequestsSentToTheXmlServicePortEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.TrustRequestsSentToTheXmlServicePortEnabled.Get(), o.TrustRequestsSentToTheXmlServicePortEnabled.IsSet()
}

// HasTrustRequestsSentToTheXmlServicePortEnabled returns a boolean if a field has been set.
func (o *SiteSettingsResponseModel) HasTrustRequestsSentToTheXmlServicePortEnabled() bool {
	if o != nil && o.TrustRequestsSentToTheXmlServicePortEnabled.IsSet() {
		return true
	}

	return false
}

// SetTrustRequestsSentToTheXmlServicePortEnabled gets a reference to the given NullableBool and assigns it to the TrustRequestsSentToTheXmlServicePortEnabled field.
func (o *SiteSettingsResponseModel) SetTrustRequestsSentToTheXmlServicePortEnabled(v bool) {
	o.TrustRequestsSentToTheXmlServicePortEnabled.Set(&v)
}
// SetTrustRequestsSentToTheXmlServicePortEnabledNil sets the value for TrustRequestsSentToTheXmlServicePortEnabled to be an explicit nil
func (o *SiteSettingsResponseModel) SetTrustRequestsSentToTheXmlServicePortEnabledNil() {
	o.TrustRequestsSentToTheXmlServicePortEnabled.Set(nil)
}

// UnsetTrustRequestsSentToTheXmlServicePortEnabled ensures that no value is present for TrustRequestsSentToTheXmlServicePortEnabled, not even an explicit nil
func (o *SiteSettingsResponseModel) UnsetTrustRequestsSentToTheXmlServicePortEnabled() {
	o.TrustRequestsSentToTheXmlServicePortEnabled.Unset()
}

// GetWebUiPolicySetEnabled returns the WebUiPolicySetEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SiteSettingsResponseModel) GetWebUiPolicySetEnabled() bool {
	if o == nil || IsNil(o.WebUiPolicySetEnabled.Get()) {
		var ret bool
		return ret
	}
	return *o.WebUiPolicySetEnabled.Get()
}

// GetWebUiPolicySetEnabledOk returns a tuple with the WebUiPolicySetEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SiteSettingsResponseModel) GetWebUiPolicySetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.WebUiPolicySetEnabled.Get(), o.WebUiPolicySetEnabled.IsSet()
}

// HasWebUiPolicySetEnabled returns a boolean if a field has been set.
func (o *SiteSettingsResponseModel) HasWebUiPolicySetEnabled() bool {
	if o != nil && o.WebUiPolicySetEnabled.IsSet() {
		return true
	}

	return false
}

// SetWebUiPolicySetEnabled gets a reference to the given NullableBool and assigns it to the WebUiPolicySetEnabled field.
func (o *SiteSettingsResponseModel) SetWebUiPolicySetEnabled(v bool) {
	o.WebUiPolicySetEnabled.Set(&v)
}
// SetWebUiPolicySetEnabledNil sets the value for WebUiPolicySetEnabled to be an explicit nil
func (o *SiteSettingsResponseModel) SetWebUiPolicySetEnabledNil() {
	o.WebUiPolicySetEnabled.Set(nil)
}

// UnsetWebUiPolicySetEnabled ensures that no value is present for WebUiPolicySetEnabled, not even an explicit nil
func (o *SiteSettingsResponseModel) UnsetWebUiPolicySetEnabled() {
	o.WebUiPolicySetEnabled.Unset()
}

// GetSupportedAuthenticators returns the SupportedAuthenticators field value if set, zero value otherwise.
func (o *SiteSettingsResponseModel) GetSupportedAuthenticators() Authenticator {
	if o == nil || IsNil(o.SupportedAuthenticators) {
		var ret Authenticator
		return ret
	}
	return *o.SupportedAuthenticators
}

// GetSupportedAuthenticatorsOk returns a tuple with the SupportedAuthenticators field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteSettingsResponseModel) GetSupportedAuthenticatorsOk() (*Authenticator, bool) {
	if o == nil || IsNil(o.SupportedAuthenticators) {
		return nil, false
	}
	return o.SupportedAuthenticators, true
}

// HasSupportedAuthenticators returns a boolean if a field has been set.
func (o *SiteSettingsResponseModel) HasSupportedAuthenticators() bool {
	if o != nil && !IsNil(o.SupportedAuthenticators) {
		return true
	}

	return false
}

// SetSupportedAuthenticators gets a reference to the given Authenticator and assigns it to the SupportedAuthenticators field.
func (o *SiteSettingsResponseModel) SetSupportedAuthenticators(v Authenticator) {
	o.SupportedAuthenticators = &v
}

func (o SiteSettingsResponseModel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SiteSettingsResponseModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.UseVerticalScalingForRdsLaunches.IsSet() {
		toSerialize["UseVerticalScalingForRdsLaunches"] = o.UseVerticalScalingForRdsLaunches.Get()
	}
	if o.DnsResolutionEnabled.IsSet() {
		toSerialize["DnsResolutionEnabled"] = o.DnsResolutionEnabled.Get()
	}
	if o.TrustRequestsSentToTheXmlServicePortEnabled.IsSet() {
		toSerialize["TrustRequestsSentToTheXmlServicePortEnabled"] = o.TrustRequestsSentToTheXmlServicePortEnabled.Get()
	}
	if o.WebUiPolicySetEnabled.IsSet() {
		toSerialize["WebUiPolicySetEnabled"] = o.WebUiPolicySetEnabled.Get()
	}
	if !IsNil(o.SupportedAuthenticators) {
		toSerialize["SupportedAuthenticators"] = o.SupportedAuthenticators
	}
	return toSerialize, nil
}

type NullableSiteSettingsResponseModel struct {
	value *SiteSettingsResponseModel
	isSet bool
}

func (v NullableSiteSettingsResponseModel) Get() *SiteSettingsResponseModel {
	return v.value
}

func (v *NullableSiteSettingsResponseModel) Set(val *SiteSettingsResponseModel) {
	v.value = val
	v.isSet = true
}

func (v NullableSiteSettingsResponseModel) IsSet() bool {
	return v.isSet
}

func (v *NullableSiteSettingsResponseModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSiteSettingsResponseModel(val *SiteSettingsResponseModel) *NullableSiteSettingsResponseModel {
	return &NullableSiteSettingsResponseModel{value: val, isSet: true}
}

func (v NullableSiteSettingsResponseModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSiteSettingsResponseModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


