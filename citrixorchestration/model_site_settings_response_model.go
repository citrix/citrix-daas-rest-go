/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-onprem-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
)

// checks if the SiteSettingsResponseModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SiteSettingsResponseModel{}

// SiteSettingsResponseModel The site settings response model.
type SiteSettingsResponseModel struct {
	UseVerticalScalingForRdsLaunches NullableBool `json:"UseVerticalScalingForRdsLaunches,omitempty"`
	DnsResolutionEnabled NullableBool `json:"DnsResolutionEnabled,omitempty"`
	TrustRequestsSentToTheXmlServicePortEnabled NullableBool `json:"TrustRequestsSentToTheXmlServicePortEnabled,omitempty"`
	// The policy set in web UI is enabled or not
	WebUiPolicySetEnabled NullableBool `json:"WebUiPolicySetEnabled,omitempty"`
	// The max number of minutes that console can be inactive.
	ConsoleInactivityTimeoutMinutes NullableInt32 `json:"ConsoleInactivityTimeoutMinutes,omitempty"`
	SupportedAuthenticators *Authenticator `json:"SupportedAuthenticators,omitempty"`
	// Applicable only for On-Premise. Indicate whether to display security banner on the login page.
	ShowSecurityBannerOnLoginPage NullableBool `json:"ShowSecurityBannerOnLoginPage,omitempty"`
	// Applicable only for On-Premise. The custom security banner on the login page, max length is 5000.
	SecurityBannerOnLoginPage NullableString `json:"SecurityBannerOnLoginPage,omitempty"`
	// Applicable only for On-Premise. Indicate whether to display the DDC used for the current Studio session on the login page.
	ShowConnectedControllerOnLoginPage NullableBool `json:"ShowConnectedControllerOnLoginPage,omitempty"`
	// Application only for On-Premise. List of origins allowed to make cross-origin requests for Integrated Windows Authentication.
	AllowedCorsOriginsForIwa []string `json:"AllowedCorsOriginsForIwa,omitempty"`
	// Applicable only for On-Premise Multiple sites configuration
	MultiSites []MultiSiteModel `json:"MultiSites,omitempty"`
	// The default domain to be used in the login page.
	DefaultDomain NullableString `json:"DefaultDomain,omitempty"`
	// XML service configurations of enabling listening for https/http requests. Only applicable for On-Premise deployments.
	XmlServicesSslConfigurations []NameValueStringPairModel `json:"XmlServicesSslConfigurations,omitempty"`
	MultiTenantServicesAccess *MultiTenantServicesAccessModel `json:"MultiTenantServicesAccess,omitempty"`
}

// NewSiteSettingsResponseModel instantiates a new SiteSettingsResponseModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSiteSettingsResponseModel() *SiteSettingsResponseModel {
	this := SiteSettingsResponseModel{}
	return &this
}

// NewSiteSettingsResponseModelWithDefaults instantiates a new SiteSettingsResponseModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSiteSettingsResponseModelWithDefaults() *SiteSettingsResponseModel {
	this := SiteSettingsResponseModel{}
	return &this
}

// GetUseVerticalScalingForRdsLaunches returns the UseVerticalScalingForRdsLaunches field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SiteSettingsResponseModel) GetUseVerticalScalingForRdsLaunches() bool {
	if o == nil || IsNil(o.UseVerticalScalingForRdsLaunches.Get()) {
		var ret bool
		return ret
	}
	return *o.UseVerticalScalingForRdsLaunches.Get()
}

// GetUseVerticalScalingForRdsLaunchesOk returns a tuple with the UseVerticalScalingForRdsLaunches field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SiteSettingsResponseModel) GetUseVerticalScalingForRdsLaunchesOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.UseVerticalScalingForRdsLaunches.Get(), o.UseVerticalScalingForRdsLaunches.IsSet()
}

// HasUseVerticalScalingForRdsLaunches returns a boolean if a field has been set.
func (o *SiteSettingsResponseModel) HasUseVerticalScalingForRdsLaunches() bool {
	if o != nil && o.UseVerticalScalingForRdsLaunches.IsSet() {
		return true
	}

	return false
}

// SetUseVerticalScalingForRdsLaunches gets a reference to the given NullableBool and assigns it to the UseVerticalScalingForRdsLaunches field.
func (o *SiteSettingsResponseModel) SetUseVerticalScalingForRdsLaunches(v bool) {
	o.UseVerticalScalingForRdsLaunches.Set(&v)
}
// SetUseVerticalScalingForRdsLaunchesNil sets the value for UseVerticalScalingForRdsLaunches to be an explicit nil
func (o *SiteSettingsResponseModel) SetUseVerticalScalingForRdsLaunchesNil() {
	o.UseVerticalScalingForRdsLaunches.Set(nil)
}

// UnsetUseVerticalScalingForRdsLaunches ensures that no value is present for UseVerticalScalingForRdsLaunches, not even an explicit nil
func (o *SiteSettingsResponseModel) UnsetUseVerticalScalingForRdsLaunches() {
	o.UseVerticalScalingForRdsLaunches.Unset()
}

// GetDnsResolutionEnabled returns the DnsResolutionEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SiteSettingsResponseModel) GetDnsResolutionEnabled() bool {
	if o == nil || IsNil(o.DnsResolutionEnabled.Get()) {
		var ret bool
		return ret
	}
	return *o.DnsResolutionEnabled.Get()
}

// GetDnsResolutionEnabledOk returns a tuple with the DnsResolutionEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SiteSettingsResponseModel) GetDnsResolutionEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.DnsResolutionEnabled.Get(), o.DnsResolutionEnabled.IsSet()
}

// HasDnsResolutionEnabled returns a boolean if a field has been set.
func (o *SiteSettingsResponseModel) HasDnsResolutionEnabled() bool {
	if o != nil && o.DnsResolutionEnabled.IsSet() {
		return true
	}

	return false
}

// SetDnsResolutionEnabled gets a reference to the given NullableBool and assigns it to the DnsResolutionEnabled field.
func (o *SiteSettingsResponseModel) SetDnsResolutionEnabled(v bool) {
	o.DnsResolutionEnabled.Set(&v)
}
// SetDnsResolutionEnabledNil sets the value for DnsResolutionEnabled to be an explicit nil
func (o *SiteSettingsResponseModel) SetDnsResolutionEnabledNil() {
	o.DnsResolutionEnabled.Set(nil)
}

// UnsetDnsResolutionEnabled ensures that no value is present for DnsResolutionEnabled, not even an explicit nil
func (o *SiteSettingsResponseModel) UnsetDnsResolutionEnabled() {
	o.DnsResolutionEnabled.Unset()
}

// GetTrustRequestsSentToTheXmlServicePortEnabled returns the TrustRequestsSentToTheXmlServicePortEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SiteSettingsResponseModel) GetTrustRequestsSentToTheXmlServicePortEnabled() bool {
	if o == nil || IsNil(o.TrustRequestsSentToTheXmlServicePortEnabled.Get()) {
		var ret bool
		return ret
	}
	return *o.TrustRequestsSentToTheXmlServicePortEnabled.Get()
}

// GetTrustRequestsSentToTheXmlServicePortEnabledOk returns a tuple with the TrustRequestsSentToTheXmlServicePortEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SiteSettingsResponseModel) GetTrustRequestsSentToTheXmlServicePortEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.TrustRequestsSentToTheXmlServicePortEnabled.Get(), o.TrustRequestsSentToTheXmlServicePortEnabled.IsSet()
}

// HasTrustRequestsSentToTheXmlServicePortEnabled returns a boolean if a field has been set.
func (o *SiteSettingsResponseModel) HasTrustRequestsSentToTheXmlServicePortEnabled() bool {
	if o != nil && o.TrustRequestsSentToTheXmlServicePortEnabled.IsSet() {
		return true
	}

	return false
}

// SetTrustRequestsSentToTheXmlServicePortEnabled gets a reference to the given NullableBool and assigns it to the TrustRequestsSentToTheXmlServicePortEnabled field.
func (o *SiteSettingsResponseModel) SetTrustRequestsSentToTheXmlServicePortEnabled(v bool) {
	o.TrustRequestsSentToTheXmlServicePortEnabled.Set(&v)
}
// SetTrustRequestsSentToTheXmlServicePortEnabledNil sets the value for TrustRequestsSentToTheXmlServicePortEnabled to be an explicit nil
func (o *SiteSettingsResponseModel) SetTrustRequestsSentToTheXmlServicePortEnabledNil() {
	o.TrustRequestsSentToTheXmlServicePortEnabled.Set(nil)
}

// UnsetTrustRequestsSentToTheXmlServicePortEnabled ensures that no value is present for TrustRequestsSentToTheXmlServicePortEnabled, not even an explicit nil
func (o *SiteSettingsResponseModel) UnsetTrustRequestsSentToTheXmlServicePortEnabled() {
	o.TrustRequestsSentToTheXmlServicePortEnabled.Unset()
}

// GetWebUiPolicySetEnabled returns the WebUiPolicySetEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SiteSettingsResponseModel) GetWebUiPolicySetEnabled() bool {
	if o == nil || IsNil(o.WebUiPolicySetEnabled.Get()) {
		var ret bool
		return ret
	}
	return *o.WebUiPolicySetEnabled.Get()
}

// GetWebUiPolicySetEnabledOk returns a tuple with the WebUiPolicySetEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SiteSettingsResponseModel) GetWebUiPolicySetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.WebUiPolicySetEnabled.Get(), o.WebUiPolicySetEnabled.IsSet()
}

// HasWebUiPolicySetEnabled returns a boolean if a field has been set.
func (o *SiteSettingsResponseModel) HasWebUiPolicySetEnabled() bool {
	if o != nil && o.WebUiPolicySetEnabled.IsSet() {
		return true
	}

	return false
}

// SetWebUiPolicySetEnabled gets a reference to the given NullableBool and assigns it to the WebUiPolicySetEnabled field.
func (o *SiteSettingsResponseModel) SetWebUiPolicySetEnabled(v bool) {
	o.WebUiPolicySetEnabled.Set(&v)
}
// SetWebUiPolicySetEnabledNil sets the value for WebUiPolicySetEnabled to be an explicit nil
func (o *SiteSettingsResponseModel) SetWebUiPolicySetEnabledNil() {
	o.WebUiPolicySetEnabled.Set(nil)
}

// UnsetWebUiPolicySetEnabled ensures that no value is present for WebUiPolicySetEnabled, not even an explicit nil
func (o *SiteSettingsResponseModel) UnsetWebUiPolicySetEnabled() {
	o.WebUiPolicySetEnabled.Unset()
}

// GetConsoleInactivityTimeoutMinutes returns the ConsoleInactivityTimeoutMinutes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SiteSettingsResponseModel) GetConsoleInactivityTimeoutMinutes() int32 {
	if o == nil || IsNil(o.ConsoleInactivityTimeoutMinutes.Get()) {
		var ret int32
		return ret
	}
	return *o.ConsoleInactivityTimeoutMinutes.Get()
}

// GetConsoleInactivityTimeoutMinutesOk returns a tuple with the ConsoleInactivityTimeoutMinutes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SiteSettingsResponseModel) GetConsoleInactivityTimeoutMinutesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ConsoleInactivityTimeoutMinutes.Get(), o.ConsoleInactivityTimeoutMinutes.IsSet()
}

// HasConsoleInactivityTimeoutMinutes returns a boolean if a field has been set.
func (o *SiteSettingsResponseModel) HasConsoleInactivityTimeoutMinutes() bool {
	if o != nil && o.ConsoleInactivityTimeoutMinutes.IsSet() {
		return true
	}

	return false
}

// SetConsoleInactivityTimeoutMinutes gets a reference to the given NullableInt32 and assigns it to the ConsoleInactivityTimeoutMinutes field.
func (o *SiteSettingsResponseModel) SetConsoleInactivityTimeoutMinutes(v int32) {
	o.ConsoleInactivityTimeoutMinutes.Set(&v)
}
// SetConsoleInactivityTimeoutMinutesNil sets the value for ConsoleInactivityTimeoutMinutes to be an explicit nil
func (o *SiteSettingsResponseModel) SetConsoleInactivityTimeoutMinutesNil() {
	o.ConsoleInactivityTimeoutMinutes.Set(nil)
}

// UnsetConsoleInactivityTimeoutMinutes ensures that no value is present for ConsoleInactivityTimeoutMinutes, not even an explicit nil
func (o *SiteSettingsResponseModel) UnsetConsoleInactivityTimeoutMinutes() {
	o.ConsoleInactivityTimeoutMinutes.Unset()
}

// GetSupportedAuthenticators returns the SupportedAuthenticators field value if set, zero value otherwise.
func (o *SiteSettingsResponseModel) GetSupportedAuthenticators() Authenticator {
	if o == nil || IsNil(o.SupportedAuthenticators) {
		var ret Authenticator
		return ret
	}
	return *o.SupportedAuthenticators
}

// GetSupportedAuthenticatorsOk returns a tuple with the SupportedAuthenticators field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteSettingsResponseModel) GetSupportedAuthenticatorsOk() (*Authenticator, bool) {
	if o == nil || IsNil(o.SupportedAuthenticators) {
		return nil, false
	}
	return o.SupportedAuthenticators, true
}

// HasSupportedAuthenticators returns a boolean if a field has been set.
func (o *SiteSettingsResponseModel) HasSupportedAuthenticators() bool {
	if o != nil && !IsNil(o.SupportedAuthenticators) {
		return true
	}

	return false
}

// SetSupportedAuthenticators gets a reference to the given Authenticator and assigns it to the SupportedAuthenticators field.
func (o *SiteSettingsResponseModel) SetSupportedAuthenticators(v Authenticator) {
	o.SupportedAuthenticators = &v
}

// GetShowSecurityBannerOnLoginPage returns the ShowSecurityBannerOnLoginPage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SiteSettingsResponseModel) GetShowSecurityBannerOnLoginPage() bool {
	if o == nil || IsNil(o.ShowSecurityBannerOnLoginPage.Get()) {
		var ret bool
		return ret
	}
	return *o.ShowSecurityBannerOnLoginPage.Get()
}

// GetShowSecurityBannerOnLoginPageOk returns a tuple with the ShowSecurityBannerOnLoginPage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SiteSettingsResponseModel) GetShowSecurityBannerOnLoginPageOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ShowSecurityBannerOnLoginPage.Get(), o.ShowSecurityBannerOnLoginPage.IsSet()
}

// HasShowSecurityBannerOnLoginPage returns a boolean if a field has been set.
func (o *SiteSettingsResponseModel) HasShowSecurityBannerOnLoginPage() bool {
	if o != nil && o.ShowSecurityBannerOnLoginPage.IsSet() {
		return true
	}

	return false
}

// SetShowSecurityBannerOnLoginPage gets a reference to the given NullableBool and assigns it to the ShowSecurityBannerOnLoginPage field.
func (o *SiteSettingsResponseModel) SetShowSecurityBannerOnLoginPage(v bool) {
	o.ShowSecurityBannerOnLoginPage.Set(&v)
}
// SetShowSecurityBannerOnLoginPageNil sets the value for ShowSecurityBannerOnLoginPage to be an explicit nil
func (o *SiteSettingsResponseModel) SetShowSecurityBannerOnLoginPageNil() {
	o.ShowSecurityBannerOnLoginPage.Set(nil)
}

// UnsetShowSecurityBannerOnLoginPage ensures that no value is present for ShowSecurityBannerOnLoginPage, not even an explicit nil
func (o *SiteSettingsResponseModel) UnsetShowSecurityBannerOnLoginPage() {
	o.ShowSecurityBannerOnLoginPage.Unset()
}

// GetSecurityBannerOnLoginPage returns the SecurityBannerOnLoginPage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SiteSettingsResponseModel) GetSecurityBannerOnLoginPage() string {
	if o == nil || IsNil(o.SecurityBannerOnLoginPage.Get()) {
		var ret string
		return ret
	}
	return *o.SecurityBannerOnLoginPage.Get()
}

// GetSecurityBannerOnLoginPageOk returns a tuple with the SecurityBannerOnLoginPage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SiteSettingsResponseModel) GetSecurityBannerOnLoginPageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SecurityBannerOnLoginPage.Get(), o.SecurityBannerOnLoginPage.IsSet()
}

// HasSecurityBannerOnLoginPage returns a boolean if a field has been set.
func (o *SiteSettingsResponseModel) HasSecurityBannerOnLoginPage() bool {
	if o != nil && o.SecurityBannerOnLoginPage.IsSet() {
		return true
	}

	return false
}

// SetSecurityBannerOnLoginPage gets a reference to the given NullableString and assigns it to the SecurityBannerOnLoginPage field.
func (o *SiteSettingsResponseModel) SetSecurityBannerOnLoginPage(v string) {
	o.SecurityBannerOnLoginPage.Set(&v)
}
// SetSecurityBannerOnLoginPageNil sets the value for SecurityBannerOnLoginPage to be an explicit nil
func (o *SiteSettingsResponseModel) SetSecurityBannerOnLoginPageNil() {
	o.SecurityBannerOnLoginPage.Set(nil)
}

// UnsetSecurityBannerOnLoginPage ensures that no value is present for SecurityBannerOnLoginPage, not even an explicit nil
func (o *SiteSettingsResponseModel) UnsetSecurityBannerOnLoginPage() {
	o.SecurityBannerOnLoginPage.Unset()
}

// GetShowConnectedControllerOnLoginPage returns the ShowConnectedControllerOnLoginPage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SiteSettingsResponseModel) GetShowConnectedControllerOnLoginPage() bool {
	if o == nil || IsNil(o.ShowConnectedControllerOnLoginPage.Get()) {
		var ret bool
		return ret
	}
	return *o.ShowConnectedControllerOnLoginPage.Get()
}

// GetShowConnectedControllerOnLoginPageOk returns a tuple with the ShowConnectedControllerOnLoginPage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SiteSettingsResponseModel) GetShowConnectedControllerOnLoginPageOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ShowConnectedControllerOnLoginPage.Get(), o.ShowConnectedControllerOnLoginPage.IsSet()
}

// HasShowConnectedControllerOnLoginPage returns a boolean if a field has been set.
func (o *SiteSettingsResponseModel) HasShowConnectedControllerOnLoginPage() bool {
	if o != nil && o.ShowConnectedControllerOnLoginPage.IsSet() {
		return true
	}

	return false
}

// SetShowConnectedControllerOnLoginPage gets a reference to the given NullableBool and assigns it to the ShowConnectedControllerOnLoginPage field.
func (o *SiteSettingsResponseModel) SetShowConnectedControllerOnLoginPage(v bool) {
	o.ShowConnectedControllerOnLoginPage.Set(&v)
}
// SetShowConnectedControllerOnLoginPageNil sets the value for ShowConnectedControllerOnLoginPage to be an explicit nil
func (o *SiteSettingsResponseModel) SetShowConnectedControllerOnLoginPageNil() {
	o.ShowConnectedControllerOnLoginPage.Set(nil)
}

// UnsetShowConnectedControllerOnLoginPage ensures that no value is present for ShowConnectedControllerOnLoginPage, not even an explicit nil
func (o *SiteSettingsResponseModel) UnsetShowConnectedControllerOnLoginPage() {
	o.ShowConnectedControllerOnLoginPage.Unset()
}

// GetAllowedCorsOriginsForIwa returns the AllowedCorsOriginsForIwa field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SiteSettingsResponseModel) GetAllowedCorsOriginsForIwa() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.AllowedCorsOriginsForIwa
}

// GetAllowedCorsOriginsForIwaOk returns a tuple with the AllowedCorsOriginsForIwa field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SiteSettingsResponseModel) GetAllowedCorsOriginsForIwaOk() ([]string, bool) {
	if o == nil || IsNil(o.AllowedCorsOriginsForIwa) {
		return nil, false
	}
	return o.AllowedCorsOriginsForIwa, true
}

// HasAllowedCorsOriginsForIwa returns a boolean if a field has been set.
func (o *SiteSettingsResponseModel) HasAllowedCorsOriginsForIwa() bool {
	if o != nil && IsNil(o.AllowedCorsOriginsForIwa) {
		return true
	}

	return false
}

// SetAllowedCorsOriginsForIwa gets a reference to the given []string and assigns it to the AllowedCorsOriginsForIwa field.
func (o *SiteSettingsResponseModel) SetAllowedCorsOriginsForIwa(v []string) {
	o.AllowedCorsOriginsForIwa = v
}

// GetMultiSites returns the MultiSites field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SiteSettingsResponseModel) GetMultiSites() []MultiSiteModel {
	if o == nil {
		var ret []MultiSiteModel
		return ret
	}
	return o.MultiSites
}

// GetMultiSitesOk returns a tuple with the MultiSites field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SiteSettingsResponseModel) GetMultiSitesOk() ([]MultiSiteModel, bool) {
	if o == nil || IsNil(o.MultiSites) {
		return nil, false
	}
	return o.MultiSites, true
}

// HasMultiSites returns a boolean if a field has been set.
func (o *SiteSettingsResponseModel) HasMultiSites() bool {
	if o != nil && IsNil(o.MultiSites) {
		return true
	}

	return false
}

// SetMultiSites gets a reference to the given []MultiSiteModel and assigns it to the MultiSites field.
func (o *SiteSettingsResponseModel) SetMultiSites(v []MultiSiteModel) {
	o.MultiSites = v
}

// GetDefaultDomain returns the DefaultDomain field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SiteSettingsResponseModel) GetDefaultDomain() string {
	if o == nil || IsNil(o.DefaultDomain.Get()) {
		var ret string
		return ret
	}
	return *o.DefaultDomain.Get()
}

// GetDefaultDomainOk returns a tuple with the DefaultDomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SiteSettingsResponseModel) GetDefaultDomainOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultDomain.Get(), o.DefaultDomain.IsSet()
}

// HasDefaultDomain returns a boolean if a field has been set.
func (o *SiteSettingsResponseModel) HasDefaultDomain() bool {
	if o != nil && o.DefaultDomain.IsSet() {
		return true
	}

	return false
}

// SetDefaultDomain gets a reference to the given NullableString and assigns it to the DefaultDomain field.
func (o *SiteSettingsResponseModel) SetDefaultDomain(v string) {
	o.DefaultDomain.Set(&v)
}
// SetDefaultDomainNil sets the value for DefaultDomain to be an explicit nil
func (o *SiteSettingsResponseModel) SetDefaultDomainNil() {
	o.DefaultDomain.Set(nil)
}

// UnsetDefaultDomain ensures that no value is present for DefaultDomain, not even an explicit nil
func (o *SiteSettingsResponseModel) UnsetDefaultDomain() {
	o.DefaultDomain.Unset()
}

// GetXmlServicesSslConfigurations returns the XmlServicesSslConfigurations field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SiteSettingsResponseModel) GetXmlServicesSslConfigurations() []NameValueStringPairModel {
	if o == nil {
		var ret []NameValueStringPairModel
		return ret
	}
	return o.XmlServicesSslConfigurations
}

// GetXmlServicesSslConfigurationsOk returns a tuple with the XmlServicesSslConfigurations field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SiteSettingsResponseModel) GetXmlServicesSslConfigurationsOk() ([]NameValueStringPairModel, bool) {
	if o == nil || IsNil(o.XmlServicesSslConfigurations) {
		return nil, false
	}
	return o.XmlServicesSslConfigurations, true
}

// HasXmlServicesSslConfigurations returns a boolean if a field has been set.
func (o *SiteSettingsResponseModel) HasXmlServicesSslConfigurations() bool {
	if o != nil && IsNil(o.XmlServicesSslConfigurations) {
		return true
	}

	return false
}

// SetXmlServicesSslConfigurations gets a reference to the given []NameValueStringPairModel and assigns it to the XmlServicesSslConfigurations field.
func (o *SiteSettingsResponseModel) SetXmlServicesSslConfigurations(v []NameValueStringPairModel) {
	o.XmlServicesSslConfigurations = v
}

// GetMultiTenantServicesAccess returns the MultiTenantServicesAccess field value if set, zero value otherwise.
func (o *SiteSettingsResponseModel) GetMultiTenantServicesAccess() MultiTenantServicesAccessModel {
	if o == nil || IsNil(o.MultiTenantServicesAccess) {
		var ret MultiTenantServicesAccessModel
		return ret
	}
	return *o.MultiTenantServicesAccess
}

// GetMultiTenantServicesAccessOk returns a tuple with the MultiTenantServicesAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteSettingsResponseModel) GetMultiTenantServicesAccessOk() (*MultiTenantServicesAccessModel, bool) {
	if o == nil || IsNil(o.MultiTenantServicesAccess) {
		return nil, false
	}
	return o.MultiTenantServicesAccess, true
}

// HasMultiTenantServicesAccess returns a boolean if a field has been set.
func (o *SiteSettingsResponseModel) HasMultiTenantServicesAccess() bool {
	if o != nil && !IsNil(o.MultiTenantServicesAccess) {
		return true
	}

	return false
}

// SetMultiTenantServicesAccess gets a reference to the given MultiTenantServicesAccessModel and assigns it to the MultiTenantServicesAccess field.
func (o *SiteSettingsResponseModel) SetMultiTenantServicesAccess(v MultiTenantServicesAccessModel) {
	o.MultiTenantServicesAccess = &v
}

func (o SiteSettingsResponseModel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SiteSettingsResponseModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.UseVerticalScalingForRdsLaunches.IsSet() {
		toSerialize["UseVerticalScalingForRdsLaunches"] = o.UseVerticalScalingForRdsLaunches.Get()
	}
	if o.DnsResolutionEnabled.IsSet() {
		toSerialize["DnsResolutionEnabled"] = o.DnsResolutionEnabled.Get()
	}
	if o.TrustRequestsSentToTheXmlServicePortEnabled.IsSet() {
		toSerialize["TrustRequestsSentToTheXmlServicePortEnabled"] = o.TrustRequestsSentToTheXmlServicePortEnabled.Get()
	}
	if o.WebUiPolicySetEnabled.IsSet() {
		toSerialize["WebUiPolicySetEnabled"] = o.WebUiPolicySetEnabled.Get()
	}
	if o.ConsoleInactivityTimeoutMinutes.IsSet() {
		toSerialize["ConsoleInactivityTimeoutMinutes"] = o.ConsoleInactivityTimeoutMinutes.Get()
	}
	if !IsNil(o.SupportedAuthenticators) {
		toSerialize["SupportedAuthenticators"] = o.SupportedAuthenticators
	}
	if o.ShowSecurityBannerOnLoginPage.IsSet() {
		toSerialize["ShowSecurityBannerOnLoginPage"] = o.ShowSecurityBannerOnLoginPage.Get()
	}
	if o.SecurityBannerOnLoginPage.IsSet() {
		toSerialize["SecurityBannerOnLoginPage"] = o.SecurityBannerOnLoginPage.Get()
	}
	if o.ShowConnectedControllerOnLoginPage.IsSet() {
		toSerialize["ShowConnectedControllerOnLoginPage"] = o.ShowConnectedControllerOnLoginPage.Get()
	}
	if o.AllowedCorsOriginsForIwa != nil {
		toSerialize["AllowedCorsOriginsForIwa"] = o.AllowedCorsOriginsForIwa
	}
	if o.MultiSites != nil {
		toSerialize["MultiSites"] = o.MultiSites
	}
	if o.DefaultDomain.IsSet() {
		toSerialize["DefaultDomain"] = o.DefaultDomain.Get()
	}
	if o.XmlServicesSslConfigurations != nil {
		toSerialize["XmlServicesSslConfigurations"] = o.XmlServicesSslConfigurations
	}
	if !IsNil(o.MultiTenantServicesAccess) {
		toSerialize["MultiTenantServicesAccess"] = o.MultiTenantServicesAccess
	}
	return toSerialize, nil
}

type NullableSiteSettingsResponseModel struct {
	value *SiteSettingsResponseModel
	isSet bool
}

func (v NullableSiteSettingsResponseModel) Get() *SiteSettingsResponseModel {
	return v.value
}

func (v *NullableSiteSettingsResponseModel) Set(val *SiteSettingsResponseModel) {
	v.value = val
	v.isSet = true
}

func (v NullableSiteSettingsResponseModel) IsSet() bool {
	return v.isSet
}

func (v *NullableSiteSettingsResponseModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSiteSettingsResponseModel(val *SiteSettingsResponseModel) *NullableSiteSettingsResponseModel {
	return &NullableSiteSettingsResponseModel{value: val, isSet: true}
}

func (v NullableSiteSettingsResponseModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSiteSettingsResponseModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


