/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
	"fmt"
)

// IdentityMachineIPAddressResolveMethod The method used to resolve the IP address of the machine.
type IdentityMachineIPAddressResolveMethod string

// List of IdentityMachineIPAddressResolveMethod
const (
	IDENTITYMACHINEIPADDRESSRESOLVEMETHOD_UNKNOWN IdentityMachineIPAddressResolveMethod = "Unknown"
	IDENTITYMACHINEIPADDRESSRESOLVEMETHOD_NONE IdentityMachineIPAddressResolveMethod = "None"
	IDENTITYMACHINEIPADDRESSRESOLVEMETHOD_HOST_NAME IdentityMachineIPAddressResolveMethod = "HostName"
	IDENTITYMACHINEIPADDRESSRESOLVEMETHOD_NET_BIOS IdentityMachineIPAddressResolveMethod = "NetBios"
)

// All allowed values of IdentityMachineIPAddressResolveMethod enum
var AllowedIdentityMachineIPAddressResolveMethodEnumValues = []IdentityMachineIPAddressResolveMethod{
	"Unknown",
	"None",
	"HostName",
	"NetBios",
}

func (v *IdentityMachineIPAddressResolveMethod) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := IdentityMachineIPAddressResolveMethod(value)
	for _, existing := range AllowedIdentityMachineIPAddressResolveMethodEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid IdentityMachineIPAddressResolveMethod", value)
}

// NewIdentityMachineIPAddressResolveMethodFromValue returns a pointer to a valid IdentityMachineIPAddressResolveMethod
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewIdentityMachineIPAddressResolveMethodFromValue(v string) (*IdentityMachineIPAddressResolveMethod, error) {
	ev := IdentityMachineIPAddressResolveMethod(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for IdentityMachineIPAddressResolveMethod: valid values are %v", v, AllowedIdentityMachineIPAddressResolveMethodEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v IdentityMachineIPAddressResolveMethod) IsValid() bool {
	for _, existing := range AllowedIdentityMachineIPAddressResolveMethodEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to IdentityMachineIPAddressResolveMethod value
func (v IdentityMachineIPAddressResolveMethod) Ptr() *IdentityMachineIPAddressResolveMethod {
	return &v
}

type NullableIdentityMachineIPAddressResolveMethod struct {
	value *IdentityMachineIPAddressResolveMethod
	isSet bool
}

func (v NullableIdentityMachineIPAddressResolveMethod) Get() *IdentityMachineIPAddressResolveMethod {
	return v.value
}

func (v *NullableIdentityMachineIPAddressResolveMethod) Set(val *IdentityMachineIPAddressResolveMethod) {
	v.value = val
	v.isSet = true
}

func (v NullableIdentityMachineIPAddressResolveMethod) IsSet() bool {
	return v.isSet
}

func (v *NullableIdentityMachineIPAddressResolveMethod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdentityMachineIPAddressResolveMethod(val *IdentityMachineIPAddressResolveMethod) *NullableIdentityMachineIPAddressResolveMethod {
	return &NullableIdentityMachineIPAddressResolveMethod{value: val, isSet: true}
}

func (v NullableIdentityMachineIPAddressResolveMethod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdentityMachineIPAddressResolveMethod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

