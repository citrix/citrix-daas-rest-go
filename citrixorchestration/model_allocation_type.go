/*
Citrix Virtual Apps and Desktops REST API TECHPREVIEW

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: techpreview
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
	"fmt"
)

// AllocationType Machine allocation type, indicating how machines are allocated to users.
type AllocationType string

// List of AllocationType
const (
	ALLOCATIONTYPE_UNKNOWN AllocationType = "Unknown"
	ALLOCATIONTYPE_STATIC AllocationType = "Static"
	ALLOCATIONTYPE_RANDOM AllocationType = "Random"
)

// All allowed values of AllocationType enum
var AllowedAllocationTypeEnumValues = []AllocationType{
	"Unknown",
	"Static",
	"Random",
}

func (v *AllocationType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AllocationType(value)
	for _, existing := range AllowedAllocationTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AllocationType", value)
}

// NewAllocationTypeFromValue returns a pointer to a valid AllocationType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAllocationTypeFromValue(v string) (*AllocationType, error) {
	ev := AllocationType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AllocationType: valid values are %v", v, AllowedAllocationTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AllocationType) IsValid() bool {
	for _, existing := range AllowedAllocationTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AllocationType value
func (v AllocationType) Ptr() *AllocationType {
	return &v
}

type NullableAllocationType struct {
	value *AllocationType
	isSet bool
}

func (v NullableAllocationType) Get() *AllocationType {
	return v.value
}

func (v *NullableAllocationType) Set(val *AllocationType) {
	v.value = val
	v.isSet = true
}

func (v NullableAllocationType) IsSet() bool {
	return v.isSet
}

func (v *NullableAllocationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAllocationType(val *AllocationType) *NullableAllocationType {
	return &NullableAllocationType{value: val, isSet: true}
}

func (v NullableAllocationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAllocationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

