/*
Citrix Virtual Apps and Desktops REST API TECHPREVIEW

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: techpreview
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
	"fmt"
)

// SearchOperator Search operators.
type SearchOperator string

// List of SearchOperator
const (
	SEARCHOPERATOR_EQUALS SearchOperator = "Equals"
	SEARCHOPERATOR_NOT_EQUALS SearchOperator = "NotEquals"
	SEARCHOPERATOR_LESS_THAN SearchOperator = "LessThan"
	SEARCHOPERATOR_GREATER_THAN SearchOperator = "GreaterThan"
	SEARCHOPERATOR_LIKE SearchOperator = "Like"
	SEARCHOPERATOR_NOT_LIKE SearchOperator = "NotLike"
	SEARCHOPERATOR_STARTS_WITH SearchOperator = "StartsWith"
	SEARCHOPERATOR_NOT_STARTS_WITH SearchOperator = "NotStartsWith"
	SEARCHOPERATOR_ENDS_WITH SearchOperator = "EndsWith"
	SEARCHOPERATOR_NONE SearchOperator = "None"
	SEARCHOPERATOR_ANY SearchOperator = "Any"
	SEARCHOPERATOR_CONTAINS SearchOperator = "Contains"
	SEARCHOPERATOR_CONTAINS_LIKE SearchOperator = "ContainsLike"
	SEARCHOPERATOR_CONTAINS_STARTS_WITH SearchOperator = "ContainsStartsWith"
	SEARCHOPERATOR_CONTAINS_ENDS_WITH SearchOperator = "ContainsEndsWith"
	SEARCHOPERATOR_NOT_CONTAINS SearchOperator = "NotContains"
	SEARCHOPERATOR_IN SearchOperator = "In"
	SEARCHOPERATOR_NOT_IN SearchOperator = "NotIn"
	SEARCHOPERATOR_IS_WITHIN SearchOperator = "IsWithin"
	SEARCHOPERATOR_IS_NOT_WITHIN SearchOperator = "IsNotWithin"
	SEARCHOPERATOR_LESS_THAN_OR_EQUALS SearchOperator = "LessThanOrEquals"
	SEARCHOPERATOR_GREATER_THAN_OR_EQUALS SearchOperator = "GreaterThanOrEquals"
)

// All allowed values of SearchOperator enum
var AllowedSearchOperatorEnumValues = []SearchOperator{
	"Equals",
	"NotEquals",
	"LessThan",
	"GreaterThan",
	"Like",
	"NotLike",
	"StartsWith",
	"NotStartsWith",
	"EndsWith",
	"None",
	"Any",
	"Contains",
	"ContainsLike",
	"ContainsStartsWith",
	"ContainsEndsWith",
	"NotContains",
	"In",
	"NotIn",
	"IsWithin",
	"IsNotWithin",
	"LessThanOrEquals",
	"GreaterThanOrEquals",
}

func (v *SearchOperator) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SearchOperator(value)
	for _, existing := range AllowedSearchOperatorEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SearchOperator", value)
}

// NewSearchOperatorFromValue returns a pointer to a valid SearchOperator
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSearchOperatorFromValue(v string) (*SearchOperator, error) {
	ev := SearchOperator(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SearchOperator: valid values are %v", v, AllowedSearchOperatorEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SearchOperator) IsValid() bool {
	for _, existing := range AllowedSearchOperatorEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SearchOperator value
func (v SearchOperator) Ptr() *SearchOperator {
	return &v
}

type NullableSearchOperator struct {
	value *SearchOperator
	isSet bool
}

func (v NullableSearchOperator) Get() *SearchOperator {
	return v.value
}

func (v *NullableSearchOperator) Set(val *SearchOperator) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchOperator) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchOperator) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchOperator(val *SearchOperator) *NullableSearchOperator {
	return &NullableSearchOperator{value: val, isSet: true}
}

func (v NullableSearchOperator) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchOperator) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

