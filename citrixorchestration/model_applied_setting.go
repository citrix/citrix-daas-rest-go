/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
)

// checks if the AppliedSetting type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AppliedSetting{}

// AppliedSetting Winning setting information
type AppliedSetting struct {
	// Setting name
	SettingName NullableString `json:"SettingName,omitempty"`
	// Setting value
	SettingValue NullableString `json:"SettingValue,omitempty"`
	// Source GPO for the setting
	WinningGpo NullableString `json:"WinningGpo,omitempty"`
	// Source policy for the setting
	WinningPolicy NullableString `json:"WinningPolicy,omitempty"`
}

// NewAppliedSetting instantiates a new AppliedSetting object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppliedSetting() *AppliedSetting {
	this := AppliedSetting{}
	return &this
}

// NewAppliedSettingWithDefaults instantiates a new AppliedSetting object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppliedSettingWithDefaults() *AppliedSetting {
	this := AppliedSetting{}
	return &this
}

// GetSettingName returns the SettingName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AppliedSetting) GetSettingName() string {
	if o == nil || IsNil(o.SettingName.Get()) {
		var ret string
		return ret
	}
	return *o.SettingName.Get()
}

// GetSettingNameOk returns a tuple with the SettingName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AppliedSetting) GetSettingNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SettingName.Get(), o.SettingName.IsSet()
}

// HasSettingName returns a boolean if a field has been set.
func (o *AppliedSetting) HasSettingName() bool {
	if o != nil && o.SettingName.IsSet() {
		return true
	}

	return false
}

// SetSettingName gets a reference to the given NullableString and assigns it to the SettingName field.
func (o *AppliedSetting) SetSettingName(v string) {
	o.SettingName.Set(&v)
}
// SetSettingNameNil sets the value for SettingName to be an explicit nil
func (o *AppliedSetting) SetSettingNameNil() {
	o.SettingName.Set(nil)
}

// UnsetSettingName ensures that no value is present for SettingName, not even an explicit nil
func (o *AppliedSetting) UnsetSettingName() {
	o.SettingName.Unset()
}

// GetSettingValue returns the SettingValue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AppliedSetting) GetSettingValue() string {
	if o == nil || IsNil(o.SettingValue.Get()) {
		var ret string
		return ret
	}
	return *o.SettingValue.Get()
}

// GetSettingValueOk returns a tuple with the SettingValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AppliedSetting) GetSettingValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SettingValue.Get(), o.SettingValue.IsSet()
}

// HasSettingValue returns a boolean if a field has been set.
func (o *AppliedSetting) HasSettingValue() bool {
	if o != nil && o.SettingValue.IsSet() {
		return true
	}

	return false
}

// SetSettingValue gets a reference to the given NullableString and assigns it to the SettingValue field.
func (o *AppliedSetting) SetSettingValue(v string) {
	o.SettingValue.Set(&v)
}
// SetSettingValueNil sets the value for SettingValue to be an explicit nil
func (o *AppliedSetting) SetSettingValueNil() {
	o.SettingValue.Set(nil)
}

// UnsetSettingValue ensures that no value is present for SettingValue, not even an explicit nil
func (o *AppliedSetting) UnsetSettingValue() {
	o.SettingValue.Unset()
}

// GetWinningGpo returns the WinningGpo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AppliedSetting) GetWinningGpo() string {
	if o == nil || IsNil(o.WinningGpo.Get()) {
		var ret string
		return ret
	}
	return *o.WinningGpo.Get()
}

// GetWinningGpoOk returns a tuple with the WinningGpo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AppliedSetting) GetWinningGpoOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.WinningGpo.Get(), o.WinningGpo.IsSet()
}

// HasWinningGpo returns a boolean if a field has been set.
func (o *AppliedSetting) HasWinningGpo() bool {
	if o != nil && o.WinningGpo.IsSet() {
		return true
	}

	return false
}

// SetWinningGpo gets a reference to the given NullableString and assigns it to the WinningGpo field.
func (o *AppliedSetting) SetWinningGpo(v string) {
	o.WinningGpo.Set(&v)
}
// SetWinningGpoNil sets the value for WinningGpo to be an explicit nil
func (o *AppliedSetting) SetWinningGpoNil() {
	o.WinningGpo.Set(nil)
}

// UnsetWinningGpo ensures that no value is present for WinningGpo, not even an explicit nil
func (o *AppliedSetting) UnsetWinningGpo() {
	o.WinningGpo.Unset()
}

// GetWinningPolicy returns the WinningPolicy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AppliedSetting) GetWinningPolicy() string {
	if o == nil || IsNil(o.WinningPolicy.Get()) {
		var ret string
		return ret
	}
	return *o.WinningPolicy.Get()
}

// GetWinningPolicyOk returns a tuple with the WinningPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AppliedSetting) GetWinningPolicyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.WinningPolicy.Get(), o.WinningPolicy.IsSet()
}

// HasWinningPolicy returns a boolean if a field has been set.
func (o *AppliedSetting) HasWinningPolicy() bool {
	if o != nil && o.WinningPolicy.IsSet() {
		return true
	}

	return false
}

// SetWinningPolicy gets a reference to the given NullableString and assigns it to the WinningPolicy field.
func (o *AppliedSetting) SetWinningPolicy(v string) {
	o.WinningPolicy.Set(&v)
}
// SetWinningPolicyNil sets the value for WinningPolicy to be an explicit nil
func (o *AppliedSetting) SetWinningPolicyNil() {
	o.WinningPolicy.Set(nil)
}

// UnsetWinningPolicy ensures that no value is present for WinningPolicy, not even an explicit nil
func (o *AppliedSetting) UnsetWinningPolicy() {
	o.WinningPolicy.Unset()
}

func (o AppliedSetting) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AppliedSetting) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.SettingName.IsSet() {
		toSerialize["SettingName"] = o.SettingName.Get()
	}
	if o.SettingValue.IsSet() {
		toSerialize["SettingValue"] = o.SettingValue.Get()
	}
	if o.WinningGpo.IsSet() {
		toSerialize["WinningGpo"] = o.WinningGpo.Get()
	}
	if o.WinningPolicy.IsSet() {
		toSerialize["WinningPolicy"] = o.WinningPolicy.Get()
	}
	return toSerialize, nil
}

type NullableAppliedSetting struct {
	value *AppliedSetting
	isSet bool
}

func (v NullableAppliedSetting) Get() *AppliedSetting {
	return v.value
}

func (v *NullableAppliedSetting) Set(val *AppliedSetting) {
	v.value = val
	v.isSet = true
}

func (v NullableAppliedSetting) IsSet() bool {
	return v.isSet
}

func (v *NullableAppliedSetting) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppliedSetting(val *AppliedSetting) *NullableAppliedSetting {
	return &NullableAppliedSetting{value: val, isSet: true}
}

func (v NullableAppliedSetting) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppliedSetting) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


