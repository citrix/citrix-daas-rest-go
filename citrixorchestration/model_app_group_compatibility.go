/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-onprem-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
	"fmt"
)

// AppGroupCompatibility App Group Compatibility set.
type AppGroupCompatibility string

// List of AppGroupCompatibility
const (
	APPGROUPCOMPATIBILITY_UNKNOWN                    AppGroupCompatibility = "Unknown"
	APPGROUPCOMPATIBILITY_COMPATIBLE                 AppGroupCompatibility = "Compatible"
	APPGROUPCOMPATIBILITY_INCOMPATIBLE_PRIVATE       AppGroupCompatibility = "IncompatiblePrivate"
	APPGROUPCOMPATIBILITY_INCOMPATIBLE_DELIVERY_TYPE AppGroupCompatibility = "IncompatibleDeliveryType"
)

// All allowed values of AppGroupCompatibility enum
var AllowedAppGroupCompatibilityEnumValues = []AppGroupCompatibility{
	"Unknown",
	"Compatible",
	"IncompatiblePrivate",
	"IncompatibleDeliveryType",
}

func (v *AppGroupCompatibility) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	*v = AppGroupCompatibility(value)
	return nil
}

// NewAppGroupCompatibilityFromValue returns a pointer to a valid AppGroupCompatibility
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAppGroupCompatibilityFromValue(v string) (*AppGroupCompatibility, error) {
	ev := AppGroupCompatibility(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AppGroupCompatibility: valid values are %v", v, AllowedAppGroupCompatibilityEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AppGroupCompatibility) IsValid() bool {
	for _, existing := range AllowedAppGroupCompatibilityEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AppGroupCompatibility value
func (v AppGroupCompatibility) Ptr() *AppGroupCompatibility {
	return &v
}

type NullableAppGroupCompatibility struct {
	value *AppGroupCompatibility
	isSet bool
}

func (v NullableAppGroupCompatibility) Get() *AppGroupCompatibility {
	return v.value
}

func (v *NullableAppGroupCompatibility) Set(val *AppGroupCompatibility) {
	v.value = val
	v.isSet = true
}

func (v NullableAppGroupCompatibility) IsSet() bool {
	return v.isSet
}

func (v *NullableAppGroupCompatibility) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppGroupCompatibility(val *AppGroupCompatibility) *NullableAppGroupCompatibility {
	return &NullableAppGroupCompatibility{value: val, isSet: true}
}

func (v NullableAppGroupCompatibility) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppGroupCompatibility) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
