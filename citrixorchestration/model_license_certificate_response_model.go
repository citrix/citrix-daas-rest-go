/*
Citrix Virtual Apps and Desktops REST API TECHPREVIEW

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: techpreview
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
)

// checks if the LicenseCertificateResponseModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LicenseCertificateResponseModel{}

// LicenseCertificateResponseModel The https certificate of the license server
type LicenseCertificateResponseModel struct {
	// The thumbprint of the certificate
	Thumbprint *string `json:"Thumbprint,omitempty"`
	// The issuer of the certificate
	Issuer *string `json:"Issuer,omitempty"`
	// The subject of the certificate
	Subject *string `json:"Subject,omitempty"`
	// Datetime the certificate valid from
	ValidFrom *string `json:"ValidFrom,omitempty"`
	// Datetime the certificate valid to
	ValidTo *string `json:"ValidTo,omitempty"`
	// The serialNumber of the certificate
	SerialNumber *string `json:"SerialNumber,omitempty"`
	// The friendly name of the certificate
	FriendlyName *string `json:"FriendlyName,omitempty"`
	// The certificate version
	Version *int32 `json:"Version,omitempty"`
	// The raw data for the entire X509v3 certificate as a hexadecimal string
	RawData *string `json:"rawData,omitempty"`
	// A description of the ChainStatus value
	ChainStatusInformations []string `json:"ChainStatusInformations,omitempty"`
	// The status of the X509 chain
	ChainStatusFlags []X509ChainStatusFlags `json:"ChainStatusFlags,omitempty"`
}

// NewLicenseCertificateResponseModel instantiates a new LicenseCertificateResponseModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLicenseCertificateResponseModel() *LicenseCertificateResponseModel {
	this := LicenseCertificateResponseModel{}
	return &this
}

// NewLicenseCertificateResponseModelWithDefaults instantiates a new LicenseCertificateResponseModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLicenseCertificateResponseModelWithDefaults() *LicenseCertificateResponseModel {
	this := LicenseCertificateResponseModel{}
	return &this
}

// GetThumbprint returns the Thumbprint field value if set, zero value otherwise.
func (o *LicenseCertificateResponseModel) GetThumbprint() string {
	if o == nil || IsNil(o.Thumbprint) {
		var ret string
		return ret
	}
	return *o.Thumbprint
}

// GetThumbprintOk returns a tuple with the Thumbprint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseCertificateResponseModel) GetThumbprintOk() (*string, bool) {
	if o == nil || IsNil(o.Thumbprint) {
		return nil, false
	}
	return o.Thumbprint, true
}

// HasThumbprint returns a boolean if a field has been set.
func (o *LicenseCertificateResponseModel) HasThumbprint() bool {
	if o != nil && !IsNil(o.Thumbprint) {
		return true
	}

	return false
}

// SetThumbprint gets a reference to the given string and assigns it to the Thumbprint field.
func (o *LicenseCertificateResponseModel) SetThumbprint(v string) {
	o.Thumbprint = &v
}

// GetIssuer returns the Issuer field value if set, zero value otherwise.
func (o *LicenseCertificateResponseModel) GetIssuer() string {
	if o == nil || IsNil(o.Issuer) {
		var ret string
		return ret
	}
	return *o.Issuer
}

// GetIssuerOk returns a tuple with the Issuer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseCertificateResponseModel) GetIssuerOk() (*string, bool) {
	if o == nil || IsNil(o.Issuer) {
		return nil, false
	}
	return o.Issuer, true
}

// HasIssuer returns a boolean if a field has been set.
func (o *LicenseCertificateResponseModel) HasIssuer() bool {
	if o != nil && !IsNil(o.Issuer) {
		return true
	}

	return false
}

// SetIssuer gets a reference to the given string and assigns it to the Issuer field.
func (o *LicenseCertificateResponseModel) SetIssuer(v string) {
	o.Issuer = &v
}

// GetSubject returns the Subject field value if set, zero value otherwise.
func (o *LicenseCertificateResponseModel) GetSubject() string {
	if o == nil || IsNil(o.Subject) {
		var ret string
		return ret
	}
	return *o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseCertificateResponseModel) GetSubjectOk() (*string, bool) {
	if o == nil || IsNil(o.Subject) {
		return nil, false
	}
	return o.Subject, true
}

// HasSubject returns a boolean if a field has been set.
func (o *LicenseCertificateResponseModel) HasSubject() bool {
	if o != nil && !IsNil(o.Subject) {
		return true
	}

	return false
}

// SetSubject gets a reference to the given string and assigns it to the Subject field.
func (o *LicenseCertificateResponseModel) SetSubject(v string) {
	o.Subject = &v
}

// GetValidFrom returns the ValidFrom field value if set, zero value otherwise.
func (o *LicenseCertificateResponseModel) GetValidFrom() string {
	if o == nil || IsNil(o.ValidFrom) {
		var ret string
		return ret
	}
	return *o.ValidFrom
}

// GetValidFromOk returns a tuple with the ValidFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseCertificateResponseModel) GetValidFromOk() (*string, bool) {
	if o == nil || IsNil(o.ValidFrom) {
		return nil, false
	}
	return o.ValidFrom, true
}

// HasValidFrom returns a boolean if a field has been set.
func (o *LicenseCertificateResponseModel) HasValidFrom() bool {
	if o != nil && !IsNil(o.ValidFrom) {
		return true
	}

	return false
}

// SetValidFrom gets a reference to the given string and assigns it to the ValidFrom field.
func (o *LicenseCertificateResponseModel) SetValidFrom(v string) {
	o.ValidFrom = &v
}

// GetValidTo returns the ValidTo field value if set, zero value otherwise.
func (o *LicenseCertificateResponseModel) GetValidTo() string {
	if o == nil || IsNil(o.ValidTo) {
		var ret string
		return ret
	}
	return *o.ValidTo
}

// GetValidToOk returns a tuple with the ValidTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseCertificateResponseModel) GetValidToOk() (*string, bool) {
	if o == nil || IsNil(o.ValidTo) {
		return nil, false
	}
	return o.ValidTo, true
}

// HasValidTo returns a boolean if a field has been set.
func (o *LicenseCertificateResponseModel) HasValidTo() bool {
	if o != nil && !IsNil(o.ValidTo) {
		return true
	}

	return false
}

// SetValidTo gets a reference to the given string and assigns it to the ValidTo field.
func (o *LicenseCertificateResponseModel) SetValidTo(v string) {
	o.ValidTo = &v
}

// GetSerialNumber returns the SerialNumber field value if set, zero value otherwise.
func (o *LicenseCertificateResponseModel) GetSerialNumber() string {
	if o == nil || IsNil(o.SerialNumber) {
		var ret string
		return ret
	}
	return *o.SerialNumber
}

// GetSerialNumberOk returns a tuple with the SerialNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseCertificateResponseModel) GetSerialNumberOk() (*string, bool) {
	if o == nil || IsNil(o.SerialNumber) {
		return nil, false
	}
	return o.SerialNumber, true
}

// HasSerialNumber returns a boolean if a field has been set.
func (o *LicenseCertificateResponseModel) HasSerialNumber() bool {
	if o != nil && !IsNil(o.SerialNumber) {
		return true
	}

	return false
}

// SetSerialNumber gets a reference to the given string and assigns it to the SerialNumber field.
func (o *LicenseCertificateResponseModel) SetSerialNumber(v string) {
	o.SerialNumber = &v
}

// GetFriendlyName returns the FriendlyName field value if set, zero value otherwise.
func (o *LicenseCertificateResponseModel) GetFriendlyName() string {
	if o == nil || IsNil(o.FriendlyName) {
		var ret string
		return ret
	}
	return *o.FriendlyName
}

// GetFriendlyNameOk returns a tuple with the FriendlyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseCertificateResponseModel) GetFriendlyNameOk() (*string, bool) {
	if o == nil || IsNil(o.FriendlyName) {
		return nil, false
	}
	return o.FriendlyName, true
}

// HasFriendlyName returns a boolean if a field has been set.
func (o *LicenseCertificateResponseModel) HasFriendlyName() bool {
	if o != nil && !IsNil(o.FriendlyName) {
		return true
	}

	return false
}

// SetFriendlyName gets a reference to the given string and assigns it to the FriendlyName field.
func (o *LicenseCertificateResponseModel) SetFriendlyName(v string) {
	o.FriendlyName = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *LicenseCertificateResponseModel) GetVersion() int32 {
	if o == nil || IsNil(o.Version) {
		var ret int32
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseCertificateResponseModel) GetVersionOk() (*int32, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *LicenseCertificateResponseModel) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int32 and assigns it to the Version field.
func (o *LicenseCertificateResponseModel) SetVersion(v int32) {
	o.Version = &v
}

// GetRawData returns the RawData field value if set, zero value otherwise.
func (o *LicenseCertificateResponseModel) GetRawData() string {
	if o == nil || IsNil(o.RawData) {
		var ret string
		return ret
	}
	return *o.RawData
}

// GetRawDataOk returns a tuple with the RawData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseCertificateResponseModel) GetRawDataOk() (*string, bool) {
	if o == nil || IsNil(o.RawData) {
		return nil, false
	}
	return o.RawData, true
}

// HasRawData returns a boolean if a field has been set.
func (o *LicenseCertificateResponseModel) HasRawData() bool {
	if o != nil && !IsNil(o.RawData) {
		return true
	}

	return false
}

// SetRawData gets a reference to the given string and assigns it to the RawData field.
func (o *LicenseCertificateResponseModel) SetRawData(v string) {
	o.RawData = &v
}

// GetChainStatusInformations returns the ChainStatusInformations field value if set, zero value otherwise.
func (o *LicenseCertificateResponseModel) GetChainStatusInformations() []string {
	if o == nil || IsNil(o.ChainStatusInformations) {
		var ret []string
		return ret
	}
	return o.ChainStatusInformations
}

// GetChainStatusInformationsOk returns a tuple with the ChainStatusInformations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseCertificateResponseModel) GetChainStatusInformationsOk() ([]string, bool) {
	if o == nil || IsNil(o.ChainStatusInformations) {
		return nil, false
	}
	return o.ChainStatusInformations, true
}

// HasChainStatusInformations returns a boolean if a field has been set.
func (o *LicenseCertificateResponseModel) HasChainStatusInformations() bool {
	if o != nil && !IsNil(o.ChainStatusInformations) {
		return true
	}

	return false
}

// SetChainStatusInformations gets a reference to the given []string and assigns it to the ChainStatusInformations field.
func (o *LicenseCertificateResponseModel) SetChainStatusInformations(v []string) {
	o.ChainStatusInformations = v
}

// GetChainStatusFlags returns the ChainStatusFlags field value if set, zero value otherwise.
func (o *LicenseCertificateResponseModel) GetChainStatusFlags() []X509ChainStatusFlags {
	if o == nil || IsNil(o.ChainStatusFlags) {
		var ret []X509ChainStatusFlags
		return ret
	}
	return o.ChainStatusFlags
}

// GetChainStatusFlagsOk returns a tuple with the ChainStatusFlags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseCertificateResponseModel) GetChainStatusFlagsOk() ([]X509ChainStatusFlags, bool) {
	if o == nil || IsNil(o.ChainStatusFlags) {
		return nil, false
	}
	return o.ChainStatusFlags, true
}

// HasChainStatusFlags returns a boolean if a field has been set.
func (o *LicenseCertificateResponseModel) HasChainStatusFlags() bool {
	if o != nil && !IsNil(o.ChainStatusFlags) {
		return true
	}

	return false
}

// SetChainStatusFlags gets a reference to the given []X509ChainStatusFlags and assigns it to the ChainStatusFlags field.
func (o *LicenseCertificateResponseModel) SetChainStatusFlags(v []X509ChainStatusFlags) {
	o.ChainStatusFlags = v
}

func (o LicenseCertificateResponseModel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LicenseCertificateResponseModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Thumbprint) {
		toSerialize["Thumbprint"] = o.Thumbprint
	}
	if !IsNil(o.Issuer) {
		toSerialize["Issuer"] = o.Issuer
	}
	if !IsNil(o.Subject) {
		toSerialize["Subject"] = o.Subject
	}
	if !IsNil(o.ValidFrom) {
		toSerialize["ValidFrom"] = o.ValidFrom
	}
	if !IsNil(o.ValidTo) {
		toSerialize["ValidTo"] = o.ValidTo
	}
	if !IsNil(o.SerialNumber) {
		toSerialize["SerialNumber"] = o.SerialNumber
	}
	if !IsNil(o.FriendlyName) {
		toSerialize["FriendlyName"] = o.FriendlyName
	}
	if !IsNil(o.Version) {
		toSerialize["Version"] = o.Version
	}
	if !IsNil(o.RawData) {
		toSerialize["rawData"] = o.RawData
	}
	if !IsNil(o.ChainStatusInformations) {
		toSerialize["ChainStatusInformations"] = o.ChainStatusInformations
	}
	if !IsNil(o.ChainStatusFlags) {
		toSerialize["ChainStatusFlags"] = o.ChainStatusFlags
	}
	return toSerialize, nil
}

type NullableLicenseCertificateResponseModel struct {
	value *LicenseCertificateResponseModel
	isSet bool
}

func (v NullableLicenseCertificateResponseModel) Get() *LicenseCertificateResponseModel {
	return v.value
}

func (v *NullableLicenseCertificateResponseModel) Set(val *LicenseCertificateResponseModel) {
	v.value = val
	v.isSet = true
}

func (v NullableLicenseCertificateResponseModel) IsSet() bool {
	return v.isSet
}

func (v *NullableLicenseCertificateResponseModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLicenseCertificateResponseModel(val *LicenseCertificateResponseModel) *NullableLicenseCertificateResponseModel {
	return &NullableLicenseCertificateResponseModel{value: val, isSet: true}
}

func (v NullableLicenseCertificateResponseModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLicenseCertificateResponseModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


