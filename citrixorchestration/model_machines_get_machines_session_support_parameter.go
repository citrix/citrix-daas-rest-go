/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
	"fmt"
)

// MachinesGetMachinesSessionSupportParameter - struct for MachinesGetMachinesSessionSupportParameter
type MachinesGetMachinesSessionSupportParameter struct {
	SessionSupport *SessionSupport
}

// SessionSupportAsMachinesGetMachinesSessionSupportParameter is a convenience function that returns SessionSupport wrapped in MachinesGetMachinesSessionSupportParameter
func SessionSupportAsMachinesGetMachinesSessionSupportParameter(v *SessionSupport) MachinesGetMachinesSessionSupportParameter {
	return MachinesGetMachinesSessionSupportParameter{
		SessionSupport: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *MachinesGetMachinesSessionSupportParameter) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into SessionSupport
	err = newStrictDecoder(data).Decode(&dst.SessionSupport)
	if err == nil {
		jsonSessionSupport, _ := json.Marshal(dst.SessionSupport)
		if string(jsonSessionSupport) == "{}" { // empty struct
			dst.SessionSupport = nil
		} else {
			match++
		}
	} else {
		dst.SessionSupport = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.SessionSupport = nil

		return fmt.Errorf("data matches more than one schema in oneOf(MachinesGetMachinesSessionSupportParameter)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(MachinesGetMachinesSessionSupportParameter)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src MachinesGetMachinesSessionSupportParameter) MarshalJSON() ([]byte, error) {
	if src.SessionSupport != nil {
		return json.Marshal(&src.SessionSupport)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *MachinesGetMachinesSessionSupportParameter) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.SessionSupport != nil {
		return obj.SessionSupport
	}

	// all schemas are nil
	return nil
}

type NullableMachinesGetMachinesSessionSupportParameter struct {
	value *MachinesGetMachinesSessionSupportParameter
	isSet bool
}

func (v NullableMachinesGetMachinesSessionSupportParameter) Get() *MachinesGetMachinesSessionSupportParameter {
	return v.value
}

func (v *NullableMachinesGetMachinesSessionSupportParameter) Set(val *MachinesGetMachinesSessionSupportParameter) {
	v.value = val
	v.isSet = true
}

func (v NullableMachinesGetMachinesSessionSupportParameter) IsSet() bool {
	return v.isSet
}

func (v *NullableMachinesGetMachinesSessionSupportParameter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMachinesGetMachinesSessionSupportParameter(val *MachinesGetMachinesSessionSupportParameter) *NullableMachinesGetMachinesSessionSupportParameter {
	return &NullableMachinesGetMachinesSessionSupportParameter{value: val, isSet: true}
}

func (v NullableMachinesGetMachinesSessionSupportParameter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMachinesGetMachinesSessionSupportParameter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


