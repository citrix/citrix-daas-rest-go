/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
	"fmt"
)

// RestApiStatus Orchestration RESTFul API status.
type RestApiStatus string

// List of RestApiStatus
const (
	RESTAPISTATUS_UNKNOWN RestApiStatus = "Unknown"
	RESTAPISTATUS_STARTING RestApiStatus = "Starting"
	RESTAPISTATUS_STARTED RestApiStatus = "Started"
	RESTAPISTATUS_STOPPING RestApiStatus = "Stopping"
	RESTAPISTATUS_STOPPED RestApiStatus = "Stopped"
)

// All allowed values of RestApiStatus enum
var AllowedRestApiStatusEnumValues = []RestApiStatus{
	"Unknown",
	"Starting",
	"Started",
	"Stopping",
	"Stopped",
}

func (v *RestApiStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RestApiStatus(value)
	for _, existing := range AllowedRestApiStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RestApiStatus", value)
}

// NewRestApiStatusFromValue returns a pointer to a valid RestApiStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRestApiStatusFromValue(v string) (*RestApiStatus, error) {
	ev := RestApiStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RestApiStatus: valid values are %v", v, AllowedRestApiStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RestApiStatus) IsValid() bool {
	for _, existing := range AllowedRestApiStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RestApiStatus value
func (v RestApiStatus) Ptr() *RestApiStatus {
	return &v
}

type NullableRestApiStatus struct {
	value *RestApiStatus
	isSet bool
}

func (v NullableRestApiStatus) Get() *RestApiStatus {
	return v.value
}

func (v *NullableRestApiStatus) Set(val *RestApiStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableRestApiStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableRestApiStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestApiStatus(val *RestApiStatus) *NullableRestApiStatus {
	return &NullableRestApiStatus{value: val, isSet: true}
}

func (v NullableRestApiStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestApiStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

