/*
Citrix Virtual Apps and Desktops REST API TECHPREVIEW

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: techpreview
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
)

// checks if the FilterRequestContract type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FilterRequestContract{}

// FilterRequestContract Filter definition
type FilterRequestContract struct {
	// The filter name, or filter type.
	FilterType *string `json:"FilterType,omitempty"`
	// The filter name.
	FilterName *string `json:"FilterName,omitempty"`
	// Allow or deny
	IsAllowed *bool `json:"IsAllowed,omitempty"`
	// Enabled or disabled
	IsEnabled *bool `json:"IsEnabled,omitempty"`
	// Serialized JSON string.
	FilterValue *string `json:"FilterValue,omitempty"`
}

// NewFilterRequestContract instantiates a new FilterRequestContract object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFilterRequestContract() *FilterRequestContract {
	this := FilterRequestContract{}
	var isAllowed bool = false
	this.IsAllowed = &isAllowed
	var isEnabled bool = false
	this.IsEnabled = &isEnabled
	return &this
}

// NewFilterRequestContractWithDefaults instantiates a new FilterRequestContract object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFilterRequestContractWithDefaults() *FilterRequestContract {
	this := FilterRequestContract{}
	var isAllowed bool = false
	this.IsAllowed = &isAllowed
	var isEnabled bool = false
	this.IsEnabled = &isEnabled
	return &this
}

// GetFilterType returns the FilterType field value if set, zero value otherwise.
func (o *FilterRequestContract) GetFilterType() string {
	if o == nil || IsNil(o.FilterType) {
		var ret string
		return ret
	}
	return *o.FilterType
}

// GetFilterTypeOk returns a tuple with the FilterType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilterRequestContract) GetFilterTypeOk() (*string, bool) {
	if o == nil || IsNil(o.FilterType) {
		return nil, false
	}
	return o.FilterType, true
}

// HasFilterType returns a boolean if a field has been set.
func (o *FilterRequestContract) HasFilterType() bool {
	if o != nil && !IsNil(o.FilterType) {
		return true
	}

	return false
}

// SetFilterType gets a reference to the given string and assigns it to the FilterType field.
func (o *FilterRequestContract) SetFilterType(v string) {
	o.FilterType = &v
}

// GetFilterName returns the FilterName field value if set, zero value otherwise.
func (o *FilterRequestContract) GetFilterName() string {
	if o == nil || IsNil(o.FilterName) {
		var ret string
		return ret
	}
	return *o.FilterName
}

// GetFilterNameOk returns a tuple with the FilterName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilterRequestContract) GetFilterNameOk() (*string, bool) {
	if o == nil || IsNil(o.FilterName) {
		return nil, false
	}
	return o.FilterName, true
}

// HasFilterName returns a boolean if a field has been set.
func (o *FilterRequestContract) HasFilterName() bool {
	if o != nil && !IsNil(o.FilterName) {
		return true
	}

	return false
}

// SetFilterName gets a reference to the given string and assigns it to the FilterName field.
func (o *FilterRequestContract) SetFilterName(v string) {
	o.FilterName = &v
}

// GetIsAllowed returns the IsAllowed field value if set, zero value otherwise.
func (o *FilterRequestContract) GetIsAllowed() bool {
	if o == nil || IsNil(o.IsAllowed) {
		var ret bool
		return ret
	}
	return *o.IsAllowed
}

// GetIsAllowedOk returns a tuple with the IsAllowed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilterRequestContract) GetIsAllowedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsAllowed) {
		return nil, false
	}
	return o.IsAllowed, true
}

// HasIsAllowed returns a boolean if a field has been set.
func (o *FilterRequestContract) HasIsAllowed() bool {
	if o != nil && !IsNil(o.IsAllowed) {
		return true
	}

	return false
}

// SetIsAllowed gets a reference to the given bool and assigns it to the IsAllowed field.
func (o *FilterRequestContract) SetIsAllowed(v bool) {
	o.IsAllowed = &v
}

// GetIsEnabled returns the IsEnabled field value if set, zero value otherwise.
func (o *FilterRequestContract) GetIsEnabled() bool {
	if o == nil || IsNil(o.IsEnabled) {
		var ret bool
		return ret
	}
	return *o.IsEnabled
}

// GetIsEnabledOk returns a tuple with the IsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilterRequestContract) GetIsEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsEnabled) {
		return nil, false
	}
	return o.IsEnabled, true
}

// HasIsEnabled returns a boolean if a field has been set.
func (o *FilterRequestContract) HasIsEnabled() bool {
	if o != nil && !IsNil(o.IsEnabled) {
		return true
	}

	return false
}

// SetIsEnabled gets a reference to the given bool and assigns it to the IsEnabled field.
func (o *FilterRequestContract) SetIsEnabled(v bool) {
	o.IsEnabled = &v
}

// GetFilterValue returns the FilterValue field value if set, zero value otherwise.
func (o *FilterRequestContract) GetFilterValue() string {
	if o == nil || IsNil(o.FilterValue) {
		var ret string
		return ret
	}
	return *o.FilterValue
}

// GetFilterValueOk returns a tuple with the FilterValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilterRequestContract) GetFilterValueOk() (*string, bool) {
	if o == nil || IsNil(o.FilterValue) {
		return nil, false
	}
	return o.FilterValue, true
}

// HasFilterValue returns a boolean if a field has been set.
func (o *FilterRequestContract) HasFilterValue() bool {
	if o != nil && !IsNil(o.FilterValue) {
		return true
	}

	return false
}

// SetFilterValue gets a reference to the given string and assigns it to the FilterValue field.
func (o *FilterRequestContract) SetFilterValue(v string) {
	o.FilterValue = &v
}

func (o FilterRequestContract) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FilterRequestContract) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FilterType) {
		toSerialize["FilterType"] = o.FilterType
	}
	if !IsNil(o.FilterName) {
		toSerialize["FilterName"] = o.FilterName
	}
	if !IsNil(o.IsAllowed) {
		toSerialize["IsAllowed"] = o.IsAllowed
	}
	if !IsNil(o.IsEnabled) {
		toSerialize["IsEnabled"] = o.IsEnabled
	}
	if !IsNil(o.FilterValue) {
		toSerialize["FilterValue"] = o.FilterValue
	}
	return toSerialize, nil
}

type NullableFilterRequestContract struct {
	value *FilterRequestContract
	isSet bool
}

func (v NullableFilterRequestContract) Get() *FilterRequestContract {
	return v.value
}

func (v *NullableFilterRequestContract) Set(val *FilterRequestContract) {
	v.value = val
	v.isSet = true
}

func (v NullableFilterRequestContract) IsSet() bool {
	return v.isSet
}

func (v *NullableFilterRequestContract) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilterRequestContract(val *FilterRequestContract) *NullableFilterRequestContract {
	return &NullableFilterRequestContract{value: val, isSet: true}
}

func (v NullableFilterRequestContract) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilterRequestContract) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


