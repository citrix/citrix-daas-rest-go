/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-onprem-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
	"fmt"
)

// ProtocolType Protocol types.
type ProtocolType string

// List of ProtocolType
const (
	PROTOCOLTYPE_UNKNOWN ProtocolType = "Unknown"
	PROTOCOLTYPE_HDX ProtocolType = "Hdx"
	PROTOCOLTYPE_RDP ProtocolType = "Rdp"
	PROTOCOLTYPE_CONSOLE ProtocolType = "Console"
)

// All allowed values of ProtocolType enum
var AllowedProtocolTypeEnumValues = []ProtocolType{
	"Unknown",
	"Hdx",
	"Rdp",
	"Console",
}

func (v *ProtocolType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	
	*v = ProtocolType(value)
	return nil
}

// NewProtocolTypeFromValue returns a pointer to a valid ProtocolType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewProtocolTypeFromValue(v string) (*ProtocolType, error) {
	ev := ProtocolType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ProtocolType: valid values are %v", v, AllowedProtocolTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ProtocolType) IsValid() bool {
	for _, existing := range AllowedProtocolTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ProtocolType value
func (v ProtocolType) Ptr() *ProtocolType {
	return &v
}

type NullableProtocolType struct {
	value *ProtocolType
	isSet bool
}

func (v NullableProtocolType) Get() *ProtocolType {
	return v.value
}

func (v *NullableProtocolType) Set(val *ProtocolType) {
	v.value = val
	v.isSet = true
}

func (v NullableProtocolType) IsSet() bool {
	return v.isSet
}

func (v *NullableProtocolType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProtocolType(val *ProtocolType) *NullableProtocolType {
	return &NullableProtocolType{value: val, isSet: true}
}

func (v NullableProtocolType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProtocolType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

