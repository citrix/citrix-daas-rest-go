/*
Citrix Virtual Apps and Desktops REST API TECHPREVIEW

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: techpreview
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
)

// checks if the ErrorData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ErrorData{}

// ErrorData Error model to represent exceptions thrown from service requests
type ErrorData struct {
	// The message that describes the current exception.
	ErrorMessage *string `json:"ErrorMessage,omitempty"`
	// The developer-defined identifier of the error.
	SdkErrorId string `json:"SdkErrorId"`
	// The runtime type of the current exception.
	ErrorType *string `json:"ErrorType,omitempty"`
	// The additional details.
	ErrorDetails *string `json:"ErrorDetails,omitempty"`
	// The support url.
	SupportLink *string `json:"SupportLink,omitempty"`
	// Represents a citrix.com error report.
	ErrorReportXml *string `json:"ErrorReportXml,omitempty"`
	ErrorReport *ErrorDataErrorReport `json:"ErrorReport,omitempty"`
}

// NewErrorData instantiates a new ErrorData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewErrorData(sdkErrorId string) *ErrorData {
	this := ErrorData{}
	this.SdkErrorId = sdkErrorId
	return &this
}

// NewErrorDataWithDefaults instantiates a new ErrorData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewErrorDataWithDefaults() *ErrorData {
	this := ErrorData{}
	return &this
}

// GetErrorMessage returns the ErrorMessage field value if set, zero value otherwise.
func (o *ErrorData) GetErrorMessage() string {
	if o == nil || IsNil(o.ErrorMessage) {
		var ret string
		return ret
	}
	return *o.ErrorMessage
}

// GetErrorMessageOk returns a tuple with the ErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorData) GetErrorMessageOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorMessage) {
		return nil, false
	}
	return o.ErrorMessage, true
}

// HasErrorMessage returns a boolean if a field has been set.
func (o *ErrorData) HasErrorMessage() bool {
	if o != nil && !IsNil(o.ErrorMessage) {
		return true
	}

	return false
}

// SetErrorMessage gets a reference to the given string and assigns it to the ErrorMessage field.
func (o *ErrorData) SetErrorMessage(v string) {
	o.ErrorMessage = &v
}

// GetSdkErrorId returns the SdkErrorId field value
func (o *ErrorData) GetSdkErrorId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SdkErrorId
}

// GetSdkErrorIdOk returns a tuple with the SdkErrorId field value
// and a boolean to check if the value has been set.
func (o *ErrorData) GetSdkErrorIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SdkErrorId, true
}

// SetSdkErrorId sets field value
func (o *ErrorData) SetSdkErrorId(v string) {
	o.SdkErrorId = v
}

// GetErrorType returns the ErrorType field value if set, zero value otherwise.
func (o *ErrorData) GetErrorType() string {
	if o == nil || IsNil(o.ErrorType) {
		var ret string
		return ret
	}
	return *o.ErrorType
}

// GetErrorTypeOk returns a tuple with the ErrorType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorData) GetErrorTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorType) {
		return nil, false
	}
	return o.ErrorType, true
}

// HasErrorType returns a boolean if a field has been set.
func (o *ErrorData) HasErrorType() bool {
	if o != nil && !IsNil(o.ErrorType) {
		return true
	}

	return false
}

// SetErrorType gets a reference to the given string and assigns it to the ErrorType field.
func (o *ErrorData) SetErrorType(v string) {
	o.ErrorType = &v
}

// GetErrorDetails returns the ErrorDetails field value if set, zero value otherwise.
func (o *ErrorData) GetErrorDetails() string {
	if o == nil || IsNil(o.ErrorDetails) {
		var ret string
		return ret
	}
	return *o.ErrorDetails
}

// GetErrorDetailsOk returns a tuple with the ErrorDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorData) GetErrorDetailsOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorDetails) {
		return nil, false
	}
	return o.ErrorDetails, true
}

// HasErrorDetails returns a boolean if a field has been set.
func (o *ErrorData) HasErrorDetails() bool {
	if o != nil && !IsNil(o.ErrorDetails) {
		return true
	}

	return false
}

// SetErrorDetails gets a reference to the given string and assigns it to the ErrorDetails field.
func (o *ErrorData) SetErrorDetails(v string) {
	o.ErrorDetails = &v
}

// GetSupportLink returns the SupportLink field value if set, zero value otherwise.
func (o *ErrorData) GetSupportLink() string {
	if o == nil || IsNil(o.SupportLink) {
		var ret string
		return ret
	}
	return *o.SupportLink
}

// GetSupportLinkOk returns a tuple with the SupportLink field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorData) GetSupportLinkOk() (*string, bool) {
	if o == nil || IsNil(o.SupportLink) {
		return nil, false
	}
	return o.SupportLink, true
}

// HasSupportLink returns a boolean if a field has been set.
func (o *ErrorData) HasSupportLink() bool {
	if o != nil && !IsNil(o.SupportLink) {
		return true
	}

	return false
}

// SetSupportLink gets a reference to the given string and assigns it to the SupportLink field.
func (o *ErrorData) SetSupportLink(v string) {
	o.SupportLink = &v
}

// GetErrorReportXml returns the ErrorReportXml field value if set, zero value otherwise.
func (o *ErrorData) GetErrorReportXml() string {
	if o == nil || IsNil(o.ErrorReportXml) {
		var ret string
		return ret
	}
	return *o.ErrorReportXml
}

// GetErrorReportXmlOk returns a tuple with the ErrorReportXml field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorData) GetErrorReportXmlOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorReportXml) {
		return nil, false
	}
	return o.ErrorReportXml, true
}

// HasErrorReportXml returns a boolean if a field has been set.
func (o *ErrorData) HasErrorReportXml() bool {
	if o != nil && !IsNil(o.ErrorReportXml) {
		return true
	}

	return false
}

// SetErrorReportXml gets a reference to the given string and assigns it to the ErrorReportXml field.
func (o *ErrorData) SetErrorReportXml(v string) {
	o.ErrorReportXml = &v
}

// GetErrorReport returns the ErrorReport field value if set, zero value otherwise.
func (o *ErrorData) GetErrorReport() ErrorDataErrorReport {
	if o == nil || IsNil(o.ErrorReport) {
		var ret ErrorDataErrorReport
		return ret
	}
	return *o.ErrorReport
}

// GetErrorReportOk returns a tuple with the ErrorReport field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorData) GetErrorReportOk() (*ErrorDataErrorReport, bool) {
	if o == nil || IsNil(o.ErrorReport) {
		return nil, false
	}
	return o.ErrorReport, true
}

// HasErrorReport returns a boolean if a field has been set.
func (o *ErrorData) HasErrorReport() bool {
	if o != nil && !IsNil(o.ErrorReport) {
		return true
	}

	return false
}

// SetErrorReport gets a reference to the given ErrorDataErrorReport and assigns it to the ErrorReport field.
func (o *ErrorData) SetErrorReport(v ErrorDataErrorReport) {
	o.ErrorReport = &v
}

func (o ErrorData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ErrorData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ErrorMessage) {
		toSerialize["ErrorMessage"] = o.ErrorMessage
	}
	toSerialize["SdkErrorId"] = o.SdkErrorId
	if !IsNil(o.ErrorType) {
		toSerialize["ErrorType"] = o.ErrorType
	}
	if !IsNil(o.ErrorDetails) {
		toSerialize["ErrorDetails"] = o.ErrorDetails
	}
	if !IsNil(o.SupportLink) {
		toSerialize["SupportLink"] = o.SupportLink
	}
	if !IsNil(o.ErrorReportXml) {
		toSerialize["ErrorReportXml"] = o.ErrorReportXml
	}
	if !IsNil(o.ErrorReport) {
		toSerialize["ErrorReport"] = o.ErrorReport
	}
	return toSerialize, nil
}

type NullableErrorData struct {
	value *ErrorData
	isSet bool
}

func (v NullableErrorData) Get() *ErrorData {
	return v.value
}

func (v *NullableErrorData) Set(val *ErrorData) {
	v.value = val
	v.isSet = true
}

func (v NullableErrorData) IsSet() bool {
	return v.isSet
}

func (v *NullableErrorData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErrorData(val *ErrorData) *NullableErrorData {
	return &NullableErrorData{value: val, isSet: true}
}

func (v NullableErrorData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErrorData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


