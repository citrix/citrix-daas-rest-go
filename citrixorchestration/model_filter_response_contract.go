/*
Citrix Virtual Apps and Desktops REST API TECHPREVIEW

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: techpreview
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
)

// checks if the FilterResponseContract type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FilterResponseContract{}

// FilterResponseContract Filter definition
type FilterResponseContract struct {
	// The filter type.
	FilterType *string `json:"FilterType,omitempty"`
	// The filter name.
	Identifier *string `json:"Identifier,omitempty"`
	// Filter display name, this is translated and unique.
	DisplayName *string `json:"DisplayName,omitempty"`
	// Is filter a singleton, only the NetScaler SD-Wan filter is singleton.
	IsSingleton *bool `json:"IsSingleton,omitempty"`
	// Translated filter explanation.
	Explanation *string `json:"Explanation,omitempty"`
	// A summary of filter value.
	Synopsis *string `json:"Synopsis,omitempty"`
	// True = user filter, False = machine filter
	IsUserFilter *bool `json:"IsUserFilter,omitempty"`
	// Allow or deny
	IsAllowed *bool `json:"IsAllowed,omitempty"`
	// Enabled or disabled
	IsEnabled *bool `json:"IsEnabled,omitempty"`
	// Serialized JSON string.
	FilterValue *string `json:"FilterValue,omitempty"`
}

// NewFilterResponseContract instantiates a new FilterResponseContract object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFilterResponseContract() *FilterResponseContract {
	this := FilterResponseContract{}
	return &this
}

// NewFilterResponseContractWithDefaults instantiates a new FilterResponseContract object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFilterResponseContractWithDefaults() *FilterResponseContract {
	this := FilterResponseContract{}
	return &this
}

// GetFilterType returns the FilterType field value if set, zero value otherwise.
func (o *FilterResponseContract) GetFilterType() string {
	if o == nil || IsNil(o.FilterType) {
		var ret string
		return ret
	}
	return *o.FilterType
}

// GetFilterTypeOk returns a tuple with the FilterType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilterResponseContract) GetFilterTypeOk() (*string, bool) {
	if o == nil || IsNil(o.FilterType) {
		return nil, false
	}
	return o.FilterType, true
}

// HasFilterType returns a boolean if a field has been set.
func (o *FilterResponseContract) HasFilterType() bool {
	if o != nil && !IsNil(o.FilterType) {
		return true
	}

	return false
}

// SetFilterType gets a reference to the given string and assigns it to the FilterType field.
func (o *FilterResponseContract) SetFilterType(v string) {
	o.FilterType = &v
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *FilterResponseContract) GetIdentifier() string {
	if o == nil || IsNil(o.Identifier) {
		var ret string
		return ret
	}
	return *o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilterResponseContract) GetIdentifierOk() (*string, bool) {
	if o == nil || IsNil(o.Identifier) {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *FilterResponseContract) HasIdentifier() bool {
	if o != nil && !IsNil(o.Identifier) {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given string and assigns it to the Identifier field.
func (o *FilterResponseContract) SetIdentifier(v string) {
	o.Identifier = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *FilterResponseContract) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilterResponseContract) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *FilterResponseContract) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *FilterResponseContract) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetIsSingleton returns the IsSingleton field value if set, zero value otherwise.
func (o *FilterResponseContract) GetIsSingleton() bool {
	if o == nil || IsNil(o.IsSingleton) {
		var ret bool
		return ret
	}
	return *o.IsSingleton
}

// GetIsSingletonOk returns a tuple with the IsSingleton field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilterResponseContract) GetIsSingletonOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSingleton) {
		return nil, false
	}
	return o.IsSingleton, true
}

// HasIsSingleton returns a boolean if a field has been set.
func (o *FilterResponseContract) HasIsSingleton() bool {
	if o != nil && !IsNil(o.IsSingleton) {
		return true
	}

	return false
}

// SetIsSingleton gets a reference to the given bool and assigns it to the IsSingleton field.
func (o *FilterResponseContract) SetIsSingleton(v bool) {
	o.IsSingleton = &v
}

// GetExplanation returns the Explanation field value if set, zero value otherwise.
func (o *FilterResponseContract) GetExplanation() string {
	if o == nil || IsNil(o.Explanation) {
		var ret string
		return ret
	}
	return *o.Explanation
}

// GetExplanationOk returns a tuple with the Explanation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilterResponseContract) GetExplanationOk() (*string, bool) {
	if o == nil || IsNil(o.Explanation) {
		return nil, false
	}
	return o.Explanation, true
}

// HasExplanation returns a boolean if a field has been set.
func (o *FilterResponseContract) HasExplanation() bool {
	if o != nil && !IsNil(o.Explanation) {
		return true
	}

	return false
}

// SetExplanation gets a reference to the given string and assigns it to the Explanation field.
func (o *FilterResponseContract) SetExplanation(v string) {
	o.Explanation = &v
}

// GetSynopsis returns the Synopsis field value if set, zero value otherwise.
func (o *FilterResponseContract) GetSynopsis() string {
	if o == nil || IsNil(o.Synopsis) {
		var ret string
		return ret
	}
	return *o.Synopsis
}

// GetSynopsisOk returns a tuple with the Synopsis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilterResponseContract) GetSynopsisOk() (*string, bool) {
	if o == nil || IsNil(o.Synopsis) {
		return nil, false
	}
	return o.Synopsis, true
}

// HasSynopsis returns a boolean if a field has been set.
func (o *FilterResponseContract) HasSynopsis() bool {
	if o != nil && !IsNil(o.Synopsis) {
		return true
	}

	return false
}

// SetSynopsis gets a reference to the given string and assigns it to the Synopsis field.
func (o *FilterResponseContract) SetSynopsis(v string) {
	o.Synopsis = &v
}

// GetIsUserFilter returns the IsUserFilter field value if set, zero value otherwise.
func (o *FilterResponseContract) GetIsUserFilter() bool {
	if o == nil || IsNil(o.IsUserFilter) {
		var ret bool
		return ret
	}
	return *o.IsUserFilter
}

// GetIsUserFilterOk returns a tuple with the IsUserFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilterResponseContract) GetIsUserFilterOk() (*bool, bool) {
	if o == nil || IsNil(o.IsUserFilter) {
		return nil, false
	}
	return o.IsUserFilter, true
}

// HasIsUserFilter returns a boolean if a field has been set.
func (o *FilterResponseContract) HasIsUserFilter() bool {
	if o != nil && !IsNil(o.IsUserFilter) {
		return true
	}

	return false
}

// SetIsUserFilter gets a reference to the given bool and assigns it to the IsUserFilter field.
func (o *FilterResponseContract) SetIsUserFilter(v bool) {
	o.IsUserFilter = &v
}

// GetIsAllowed returns the IsAllowed field value if set, zero value otherwise.
func (o *FilterResponseContract) GetIsAllowed() bool {
	if o == nil || IsNil(o.IsAllowed) {
		var ret bool
		return ret
	}
	return *o.IsAllowed
}

// GetIsAllowedOk returns a tuple with the IsAllowed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilterResponseContract) GetIsAllowedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsAllowed) {
		return nil, false
	}
	return o.IsAllowed, true
}

// HasIsAllowed returns a boolean if a field has been set.
func (o *FilterResponseContract) HasIsAllowed() bool {
	if o != nil && !IsNil(o.IsAllowed) {
		return true
	}

	return false
}

// SetIsAllowed gets a reference to the given bool and assigns it to the IsAllowed field.
func (o *FilterResponseContract) SetIsAllowed(v bool) {
	o.IsAllowed = &v
}

// GetIsEnabled returns the IsEnabled field value if set, zero value otherwise.
func (o *FilterResponseContract) GetIsEnabled() bool {
	if o == nil || IsNil(o.IsEnabled) {
		var ret bool
		return ret
	}
	return *o.IsEnabled
}

// GetIsEnabledOk returns a tuple with the IsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilterResponseContract) GetIsEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsEnabled) {
		return nil, false
	}
	return o.IsEnabled, true
}

// HasIsEnabled returns a boolean if a field has been set.
func (o *FilterResponseContract) HasIsEnabled() bool {
	if o != nil && !IsNil(o.IsEnabled) {
		return true
	}

	return false
}

// SetIsEnabled gets a reference to the given bool and assigns it to the IsEnabled field.
func (o *FilterResponseContract) SetIsEnabled(v bool) {
	o.IsEnabled = &v
}

// GetFilterValue returns the FilterValue field value if set, zero value otherwise.
func (o *FilterResponseContract) GetFilterValue() string {
	if o == nil || IsNil(o.FilterValue) {
		var ret string
		return ret
	}
	return *o.FilterValue
}

// GetFilterValueOk returns a tuple with the FilterValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilterResponseContract) GetFilterValueOk() (*string, bool) {
	if o == nil || IsNil(o.FilterValue) {
		return nil, false
	}
	return o.FilterValue, true
}

// HasFilterValue returns a boolean if a field has been set.
func (o *FilterResponseContract) HasFilterValue() bool {
	if o != nil && !IsNil(o.FilterValue) {
		return true
	}

	return false
}

// SetFilterValue gets a reference to the given string and assigns it to the FilterValue field.
func (o *FilterResponseContract) SetFilterValue(v string) {
	o.FilterValue = &v
}

func (o FilterResponseContract) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FilterResponseContract) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FilterType) {
		toSerialize["FilterType"] = o.FilterType
	}
	if !IsNil(o.Identifier) {
		toSerialize["Identifier"] = o.Identifier
	}
	if !IsNil(o.DisplayName) {
		toSerialize["DisplayName"] = o.DisplayName
	}
	if !IsNil(o.IsSingleton) {
		toSerialize["IsSingleton"] = o.IsSingleton
	}
	if !IsNil(o.Explanation) {
		toSerialize["Explanation"] = o.Explanation
	}
	if !IsNil(o.Synopsis) {
		toSerialize["Synopsis"] = o.Synopsis
	}
	if !IsNil(o.IsUserFilter) {
		toSerialize["IsUserFilter"] = o.IsUserFilter
	}
	if !IsNil(o.IsAllowed) {
		toSerialize["IsAllowed"] = o.IsAllowed
	}
	if !IsNil(o.IsEnabled) {
		toSerialize["IsEnabled"] = o.IsEnabled
	}
	if !IsNil(o.FilterValue) {
		toSerialize["FilterValue"] = o.FilterValue
	}
	return toSerialize, nil
}

type NullableFilterResponseContract struct {
	value *FilterResponseContract
	isSet bool
}

func (v NullableFilterResponseContract) Get() *FilterResponseContract {
	return v.value
}

func (v *NullableFilterResponseContract) Set(val *FilterResponseContract) {
	v.value = val
	v.isSet = true
}

func (v NullableFilterResponseContract) IsSet() bool {
	return v.isSet
}

func (v *NullableFilterResponseContract) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilterResponseContract(val *FilterResponseContract) *NullableFilterResponseContract {
	return &NullableFilterResponseContract{value: val, isSet: true}
}

func (v NullableFilterResponseContract) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilterResponseContract) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


