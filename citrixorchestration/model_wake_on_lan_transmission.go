/*
Citrix Virtual Apps and Desktops REST API TECHPREVIEW

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: techpreview
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
	"fmt"
)

// WakeOnLanTransmission Method of packet transmission to use for Wake-on-LAN functionality.
type WakeOnLanTransmission string

// List of WakeOnLanTransmission
const (
	WAKEONLANTRANSMISSION_UNKNOWN WakeOnLanTransmission = "Unknown"
	WAKEONLANTRANSMISSION_NONE WakeOnLanTransmission = "None"
	WAKEONLANTRANSMISSION_SUBNET_DIRECTED_BROADCAST WakeOnLanTransmission = "SubnetDirectedBroadcast"
	WAKEONLANTRANSMISSION_UNICAST WakeOnLanTransmission = "Unicast"
)

// All allowed values of WakeOnLanTransmission enum
var AllowedWakeOnLanTransmissionEnumValues = []WakeOnLanTransmission{
	"Unknown",
	"None",
	"SubnetDirectedBroadcast",
	"Unicast",
}

func (v *WakeOnLanTransmission) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WakeOnLanTransmission(value)
	for _, existing := range AllowedWakeOnLanTransmissionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid WakeOnLanTransmission", value)
}

// NewWakeOnLanTransmissionFromValue returns a pointer to a valid WakeOnLanTransmission
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWakeOnLanTransmissionFromValue(v string) (*WakeOnLanTransmission, error) {
	ev := WakeOnLanTransmission(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for WakeOnLanTransmission: valid values are %v", v, AllowedWakeOnLanTransmissionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WakeOnLanTransmission) IsValid() bool {
	for _, existing := range AllowedWakeOnLanTransmissionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to WakeOnLanTransmission value
func (v WakeOnLanTransmission) Ptr() *WakeOnLanTransmission {
	return &v
}

type NullableWakeOnLanTransmission struct {
	value *WakeOnLanTransmission
	isSet bool
}

func (v NullableWakeOnLanTransmission) Get() *WakeOnLanTransmission {
	return v.value
}

func (v *NullableWakeOnLanTransmission) Set(val *WakeOnLanTransmission) {
	v.value = val
	v.isSet = true
}

func (v NullableWakeOnLanTransmission) IsSet() bool {
	return v.isSet
}

func (v *NullableWakeOnLanTransmission) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWakeOnLanTransmission(val *WakeOnLanTransmission) *NullableWakeOnLanTransmission {
	return &NullableWakeOnLanTransmission{value: val, isSet: true}
}

func (v NullableWakeOnLanTransmission) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWakeOnLanTransmission) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

