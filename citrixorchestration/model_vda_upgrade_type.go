/*
Citrix Virtual Apps and Desktops REST API TECHPREVIEW

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: techpreview
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
	"fmt"
)

// VdaUpgradeType VDA upgrade types             
type VdaUpgradeType string

// List of VdaUpgradeType
const (
	VDAUPGRADETYPE_NOT_SET VdaUpgradeType = "NotSet"
	VDAUPGRADETYPE_LTSR VdaUpgradeType = "LTSR"
	VDAUPGRADETYPE_CR VdaUpgradeType = "CR"
)

// All allowed values of VdaUpgradeType enum
var AllowedVdaUpgradeTypeEnumValues = []VdaUpgradeType{
	"NotSet",
	"LTSR",
	"CR",
}

func (v *VdaUpgradeType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VdaUpgradeType(value)
	for _, existing := range AllowedVdaUpgradeTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VdaUpgradeType", value)
}

// NewVdaUpgradeTypeFromValue returns a pointer to a valid VdaUpgradeType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVdaUpgradeTypeFromValue(v string) (*VdaUpgradeType, error) {
	ev := VdaUpgradeType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VdaUpgradeType: valid values are %v", v, AllowedVdaUpgradeTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VdaUpgradeType) IsValid() bool {
	for _, existing := range AllowedVdaUpgradeTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VdaUpgradeType value
func (v VdaUpgradeType) Ptr() *VdaUpgradeType {
	return &v
}

type NullableVdaUpgradeType struct {
	value *VdaUpgradeType
	isSet bool
}

func (v NullableVdaUpgradeType) Get() *VdaUpgradeType {
	return v.value
}

func (v *NullableVdaUpgradeType) Set(val *VdaUpgradeType) {
	v.value = val
	v.isSet = true
}

func (v NullableVdaUpgradeType) IsSet() bool {
	return v.isSet
}

func (v *NullableVdaUpgradeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVdaUpgradeType(val *VdaUpgradeType) *NullableVdaUpgradeType {
	return &NullableVdaUpgradeType{value: val, isSet: true}
}

func (v NullableVdaUpgradeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVdaUpgradeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

