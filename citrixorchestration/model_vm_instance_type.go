/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-onprem-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
	"fmt"
)

// VMInstanceType Instance type of a virtual machine.
type VMInstanceType string

// List of VMInstanceType
const (
	VMINSTANCETYPE_SHARED VMInstanceType = "Shared"
	VMINSTANCETYPE_SPOT VMInstanceType = "Spot"
)

// All allowed values of VMInstanceType enum
var AllowedVMInstanceTypeEnumValues = []VMInstanceType{
	"Shared",
	"Spot",
}

func (v *VMInstanceType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	
	*v = VMInstanceType(value)
	return nil
}

// NewVMInstanceTypeFromValue returns a pointer to a valid VMInstanceType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVMInstanceTypeFromValue(v string) (*VMInstanceType, error) {
	ev := VMInstanceType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VMInstanceType: valid values are %v", v, AllowedVMInstanceTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VMInstanceType) IsValid() bool {
	for _, existing := range AllowedVMInstanceTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VMInstanceType value
func (v VMInstanceType) Ptr() *VMInstanceType {
	return &v
}

type NullableVMInstanceType struct {
	value *VMInstanceType
	isSet bool
}

func (v NullableVMInstanceType) Get() *VMInstanceType {
	return v.value
}

func (v *NullableVMInstanceType) Set(val *VMInstanceType) {
	v.value = val
	v.isSet = true
}

func (v NullableVMInstanceType) IsSet() bool {
	return v.isSet
}

func (v *NullableVMInstanceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVMInstanceType(val *VMInstanceType) *NullableVMInstanceType {
	return &NullableVMInstanceType{value: val, isSet: true}
}

func (v NullableVMInstanceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVMInstanceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

