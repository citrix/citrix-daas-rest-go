/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-onprem-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
	"fmt"
)

// BackupRestoreComponentControlPlane 
type BackupRestoreComponentControlPlane string

// List of BackupRestoreComponentControlPlane
const (
	BACKUPRESTORECOMPONENTCONTROLPLANE_ON_PREM_ONLY BackupRestoreComponentControlPlane = "OnPremOnly"
	BACKUPRESTORECOMPONENTCONTROLPLANE_CLOUD_ONLY BackupRestoreComponentControlPlane = "CloudOnly"
	BACKUPRESTORECOMPONENTCONTROLPLANE_BOTH BackupRestoreComponentControlPlane = "Both"
	BACKUPRESTORECOMPONENTCONTROLPLANE_NEITHER BackupRestoreComponentControlPlane = "Neither"
)

// All allowed values of BackupRestoreComponentControlPlane enum
var AllowedBackupRestoreComponentControlPlaneEnumValues = []BackupRestoreComponentControlPlane{
	"OnPremOnly",
	"CloudOnly",
	"Both",
	"Neither",
}

func (v *BackupRestoreComponentControlPlane) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	
	*v = BackupRestoreComponentControlPlane(value)
	return nil
}

// NewBackupRestoreComponentControlPlaneFromValue returns a pointer to a valid BackupRestoreComponentControlPlane
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBackupRestoreComponentControlPlaneFromValue(v string) (*BackupRestoreComponentControlPlane, error) {
	ev := BackupRestoreComponentControlPlane(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BackupRestoreComponentControlPlane: valid values are %v", v, AllowedBackupRestoreComponentControlPlaneEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BackupRestoreComponentControlPlane) IsValid() bool {
	for _, existing := range AllowedBackupRestoreComponentControlPlaneEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BackupRestoreComponentControlPlane value
func (v BackupRestoreComponentControlPlane) Ptr() *BackupRestoreComponentControlPlane {
	return &v
}

type NullableBackupRestoreComponentControlPlane struct {
	value *BackupRestoreComponentControlPlane
	isSet bool
}

func (v NullableBackupRestoreComponentControlPlane) Get() *BackupRestoreComponentControlPlane {
	return v.value
}

func (v *NullableBackupRestoreComponentControlPlane) Set(val *BackupRestoreComponentControlPlane) {
	v.value = val
	v.isSet = true
}

func (v NullableBackupRestoreComponentControlPlane) IsSet() bool {
	return v.isSet
}

func (v *NullableBackupRestoreComponentControlPlane) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBackupRestoreComponentControlPlane(val *BackupRestoreComponentControlPlane) *NullableBackupRestoreComponentControlPlane {
	return &NullableBackupRestoreComponentControlPlane{value: val, isSet: true}
}

func (v NullableBackupRestoreComponentControlPlane) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBackupRestoreComponentControlPlane) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

