/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-onprem-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
	"fmt"
)

// VdaUpgradeState Machine catalog or machine state for VDA package upgrade actions.
type VdaUpgradeState string

// List of VdaUpgradeState
const (
	VDAUPGRADESTATE_MISSING_UPGRADE_TYPE VdaUpgradeState = "MissingUpgradeType"
	VDAUPGRADESTATE_UPGRADE_SCHEDULED VdaUpgradeState = "UpgradeScheduled"
	VDAUPGRADESTATE_UPGRADE_AVAILABLE VdaUpgradeState = "UpgradeAvailable"
	VDAUPGRADESTATE_UP_TO_DATE VdaUpgradeState = "UpToDate"
	VDAUPGRADESTATE_UNKNOWN VdaUpgradeState = "Unknown"
)

// All allowed values of VdaUpgradeState enum
var AllowedVdaUpgradeStateEnumValues = []VdaUpgradeState{
	"MissingUpgradeType",
	"UpgradeScheduled",
	"UpgradeAvailable",
	"UpToDate",
	"Unknown",
}

func (v *VdaUpgradeState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VdaUpgradeState(value)
	for _, existing := range AllowedVdaUpgradeStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VdaUpgradeState", value)
}

// NewVdaUpgradeStateFromValue returns a pointer to a valid VdaUpgradeState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVdaUpgradeStateFromValue(v string) (*VdaUpgradeState, error) {
	ev := VdaUpgradeState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VdaUpgradeState: valid values are %v", v, AllowedVdaUpgradeStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VdaUpgradeState) IsValid() bool {
	for _, existing := range AllowedVdaUpgradeStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VdaUpgradeState value
func (v VdaUpgradeState) Ptr() *VdaUpgradeState {
	return &v
}

type NullableVdaUpgradeState struct {
	value *VdaUpgradeState
	isSet bool
}

func (v NullableVdaUpgradeState) Get() *VdaUpgradeState {
	return v.value
}

func (v *NullableVdaUpgradeState) Set(val *VdaUpgradeState) {
	v.value = val
	v.isSet = true
}

func (v NullableVdaUpgradeState) IsSet() bool {
	return v.isSet
}

func (v *NullableVdaUpgradeState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVdaUpgradeState(val *VdaUpgradeState) *NullableVdaUpgradeState {
	return &NullableVdaUpgradeState{value: val, isSet: true}
}

func (v NullableVdaUpgradeState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVdaUpgradeState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

