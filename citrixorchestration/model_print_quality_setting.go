/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-onprem-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
	"fmt"
)

// PrintQualitySetting Print quality.
type PrintQualitySetting string

// List of PrintQualitySetting
const (
	PRINTQUALITYSETTING_CUSTOM PrintQualitySetting = "Custom"
	PRINTQUALITYSETTING_HIGH   PrintQualitySetting = "High"
	PRINTQUALITYSETTING_MEDIUM PrintQualitySetting = "Medium"
	PRINTQUALITYSETTING_LOW    PrintQualitySetting = "Low"
	PRINTQUALITYSETTING_DRAFT  PrintQualitySetting = "Draft"
)

// All allowed values of PrintQualitySetting enum
var AllowedPrintQualitySettingEnumValues = []PrintQualitySetting{
	"Custom",
	"High",
	"Medium",
	"Low",
	"Draft",
}

func (v *PrintQualitySetting) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	*v = PrintQualitySetting(value)
	return nil
}

// NewPrintQualitySettingFromValue returns a pointer to a valid PrintQualitySetting
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPrintQualitySettingFromValue(v string) (*PrintQualitySetting, error) {
	ev := PrintQualitySetting(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PrintQualitySetting: valid values are %v", v, AllowedPrintQualitySettingEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PrintQualitySetting) IsValid() bool {
	for _, existing := range AllowedPrintQualitySettingEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PrintQualitySetting value
func (v PrintQualitySetting) Ptr() *PrintQualitySetting {
	return &v
}

type NullablePrintQualitySetting struct {
	value *PrintQualitySetting
	isSet bool
}

func (v NullablePrintQualitySetting) Get() *PrintQualitySetting {
	return v.value
}

func (v *NullablePrintQualitySetting) Set(val *PrintQualitySetting) {
	v.value = val
	v.isSet = true
}

func (v NullablePrintQualitySetting) IsSet() bool {
	return v.isSet
}

func (v *NullablePrintQualitySetting) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrintQualitySetting(val *PrintQualitySetting) *NullablePrintQualitySetting {
	return &NullablePrintQualitySetting{value: val, isSet: true}
}

func (v NullablePrintQualitySetting) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrintQualitySetting) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
