/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-onprem-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
)

// checks if the LosingPolicy2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LosingPolicy2{}

// LosingPolicy2 Policy that should be applied but not applied due to various reasons.
type LosingPolicy2 struct {
	// Policy GUID.
	PolicyGuid *string `json:"PolicyGuid,omitempty"`
	// The policy name.
	PolicyName NullableString `json:"PolicyName,omitempty"`
	// Policy priority.
	Priority *int32 `json:"Priority,omitempty"`
	// The settings in the policy and the reason of losing for each setting.
	Settings []WonOverBy2 `json:"Settings,omitempty"`
}

// NewLosingPolicy2 instantiates a new LosingPolicy2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLosingPolicy2() *LosingPolicy2 {
	this := LosingPolicy2{}
	return &this
}

// NewLosingPolicy2WithDefaults instantiates a new LosingPolicy2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLosingPolicy2WithDefaults() *LosingPolicy2 {
	this := LosingPolicy2{}
	return &this
}

// GetPolicyGuid returns the PolicyGuid field value if set, zero value otherwise.
func (o *LosingPolicy2) GetPolicyGuid() string {
	if o == nil || IsNil(o.PolicyGuid) {
		var ret string
		return ret
	}
	return *o.PolicyGuid
}

// GetPolicyGuidOk returns a tuple with the PolicyGuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LosingPolicy2) GetPolicyGuidOk() (*string, bool) {
	if o == nil || IsNil(o.PolicyGuid) {
		return nil, false
	}
	return o.PolicyGuid, true
}

// HasPolicyGuid returns a boolean if a field has been set.
func (o *LosingPolicy2) HasPolicyGuid() bool {
	if o != nil && !IsNil(o.PolicyGuid) {
		return true
	}

	return false
}

// SetPolicyGuid gets a reference to the given string and assigns it to the PolicyGuid field.
func (o *LosingPolicy2) SetPolicyGuid(v string) {
	o.PolicyGuid = &v
}

// GetPolicyName returns the PolicyName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LosingPolicy2) GetPolicyName() string {
	if o == nil || IsNil(o.PolicyName.Get()) {
		var ret string
		return ret
	}
	return *o.PolicyName.Get()
}

// GetPolicyNameOk returns a tuple with the PolicyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LosingPolicy2) GetPolicyNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PolicyName.Get(), o.PolicyName.IsSet()
}

// HasPolicyName returns a boolean if a field has been set.
func (o *LosingPolicy2) HasPolicyName() bool {
	if o != nil && o.PolicyName.IsSet() {
		return true
	}

	return false
}

// SetPolicyName gets a reference to the given NullableString and assigns it to the PolicyName field.
func (o *LosingPolicy2) SetPolicyName(v string) {
	o.PolicyName.Set(&v)
}
// SetPolicyNameNil sets the value for PolicyName to be an explicit nil
func (o *LosingPolicy2) SetPolicyNameNil() {
	o.PolicyName.Set(nil)
}

// UnsetPolicyName ensures that no value is present for PolicyName, not even an explicit nil
func (o *LosingPolicy2) UnsetPolicyName() {
	o.PolicyName.Unset()
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *LosingPolicy2) GetPriority() int32 {
	if o == nil || IsNil(o.Priority) {
		var ret int32
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LosingPolicy2) GetPriorityOk() (*int32, bool) {
	if o == nil || IsNil(o.Priority) {
		return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *LosingPolicy2) HasPriority() bool {
	if o != nil && !IsNil(o.Priority) {
		return true
	}

	return false
}

// SetPriority gets a reference to the given int32 and assigns it to the Priority field.
func (o *LosingPolicy2) SetPriority(v int32) {
	o.Priority = &v
}

// GetSettings returns the Settings field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LosingPolicy2) GetSettings() []WonOverBy2 {
	if o == nil {
		var ret []WonOverBy2
		return ret
	}
	return o.Settings
}

// GetSettingsOk returns a tuple with the Settings field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LosingPolicy2) GetSettingsOk() ([]WonOverBy2, bool) {
	if o == nil || IsNil(o.Settings) {
		return nil, false
	}
	return o.Settings, true
}

// HasSettings returns a boolean if a field has been set.
func (o *LosingPolicy2) HasSettings() bool {
	if o != nil && IsNil(o.Settings) {
		return true
	}

	return false
}

// SetSettings gets a reference to the given []WonOverBy2 and assigns it to the Settings field.
func (o *LosingPolicy2) SetSettings(v []WonOverBy2) {
	o.Settings = v
}

func (o LosingPolicy2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LosingPolicy2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PolicyGuid) {
		toSerialize["PolicyGuid"] = o.PolicyGuid
	}
	if o.PolicyName.IsSet() {
		toSerialize["PolicyName"] = o.PolicyName.Get()
	}
	if !IsNil(o.Priority) {
		toSerialize["Priority"] = o.Priority
	}
	if o.Settings != nil {
		toSerialize["Settings"] = o.Settings
	}
	return toSerialize, nil
}

type NullableLosingPolicy2 struct {
	value *LosingPolicy2
	isSet bool
}

func (v NullableLosingPolicy2) Get() *LosingPolicy2 {
	return v.value
}

func (v *NullableLosingPolicy2) Set(val *LosingPolicy2) {
	v.value = val
	v.isSet = true
}

func (v NullableLosingPolicy2) IsSet() bool {
	return v.isSet
}

func (v *NullableLosingPolicy2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLosingPolicy2(val *LosingPolicy2) *NullableLosingPolicy2 {
	return &NullableLosingPolicy2{value: val, isSet: true}
}

func (v NullableLosingPolicy2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLosingPolicy2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


