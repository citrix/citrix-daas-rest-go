/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-onprem-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
	"fmt"
)

// MaintenanceCycleStatus Represents the status of a maintenance cycle.
type MaintenanceCycleStatus string

// List of MaintenanceCycleStatus
const (
	MAINTENANCECYCLESTATUS_UNKNOWN MaintenanceCycleStatus = "Unknown"
	MAINTENANCECYCLESTATUS_QUEUED MaintenanceCycleStatus = "Queued"
	MAINTENANCECYCLESTATUS_RUNNING MaintenanceCycleStatus = "Running"
	MAINTENANCECYCLESTATUS_FAILED MaintenanceCycleStatus = "Failed"
	MAINTENANCECYCLESTATUS_COMPLETED MaintenanceCycleStatus = "Completed"
	MAINTENANCECYCLESTATUS_CANCELLING MaintenanceCycleStatus = "Cancelling"
	MAINTENANCECYCLESTATUS_CANCELLED MaintenanceCycleStatus = "Cancelled"
	MAINTENANCECYCLESTATUS_NOT_PROCESSED MaintenanceCycleStatus = "NotProcessed"
	MAINTENANCECYCLESTATUS_PENDING MaintenanceCycleStatus = "Pending"
	MAINTENANCECYCLESTATUS_INCOMPLETE MaintenanceCycleStatus = "Incomplete"
	MAINTENANCECYCLESTATUS_RESTARTING MaintenanceCycleStatus = "Restarting"
)

// All allowed values of MaintenanceCycleStatus enum
var AllowedMaintenanceCycleStatusEnumValues = []MaintenanceCycleStatus{
	"Unknown",
	"Queued",
	"Running",
	"Failed",
	"Completed",
	"Cancelling",
	"Cancelled",
	"NotProcessed",
	"Pending",
	"Incomplete",
	"Restarting",
}

func (v *MaintenanceCycleStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	
	*v = MaintenanceCycleStatus(value)
	return nil
}

// NewMaintenanceCycleStatusFromValue returns a pointer to a valid MaintenanceCycleStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMaintenanceCycleStatusFromValue(v string) (*MaintenanceCycleStatus, error) {
	ev := MaintenanceCycleStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MaintenanceCycleStatus: valid values are %v", v, AllowedMaintenanceCycleStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MaintenanceCycleStatus) IsValid() bool {
	for _, existing := range AllowedMaintenanceCycleStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MaintenanceCycleStatus value
func (v MaintenanceCycleStatus) Ptr() *MaintenanceCycleStatus {
	return &v
}

type NullableMaintenanceCycleStatus struct {
	value *MaintenanceCycleStatus
	isSet bool
}

func (v NullableMaintenanceCycleStatus) Get() *MaintenanceCycleStatus {
	return v.value
}

func (v *NullableMaintenanceCycleStatus) Set(val *MaintenanceCycleStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableMaintenanceCycleStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableMaintenanceCycleStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMaintenanceCycleStatus(val *MaintenanceCycleStatus) *NullableMaintenanceCycleStatus {
	return &NullableMaintenanceCycleStatus{value: val, isSet: true}
}

func (v NullableMaintenanceCycleStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMaintenanceCycleStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

