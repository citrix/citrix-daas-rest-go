/*
Citrix Virtual Apps and Desktops REST API TECHPREVIEW

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: techpreview
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
)

// checks if the ScopedObjectRequestModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScopedObjectRequestModel{}

// ScopedObjectRequestModel A scoped object; that is, a reference to an object of a different type which is contained within a delegated admin scope.
type ScopedObjectRequestModel struct {
	ObjectType ScopedObjectType `json:"ObjectType"`
	// Name or Id of the scoped object.
	Object string `json:"Object"`
}

// NewScopedObjectRequestModel instantiates a new ScopedObjectRequestModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScopedObjectRequestModel(objectType ScopedObjectType, object string) *ScopedObjectRequestModel {
	this := ScopedObjectRequestModel{}
	this.ObjectType = objectType
	this.Object = object
	return &this
}

// NewScopedObjectRequestModelWithDefaults instantiates a new ScopedObjectRequestModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScopedObjectRequestModelWithDefaults() *ScopedObjectRequestModel {
	this := ScopedObjectRequestModel{}
	return &this
}

// GetObjectType returns the ObjectType field value
func (o *ScopedObjectRequestModel) GetObjectType() ScopedObjectType {
	if o == nil {
		var ret ScopedObjectType
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *ScopedObjectRequestModel) GetObjectTypeOk() (*ScopedObjectType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *ScopedObjectRequestModel) SetObjectType(v ScopedObjectType) {
	o.ObjectType = v
}

// GetObject returns the Object field value
func (o *ScopedObjectRequestModel) GetObject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Object
}

// GetObjectOk returns a tuple with the Object field value
// and a boolean to check if the value has been set.
func (o *ScopedObjectRequestModel) GetObjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Object, true
}

// SetObject sets field value
func (o *ScopedObjectRequestModel) SetObject(v string) {
	o.Object = v
}

func (o ScopedObjectRequestModel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScopedObjectRequestModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ObjectType"] = o.ObjectType
	toSerialize["Object"] = o.Object
	return toSerialize, nil
}

type NullableScopedObjectRequestModel struct {
	value *ScopedObjectRequestModel
	isSet bool
}

func (v NullableScopedObjectRequestModel) Get() *ScopedObjectRequestModel {
	return v.value
}

func (v *NullableScopedObjectRequestModel) Set(val *ScopedObjectRequestModel) {
	v.value = val
	v.isSet = true
}

func (v NullableScopedObjectRequestModel) IsSet() bool {
	return v.isSet
}

func (v *NullableScopedObjectRequestModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScopedObjectRequestModel(val *ScopedObjectRequestModel) *NullableScopedObjectRequestModel {
	return &NullableScopedObjectRequestModel{value: val, isSet: true}
}

func (v NullableScopedObjectRequestModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScopedObjectRequestModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


