/*
Citrix Virtual Apps and Desktops REST API TECHPREVIEW

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: techpreview
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
)

// checks if the PolicyRequestContract type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PolicyRequestContract{}

// PolicyRequestContract Policy request model
type PolicyRequestContract struct {
	// Policy name as identifier, translated.
	PolicyName *string `json:"PolicyName,omitempty"`
	// Is policy enabled
	IsEnabled *bool `json:"IsEnabled,omitempty"`
	// Policy description
	Description *string `json:"Description,omitempty"`
	// New policy priority
	Priority *int32 `json:"Priority,omitempty"`
	// Policy settings
	Settings []SettingRequestContract `json:"Settings,omitempty"`
	// Policy filters
	Filters []FilterRequestContract `json:"Filters,omitempty"`
}

// NewPolicyRequestContract instantiates a new PolicyRequestContract object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPolicyRequestContract() *PolicyRequestContract {
	this := PolicyRequestContract{}
	var isEnabled bool = false
	this.IsEnabled = &isEnabled
	return &this
}

// NewPolicyRequestContractWithDefaults instantiates a new PolicyRequestContract object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPolicyRequestContractWithDefaults() *PolicyRequestContract {
	this := PolicyRequestContract{}
	var isEnabled bool = false
	this.IsEnabled = &isEnabled
	return &this
}

// GetPolicyName returns the PolicyName field value if set, zero value otherwise.
func (o *PolicyRequestContract) GetPolicyName() string {
	if o == nil || IsNil(o.PolicyName) {
		var ret string
		return ret
	}
	return *o.PolicyName
}

// GetPolicyNameOk returns a tuple with the PolicyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyRequestContract) GetPolicyNameOk() (*string, bool) {
	if o == nil || IsNil(o.PolicyName) {
		return nil, false
	}
	return o.PolicyName, true
}

// HasPolicyName returns a boolean if a field has been set.
func (o *PolicyRequestContract) HasPolicyName() bool {
	if o != nil && !IsNil(o.PolicyName) {
		return true
	}

	return false
}

// SetPolicyName gets a reference to the given string and assigns it to the PolicyName field.
func (o *PolicyRequestContract) SetPolicyName(v string) {
	o.PolicyName = &v
}

// GetIsEnabled returns the IsEnabled field value if set, zero value otherwise.
func (o *PolicyRequestContract) GetIsEnabled() bool {
	if o == nil || IsNil(o.IsEnabled) {
		var ret bool
		return ret
	}
	return *o.IsEnabled
}

// GetIsEnabledOk returns a tuple with the IsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyRequestContract) GetIsEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsEnabled) {
		return nil, false
	}
	return o.IsEnabled, true
}

// HasIsEnabled returns a boolean if a field has been set.
func (o *PolicyRequestContract) HasIsEnabled() bool {
	if o != nil && !IsNil(o.IsEnabled) {
		return true
	}

	return false
}

// SetIsEnabled gets a reference to the given bool and assigns it to the IsEnabled field.
func (o *PolicyRequestContract) SetIsEnabled(v bool) {
	o.IsEnabled = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *PolicyRequestContract) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyRequestContract) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *PolicyRequestContract) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *PolicyRequestContract) SetDescription(v string) {
	o.Description = &v
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *PolicyRequestContract) GetPriority() int32 {
	if o == nil || IsNil(o.Priority) {
		var ret int32
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyRequestContract) GetPriorityOk() (*int32, bool) {
	if o == nil || IsNil(o.Priority) {
		return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *PolicyRequestContract) HasPriority() bool {
	if o != nil && !IsNil(o.Priority) {
		return true
	}

	return false
}

// SetPriority gets a reference to the given int32 and assigns it to the Priority field.
func (o *PolicyRequestContract) SetPriority(v int32) {
	o.Priority = &v
}

// GetSettings returns the Settings field value if set, zero value otherwise.
func (o *PolicyRequestContract) GetSettings() []SettingRequestContract {
	if o == nil || IsNil(o.Settings) {
		var ret []SettingRequestContract
		return ret
	}
	return o.Settings
}

// GetSettingsOk returns a tuple with the Settings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyRequestContract) GetSettingsOk() ([]SettingRequestContract, bool) {
	if o == nil || IsNil(o.Settings) {
		return nil, false
	}
	return o.Settings, true
}

// HasSettings returns a boolean if a field has been set.
func (o *PolicyRequestContract) HasSettings() bool {
	if o != nil && !IsNil(o.Settings) {
		return true
	}

	return false
}

// SetSettings gets a reference to the given []SettingRequestContract and assigns it to the Settings field.
func (o *PolicyRequestContract) SetSettings(v []SettingRequestContract) {
	o.Settings = v
}

// GetFilters returns the Filters field value if set, zero value otherwise.
func (o *PolicyRequestContract) GetFilters() []FilterRequestContract {
	if o == nil || IsNil(o.Filters) {
		var ret []FilterRequestContract
		return ret
	}
	return o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyRequestContract) GetFiltersOk() ([]FilterRequestContract, bool) {
	if o == nil || IsNil(o.Filters) {
		return nil, false
	}
	return o.Filters, true
}

// HasFilters returns a boolean if a field has been set.
func (o *PolicyRequestContract) HasFilters() bool {
	if o != nil && !IsNil(o.Filters) {
		return true
	}

	return false
}

// SetFilters gets a reference to the given []FilterRequestContract and assigns it to the Filters field.
func (o *PolicyRequestContract) SetFilters(v []FilterRequestContract) {
	o.Filters = v
}

func (o PolicyRequestContract) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PolicyRequestContract) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PolicyName) {
		toSerialize["PolicyName"] = o.PolicyName
	}
	if !IsNil(o.IsEnabled) {
		toSerialize["IsEnabled"] = o.IsEnabled
	}
	if !IsNil(o.Description) {
		toSerialize["Description"] = o.Description
	}
	if !IsNil(o.Priority) {
		toSerialize["Priority"] = o.Priority
	}
	if !IsNil(o.Settings) {
		toSerialize["Settings"] = o.Settings
	}
	if !IsNil(o.Filters) {
		toSerialize["Filters"] = o.Filters
	}
	return toSerialize, nil
}

type NullablePolicyRequestContract struct {
	value *PolicyRequestContract
	isSet bool
}

func (v NullablePolicyRequestContract) Get() *PolicyRequestContract {
	return v.value
}

func (v *NullablePolicyRequestContract) Set(val *PolicyRequestContract) {
	v.value = val
	v.isSet = true
}

func (v NullablePolicyRequestContract) IsSet() bool {
	return v.isSet
}

func (v *NullablePolicyRequestContract) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePolicyRequestContract(val *PolicyRequestContract) *NullablePolicyRequestContract {
	return &NullablePolicyRequestContract{value: val, isSet: true}
}

func (v NullablePolicyRequestContract) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePolicyRequestContract) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


