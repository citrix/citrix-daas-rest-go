/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-onprem-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
	"fmt"
)

// SiteState Site state.
type SiteState string

// List of SiteState
const (
	SITESTATE_UNKNOWN          SiteState = "Unknown"
	SITESTATE_CONFIGURED       SiteState = "Configured"
	SITESTATE_UNCONFIGURED     SiteState = "Unconfigured"
	SITESTATE_UPGRADE_REQUIRED SiteState = "UpgradeRequired"
	SITESTATE_ERROR            SiteState = "Error"
)

// All allowed values of SiteState enum
var AllowedSiteStateEnumValues = []SiteState{
	"Unknown",
	"Configured",
	"Unconfigured",
	"UpgradeRequired",
	"Error",
}

func (v *SiteState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	*v = SiteState(value)
	return nil
}

// NewSiteStateFromValue returns a pointer to a valid SiteState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSiteStateFromValue(v string) (*SiteState, error) {
	ev := SiteState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SiteState: valid values are %v", v, AllowedSiteStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SiteState) IsValid() bool {
	for _, existing := range AllowedSiteStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SiteState value
func (v SiteState) Ptr() *SiteState {
	return &v
}

type NullableSiteState struct {
	value *SiteState
	isSet bool
}

func (v NullableSiteState) Get() *SiteState {
	return v.value
}

func (v *NullableSiteState) Set(val *SiteState) {
	v.value = val
	v.isSet = true
}

func (v NullableSiteState) IsSet() bool {
	return v.isSet
}

func (v *NullableSiteState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSiteState(val *SiteState) *NullableSiteState {
	return &NullableSiteState{value: val, isSet: true}
}

func (v NullableSiteState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSiteState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
