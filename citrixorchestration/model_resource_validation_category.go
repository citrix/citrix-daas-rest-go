/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-onprem-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
	"fmt"
)

// ResourceValidationCategory The resource validation category.
type ResourceValidationCategory string

// List of ResourceValidationCategory
const (
	RESOURCEVALIDATIONCATEGORY_MACHINE_PROFILE ResourceValidationCategory = "MachineProfile"
	RESOURCEVALIDATIONCATEGORY_HIBERNATION_SUPPORT ResourceValidationCategory = "HibernationSupport"
)

// All allowed values of ResourceValidationCategory enum
var AllowedResourceValidationCategoryEnumValues = []ResourceValidationCategory{
	"MachineProfile",
	"HibernationSupport",
}

func (v *ResourceValidationCategory) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ResourceValidationCategory(value)
	for _, existing := range AllowedResourceValidationCategoryEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ResourceValidationCategory", value)
}

// NewResourceValidationCategoryFromValue returns a pointer to a valid ResourceValidationCategory
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewResourceValidationCategoryFromValue(v string) (*ResourceValidationCategory, error) {
	ev := ResourceValidationCategory(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ResourceValidationCategory: valid values are %v", v, AllowedResourceValidationCategoryEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ResourceValidationCategory) IsValid() bool {
	for _, existing := range AllowedResourceValidationCategoryEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ResourceValidationCategory value
func (v ResourceValidationCategory) Ptr() *ResourceValidationCategory {
	return &v
}

type NullableResourceValidationCategory struct {
	value *ResourceValidationCategory
	isSet bool
}

func (v NullableResourceValidationCategory) Get() *ResourceValidationCategory {
	return v.value
}

func (v *NullableResourceValidationCategory) Set(val *ResourceValidationCategory) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceValidationCategory) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceValidationCategory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceValidationCategory(val *ResourceValidationCategory) *NullableResourceValidationCategory {
	return &NullableResourceValidationCategory{value: val, isSet: true}
}

func (v NullableResourceValidationCategory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceValidationCategory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

