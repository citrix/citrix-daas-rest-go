/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-onprem-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
	"fmt"
)

// ProvisioningSchemeSearchProperty Properties which can be used for provisioning scheme.             
type ProvisioningSchemeSearchProperty string

// List of ProvisioningSchemeSearchProperty
const (
	PROVISIONINGSCHEMESEARCHPROPERTY_ACTIVATION_TYPE ProvisioningSchemeSearchProperty = "ActivationType"
	PROVISIONINGSCHEMESEARCHPROPERTY_ID ProvisioningSchemeSearchProperty = "Id"
	PROVISIONINGSCHEMESEARCHPROPERTY_CPU_COUNT ProvisioningSchemeSearchProperty = "CpuCount"
	PROVISIONINGSCHEMESEARCHPROPERTY_DISK_SIZE ProvisioningSchemeSearchProperty = "DiskSize"
	PROVISIONINGSCHEMESEARCHPROPERTY_IDENTITY_TYPE ProvisioningSchemeSearchProperty = "IdentityType"
	PROVISIONINGSCHEMESEARCHPROPERTY_MACHINE_COUNT ProvisioningSchemeSearchProperty = "MachineCount"
	PROVISIONINGSCHEMESEARCHPROPERTY_MEMORY_MB ProvisioningSchemeSearchProperty = "MemoryMB"
	PROVISIONINGSCHEMESEARCHPROPERTY_NAME ProvisioningSchemeSearchProperty = "Name"
	PROVISIONINGSCHEMESEARCHPROPERTY_PERSISTENCY ProvisioningSchemeSearchProperty = "Persistency"
	PROVISIONINGSCHEMESEARCHPROPERTY_PROVISIONING_SCHEME_TYPE ProvisioningSchemeSearchProperty = "ProvisioningSchemeType"
	PROVISIONINGSCHEMESEARCHPROPERTY_RESOURCE_POOL_ID ProvisioningSchemeSearchProperty = "ResourcePoolId"
	PROVISIONINGSCHEMESEARCHPROPERTY_STATE ProvisioningSchemeSearchProperty = "State"
	PROVISIONINGSCHEMESEARCHPROPERTY_USE_WRITE_BACK_CACHE ProvisioningSchemeSearchProperty = "UseWriteBackCache"
	PROVISIONINGSCHEMESEARCHPROPERTY_VERSION ProvisioningSchemeSearchProperty = "Version"
	PROVISIONINGSCHEMESEARCHPROPERTY_WRITE_BACK_CACHE_DISK_SIZE ProvisioningSchemeSearchProperty = "WriteBackCacheDiskSize"
	PROVISIONINGSCHEMESEARCHPROPERTY_WRITE_BACK_CACHE_MEMORY_SIZE ProvisioningSchemeSearchProperty = "WriteBackCacheMemorySize"
)

// All allowed values of ProvisioningSchemeSearchProperty enum
var AllowedProvisioningSchemeSearchPropertyEnumValues = []ProvisioningSchemeSearchProperty{
	"ActivationType",
	"Id",
	"CpuCount",
	"DiskSize",
	"IdentityType",
	"MachineCount",
	"MemoryMB",
	"Name",
	"Persistency",
	"ProvisioningSchemeType",
	"ResourcePoolId",
	"State",
	"UseWriteBackCache",
	"Version",
	"WriteBackCacheDiskSize",
	"WriteBackCacheMemorySize",
}

func (v *ProvisioningSchemeSearchProperty) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ProvisioningSchemeSearchProperty(value)
	for _, existing := range AllowedProvisioningSchemeSearchPropertyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ProvisioningSchemeSearchProperty", value)
}

// NewProvisioningSchemeSearchPropertyFromValue returns a pointer to a valid ProvisioningSchemeSearchProperty
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewProvisioningSchemeSearchPropertyFromValue(v string) (*ProvisioningSchemeSearchProperty, error) {
	ev := ProvisioningSchemeSearchProperty(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ProvisioningSchemeSearchProperty: valid values are %v", v, AllowedProvisioningSchemeSearchPropertyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ProvisioningSchemeSearchProperty) IsValid() bool {
	for _, existing := range AllowedProvisioningSchemeSearchPropertyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ProvisioningSchemeSearchProperty value
func (v ProvisioningSchemeSearchProperty) Ptr() *ProvisioningSchemeSearchProperty {
	return &v
}

type NullableProvisioningSchemeSearchProperty struct {
	value *ProvisioningSchemeSearchProperty
	isSet bool
}

func (v NullableProvisioningSchemeSearchProperty) Get() *ProvisioningSchemeSearchProperty {
	return v.value
}

func (v *NullableProvisioningSchemeSearchProperty) Set(val *ProvisioningSchemeSearchProperty) {
	v.value = val
	v.isSet = true
}

func (v NullableProvisioningSchemeSearchProperty) IsSet() bool {
	return v.isSet
}

func (v *NullableProvisioningSchemeSearchProperty) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProvisioningSchemeSearchProperty(val *ProvisioningSchemeSearchProperty) *NullableProvisioningSchemeSearchProperty {
	return &NullableProvisioningSchemeSearchProperty{value: val, isSet: true}
}

func (v NullableProvisioningSchemeSearchProperty) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProvisioningSchemeSearchProperty) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

