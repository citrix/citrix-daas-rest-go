/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-onprem-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
)

// checks if the GpoTestSettingData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GpoTestSettingData{}

// GpoTestSettingData Data for a setting whose value may have an error.
type GpoTestSettingData struct {
	// Error code.
	ErrorCode NullableString `json:"errorCode,omitempty"`
	// Additional error message about the setting value.
	ErrorMessage NullableString `json:"errorMessage,omitempty"`
	// The name of the setting.
	SettingName NullableString `json:"settingName,omitempty"`
	// The value of the setting.
	SettingValue NullableString `json:"settingValue,omitempty"`
}

// NewGpoTestSettingData instantiates a new GpoTestSettingData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGpoTestSettingData() *GpoTestSettingData {
	this := GpoTestSettingData{}
	return &this
}

// NewGpoTestSettingDataWithDefaults instantiates a new GpoTestSettingData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGpoTestSettingDataWithDefaults() *GpoTestSettingData {
	this := GpoTestSettingData{}
	return &this
}

// GetErrorCode returns the ErrorCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GpoTestSettingData) GetErrorCode() string {
	if o == nil || IsNil(o.ErrorCode.Get()) {
		var ret string
		return ret
	}
	return *o.ErrorCode.Get()
}

// GetErrorCodeOk returns a tuple with the ErrorCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GpoTestSettingData) GetErrorCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ErrorCode.Get(), o.ErrorCode.IsSet()
}

// HasErrorCode returns a boolean if a field has been set.
func (o *GpoTestSettingData) HasErrorCode() bool {
	if o != nil && o.ErrorCode.IsSet() {
		return true
	}

	return false
}

// SetErrorCode gets a reference to the given NullableString and assigns it to the ErrorCode field.
func (o *GpoTestSettingData) SetErrorCode(v string) {
	o.ErrorCode.Set(&v)
}

// SetErrorCodeNil sets the value for ErrorCode to be an explicit nil
func (o *GpoTestSettingData) SetErrorCodeNil() {
	o.ErrorCode.Set(nil)
}

// UnsetErrorCode ensures that no value is present for ErrorCode, not even an explicit nil
func (o *GpoTestSettingData) UnsetErrorCode() {
	o.ErrorCode.Unset()
}

// GetErrorMessage returns the ErrorMessage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GpoTestSettingData) GetErrorMessage() string {
	if o == nil || IsNil(o.ErrorMessage.Get()) {
		var ret string
		return ret
	}
	return *o.ErrorMessage.Get()
}

// GetErrorMessageOk returns a tuple with the ErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GpoTestSettingData) GetErrorMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ErrorMessage.Get(), o.ErrorMessage.IsSet()
}

// HasErrorMessage returns a boolean if a field has been set.
func (o *GpoTestSettingData) HasErrorMessage() bool {
	if o != nil && o.ErrorMessage.IsSet() {
		return true
	}

	return false
}

// SetErrorMessage gets a reference to the given NullableString and assigns it to the ErrorMessage field.
func (o *GpoTestSettingData) SetErrorMessage(v string) {
	o.ErrorMessage.Set(&v)
}

// SetErrorMessageNil sets the value for ErrorMessage to be an explicit nil
func (o *GpoTestSettingData) SetErrorMessageNil() {
	o.ErrorMessage.Set(nil)
}

// UnsetErrorMessage ensures that no value is present for ErrorMessage, not even an explicit nil
func (o *GpoTestSettingData) UnsetErrorMessage() {
	o.ErrorMessage.Unset()
}

// GetSettingName returns the SettingName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GpoTestSettingData) GetSettingName() string {
	if o == nil || IsNil(o.SettingName.Get()) {
		var ret string
		return ret
	}
	return *o.SettingName.Get()
}

// GetSettingNameOk returns a tuple with the SettingName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GpoTestSettingData) GetSettingNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SettingName.Get(), o.SettingName.IsSet()
}

// HasSettingName returns a boolean if a field has been set.
func (o *GpoTestSettingData) HasSettingName() bool {
	if o != nil && o.SettingName.IsSet() {
		return true
	}

	return false
}

// SetSettingName gets a reference to the given NullableString and assigns it to the SettingName field.
func (o *GpoTestSettingData) SetSettingName(v string) {
	o.SettingName.Set(&v)
}

// SetSettingNameNil sets the value for SettingName to be an explicit nil
func (o *GpoTestSettingData) SetSettingNameNil() {
	o.SettingName.Set(nil)
}

// UnsetSettingName ensures that no value is present for SettingName, not even an explicit nil
func (o *GpoTestSettingData) UnsetSettingName() {
	o.SettingName.Unset()
}

// GetSettingValue returns the SettingValue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GpoTestSettingData) GetSettingValue() string {
	if o == nil || IsNil(o.SettingValue.Get()) {
		var ret string
		return ret
	}
	return *o.SettingValue.Get()
}

// GetSettingValueOk returns a tuple with the SettingValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GpoTestSettingData) GetSettingValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SettingValue.Get(), o.SettingValue.IsSet()
}

// HasSettingValue returns a boolean if a field has been set.
func (o *GpoTestSettingData) HasSettingValue() bool {
	if o != nil && o.SettingValue.IsSet() {
		return true
	}

	return false
}

// SetSettingValue gets a reference to the given NullableString and assigns it to the SettingValue field.
func (o *GpoTestSettingData) SetSettingValue(v string) {
	o.SettingValue.Set(&v)
}

// SetSettingValueNil sets the value for SettingValue to be an explicit nil
func (o *GpoTestSettingData) SetSettingValueNil() {
	o.SettingValue.Set(nil)
}

// UnsetSettingValue ensures that no value is present for SettingValue, not even an explicit nil
func (o *GpoTestSettingData) UnsetSettingValue() {
	o.SettingValue.Unset()
}

func (o GpoTestSettingData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GpoTestSettingData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ErrorCode.IsSet() {
		toSerialize["errorCode"] = o.ErrorCode.Get()
	}
	if o.ErrorMessage.IsSet() {
		toSerialize["errorMessage"] = o.ErrorMessage.Get()
	}
	if o.SettingName.IsSet() {
		toSerialize["settingName"] = o.SettingName.Get()
	}
	if o.SettingValue.IsSet() {
		toSerialize["settingValue"] = o.SettingValue.Get()
	}
	return toSerialize, nil
}

type NullableGpoTestSettingData struct {
	value *GpoTestSettingData
	isSet bool
}

func (v NullableGpoTestSettingData) Get() *GpoTestSettingData {
	return v.value
}

func (v *NullableGpoTestSettingData) Set(val *GpoTestSettingData) {
	v.value = val
	v.isSet = true
}

func (v NullableGpoTestSettingData) IsSet() bool {
	return v.isSet
}

func (v *NullableGpoTestSettingData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGpoTestSettingData(val *GpoTestSettingData) *NullableGpoTestSettingData {
	return &NullableGpoTestSettingData{value: val, isSet: true}
}

func (v NullableGpoTestSettingData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGpoTestSettingData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
