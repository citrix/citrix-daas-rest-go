/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-onprem-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
	"fmt"
)

// MachineUnavailableReason Azure AD join type for machines
type MachineUnavailableReason string

// List of MachineUnavailableReason
const (
	MACHINEUNAVAILABLEREASON_UNKNOWN                       MachineUnavailableReason = "Unknown"
	MACHINEUNAVAILABLEREASON_NONE                          MachineUnavailableReason = "None"
	MACHINEUNAVAILABLEREASON_LOAD_MANAGEMENT_INITIALIZING  MachineUnavailableReason = "LoadManagementInitializing"
	MACHINEUNAVAILABLEREASON_PVD_INITIALIZING              MachineUnavailableReason = "PvdInitializing"
	MACHINEUNAVAILABLEREASON_PVD_FAILED                    MachineUnavailableReason = "PvdFailed"
	MACHINEUNAVAILABLEREASON_GCT_CONNECTION_INITIALIZING   MachineUnavailableReason = "GctConnectionInitializing"
	MACHINEUNAVAILABLEREASON_AZURE_AD_JOIN_INITIALIZING    MachineUnavailableReason = "AzureAdJoinInitializing"
	MACHINEUNAVAILABLEREASON_INTUNE_ENROLL_PENDING         MachineUnavailableReason = "IntuneEnrollPending"
	MACHINEUNAVAILABLEREASON_AZURE_ARC_ONBOARDING_REQUIRED MachineUnavailableReason = "AzureArcOnboardingRequired"
)

// All allowed values of MachineUnavailableReason enum
var AllowedMachineUnavailableReasonEnumValues = []MachineUnavailableReason{
	"Unknown",
	"None",
	"LoadManagementInitializing",
	"PvdInitializing",
	"PvdFailed",
	"GctConnectionInitializing",
	"AzureAdJoinInitializing",
	"IntuneEnrollPending",
	"AzureArcOnboardingRequired",
}

func (v *MachineUnavailableReason) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	*v = MachineUnavailableReason(value)
	return nil
}

// NewMachineUnavailableReasonFromValue returns a pointer to a valid MachineUnavailableReason
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMachineUnavailableReasonFromValue(v string) (*MachineUnavailableReason, error) {
	ev := MachineUnavailableReason(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MachineUnavailableReason: valid values are %v", v, AllowedMachineUnavailableReasonEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MachineUnavailableReason) IsValid() bool {
	for _, existing := range AllowedMachineUnavailableReasonEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MachineUnavailableReason value
func (v MachineUnavailableReason) Ptr() *MachineUnavailableReason {
	return &v
}

type NullableMachineUnavailableReason struct {
	value *MachineUnavailableReason
	isSet bool
}

func (v NullableMachineUnavailableReason) Get() *MachineUnavailableReason {
	return v.value
}

func (v *NullableMachineUnavailableReason) Set(val *MachineUnavailableReason) {
	v.value = val
	v.isSet = true
}

func (v NullableMachineUnavailableReason) IsSet() bool {
	return v.isSet
}

func (v *NullableMachineUnavailableReason) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMachineUnavailableReason(val *MachineUnavailableReason) *NullableMachineUnavailableReason {
	return &NullableMachineUnavailableReason{value: val, isSet: true}
}

func (v NullableMachineUnavailableReason) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMachineUnavailableReason) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
