/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
)

// checks if the CreateUserZonePreferenceModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateUserZonePreferenceModel{}

// CreateUserZonePreferenceModel Request object for specifying user zone preference properties.
type CreateUserZonePreferenceModel struct {
	// Zone Id.
	ZoneId string `json:"ZoneId"`
	// Name of the user or user group. Could be SamName, FullName, SID or UPN
	Name string `json:"Name"`
}

// NewCreateUserZonePreferenceModel instantiates a new CreateUserZonePreferenceModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateUserZonePreferenceModel(zoneId string, name string) *CreateUserZonePreferenceModel {
	this := CreateUserZonePreferenceModel{}
	this.ZoneId = zoneId
	this.Name = name
	return &this
}

// NewCreateUserZonePreferenceModelWithDefaults instantiates a new CreateUserZonePreferenceModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateUserZonePreferenceModelWithDefaults() *CreateUserZonePreferenceModel {
	this := CreateUserZonePreferenceModel{}
	return &this
}

// GetZoneId returns the ZoneId field value
func (o *CreateUserZonePreferenceModel) GetZoneId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ZoneId
}

// GetZoneIdOk returns a tuple with the ZoneId field value
// and a boolean to check if the value has been set.
func (o *CreateUserZonePreferenceModel) GetZoneIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ZoneId, true
}

// SetZoneId sets field value
func (o *CreateUserZonePreferenceModel) SetZoneId(v string) {
	o.ZoneId = v
}

// GetName returns the Name field value
func (o *CreateUserZonePreferenceModel) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateUserZonePreferenceModel) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateUserZonePreferenceModel) SetName(v string) {
	o.Name = v
}

func (o CreateUserZonePreferenceModel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateUserZonePreferenceModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ZoneId"] = o.ZoneId
	toSerialize["Name"] = o.Name
	return toSerialize, nil
}

type NullableCreateUserZonePreferenceModel struct {
	value *CreateUserZonePreferenceModel
	isSet bool
}

func (v NullableCreateUserZonePreferenceModel) Get() *CreateUserZonePreferenceModel {
	return v.value
}

func (v *NullableCreateUserZonePreferenceModel) Set(val *CreateUserZonePreferenceModel) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateUserZonePreferenceModel) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateUserZonePreferenceModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateUserZonePreferenceModel(val *CreateUserZonePreferenceModel) *NullableCreateUserZonePreferenceModel {
	return &NullableCreateUserZonePreferenceModel{value: val, isSet: true}
}

func (v NullableCreateUserZonePreferenceModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateUserZonePreferenceModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


