/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
	"fmt"
)

// ConnectionMode Modes in which a connection can be established to a session host.
type ConnectionMode string

// List of ConnectionMode
const (
	CONNECTIONMODE_UNKNOWN ConnectionMode = "Unknown"
	CONNECTIONMODE_BROKERED ConnectionMode = "Brokered"
	CONNECTIONMODE_UNBROKERED ConnectionMode = "Unbrokered"
	CONNECTIONMODE_LEASED_CONNECTION ConnectionMode = "LeasedConnection"
	CONNECTIONMODE_VDA_HIGH_AVAILABILITY_MODE ConnectionMode = "VdaHighAvailabilityMode"
	CONNECTIONMODE_THIRD_PARTY_BROKER ConnectionMode = "ThirdPartyBroker"
	CONNECTIONMODE_THIRD_PARTY_BROKER_WITH_LICENSING ConnectionMode = "ThirdPartyBrokerWithLicensing"
)

// All allowed values of ConnectionMode enum
var AllowedConnectionModeEnumValues = []ConnectionMode{
	"Unknown",
	"Brokered",
	"Unbrokered",
	"LeasedConnection",
	"VdaHighAvailabilityMode",
	"ThirdPartyBroker",
	"ThirdPartyBrokerWithLicensing",
}

func (v *ConnectionMode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ConnectionMode(value)
	for _, existing := range AllowedConnectionModeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ConnectionMode", value)
}

// NewConnectionModeFromValue returns a pointer to a valid ConnectionMode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewConnectionModeFromValue(v string) (*ConnectionMode, error) {
	ev := ConnectionMode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ConnectionMode: valid values are %v", v, AllowedConnectionModeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ConnectionMode) IsValid() bool {
	for _, existing := range AllowedConnectionModeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ConnectionMode value
func (v ConnectionMode) Ptr() *ConnectionMode {
	return &v
}

type NullableConnectionMode struct {
	value *ConnectionMode
	isSet bool
}

func (v NullableConnectionMode) Get() *ConnectionMode {
	return v.value
}

func (v *NullableConnectionMode) Set(val *ConnectionMode) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectionMode) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectionMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectionMode(val *ConnectionMode) *NullableConnectionMode {
	return &NullableConnectionMode{value: val, isSet: true}
}

func (v NullableConnectionMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectionMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

