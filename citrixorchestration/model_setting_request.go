/*
Citrix Virtual Apps and Desktops REST API TECHPREVIEW

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: techpreview
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
)

// checks if the SettingRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SettingRequest{}

// SettingRequest Setting instance contract
type SettingRequest struct {
	// Setting type. Is globally unique.
	SettingName *string `json:"settingName,omitempty"`
	// Indicate if the default setting value is used. If the setting data type is bool, this is ignored. For all other settings, if this value is true, the setting value is ignored and if this value is false, the setting value is used.
	UseDefault bool `json:"useDefault"`
	// The setting value.
	SettingValue *string `json:"settingValue,omitempty"`
}

// NewSettingRequest instantiates a new SettingRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSettingRequest(useDefault bool) *SettingRequest {
	this := SettingRequest{}
	this.UseDefault = useDefault
	return &this
}

// NewSettingRequestWithDefaults instantiates a new SettingRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSettingRequestWithDefaults() *SettingRequest {
	this := SettingRequest{}
	return &this
}

// GetSettingName returns the SettingName field value if set, zero value otherwise.
func (o *SettingRequest) GetSettingName() string {
	if o == nil || IsNil(o.SettingName) {
		var ret string
		return ret
	}
	return *o.SettingName
}

// GetSettingNameOk returns a tuple with the SettingName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingRequest) GetSettingNameOk() (*string, bool) {
	if o == nil || IsNil(o.SettingName) {
		return nil, false
	}
	return o.SettingName, true
}

// HasSettingName returns a boolean if a field has been set.
func (o *SettingRequest) HasSettingName() bool {
	if o != nil && !IsNil(o.SettingName) {
		return true
	}

	return false
}

// SetSettingName gets a reference to the given string and assigns it to the SettingName field.
func (o *SettingRequest) SetSettingName(v string) {
	o.SettingName = &v
}

// GetUseDefault returns the UseDefault field value
func (o *SettingRequest) GetUseDefault() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.UseDefault
}

// GetUseDefaultOk returns a tuple with the UseDefault field value
// and a boolean to check if the value has been set.
func (o *SettingRequest) GetUseDefaultOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UseDefault, true
}

// SetUseDefault sets field value
func (o *SettingRequest) SetUseDefault(v bool) {
	o.UseDefault = v
}

// GetSettingValue returns the SettingValue field value if set, zero value otherwise.
func (o *SettingRequest) GetSettingValue() string {
	if o == nil || IsNil(o.SettingValue) {
		var ret string
		return ret
	}
	return *o.SettingValue
}

// GetSettingValueOk returns a tuple with the SettingValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingRequest) GetSettingValueOk() (*string, bool) {
	if o == nil || IsNil(o.SettingValue) {
		return nil, false
	}
	return o.SettingValue, true
}

// HasSettingValue returns a boolean if a field has been set.
func (o *SettingRequest) HasSettingValue() bool {
	if o != nil && !IsNil(o.SettingValue) {
		return true
	}

	return false
}

// SetSettingValue gets a reference to the given string and assigns it to the SettingValue field.
func (o *SettingRequest) SetSettingValue(v string) {
	o.SettingValue = &v
}

func (o SettingRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SettingRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SettingName) {
		toSerialize["settingName"] = o.SettingName
	}
	toSerialize["useDefault"] = o.UseDefault
	if !IsNil(o.SettingValue) {
		toSerialize["settingValue"] = o.SettingValue
	}
	return toSerialize, nil
}

type NullableSettingRequest struct {
	value *SettingRequest
	isSet bool
}

func (v NullableSettingRequest) Get() *SettingRequest {
	return v.value
}

func (v *NullableSettingRequest) Set(val *SettingRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSettingRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSettingRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSettingRequest(val *SettingRequest) *NullableSettingRequest {
	return &NullableSettingRequest{value: val, isSet: true}
}

func (v NullableSettingRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSettingRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


