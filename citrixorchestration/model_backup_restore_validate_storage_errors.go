/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-onprem-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
	"fmt"
)

// BackupRestoreValidateStorageErrors
type BackupRestoreValidateStorageErrors string

// List of BackupRestoreValidateStorageErrors
const (
	BACKUPRESTOREVALIDATESTORAGEERRORS_UNDEFINED          BackupRestoreValidateStorageErrors = "Undefined"
	BACKUPRESTOREVALIDATESTORAGEERRORS_PERMISSIONS        BackupRestoreValidateStorageErrors = "Permissions"
	BACKUPRESTOREVALIDATESTORAGEERRORS_EXPIRATION_WARNING BackupRestoreValidateStorageErrors = "ExpirationWarning"
	BACKUPRESTOREVALIDATESTORAGEERRORS_EXPIRED            BackupRestoreValidateStorageErrors = "Expired"
	BACKUPRESTOREVALIDATESTORAGEERRORS_START_DATE_ERROR   BackupRestoreValidateStorageErrors = "StartDateError"
	BACKUPRESTOREVALIDATESTORAGEERRORS_SOURCE_TYPE        BackupRestoreValidateStorageErrors = "SourceType"
	BACKUPRESTOREVALIDATESTORAGEERRORS_OTHER              BackupRestoreValidateStorageErrors = "Other"
)

// All allowed values of BackupRestoreValidateStorageErrors enum
var AllowedBackupRestoreValidateStorageErrorsEnumValues = []BackupRestoreValidateStorageErrors{
	"Undefined",
	"Permissions",
	"ExpirationWarning",
	"Expired",
	"StartDateError",
	"SourceType",
	"Other",
}

func (v *BackupRestoreValidateStorageErrors) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	*v = BackupRestoreValidateStorageErrors(value)
	return nil
}

// NewBackupRestoreValidateStorageErrorsFromValue returns a pointer to a valid BackupRestoreValidateStorageErrors
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBackupRestoreValidateStorageErrorsFromValue(v string) (*BackupRestoreValidateStorageErrors, error) {
	ev := BackupRestoreValidateStorageErrors(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BackupRestoreValidateStorageErrors: valid values are %v", v, AllowedBackupRestoreValidateStorageErrorsEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BackupRestoreValidateStorageErrors) IsValid() bool {
	for _, existing := range AllowedBackupRestoreValidateStorageErrorsEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BackupRestoreValidateStorageErrors value
func (v BackupRestoreValidateStorageErrors) Ptr() *BackupRestoreValidateStorageErrors {
	return &v
}

type NullableBackupRestoreValidateStorageErrors struct {
	value *BackupRestoreValidateStorageErrors
	isSet bool
}

func (v NullableBackupRestoreValidateStorageErrors) Get() *BackupRestoreValidateStorageErrors {
	return v.value
}

func (v *NullableBackupRestoreValidateStorageErrors) Set(val *BackupRestoreValidateStorageErrors) {
	v.value = val
	v.isSet = true
}

func (v NullableBackupRestoreValidateStorageErrors) IsSet() bool {
	return v.isSet
}

func (v *NullableBackupRestoreValidateStorageErrors) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBackupRestoreValidateStorageErrors(val *BackupRestoreValidateStorageErrors) *NullableBackupRestoreValidateStorageErrors {
	return &NullableBackupRestoreValidateStorageErrors{value: val, isSet: true}
}

func (v NullableBackupRestoreValidateStorageErrors) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBackupRestoreValidateStorageErrors) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
