/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-onprem-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
	"fmt"
)

// FilterProperty Names of filter properties that can be specified in a search.
type FilterProperty string

// List of FilterProperty
const (
	FILTERPROPERTY_FILTER_DATA FilterProperty = "FilterData"
	FILTERPROPERTY_FILTER_TYPE FilterProperty = "FilterType"
	FILTERPROPERTY_IS_ALLOWED FilterProperty = "IsAllowed"
	FILTERPROPERTY_IS_ENABLED FilterProperty = "IsEnabled"
)

// All allowed values of FilterProperty enum
var AllowedFilterPropertyEnumValues = []FilterProperty{
	"FilterData",
	"FilterType",
	"IsAllowed",
	"IsEnabled",
}

func (v *FilterProperty) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FilterProperty(value)
	for _, existing := range AllowedFilterPropertyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FilterProperty", value)
}

// NewFilterPropertyFromValue returns a pointer to a valid FilterProperty
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFilterPropertyFromValue(v string) (*FilterProperty, error) {
	ev := FilterProperty(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FilterProperty: valid values are %v", v, AllowedFilterPropertyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FilterProperty) IsValid() bool {
	for _, existing := range AllowedFilterPropertyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FilterProperty value
func (v FilterProperty) Ptr() *FilterProperty {
	return &v
}

type NullableFilterProperty struct {
	value *FilterProperty
	isSet bool
}

func (v NullableFilterProperty) Get() *FilterProperty {
	return v.value
}

func (v *NullableFilterProperty) Set(val *FilterProperty) {
	v.value = val
	v.isSet = true
}

func (v NullableFilterProperty) IsSet() bool {
	return v.isSet
}

func (v *NullableFilterProperty) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilterProperty(val *FilterProperty) *NullableFilterProperty {
	return &NullableFilterProperty{value: val, isSet: true}
}

func (v NullableFilterProperty) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilterProperty) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

