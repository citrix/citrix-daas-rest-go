/*
Citrix Virtual Apps and Desktops REST API TECHPREVIEW

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: techpreview
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
)

// checks if the FilterDefinition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FilterDefinition{}

// FilterDefinition Filter definition.
type FilterDefinition struct {
	FilterType FilterType `json:"filterType"`
	// Localized filter name
	FilterName *string `json:"filterName,omitempty"`
	// Localized explanation
	Explanation *string `json:"explanation,omitempty"`
	// True = user filter, False = machine filter
	IsUserFilter bool `json:"isUserFilter"`
	// Is filter a singleton, only the NetScaler SD-Wan filter is singleton.
	IsSingleton bool `json:"isSingleton"`
}

// NewFilterDefinition instantiates a new FilterDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFilterDefinition(filterType FilterType, isUserFilter bool, isSingleton bool) *FilterDefinition {
	this := FilterDefinition{}
	this.FilterType = filterType
	this.IsUserFilter = isUserFilter
	this.IsSingleton = isSingleton
	return &this
}

// NewFilterDefinitionWithDefaults instantiates a new FilterDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFilterDefinitionWithDefaults() *FilterDefinition {
	this := FilterDefinition{}
	return &this
}

// GetFilterType returns the FilterType field value
func (o *FilterDefinition) GetFilterType() FilterType {
	if o == nil {
		var ret FilterType
		return ret
	}

	return o.FilterType
}

// GetFilterTypeOk returns a tuple with the FilterType field value
// and a boolean to check if the value has been set.
func (o *FilterDefinition) GetFilterTypeOk() (*FilterType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FilterType, true
}

// SetFilterType sets field value
func (o *FilterDefinition) SetFilterType(v FilterType) {
	o.FilterType = v
}

// GetFilterName returns the FilterName field value if set, zero value otherwise.
func (o *FilterDefinition) GetFilterName() string {
	if o == nil || IsNil(o.FilterName) {
		var ret string
		return ret
	}
	return *o.FilterName
}

// GetFilterNameOk returns a tuple with the FilterName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilterDefinition) GetFilterNameOk() (*string, bool) {
	if o == nil || IsNil(o.FilterName) {
		return nil, false
	}
	return o.FilterName, true
}

// HasFilterName returns a boolean if a field has been set.
func (o *FilterDefinition) HasFilterName() bool {
	if o != nil && !IsNil(o.FilterName) {
		return true
	}

	return false
}

// SetFilterName gets a reference to the given string and assigns it to the FilterName field.
func (o *FilterDefinition) SetFilterName(v string) {
	o.FilterName = &v
}

// GetExplanation returns the Explanation field value if set, zero value otherwise.
func (o *FilterDefinition) GetExplanation() string {
	if o == nil || IsNil(o.Explanation) {
		var ret string
		return ret
	}
	return *o.Explanation
}

// GetExplanationOk returns a tuple with the Explanation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilterDefinition) GetExplanationOk() (*string, bool) {
	if o == nil || IsNil(o.Explanation) {
		return nil, false
	}
	return o.Explanation, true
}

// HasExplanation returns a boolean if a field has been set.
func (o *FilterDefinition) HasExplanation() bool {
	if o != nil && !IsNil(o.Explanation) {
		return true
	}

	return false
}

// SetExplanation gets a reference to the given string and assigns it to the Explanation field.
func (o *FilterDefinition) SetExplanation(v string) {
	o.Explanation = &v
}

// GetIsUserFilter returns the IsUserFilter field value
func (o *FilterDefinition) GetIsUserFilter() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsUserFilter
}

// GetIsUserFilterOk returns a tuple with the IsUserFilter field value
// and a boolean to check if the value has been set.
func (o *FilterDefinition) GetIsUserFilterOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsUserFilter, true
}

// SetIsUserFilter sets field value
func (o *FilterDefinition) SetIsUserFilter(v bool) {
	o.IsUserFilter = v
}

// GetIsSingleton returns the IsSingleton field value
func (o *FilterDefinition) GetIsSingleton() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsSingleton
}

// GetIsSingletonOk returns a tuple with the IsSingleton field value
// and a boolean to check if the value has been set.
func (o *FilterDefinition) GetIsSingletonOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsSingleton, true
}

// SetIsSingleton sets field value
func (o *FilterDefinition) SetIsSingleton(v bool) {
	o.IsSingleton = v
}

func (o FilterDefinition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FilterDefinition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["filterType"] = o.FilterType
	if !IsNil(o.FilterName) {
		toSerialize["filterName"] = o.FilterName
	}
	if !IsNil(o.Explanation) {
		toSerialize["explanation"] = o.Explanation
	}
	toSerialize["isUserFilter"] = o.IsUserFilter
	toSerialize["isSingleton"] = o.IsSingleton
	return toSerialize, nil
}

type NullableFilterDefinition struct {
	value *FilterDefinition
	isSet bool
}

func (v NullableFilterDefinition) Get() *FilterDefinition {
	return v.value
}

func (v *NullableFilterDefinition) Set(val *FilterDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableFilterDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableFilterDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilterDefinition(val *FilterDefinition) *NullableFilterDefinition {
	return &NullableFilterDefinition{value: val, isSet: true}
}

func (v NullableFilterDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilterDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


