/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-onprem-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
	"fmt"
)

// CvadSecurityTypes 
type CvadSecurityTypes string

// List of CvadSecurityTypes
const (
	CVADSECURITYTYPES_UNKNOWN CvadSecurityTypes = "Unknown"
	CVADSECURITYTYPES_XEN_SERVER CvadSecurityTypes = "XenServer"
	CVADSECURITYTYPES_SCVMM CvadSecurityTypes = "SCVMM"
	CVADSECURITYTYPES_V_CENTER CvadSecurityTypes = "VCenter"
	CVADSECURITYTYPES_CUSTOM CvadSecurityTypes = "Custom"
	CVADSECURITYTYPES_AWS CvadSecurityTypes = "AWS"
	CVADSECURITYTYPES_WAKE_ON_LAN CvadSecurityTypes = "WakeOnLAN"
	CVADSECURITYTYPES_AZURE_RM CvadSecurityTypes = "AzureRM"
	CVADSECURITYTYPES_GOOGLE_CLOUD_PLATFORM CvadSecurityTypes = "GoogleCloudPlatform"
	CVADSECURITYTYPES_CLOUD_PLATFORM CvadSecurityTypes = "CloudPlatform"
	CVADSECURITYTYPES_NUTANIX CvadSecurityTypes = "Nutanix"
)

// All allowed values of CvadSecurityTypes enum
var AllowedCvadSecurityTypesEnumValues = []CvadSecurityTypes{
	"Unknown",
	"XenServer",
	"SCVMM",
	"VCenter",
	"Custom",
	"AWS",
	"WakeOnLAN",
	"AzureRM",
	"GoogleCloudPlatform",
	"CloudPlatform",
	"Nutanix",
}

func (v *CvadSecurityTypes) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	
	*v = CvadSecurityTypes(value)
	return nil
}

// NewCvadSecurityTypesFromValue returns a pointer to a valid CvadSecurityTypes
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCvadSecurityTypesFromValue(v string) (*CvadSecurityTypes, error) {
	ev := CvadSecurityTypes(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CvadSecurityTypes: valid values are %v", v, AllowedCvadSecurityTypesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CvadSecurityTypes) IsValid() bool {
	for _, existing := range AllowedCvadSecurityTypesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CvadSecurityTypes value
func (v CvadSecurityTypes) Ptr() *CvadSecurityTypes {
	return &v
}

type NullableCvadSecurityTypes struct {
	value *CvadSecurityTypes
	isSet bool
}

func (v NullableCvadSecurityTypes) Get() *CvadSecurityTypes {
	return v.value
}

func (v *NullableCvadSecurityTypes) Set(val *CvadSecurityTypes) {
	v.value = val
	v.isSet = true
}

func (v NullableCvadSecurityTypes) IsSet() bool {
	return v.isSet
}

func (v *NullableCvadSecurityTypes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCvadSecurityTypes(val *CvadSecurityTypes) *NullableCvadSecurityTypes {
	return &NullableCvadSecurityTypes{value: val, isSet: true}
}

func (v NullableCvadSecurityTypes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCvadSecurityTypes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

