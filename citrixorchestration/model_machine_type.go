/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-onprem-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
	"fmt"
)

// MachineType Types of machine.
type MachineType string

// List of MachineType
const (
	MACHINETYPE_UNKNOWN  MachineType = "Unknown"
	MACHINETYPE_VIRTUAL  MachineType = "Virtual"
	MACHINETYPE_PHYSICAL MachineType = "Physical"
)

// All allowed values of MachineType enum
var AllowedMachineTypeEnumValues = []MachineType{
	"Unknown",
	"Virtual",
	"Physical",
}

func (v *MachineType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	*v = MachineType(value)
	return nil
}

// NewMachineTypeFromValue returns a pointer to a valid MachineType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMachineTypeFromValue(v string) (*MachineType, error) {
	ev := MachineType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MachineType: valid values are %v", v, AllowedMachineTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MachineType) IsValid() bool {
	for _, existing := range AllowedMachineTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MachineType value
func (v MachineType) Ptr() *MachineType {
	return &v
}

type NullableMachineType struct {
	value *MachineType
	isSet bool
}

func (v NullableMachineType) Get() *MachineType {
	return v.value
}

func (v *NullableMachineType) Set(val *MachineType) {
	v.value = val
	v.isSet = true
}

func (v NullableMachineType) IsSet() bool {
	return v.isSet
}

func (v *NullableMachineType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMachineType(val *MachineType) *NullableMachineType {
	return &NullableMachineType{value: val, isSet: true}
}

func (v NullableMachineType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMachineType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
