/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-onprem-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
)

// checks if the VMImageResponseModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VMImageResponseModel{}

// VMImageResponseModel Details about a virtual machine disk image used for a provisioning scheme.
type VMImageResponseModel struct {
	FunctionalLevel *FunctionalLevel `json:"FunctionalLevel,omitempty"`
	Image *HypervisorResourceRefResponseModel `json:"Image,omitempty"`
	ImageStatus VMImageStatus `json:"ImageStatus"`
	// The date and time when the snapshot was used in the provisioning scheme.
	Date string `json:"Date"`
	// The note of the provisioning scheme image.
	MasterImageNote NullableString `json:"MasterImageNote,omitempty"`
}

// NewVMImageResponseModel instantiates a new VMImageResponseModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVMImageResponseModel(imageStatus VMImageStatus, date string) *VMImageResponseModel {
	this := VMImageResponseModel{}
	this.ImageStatus = imageStatus
	this.Date = date
	return &this
}

// NewVMImageResponseModelWithDefaults instantiates a new VMImageResponseModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVMImageResponseModelWithDefaults() *VMImageResponseModel {
	this := VMImageResponseModel{}
	return &this
}

// GetFunctionalLevel returns the FunctionalLevel field value if set, zero value otherwise.
func (o *VMImageResponseModel) GetFunctionalLevel() FunctionalLevel {
	if o == nil || IsNil(o.FunctionalLevel) {
		var ret FunctionalLevel
		return ret
	}
	return *o.FunctionalLevel
}

// GetFunctionalLevelOk returns a tuple with the FunctionalLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VMImageResponseModel) GetFunctionalLevelOk() (*FunctionalLevel, bool) {
	if o == nil || IsNil(o.FunctionalLevel) {
		return nil, false
	}
	return o.FunctionalLevel, true
}

// HasFunctionalLevel returns a boolean if a field has been set.
func (o *VMImageResponseModel) HasFunctionalLevel() bool {
	if o != nil && !IsNil(o.FunctionalLevel) {
		return true
	}

	return false
}

// SetFunctionalLevel gets a reference to the given FunctionalLevel and assigns it to the FunctionalLevel field.
func (o *VMImageResponseModel) SetFunctionalLevel(v FunctionalLevel) {
	o.FunctionalLevel = &v
}

// GetImage returns the Image field value if set, zero value otherwise.
func (o *VMImageResponseModel) GetImage() HypervisorResourceRefResponseModel {
	if o == nil || IsNil(o.Image) {
		var ret HypervisorResourceRefResponseModel
		return ret
	}
	return *o.Image
}

// GetImageOk returns a tuple with the Image field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VMImageResponseModel) GetImageOk() (*HypervisorResourceRefResponseModel, bool) {
	if o == nil || IsNil(o.Image) {
		return nil, false
	}
	return o.Image, true
}

// HasImage returns a boolean if a field has been set.
func (o *VMImageResponseModel) HasImage() bool {
	if o != nil && !IsNil(o.Image) {
		return true
	}

	return false
}

// SetImage gets a reference to the given HypervisorResourceRefResponseModel and assigns it to the Image field.
func (o *VMImageResponseModel) SetImage(v HypervisorResourceRefResponseModel) {
	o.Image = &v
}

// GetImageStatus returns the ImageStatus field value
func (o *VMImageResponseModel) GetImageStatus() VMImageStatus {
	if o == nil {
		var ret VMImageStatus
		return ret
	}

	return o.ImageStatus
}

// GetImageStatusOk returns a tuple with the ImageStatus field value
// and a boolean to check if the value has been set.
func (o *VMImageResponseModel) GetImageStatusOk() (*VMImageStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ImageStatus, true
}

// SetImageStatus sets field value
func (o *VMImageResponseModel) SetImageStatus(v VMImageStatus) {
	o.ImageStatus = v
}

// GetDate returns the Date field value
func (o *VMImageResponseModel) GetDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Date
}

// GetDateOk returns a tuple with the Date field value
// and a boolean to check if the value has been set.
func (o *VMImageResponseModel) GetDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Date, true
}

// SetDate sets field value
func (o *VMImageResponseModel) SetDate(v string) {
	o.Date = v
}

// GetMasterImageNote returns the MasterImageNote field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VMImageResponseModel) GetMasterImageNote() string {
	if o == nil || IsNil(o.MasterImageNote.Get()) {
		var ret string
		return ret
	}
	return *o.MasterImageNote.Get()
}

// GetMasterImageNoteOk returns a tuple with the MasterImageNote field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VMImageResponseModel) GetMasterImageNoteOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MasterImageNote.Get(), o.MasterImageNote.IsSet()
}

// HasMasterImageNote returns a boolean if a field has been set.
func (o *VMImageResponseModel) HasMasterImageNote() bool {
	if o != nil && o.MasterImageNote.IsSet() {
		return true
	}

	return false
}

// SetMasterImageNote gets a reference to the given NullableString and assigns it to the MasterImageNote field.
func (o *VMImageResponseModel) SetMasterImageNote(v string) {
	o.MasterImageNote.Set(&v)
}
// SetMasterImageNoteNil sets the value for MasterImageNote to be an explicit nil
func (o *VMImageResponseModel) SetMasterImageNoteNil() {
	o.MasterImageNote.Set(nil)
}

// UnsetMasterImageNote ensures that no value is present for MasterImageNote, not even an explicit nil
func (o *VMImageResponseModel) UnsetMasterImageNote() {
	o.MasterImageNote.Unset()
}

func (o VMImageResponseModel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VMImageResponseModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FunctionalLevel) {
		toSerialize["FunctionalLevel"] = o.FunctionalLevel
	}
	if !IsNil(o.Image) {
		toSerialize["Image"] = o.Image
	}
	toSerialize["ImageStatus"] = o.ImageStatus
	toSerialize["Date"] = o.Date
	if o.MasterImageNote.IsSet() {
		toSerialize["MasterImageNote"] = o.MasterImageNote.Get()
	}
	return toSerialize, nil
}

type NullableVMImageResponseModel struct {
	value *VMImageResponseModel
	isSet bool
}

func (v NullableVMImageResponseModel) Get() *VMImageResponseModel {
	return v.value
}

func (v *NullableVMImageResponseModel) Set(val *VMImageResponseModel) {
	v.value = val
	v.isSet = true
}

func (v NullableVMImageResponseModel) IsSet() bool {
	return v.isSet
}

func (v *NullableVMImageResponseModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVMImageResponseModel(val *VMImageResponseModel) *NullableVMImageResponseModel {
	return &NullableVMImageResponseModel{value: val, isSet: true}
}

func (v NullableVMImageResponseModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVMImageResponseModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


