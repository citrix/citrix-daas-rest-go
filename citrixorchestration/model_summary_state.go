/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
	"fmt"
)

// SummaryState Overall summary state of the desktop associated with a machine.
type SummaryState string

// List of SummaryState
const (
	SUMMARYSTATE_UNKNOWN SummaryState = "Unknown"
	SUMMARYSTATE_OFF SummaryState = "Off"
	SUMMARYSTATE_UNREGISTERED SummaryState = "Unregistered"
	SUMMARYSTATE_AVAILABLE SummaryState = "Available"
	SUMMARYSTATE_DISCONNECTED SummaryState = "Disconnected"
	SUMMARYSTATE_IN_USE SummaryState = "InUse"
	SUMMARYSTATE_PREPARING SummaryState = "Preparing"
)

// All allowed values of SummaryState enum
var AllowedSummaryStateEnumValues = []SummaryState{
	"Unknown",
	"Off",
	"Unregistered",
	"Available",
	"Disconnected",
	"InUse",
	"Preparing",
}

func (v *SummaryState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SummaryState(value)
	for _, existing := range AllowedSummaryStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SummaryState", value)
}

// NewSummaryStateFromValue returns a pointer to a valid SummaryState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSummaryStateFromValue(v string) (*SummaryState, error) {
	ev := SummaryState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SummaryState: valid values are %v", v, AllowedSummaryStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SummaryState) IsValid() bool {
	for _, existing := range AllowedSummaryStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SummaryState value
func (v SummaryState) Ptr() *SummaryState {
	return &v
}

type NullableSummaryState struct {
	value *SummaryState
	isSet bool
}

func (v NullableSummaryState) Get() *SummaryState {
	return v.value
}

func (v *NullableSummaryState) Set(val *SummaryState) {
	v.value = val
	v.isSet = true
}

func (v NullableSummaryState) IsSet() bool {
	return v.isSet
}

func (v *NullableSummaryState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSummaryState(val *SummaryState) *NullableSummaryState {
	return &NullableSummaryState{value: val, isSet: true}
}

func (v NullableSummaryState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSummaryState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

