/*
Citrix Virtual Apps and Desktops REST API TECHPREVIEW

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: techpreview
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
)

// checks if the ScopedObjectResponseModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScopedObjectResponseModel{}

// ScopedObjectResponseModel A scoped object; that is, a reference to an object of a different type which is contained within a delegated admin scope.
type ScopedObjectResponseModel struct {
	Object ScopedObjectResponseModelObject `json:"Object"`
	// Description of the scoped object, if it has one.
	ObjectDescription *string `json:"ObjectDescription,omitempty"`
	ObjectType ScopedObjectType `json:"ObjectType"`
}

// NewScopedObjectResponseModel instantiates a new ScopedObjectResponseModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScopedObjectResponseModel(object ScopedObjectResponseModelObject, objectType ScopedObjectType) *ScopedObjectResponseModel {
	this := ScopedObjectResponseModel{}
	this.Object = object
	this.ObjectType = objectType
	return &this
}

// NewScopedObjectResponseModelWithDefaults instantiates a new ScopedObjectResponseModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScopedObjectResponseModelWithDefaults() *ScopedObjectResponseModel {
	this := ScopedObjectResponseModel{}
	return &this
}

// GetObject returns the Object field value
func (o *ScopedObjectResponseModel) GetObject() ScopedObjectResponseModelObject {
	if o == nil {
		var ret ScopedObjectResponseModelObject
		return ret
	}

	return o.Object
}

// GetObjectOk returns a tuple with the Object field value
// and a boolean to check if the value has been set.
func (o *ScopedObjectResponseModel) GetObjectOk() (*ScopedObjectResponseModelObject, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Object, true
}

// SetObject sets field value
func (o *ScopedObjectResponseModel) SetObject(v ScopedObjectResponseModelObject) {
	o.Object = v
}

// GetObjectDescription returns the ObjectDescription field value if set, zero value otherwise.
func (o *ScopedObjectResponseModel) GetObjectDescription() string {
	if o == nil || IsNil(o.ObjectDescription) {
		var ret string
		return ret
	}
	return *o.ObjectDescription
}

// GetObjectDescriptionOk returns a tuple with the ObjectDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScopedObjectResponseModel) GetObjectDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.ObjectDescription) {
		return nil, false
	}
	return o.ObjectDescription, true
}

// HasObjectDescription returns a boolean if a field has been set.
func (o *ScopedObjectResponseModel) HasObjectDescription() bool {
	if o != nil && !IsNil(o.ObjectDescription) {
		return true
	}

	return false
}

// SetObjectDescription gets a reference to the given string and assigns it to the ObjectDescription field.
func (o *ScopedObjectResponseModel) SetObjectDescription(v string) {
	o.ObjectDescription = &v
}

// GetObjectType returns the ObjectType field value
func (o *ScopedObjectResponseModel) GetObjectType() ScopedObjectType {
	if o == nil {
		var ret ScopedObjectType
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *ScopedObjectResponseModel) GetObjectTypeOk() (*ScopedObjectType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *ScopedObjectResponseModel) SetObjectType(v ScopedObjectType) {
	o.ObjectType = v
}

func (o ScopedObjectResponseModel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScopedObjectResponseModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["Object"] = o.Object
	if !IsNil(o.ObjectDescription) {
		toSerialize["ObjectDescription"] = o.ObjectDescription
	}
	toSerialize["ObjectType"] = o.ObjectType
	return toSerialize, nil
}

type NullableScopedObjectResponseModel struct {
	value *ScopedObjectResponseModel
	isSet bool
}

func (v NullableScopedObjectResponseModel) Get() *ScopedObjectResponseModel {
	return v.value
}

func (v *NullableScopedObjectResponseModel) Set(val *ScopedObjectResponseModel) {
	v.value = val
	v.isSet = true
}

func (v NullableScopedObjectResponseModel) IsSet() bool {
	return v.isSet
}

func (v *NullableScopedObjectResponseModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScopedObjectResponseModel(val *ScopedObjectResponseModel) *NullableScopedObjectResponseModel {
	return &NullableScopedObjectResponseModel{value: val, isSet: true}
}

func (v NullableScopedObjectResponseModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScopedObjectResponseModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


