/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-onprem-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
)

// checks if the DiskSettingRequestModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DiskSettingRequestModel{}

// DiskSettingRequestModel Request object allowing caller to specify a disk setting
type DiskSettingRequestModel struct {
	StorageType *DiskStorageType `json:"StorageType,omitempty"`
	// The size of the disk in GB (gigabytes)
	SizeInGB *int32 `json:"SizeInGB,omitempty"`
	// The location of the disk
	Location NullableString `json:"Location,omitempty"`
}

// NewDiskSettingRequestModel instantiates a new DiskSettingRequestModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDiskSettingRequestModel() *DiskSettingRequestModel {
	this := DiskSettingRequestModel{}
	return &this
}

// NewDiskSettingRequestModelWithDefaults instantiates a new DiskSettingRequestModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDiskSettingRequestModelWithDefaults() *DiskSettingRequestModel {
	this := DiskSettingRequestModel{}
	return &this
}

// GetStorageType returns the StorageType field value if set, zero value otherwise.
func (o *DiskSettingRequestModel) GetStorageType() DiskStorageType {
	if o == nil || IsNil(o.StorageType) {
		var ret DiskStorageType
		return ret
	}
	return *o.StorageType
}

// GetStorageTypeOk returns a tuple with the StorageType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskSettingRequestModel) GetStorageTypeOk() (*DiskStorageType, bool) {
	if o == nil || IsNil(o.StorageType) {
		return nil, false
	}
	return o.StorageType, true
}

// HasStorageType returns a boolean if a field has been set.
func (o *DiskSettingRequestModel) HasStorageType() bool {
	if o != nil && !IsNil(o.StorageType) {
		return true
	}

	return false
}

// SetStorageType gets a reference to the given DiskStorageType and assigns it to the StorageType field.
func (o *DiskSettingRequestModel) SetStorageType(v DiskStorageType) {
	o.StorageType = &v
}

// GetSizeInGB returns the SizeInGB field value if set, zero value otherwise.
func (o *DiskSettingRequestModel) GetSizeInGB() int32 {
	if o == nil || IsNil(o.SizeInGB) {
		var ret int32
		return ret
	}
	return *o.SizeInGB
}

// GetSizeInGBOk returns a tuple with the SizeInGB field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskSettingRequestModel) GetSizeInGBOk() (*int32, bool) {
	if o == nil || IsNil(o.SizeInGB) {
		return nil, false
	}
	return o.SizeInGB, true
}

// HasSizeInGB returns a boolean if a field has been set.
func (o *DiskSettingRequestModel) HasSizeInGB() bool {
	if o != nil && !IsNil(o.SizeInGB) {
		return true
	}

	return false
}

// SetSizeInGB gets a reference to the given int32 and assigns it to the SizeInGB field.
func (o *DiskSettingRequestModel) SetSizeInGB(v int32) {
	o.SizeInGB = &v
}

// GetLocation returns the Location field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DiskSettingRequestModel) GetLocation() string {
	if o == nil || IsNil(o.Location.Get()) {
		var ret string
		return ret
	}
	return *o.Location.Get()
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DiskSettingRequestModel) GetLocationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Location.Get(), o.Location.IsSet()
}

// HasLocation returns a boolean if a field has been set.
func (o *DiskSettingRequestModel) HasLocation() bool {
	if o != nil && o.Location.IsSet() {
		return true
	}

	return false
}

// SetLocation gets a reference to the given NullableString and assigns it to the Location field.
func (o *DiskSettingRequestModel) SetLocation(v string) {
	o.Location.Set(&v)
}

// SetLocationNil sets the value for Location to be an explicit nil
func (o *DiskSettingRequestModel) SetLocationNil() {
	o.Location.Set(nil)
}

// UnsetLocation ensures that no value is present for Location, not even an explicit nil
func (o *DiskSettingRequestModel) UnsetLocation() {
	o.Location.Unset()
}

func (o DiskSettingRequestModel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DiskSettingRequestModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.StorageType) {
		toSerialize["StorageType"] = o.StorageType
	}
	if !IsNil(o.SizeInGB) {
		toSerialize["SizeInGB"] = o.SizeInGB
	}
	if o.Location.IsSet() {
		toSerialize["Location"] = o.Location.Get()
	}
	return toSerialize, nil
}

type NullableDiskSettingRequestModel struct {
	value *DiskSettingRequestModel
	isSet bool
}

func (v NullableDiskSettingRequestModel) Get() *DiskSettingRequestModel {
	return v.value
}

func (v *NullableDiskSettingRequestModel) Set(val *DiskSettingRequestModel) {
	v.value = val
	v.isSet = true
}

func (v NullableDiskSettingRequestModel) IsSet() bool {
	return v.isSet
}

func (v *NullableDiskSettingRequestModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDiskSettingRequestModel(val *DiskSettingRequestModel) *NullableDiskSettingRequestModel {
	return &NullableDiskSettingRequestModel{value: val, isSet: true}
}

func (v NullableDiskSettingRequestModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDiskSettingRequestModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
