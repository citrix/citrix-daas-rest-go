/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-onprem-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
	"fmt"
)

// FilterType2 Names of all filters. The names get stored. So they must not be changed.
type FilterType2 string

// List of FilterType2
const (
	FILTERTYPE2_ACCESS_CONTROL FilterType2 = "AccessControl"
	FILTERTYPE2_BRANCH_REPEATER FilterType2 = "BranchRepeater"
	FILTERTYPE2_CLIENT_IP FilterType2 = "ClientIP"
	FILTERTYPE2_CLIENT_NAME FilterType2 = "ClientName"
	FILTERTYPE2_DESKTOP_GROUP FilterType2 = "DesktopGroup"
	FILTERTYPE2_DESKTOP_KIND FilterType2 = "DesktopKind"
	FILTERTYPE2_DESKTOP_TAG FilterType2 = "DesktopTag"
	FILTERTYPE2_OU FilterType2 = "OU"
	FILTERTYPE2_USER FilterType2 = "User"
)

// All allowed values of FilterType2 enum
var AllowedFilterType2EnumValues = []FilterType2{
	"AccessControl",
	"BranchRepeater",
	"ClientIP",
	"ClientName",
	"DesktopGroup",
	"DesktopKind",
	"DesktopTag",
	"OU",
	"User",
}

func (v *FilterType2) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FilterType2(value)
	for _, existing := range AllowedFilterType2EnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FilterType2", value)
}

// NewFilterType2FromValue returns a pointer to a valid FilterType2
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFilterType2FromValue(v string) (*FilterType2, error) {
	ev := FilterType2(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FilterType2: valid values are %v", v, AllowedFilterType2EnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FilterType2) IsValid() bool {
	for _, existing := range AllowedFilterType2EnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FilterType2 value
func (v FilterType2) Ptr() *FilterType2 {
	return &v
}

type NullableFilterType2 struct {
	value *FilterType2
	isSet bool
}

func (v NullableFilterType2) Get() *FilterType2 {
	return v.value
}

func (v *NullableFilterType2) Set(val *FilterType2) {
	v.value = val
	v.isSet = true
}

func (v NullableFilterType2) IsSet() bool {
	return v.isSet
}

func (v *NullableFilterType2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilterType2(val *FilterType2) *NullableFilterType2 {
	return &NullableFilterType2{value: val, isSet: true}
}

func (v NullableFilterType2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilterType2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

