/*
Citrix Virtual Apps and Desktops REST API TECHPREVIEW

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: techpreview
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
	"fmt"
)

// MachineAndSessionSearchFilterGroupsType The search filter groups type
type MachineAndSessionSearchFilterGroupsType string

// List of MachineAndSessionSearchFilterGroupsType
const (
	MACHINEANDSESSIONSEARCHFILTERGROUPSTYPE_OR MachineAndSessionSearchFilterGroupsType = "Or"
	MACHINEANDSESSIONSEARCHFILTERGROUPSTYPE_AND MachineAndSessionSearchFilterGroupsType = "And"
)

// All allowed values of MachineAndSessionSearchFilterGroupsType enum
var AllowedMachineAndSessionSearchFilterGroupsTypeEnumValues = []MachineAndSessionSearchFilterGroupsType{
	"Or",
	"And",
}

func (v *MachineAndSessionSearchFilterGroupsType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MachineAndSessionSearchFilterGroupsType(value)
	for _, existing := range AllowedMachineAndSessionSearchFilterGroupsTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MachineAndSessionSearchFilterGroupsType", value)
}

// NewMachineAndSessionSearchFilterGroupsTypeFromValue returns a pointer to a valid MachineAndSessionSearchFilterGroupsType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMachineAndSessionSearchFilterGroupsTypeFromValue(v string) (*MachineAndSessionSearchFilterGroupsType, error) {
	ev := MachineAndSessionSearchFilterGroupsType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MachineAndSessionSearchFilterGroupsType: valid values are %v", v, AllowedMachineAndSessionSearchFilterGroupsTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MachineAndSessionSearchFilterGroupsType) IsValid() bool {
	for _, existing := range AllowedMachineAndSessionSearchFilterGroupsTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MachineAndSessionSearchFilterGroupsType value
func (v MachineAndSessionSearchFilterGroupsType) Ptr() *MachineAndSessionSearchFilterGroupsType {
	return &v
}

type NullableMachineAndSessionSearchFilterGroupsType struct {
	value *MachineAndSessionSearchFilterGroupsType
	isSet bool
}

func (v NullableMachineAndSessionSearchFilterGroupsType) Get() *MachineAndSessionSearchFilterGroupsType {
	return v.value
}

func (v *NullableMachineAndSessionSearchFilterGroupsType) Set(val *MachineAndSessionSearchFilterGroupsType) {
	v.value = val
	v.isSet = true
}

func (v NullableMachineAndSessionSearchFilterGroupsType) IsSet() bool {
	return v.isSet
}

func (v *NullableMachineAndSessionSearchFilterGroupsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMachineAndSessionSearchFilterGroupsType(val *MachineAndSessionSearchFilterGroupsType) *NullableMachineAndSessionSearchFilterGroupsType {
	return &NullableMachineAndSessionSearchFilterGroupsType{value: val, isSet: true}
}

func (v NullableMachineAndSessionSearchFilterGroupsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMachineAndSessionSearchFilterGroupsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

