/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-onprem-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
	"fmt"
)

// LogOperationSearchProperty Configuration log operation properties that can be used for advanced search.
type LogOperationSearchProperty string

// List of LogOperationSearchProperty
const (
	LOGOPERATIONSEARCHPROPERTY_ID LogOperationSearchProperty = "Id"
	LOGOPERATIONSEARCHPROPERTY_TEXT LogOperationSearchProperty = "Text"
	LOGOPERATIONSEARCHPROPERTY_USER LogOperationSearchProperty = "User"
	LOGOPERATIONSEARCHPROPERTY_SOURCE LogOperationSearchProperty = "Source"
	LOGOPERATIONSEARCHPROPERTY_ADMIN_MACHINE_IP LogOperationSearchProperty = "AdminMachineIP"
	LOGOPERATIONSEARCHPROPERTY_END_TIME LogOperationSearchProperty = "EndTime"
	LOGOPERATIONSEARCHPROPERTY_START_TIME LogOperationSearchProperty = "StartTime"
	LOGOPERATIONSEARCHPROPERTY_IS_SUCCESSFUL LogOperationSearchProperty = "IsSuccessful"
	LOGOPERATIONSEARCHPROPERTY_TARGET_TYPE LogOperationSearchProperty = "TargetType"
	LOGOPERATIONSEARCHPROPERTY_OPERATION_TYPE LogOperationSearchProperty = "OperationType"
	LOGOPERATIONSEARCHPROPERTY_LABELS LogOperationSearchProperty = "Labels"
)

// All allowed values of LogOperationSearchProperty enum
var AllowedLogOperationSearchPropertyEnumValues = []LogOperationSearchProperty{
	"Id",
	"Text",
	"User",
	"Source",
	"AdminMachineIP",
	"EndTime",
	"StartTime",
	"IsSuccessful",
	"TargetType",
	"OperationType",
	"Labels",
}

func (v *LogOperationSearchProperty) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LogOperationSearchProperty(value)
	for _, existing := range AllowedLogOperationSearchPropertyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LogOperationSearchProperty", value)
}

// NewLogOperationSearchPropertyFromValue returns a pointer to a valid LogOperationSearchProperty
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLogOperationSearchPropertyFromValue(v string) (*LogOperationSearchProperty, error) {
	ev := LogOperationSearchProperty(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LogOperationSearchProperty: valid values are %v", v, AllowedLogOperationSearchPropertyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LogOperationSearchProperty) IsValid() bool {
	for _, existing := range AllowedLogOperationSearchPropertyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LogOperationSearchProperty value
func (v LogOperationSearchProperty) Ptr() *LogOperationSearchProperty {
	return &v
}

type NullableLogOperationSearchProperty struct {
	value *LogOperationSearchProperty
	isSet bool
}

func (v NullableLogOperationSearchProperty) Get() *LogOperationSearchProperty {
	return v.value
}

func (v *NullableLogOperationSearchProperty) Set(val *LogOperationSearchProperty) {
	v.value = val
	v.isSet = true
}

func (v NullableLogOperationSearchProperty) IsSet() bool {
	return v.isSet
}

func (v *NullableLogOperationSearchProperty) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogOperationSearchProperty(val *LogOperationSearchProperty) *NullableLogOperationSearchProperty {
	return &NullableLogOperationSearchProperty{value: val, isSet: true}
}

func (v NullableLogOperationSearchProperty) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogOperationSearchProperty) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

