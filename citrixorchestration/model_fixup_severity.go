/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-onprem-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
	"fmt"
)

// FixupSeverity
type FixupSeverity string

// List of FixupSeverity
const (
	FIXUPSEVERITY_NORMAL    FixupSeverity = "Normal"
	FIXUPSEVERITY_INFO      FixupSeverity = "Info"
	FIXUPSEVERITY_WARNING   FixupSeverity = "Warning"
	FIXUPSEVERITY_ERROR     FixupSeverity = "Error"
	FIXUPSEVERITY_UNDEFINED FixupSeverity = "Undefined"
)

// All allowed values of FixupSeverity enum
var AllowedFixupSeverityEnumValues = []FixupSeverity{
	"Normal",
	"Info",
	"Warning",
	"Error",
	"Undefined",
}

func (v *FixupSeverity) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	*v = FixupSeverity(value)
	return nil
}

// NewFixupSeverityFromValue returns a pointer to a valid FixupSeverity
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFixupSeverityFromValue(v string) (*FixupSeverity, error) {
	ev := FixupSeverity(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FixupSeverity: valid values are %v", v, AllowedFixupSeverityEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FixupSeverity) IsValid() bool {
	for _, existing := range AllowedFixupSeverityEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FixupSeverity value
func (v FixupSeverity) Ptr() *FixupSeverity {
	return &v
}

type NullableFixupSeverity struct {
	value *FixupSeverity
	isSet bool
}

func (v NullableFixupSeverity) Get() *FixupSeverity {
	return v.value
}

func (v *NullableFixupSeverity) Set(val *FixupSeverity) {
	v.value = val
	v.isSet = true
}

func (v NullableFixupSeverity) IsSet() bool {
	return v.isSet
}

func (v *NullableFixupSeverity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFixupSeverity(val *FixupSeverity) *NullableFixupSeverity {
	return &NullableFixupSeverity{value: val, isSet: true}
}

func (v NullableFixupSeverity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFixupSeverity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
