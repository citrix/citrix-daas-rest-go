/*
Citrix Virtual Apps and Desktops REST API TECHPREVIEW

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: techpreview
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
)

// checks if the DatabaseChangePropertiesModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DatabaseChangePropertiesModel{}

// DatabaseChangePropertiesModel Database change properties model.
type DatabaseChangePropertiesModel struct {
	// Name of database
	DatabaseName string `json:"DatabaseName"`
	// Server address of database
	DatabaseServerAddress string `json:"DatabaseServerAddress"`
	// Indicates whether the database should be created manually by scripts
	ManualUpdateDatabase bool `json:"ManualUpdateDatabase"`
	// Indicates whether ignore warnings where changing database
	SkipWarning bool `json:"SkipWarning"`
}

// NewDatabaseChangePropertiesModel instantiates a new DatabaseChangePropertiesModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatabaseChangePropertiesModel(databaseName string, databaseServerAddress string, manualUpdateDatabase bool, skipWarning bool) *DatabaseChangePropertiesModel {
	this := DatabaseChangePropertiesModel{}
	this.DatabaseName = databaseName
	this.DatabaseServerAddress = databaseServerAddress
	this.ManualUpdateDatabase = manualUpdateDatabase
	this.SkipWarning = skipWarning
	return &this
}

// NewDatabaseChangePropertiesModelWithDefaults instantiates a new DatabaseChangePropertiesModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatabaseChangePropertiesModelWithDefaults() *DatabaseChangePropertiesModel {
	this := DatabaseChangePropertiesModel{}
	return &this
}

// GetDatabaseName returns the DatabaseName field value
func (o *DatabaseChangePropertiesModel) GetDatabaseName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DatabaseName
}

// GetDatabaseNameOk returns a tuple with the DatabaseName field value
// and a boolean to check if the value has been set.
func (o *DatabaseChangePropertiesModel) GetDatabaseNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DatabaseName, true
}

// SetDatabaseName sets field value
func (o *DatabaseChangePropertiesModel) SetDatabaseName(v string) {
	o.DatabaseName = v
}

// GetDatabaseServerAddress returns the DatabaseServerAddress field value
func (o *DatabaseChangePropertiesModel) GetDatabaseServerAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DatabaseServerAddress
}

// GetDatabaseServerAddressOk returns a tuple with the DatabaseServerAddress field value
// and a boolean to check if the value has been set.
func (o *DatabaseChangePropertiesModel) GetDatabaseServerAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DatabaseServerAddress, true
}

// SetDatabaseServerAddress sets field value
func (o *DatabaseChangePropertiesModel) SetDatabaseServerAddress(v string) {
	o.DatabaseServerAddress = v
}

// GetManualUpdateDatabase returns the ManualUpdateDatabase field value
func (o *DatabaseChangePropertiesModel) GetManualUpdateDatabase() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ManualUpdateDatabase
}

// GetManualUpdateDatabaseOk returns a tuple with the ManualUpdateDatabase field value
// and a boolean to check if the value has been set.
func (o *DatabaseChangePropertiesModel) GetManualUpdateDatabaseOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ManualUpdateDatabase, true
}

// SetManualUpdateDatabase sets field value
func (o *DatabaseChangePropertiesModel) SetManualUpdateDatabase(v bool) {
	o.ManualUpdateDatabase = v
}

// GetSkipWarning returns the SkipWarning field value
func (o *DatabaseChangePropertiesModel) GetSkipWarning() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.SkipWarning
}

// GetSkipWarningOk returns a tuple with the SkipWarning field value
// and a boolean to check if the value has been set.
func (o *DatabaseChangePropertiesModel) GetSkipWarningOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SkipWarning, true
}

// SetSkipWarning sets field value
func (o *DatabaseChangePropertiesModel) SetSkipWarning(v bool) {
	o.SkipWarning = v
}

func (o DatabaseChangePropertiesModel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DatabaseChangePropertiesModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["DatabaseName"] = o.DatabaseName
	toSerialize["DatabaseServerAddress"] = o.DatabaseServerAddress
	toSerialize["ManualUpdateDatabase"] = o.ManualUpdateDatabase
	toSerialize["SkipWarning"] = o.SkipWarning
	return toSerialize, nil
}

type NullableDatabaseChangePropertiesModel struct {
	value *DatabaseChangePropertiesModel
	isSet bool
}

func (v NullableDatabaseChangePropertiesModel) Get() *DatabaseChangePropertiesModel {
	return v.value
}

func (v *NullableDatabaseChangePropertiesModel) Set(val *DatabaseChangePropertiesModel) {
	v.value = val
	v.isSet = true
}

func (v NullableDatabaseChangePropertiesModel) IsSet() bool {
	return v.isSet
}

func (v *NullableDatabaseChangePropertiesModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatabaseChangePropertiesModel(val *DatabaseChangePropertiesModel) *NullableDatabaseChangePropertiesModel {
	return &NullableDatabaseChangePropertiesModel{value: val, isSet: true}
}

func (v NullableDatabaseChangePropertiesModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatabaseChangePropertiesModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


