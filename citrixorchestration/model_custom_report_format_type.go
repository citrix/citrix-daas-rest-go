/*
Citrix Virtual Apps and Desktops REST API TECHPREVIEW

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: techpreview
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
	"fmt"
)

// CustomReportFormatType 
type CustomReportFormatType string

// List of CustomReportFormatType
const (
	CUSTOMREPORTFORMATTYPE_HTML CustomReportFormatType = "Html"
	CUSTOMREPORTFORMATTYPE_CSV CustomReportFormatType = "Csv"
	CUSTOMREPORTFORMATTYPE_BOTH CustomReportFormatType = "Both"
)

// All allowed values of CustomReportFormatType enum
var AllowedCustomReportFormatTypeEnumValues = []CustomReportFormatType{
	"Html",
	"Csv",
	"Both",
}

func (v *CustomReportFormatType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CustomReportFormatType(value)
	for _, existing := range AllowedCustomReportFormatTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CustomReportFormatType", value)
}

// NewCustomReportFormatTypeFromValue returns a pointer to a valid CustomReportFormatType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCustomReportFormatTypeFromValue(v string) (*CustomReportFormatType, error) {
	ev := CustomReportFormatType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CustomReportFormatType: valid values are %v", v, AllowedCustomReportFormatTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CustomReportFormatType) IsValid() bool {
	for _, existing := range AllowedCustomReportFormatTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CustomReportFormatType value
func (v CustomReportFormatType) Ptr() *CustomReportFormatType {
	return &v
}

type NullableCustomReportFormatType struct {
	value *CustomReportFormatType
	isSet bool
}

func (v NullableCustomReportFormatType) Get() *CustomReportFormatType {
	return v.value
}

func (v *NullableCustomReportFormatType) Set(val *CustomReportFormatType) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomReportFormatType) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomReportFormatType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomReportFormatType(val *CustomReportFormatType) *NullableCustomReportFormatType {
	return &NullableCustomReportFormatType{value: val, isSet: true}
}

func (v NullableCustomReportFormatType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomReportFormatType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

