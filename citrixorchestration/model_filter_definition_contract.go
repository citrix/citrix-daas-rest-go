/*
Citrix Virtual Apps and Desktops REST API TECHPREVIEW

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: techpreview
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
)

// checks if the FilterDefinitionContract type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FilterDefinitionContract{}

// FilterDefinitionContract Filter definition.
type FilterDefinitionContract struct {
	// Filter type
	FilterType *string `json:"FilterType,omitempty"`
	// Localized filter name
	FilterName *string `json:"FilterName,omitempty"`
	// Localized explanation
	Explanation *string `json:"Explanation,omitempty"`
	// True = user filter, False = machine filter
	IsUserFilter *bool `json:"IsUserFilter,omitempty"`
}

// NewFilterDefinitionContract instantiates a new FilterDefinitionContract object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFilterDefinitionContract() *FilterDefinitionContract {
	this := FilterDefinitionContract{}
	return &this
}

// NewFilterDefinitionContractWithDefaults instantiates a new FilterDefinitionContract object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFilterDefinitionContractWithDefaults() *FilterDefinitionContract {
	this := FilterDefinitionContract{}
	return &this
}

// GetFilterType returns the FilterType field value if set, zero value otherwise.
func (o *FilterDefinitionContract) GetFilterType() string {
	if o == nil || IsNil(o.FilterType) {
		var ret string
		return ret
	}
	return *o.FilterType
}

// GetFilterTypeOk returns a tuple with the FilterType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilterDefinitionContract) GetFilterTypeOk() (*string, bool) {
	if o == nil || IsNil(o.FilterType) {
		return nil, false
	}
	return o.FilterType, true
}

// HasFilterType returns a boolean if a field has been set.
func (o *FilterDefinitionContract) HasFilterType() bool {
	if o != nil && !IsNil(o.FilterType) {
		return true
	}

	return false
}

// SetFilterType gets a reference to the given string and assigns it to the FilterType field.
func (o *FilterDefinitionContract) SetFilterType(v string) {
	o.FilterType = &v
}

// GetFilterName returns the FilterName field value if set, zero value otherwise.
func (o *FilterDefinitionContract) GetFilterName() string {
	if o == nil || IsNil(o.FilterName) {
		var ret string
		return ret
	}
	return *o.FilterName
}

// GetFilterNameOk returns a tuple with the FilterName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilterDefinitionContract) GetFilterNameOk() (*string, bool) {
	if o == nil || IsNil(o.FilterName) {
		return nil, false
	}
	return o.FilterName, true
}

// HasFilterName returns a boolean if a field has been set.
func (o *FilterDefinitionContract) HasFilterName() bool {
	if o != nil && !IsNil(o.FilterName) {
		return true
	}

	return false
}

// SetFilterName gets a reference to the given string and assigns it to the FilterName field.
func (o *FilterDefinitionContract) SetFilterName(v string) {
	o.FilterName = &v
}

// GetExplanation returns the Explanation field value if set, zero value otherwise.
func (o *FilterDefinitionContract) GetExplanation() string {
	if o == nil || IsNil(o.Explanation) {
		var ret string
		return ret
	}
	return *o.Explanation
}

// GetExplanationOk returns a tuple with the Explanation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilterDefinitionContract) GetExplanationOk() (*string, bool) {
	if o == nil || IsNil(o.Explanation) {
		return nil, false
	}
	return o.Explanation, true
}

// HasExplanation returns a boolean if a field has been set.
func (o *FilterDefinitionContract) HasExplanation() bool {
	if o != nil && !IsNil(o.Explanation) {
		return true
	}

	return false
}

// SetExplanation gets a reference to the given string and assigns it to the Explanation field.
func (o *FilterDefinitionContract) SetExplanation(v string) {
	o.Explanation = &v
}

// GetIsUserFilter returns the IsUserFilter field value if set, zero value otherwise.
func (o *FilterDefinitionContract) GetIsUserFilter() bool {
	if o == nil || IsNil(o.IsUserFilter) {
		var ret bool
		return ret
	}
	return *o.IsUserFilter
}

// GetIsUserFilterOk returns a tuple with the IsUserFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilterDefinitionContract) GetIsUserFilterOk() (*bool, bool) {
	if o == nil || IsNil(o.IsUserFilter) {
		return nil, false
	}
	return o.IsUserFilter, true
}

// HasIsUserFilter returns a boolean if a field has been set.
func (o *FilterDefinitionContract) HasIsUserFilter() bool {
	if o != nil && !IsNil(o.IsUserFilter) {
		return true
	}

	return false
}

// SetIsUserFilter gets a reference to the given bool and assigns it to the IsUserFilter field.
func (o *FilterDefinitionContract) SetIsUserFilter(v bool) {
	o.IsUserFilter = &v
}

func (o FilterDefinitionContract) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FilterDefinitionContract) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FilterType) {
		toSerialize["FilterType"] = o.FilterType
	}
	if !IsNil(o.FilterName) {
		toSerialize["FilterName"] = o.FilterName
	}
	if !IsNil(o.Explanation) {
		toSerialize["Explanation"] = o.Explanation
	}
	if !IsNil(o.IsUserFilter) {
		toSerialize["IsUserFilter"] = o.IsUserFilter
	}
	return toSerialize, nil
}

type NullableFilterDefinitionContract struct {
	value *FilterDefinitionContract
	isSet bool
}

func (v NullableFilterDefinitionContract) Get() *FilterDefinitionContract {
	return v.value
}

func (v *NullableFilterDefinitionContract) Set(val *FilterDefinitionContract) {
	v.value = val
	v.isSet = true
}

func (v NullableFilterDefinitionContract) IsSet() bool {
	return v.isSet
}

func (v *NullableFilterDefinitionContract) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilterDefinitionContract(val *FilterDefinitionContract) *NullableFilterDefinitionContract {
	return &NullableFilterDefinitionContract{value: val, isSet: true}
}

func (v NullableFilterDefinitionContract) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilterDefinitionContract) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


