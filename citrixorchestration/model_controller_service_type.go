/*
Citrix Virtual Apps and Desktops REST API TECHPREVIEW

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: techpreview
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
	"fmt"
)

// ControllerServiceType 
type ControllerServiceType string

// List of ControllerServiceType
const (
	CONTROLLERSERVICETYPE_UNKNOWN ControllerServiceType = "Unknown"
	CONTROLLERSERVICETYPE_BROKER ControllerServiceType = "Broker"
	CONTROLLERSERVICETYPE_ACCT ControllerServiceType = "Acct"
	CONTROLLERSERVICETYPE_PROV ControllerServiceType = "Prov"
	CONTROLLERSERVICETYPE_HYP ControllerServiceType = "Hyp"
	CONTROLLERSERVICETYPE_LIC ControllerServiceType = "Lic"
	CONTROLLERSERVICETYPE_PVS ControllerServiceType = "Pvs"
	CONTROLLERSERVICETYPE_MONITOR ControllerServiceType = "Monitor"
	CONTROLLERSERVICETYPE_SF ControllerServiceType = "Sf"
	CONTROLLERSERVICETYPE_ENV_TEST ControllerServiceType = "EnvTest"
	CONTROLLERSERVICETYPE_ORCH ControllerServiceType = "Orch"
	CONTROLLERSERVICETYPE_TRUST ControllerServiceType = "Trust"
	CONTROLLERSERVICETYPE_APP_V ControllerServiceType = "AppV"
	CONTROLLERSERVICETYPE_VUS ControllerServiceType = "Vus"
	CONTROLLERSERVICETYPE_CONFIG ControllerServiceType = "Config"
	CONTROLLERSERVICETYPE_LOG ControllerServiceType = "Log"
	CONTROLLERSERVICETYPE_ANALYTICS ControllerServiceType = "Analytics"
	CONTROLLERSERVICETYPE_ADMIN ControllerServiceType = "Admin"
	CONTROLLERSERVICETYPE_APP_LIB ControllerServiceType = "AppLib"
	CONTROLLERSERVICETYPE_IDENTITY ControllerServiceType = "Identity"
)

// All allowed values of ControllerServiceType enum
var AllowedControllerServiceTypeEnumValues = []ControllerServiceType{
	"Unknown",
	"Broker",
	"Acct",
	"Prov",
	"Hyp",
	"Lic",
	"Pvs",
	"Monitor",
	"Sf",
	"EnvTest",
	"Orch",
	"Trust",
	"AppV",
	"Vus",
	"Config",
	"Log",
	"Analytics",
	"Admin",
	"AppLib",
	"Identity",
}

func (v *ControllerServiceType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ControllerServiceType(value)
	for _, existing := range AllowedControllerServiceTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ControllerServiceType", value)
}

// NewControllerServiceTypeFromValue returns a pointer to a valid ControllerServiceType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewControllerServiceTypeFromValue(v string) (*ControllerServiceType, error) {
	ev := ControllerServiceType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ControllerServiceType: valid values are %v", v, AllowedControllerServiceTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ControllerServiceType) IsValid() bool {
	for _, existing := range AllowedControllerServiceTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ControllerServiceType value
func (v ControllerServiceType) Ptr() *ControllerServiceType {
	return &v
}

type NullableControllerServiceType struct {
	value *ControllerServiceType
	isSet bool
}

func (v NullableControllerServiceType) Get() *ControllerServiceType {
	return v.value
}

func (v *NullableControllerServiceType) Set(val *ControllerServiceType) {
	v.value = val
	v.isSet = true
}

func (v NullableControllerServiceType) IsSet() bool {
	return v.isSet
}

func (v *NullableControllerServiceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableControllerServiceType(val *ControllerServiceType) *NullableControllerServiceType {
	return &NullableControllerServiceType{value: val, isSet: true}
}

func (v NullableControllerServiceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableControllerServiceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

