/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-onprem-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
	"fmt"
)

// ProvisioningSchemeSearchFilterGroupsType The search filter groups type.
type ProvisioningSchemeSearchFilterGroupsType string

// List of ProvisioningSchemeSearchFilterGroupsType
const (
	PROVISIONINGSCHEMESEARCHFILTERGROUPSTYPE_OR  ProvisioningSchemeSearchFilterGroupsType = "Or"
	PROVISIONINGSCHEMESEARCHFILTERGROUPSTYPE_AND ProvisioningSchemeSearchFilterGroupsType = "And"
)

// All allowed values of ProvisioningSchemeSearchFilterGroupsType enum
var AllowedProvisioningSchemeSearchFilterGroupsTypeEnumValues = []ProvisioningSchemeSearchFilterGroupsType{
	"Or",
	"And",
}

func (v *ProvisioningSchemeSearchFilterGroupsType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	*v = ProvisioningSchemeSearchFilterGroupsType(value)
	return nil
}

// NewProvisioningSchemeSearchFilterGroupsTypeFromValue returns a pointer to a valid ProvisioningSchemeSearchFilterGroupsType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewProvisioningSchemeSearchFilterGroupsTypeFromValue(v string) (*ProvisioningSchemeSearchFilterGroupsType, error) {
	ev := ProvisioningSchemeSearchFilterGroupsType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ProvisioningSchemeSearchFilterGroupsType: valid values are %v", v, AllowedProvisioningSchemeSearchFilterGroupsTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ProvisioningSchemeSearchFilterGroupsType) IsValid() bool {
	for _, existing := range AllowedProvisioningSchemeSearchFilterGroupsTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ProvisioningSchemeSearchFilterGroupsType value
func (v ProvisioningSchemeSearchFilterGroupsType) Ptr() *ProvisioningSchemeSearchFilterGroupsType {
	return &v
}

type NullableProvisioningSchemeSearchFilterGroupsType struct {
	value *ProvisioningSchemeSearchFilterGroupsType
	isSet bool
}

func (v NullableProvisioningSchemeSearchFilterGroupsType) Get() *ProvisioningSchemeSearchFilterGroupsType {
	return v.value
}

func (v *NullableProvisioningSchemeSearchFilterGroupsType) Set(val *ProvisioningSchemeSearchFilterGroupsType) {
	v.value = val
	v.isSet = true
}

func (v NullableProvisioningSchemeSearchFilterGroupsType) IsSet() bool {
	return v.isSet
}

func (v *NullableProvisioningSchemeSearchFilterGroupsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProvisioningSchemeSearchFilterGroupsType(val *ProvisioningSchemeSearchFilterGroupsType) *NullableProvisioningSchemeSearchFilterGroupsType {
	return &NullableProvisioningSchemeSearchFilterGroupsType{value: val, isSet: true}
}

func (v NullableProvisioningSchemeSearchFilterGroupsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProvisioningSchemeSearchFilterGroupsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
