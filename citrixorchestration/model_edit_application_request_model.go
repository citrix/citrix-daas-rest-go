/*
Citrix Virtual Apps and Desktops REST API TECHPREVIEW

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: techpreview
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
)

// checks if the EditApplicationRequestModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EditApplicationRequestModel{}

// EditApplicationRequestModel Request object for editing an application.
type EditApplicationRequestModel struct {
	// The folder in which the application resides. If not specified, the value will not be changed. May be specified as either the folder Id or Path. If specified as a path, and the path does not exist, it will be automatically created.
	ApplicationFolder *string `json:"ApplicationFolder,omitempty"`
	// Specifies one or more application groups which the application will be published to. If not specified, will not be changed. If specified, the entire list of application groups must be specified. To disassociate the application from all application groups, specify an empty array ([]).
	ApplicationGroups []string `json:"ApplicationGroups,omitempty"`
	// Specifies one or more delivery groups which the application will be published to. If not specified, will not be changed. If specified, the entire list of delivery groups must be specified. To disassociate the application from all delivery groups, specify an empty array ([]).
	DeliveryGroups []PriorityRefRequestModel `json:"DeliveryGroups,omitempty"`
	// Internal name of the application. If not specified, will not be changed. If specified, must be unique within the site.  For legacy reasons the maximum length of the browser name cannot exceed 38 bytes when encoded using MBCS encoding.
	BrowserName *string `json:"BrowserName,omitempty"`
	// Categories in which the application resides. If not specified, the values will not be changed. If specified, the entire list is required.
	Categories []string `json:"Categories,omitempty"`
	// The folder that the application belongs to as the user sees it. If not specified, the value will not be changed. To remove the client folder, specify the empty string (\"\").
	ClientFolder *string `json:"ClientFolder,omitempty"`
	CpuPriorityLevel *CpuPriorityLevel `json:"CpuPriorityLevel,omitempty"`
	// The description of the application. If not specified, will not be changed.
	Description *string `json:"Description,omitempty"`
	// Indicates whether or not this application can be launched. If not specified, will not be changed.
	Enabled *bool `json:"Enabled,omitempty"`
	// Indicates whether or not this application is enumerable
	DoNotEnumerate *bool `json:"DoNotEnumerate,omitempty"`
	// Home zone preference used when launching this application. If not specified, will not be changed. To disassociate the application from a home zone, set this to the empty string (\"\"). Cannot be set for applications where ApplicationType is equal to InstalledOnClient or PublishedContent. Cannot be set if HomeZoneMode is equal to \"HomeZoneMode.Ignore\". If HomeZoneMode is equal to \"HomeZoneMode.Only\" or \"HomeZoneMode.Prefer\", the value must either have been previously set, or is required. May be specified as either the Id or Name of the zone.
	HomeZone *string `json:"HomeZone,omitempty"`
	HomeZoneMode *HomeZoneMode `json:"HomeZoneMode,omitempty"`
	// Icon used for the application. If not specified, will not be changed.
	Icon *string `json:"Icon,omitempty"`
	// Specifies whether the icon is gotten from user's computer at run time. If not specified, will not be changed.
	IconFromClient *bool `json:"IconFromClient,omitempty"`
	// Specifies whether the IncludedUsers filter is enabled.  If the filter is disabled then any user who satisfies the requirements of the delivery group's access polic(ies) is implicitly granted access to the application. If not specified, will not be changed.
	IncludedUserFilterEnabled *bool `json:"IncludedUserFilterEnabled,omitempty"`
	// Specifies the included users filter of the application; that is, the users and groups who are explicitly granted access to the published application. If not specified, will not be changed. If specified, all users to be included must be specified.
	IncludedUsers []string `json:"IncludedUsers,omitempty"`
	InstalledAppProperties *EditApplicationRequestModelInstalledAppProperties `json:"InstalledAppProperties,omitempty"`
	AppVAppProperties *EditApplicationRequestModelAppVAppProperties `json:"AppVAppProperties,omitempty"`
	// Location of published content. If not specified, will not be changed.
	ContentLocation *string `json:"ContentLocation,omitempty"`
	// Specifies the maximum allowed concurrently running instances of the application that an individual user can have. If not specified, will not be changed.
	MaxPerUserInstances *int32 `json:"MaxPerUserInstances,omitempty"`
	// Specifies the maximum allowed total ofconcurrently running instances of the application within the site. If not specified, will not be changed.
	MaxTotalInstances *int32 `json:"MaxTotalInstances,omitempty"`
	// Name of the application.  Only seen by administrators. If not specified, will not be changed. If specified, must be unique within the site.
	Name *string `json:"Name,omitempty"`
	// The name seen by end users who have access to the application. If not specified, will not be changed.
	PublishedName *string `json:"PublishedName,omitempty"`
	// Specifies whether or not a shortcut to the application should be placed on the user device. If not specified, will not be changed.
	ShortcutAddedToDesktop *bool `json:"ShortcutAddedToDesktop,omitempty"`
	// Specifies whether or not a shortcut to the application should be placed in the user's start menu on their user device. If not specified, will not be changed.
	ShortcutAddedToStartMenu *bool `json:"ShortcutAddedToStartMenu,omitempty"`
	// Specifies the name of the start menu folder that holds the application shortcut (if any). If not specified, will not be changed. To clear a previously-set value, use the empty string (\"\").
	StartMenuFolder *string `json:"StartMenuFolder,omitempty"`
	// Indicates whether or not this application is visible to users. If not specified, will not be changed.
	Visible *bool `json:"Visible,omitempty"`
	// Specifies whether or not the session waits for the printers to be created before allowing the user to interact with the session. If not specified, will not be changed.
	WaitForPrinterCreation *bool `json:"WaitForPrinterCreation,omitempty"`
}

// NewEditApplicationRequestModel instantiates a new EditApplicationRequestModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEditApplicationRequestModel() *EditApplicationRequestModel {
	this := EditApplicationRequestModel{}
	return &this
}

// NewEditApplicationRequestModelWithDefaults instantiates a new EditApplicationRequestModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEditApplicationRequestModelWithDefaults() *EditApplicationRequestModel {
	this := EditApplicationRequestModel{}
	return &this
}

// GetApplicationFolder returns the ApplicationFolder field value if set, zero value otherwise.
func (o *EditApplicationRequestModel) GetApplicationFolder() string {
	if o == nil || IsNil(o.ApplicationFolder) {
		var ret string
		return ret
	}
	return *o.ApplicationFolder
}

// GetApplicationFolderOk returns a tuple with the ApplicationFolder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditApplicationRequestModel) GetApplicationFolderOk() (*string, bool) {
	if o == nil || IsNil(o.ApplicationFolder) {
		return nil, false
	}
	return o.ApplicationFolder, true
}

// HasApplicationFolder returns a boolean if a field has been set.
func (o *EditApplicationRequestModel) HasApplicationFolder() bool {
	if o != nil && !IsNil(o.ApplicationFolder) {
		return true
	}

	return false
}

// SetApplicationFolder gets a reference to the given string and assigns it to the ApplicationFolder field.
func (o *EditApplicationRequestModel) SetApplicationFolder(v string) {
	o.ApplicationFolder = &v
}

// GetApplicationGroups returns the ApplicationGroups field value if set, zero value otherwise.
func (o *EditApplicationRequestModel) GetApplicationGroups() []string {
	if o == nil || IsNil(o.ApplicationGroups) {
		var ret []string
		return ret
	}
	return o.ApplicationGroups
}

// GetApplicationGroupsOk returns a tuple with the ApplicationGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditApplicationRequestModel) GetApplicationGroupsOk() ([]string, bool) {
	if o == nil || IsNil(o.ApplicationGroups) {
		return nil, false
	}
	return o.ApplicationGroups, true
}

// HasApplicationGroups returns a boolean if a field has been set.
func (o *EditApplicationRequestModel) HasApplicationGroups() bool {
	if o != nil && !IsNil(o.ApplicationGroups) {
		return true
	}

	return false
}

// SetApplicationGroups gets a reference to the given []string and assigns it to the ApplicationGroups field.
func (o *EditApplicationRequestModel) SetApplicationGroups(v []string) {
	o.ApplicationGroups = v
}

// GetDeliveryGroups returns the DeliveryGroups field value if set, zero value otherwise.
func (o *EditApplicationRequestModel) GetDeliveryGroups() []PriorityRefRequestModel {
	if o == nil || IsNil(o.DeliveryGroups) {
		var ret []PriorityRefRequestModel
		return ret
	}
	return o.DeliveryGroups
}

// GetDeliveryGroupsOk returns a tuple with the DeliveryGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditApplicationRequestModel) GetDeliveryGroupsOk() ([]PriorityRefRequestModel, bool) {
	if o == nil || IsNil(o.DeliveryGroups) {
		return nil, false
	}
	return o.DeliveryGroups, true
}

// HasDeliveryGroups returns a boolean if a field has been set.
func (o *EditApplicationRequestModel) HasDeliveryGroups() bool {
	if o != nil && !IsNil(o.DeliveryGroups) {
		return true
	}

	return false
}

// SetDeliveryGroups gets a reference to the given []PriorityRefRequestModel and assigns it to the DeliveryGroups field.
func (o *EditApplicationRequestModel) SetDeliveryGroups(v []PriorityRefRequestModel) {
	o.DeliveryGroups = v
}

// GetBrowserName returns the BrowserName field value if set, zero value otherwise.
func (o *EditApplicationRequestModel) GetBrowserName() string {
	if o == nil || IsNil(o.BrowserName) {
		var ret string
		return ret
	}
	return *o.BrowserName
}

// GetBrowserNameOk returns a tuple with the BrowserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditApplicationRequestModel) GetBrowserNameOk() (*string, bool) {
	if o == nil || IsNil(o.BrowserName) {
		return nil, false
	}
	return o.BrowserName, true
}

// HasBrowserName returns a boolean if a field has been set.
func (o *EditApplicationRequestModel) HasBrowserName() bool {
	if o != nil && !IsNil(o.BrowserName) {
		return true
	}

	return false
}

// SetBrowserName gets a reference to the given string and assigns it to the BrowserName field.
func (o *EditApplicationRequestModel) SetBrowserName(v string) {
	o.BrowserName = &v
}

// GetCategories returns the Categories field value if set, zero value otherwise.
func (o *EditApplicationRequestModel) GetCategories() []string {
	if o == nil || IsNil(o.Categories) {
		var ret []string
		return ret
	}
	return o.Categories
}

// GetCategoriesOk returns a tuple with the Categories field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditApplicationRequestModel) GetCategoriesOk() ([]string, bool) {
	if o == nil || IsNil(o.Categories) {
		return nil, false
	}
	return o.Categories, true
}

// HasCategories returns a boolean if a field has been set.
func (o *EditApplicationRequestModel) HasCategories() bool {
	if o != nil && !IsNil(o.Categories) {
		return true
	}

	return false
}

// SetCategories gets a reference to the given []string and assigns it to the Categories field.
func (o *EditApplicationRequestModel) SetCategories(v []string) {
	o.Categories = v
}

// GetClientFolder returns the ClientFolder field value if set, zero value otherwise.
func (o *EditApplicationRequestModel) GetClientFolder() string {
	if o == nil || IsNil(o.ClientFolder) {
		var ret string
		return ret
	}
	return *o.ClientFolder
}

// GetClientFolderOk returns a tuple with the ClientFolder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditApplicationRequestModel) GetClientFolderOk() (*string, bool) {
	if o == nil || IsNil(o.ClientFolder) {
		return nil, false
	}
	return o.ClientFolder, true
}

// HasClientFolder returns a boolean if a field has been set.
func (o *EditApplicationRequestModel) HasClientFolder() bool {
	if o != nil && !IsNil(o.ClientFolder) {
		return true
	}

	return false
}

// SetClientFolder gets a reference to the given string and assigns it to the ClientFolder field.
func (o *EditApplicationRequestModel) SetClientFolder(v string) {
	o.ClientFolder = &v
}

// GetCpuPriorityLevel returns the CpuPriorityLevel field value if set, zero value otherwise.
func (o *EditApplicationRequestModel) GetCpuPriorityLevel() CpuPriorityLevel {
	if o == nil || IsNil(o.CpuPriorityLevel) {
		var ret CpuPriorityLevel
		return ret
	}
	return *o.CpuPriorityLevel
}

// GetCpuPriorityLevelOk returns a tuple with the CpuPriorityLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditApplicationRequestModel) GetCpuPriorityLevelOk() (*CpuPriorityLevel, bool) {
	if o == nil || IsNil(o.CpuPriorityLevel) {
		return nil, false
	}
	return o.CpuPriorityLevel, true
}

// HasCpuPriorityLevel returns a boolean if a field has been set.
func (o *EditApplicationRequestModel) HasCpuPriorityLevel() bool {
	if o != nil && !IsNil(o.CpuPriorityLevel) {
		return true
	}

	return false
}

// SetCpuPriorityLevel gets a reference to the given CpuPriorityLevel and assigns it to the CpuPriorityLevel field.
func (o *EditApplicationRequestModel) SetCpuPriorityLevel(v CpuPriorityLevel) {
	o.CpuPriorityLevel = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *EditApplicationRequestModel) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditApplicationRequestModel) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *EditApplicationRequestModel) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *EditApplicationRequestModel) SetDescription(v string) {
	o.Description = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *EditApplicationRequestModel) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditApplicationRequestModel) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *EditApplicationRequestModel) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *EditApplicationRequestModel) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetDoNotEnumerate returns the DoNotEnumerate field value if set, zero value otherwise.
func (o *EditApplicationRequestModel) GetDoNotEnumerate() bool {
	if o == nil || IsNil(o.DoNotEnumerate) {
		var ret bool
		return ret
	}
	return *o.DoNotEnumerate
}

// GetDoNotEnumerateOk returns a tuple with the DoNotEnumerate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditApplicationRequestModel) GetDoNotEnumerateOk() (*bool, bool) {
	if o == nil || IsNil(o.DoNotEnumerate) {
		return nil, false
	}
	return o.DoNotEnumerate, true
}

// HasDoNotEnumerate returns a boolean if a field has been set.
func (o *EditApplicationRequestModel) HasDoNotEnumerate() bool {
	if o != nil && !IsNil(o.DoNotEnumerate) {
		return true
	}

	return false
}

// SetDoNotEnumerate gets a reference to the given bool and assigns it to the DoNotEnumerate field.
func (o *EditApplicationRequestModel) SetDoNotEnumerate(v bool) {
	o.DoNotEnumerate = &v
}

// GetHomeZone returns the HomeZone field value if set, zero value otherwise.
func (o *EditApplicationRequestModel) GetHomeZone() string {
	if o == nil || IsNil(o.HomeZone) {
		var ret string
		return ret
	}
	return *o.HomeZone
}

// GetHomeZoneOk returns a tuple with the HomeZone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditApplicationRequestModel) GetHomeZoneOk() (*string, bool) {
	if o == nil || IsNil(o.HomeZone) {
		return nil, false
	}
	return o.HomeZone, true
}

// HasHomeZone returns a boolean if a field has been set.
func (o *EditApplicationRequestModel) HasHomeZone() bool {
	if o != nil && !IsNil(o.HomeZone) {
		return true
	}

	return false
}

// SetHomeZone gets a reference to the given string and assigns it to the HomeZone field.
func (o *EditApplicationRequestModel) SetHomeZone(v string) {
	o.HomeZone = &v
}

// GetHomeZoneMode returns the HomeZoneMode field value if set, zero value otherwise.
func (o *EditApplicationRequestModel) GetHomeZoneMode() HomeZoneMode {
	if o == nil || IsNil(o.HomeZoneMode) {
		var ret HomeZoneMode
		return ret
	}
	return *o.HomeZoneMode
}

// GetHomeZoneModeOk returns a tuple with the HomeZoneMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditApplicationRequestModel) GetHomeZoneModeOk() (*HomeZoneMode, bool) {
	if o == nil || IsNil(o.HomeZoneMode) {
		return nil, false
	}
	return o.HomeZoneMode, true
}

// HasHomeZoneMode returns a boolean if a field has been set.
func (o *EditApplicationRequestModel) HasHomeZoneMode() bool {
	if o != nil && !IsNil(o.HomeZoneMode) {
		return true
	}

	return false
}

// SetHomeZoneMode gets a reference to the given HomeZoneMode and assigns it to the HomeZoneMode field.
func (o *EditApplicationRequestModel) SetHomeZoneMode(v HomeZoneMode) {
	o.HomeZoneMode = &v
}

// GetIcon returns the Icon field value if set, zero value otherwise.
func (o *EditApplicationRequestModel) GetIcon() string {
	if o == nil || IsNil(o.Icon) {
		var ret string
		return ret
	}
	return *o.Icon
}

// GetIconOk returns a tuple with the Icon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditApplicationRequestModel) GetIconOk() (*string, bool) {
	if o == nil || IsNil(o.Icon) {
		return nil, false
	}
	return o.Icon, true
}

// HasIcon returns a boolean if a field has been set.
func (o *EditApplicationRequestModel) HasIcon() bool {
	if o != nil && !IsNil(o.Icon) {
		return true
	}

	return false
}

// SetIcon gets a reference to the given string and assigns it to the Icon field.
func (o *EditApplicationRequestModel) SetIcon(v string) {
	o.Icon = &v
}

// GetIconFromClient returns the IconFromClient field value if set, zero value otherwise.
func (o *EditApplicationRequestModel) GetIconFromClient() bool {
	if o == nil || IsNil(o.IconFromClient) {
		var ret bool
		return ret
	}
	return *o.IconFromClient
}

// GetIconFromClientOk returns a tuple with the IconFromClient field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditApplicationRequestModel) GetIconFromClientOk() (*bool, bool) {
	if o == nil || IsNil(o.IconFromClient) {
		return nil, false
	}
	return o.IconFromClient, true
}

// HasIconFromClient returns a boolean if a field has been set.
func (o *EditApplicationRequestModel) HasIconFromClient() bool {
	if o != nil && !IsNil(o.IconFromClient) {
		return true
	}

	return false
}

// SetIconFromClient gets a reference to the given bool and assigns it to the IconFromClient field.
func (o *EditApplicationRequestModel) SetIconFromClient(v bool) {
	o.IconFromClient = &v
}

// GetIncludedUserFilterEnabled returns the IncludedUserFilterEnabled field value if set, zero value otherwise.
func (o *EditApplicationRequestModel) GetIncludedUserFilterEnabled() bool {
	if o == nil || IsNil(o.IncludedUserFilterEnabled) {
		var ret bool
		return ret
	}
	return *o.IncludedUserFilterEnabled
}

// GetIncludedUserFilterEnabledOk returns a tuple with the IncludedUserFilterEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditApplicationRequestModel) GetIncludedUserFilterEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IncludedUserFilterEnabled) {
		return nil, false
	}
	return o.IncludedUserFilterEnabled, true
}

// HasIncludedUserFilterEnabled returns a boolean if a field has been set.
func (o *EditApplicationRequestModel) HasIncludedUserFilterEnabled() bool {
	if o != nil && !IsNil(o.IncludedUserFilterEnabled) {
		return true
	}

	return false
}

// SetIncludedUserFilterEnabled gets a reference to the given bool and assigns it to the IncludedUserFilterEnabled field.
func (o *EditApplicationRequestModel) SetIncludedUserFilterEnabled(v bool) {
	o.IncludedUserFilterEnabled = &v
}

// GetIncludedUsers returns the IncludedUsers field value if set, zero value otherwise.
func (o *EditApplicationRequestModel) GetIncludedUsers() []string {
	if o == nil || IsNil(o.IncludedUsers) {
		var ret []string
		return ret
	}
	return o.IncludedUsers
}

// GetIncludedUsersOk returns a tuple with the IncludedUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditApplicationRequestModel) GetIncludedUsersOk() ([]string, bool) {
	if o == nil || IsNil(o.IncludedUsers) {
		return nil, false
	}
	return o.IncludedUsers, true
}

// HasIncludedUsers returns a boolean if a field has been set.
func (o *EditApplicationRequestModel) HasIncludedUsers() bool {
	if o != nil && !IsNil(o.IncludedUsers) {
		return true
	}

	return false
}

// SetIncludedUsers gets a reference to the given []string and assigns it to the IncludedUsers field.
func (o *EditApplicationRequestModel) SetIncludedUsers(v []string) {
	o.IncludedUsers = v
}

// GetInstalledAppProperties returns the InstalledAppProperties field value if set, zero value otherwise.
func (o *EditApplicationRequestModel) GetInstalledAppProperties() EditApplicationRequestModelInstalledAppProperties {
	if o == nil || IsNil(o.InstalledAppProperties) {
		var ret EditApplicationRequestModelInstalledAppProperties
		return ret
	}
	return *o.InstalledAppProperties
}

// GetInstalledAppPropertiesOk returns a tuple with the InstalledAppProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditApplicationRequestModel) GetInstalledAppPropertiesOk() (*EditApplicationRequestModelInstalledAppProperties, bool) {
	if o == nil || IsNil(o.InstalledAppProperties) {
		return nil, false
	}
	return o.InstalledAppProperties, true
}

// HasInstalledAppProperties returns a boolean if a field has been set.
func (o *EditApplicationRequestModel) HasInstalledAppProperties() bool {
	if o != nil && !IsNil(o.InstalledAppProperties) {
		return true
	}

	return false
}

// SetInstalledAppProperties gets a reference to the given EditApplicationRequestModelInstalledAppProperties and assigns it to the InstalledAppProperties field.
func (o *EditApplicationRequestModel) SetInstalledAppProperties(v EditApplicationRequestModelInstalledAppProperties) {
	o.InstalledAppProperties = &v
}

// GetAppVAppProperties returns the AppVAppProperties field value if set, zero value otherwise.
func (o *EditApplicationRequestModel) GetAppVAppProperties() EditApplicationRequestModelAppVAppProperties {
	if o == nil || IsNil(o.AppVAppProperties) {
		var ret EditApplicationRequestModelAppVAppProperties
		return ret
	}
	return *o.AppVAppProperties
}

// GetAppVAppPropertiesOk returns a tuple with the AppVAppProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditApplicationRequestModel) GetAppVAppPropertiesOk() (*EditApplicationRequestModelAppVAppProperties, bool) {
	if o == nil || IsNil(o.AppVAppProperties) {
		return nil, false
	}
	return o.AppVAppProperties, true
}

// HasAppVAppProperties returns a boolean if a field has been set.
func (o *EditApplicationRequestModel) HasAppVAppProperties() bool {
	if o != nil && !IsNil(o.AppVAppProperties) {
		return true
	}

	return false
}

// SetAppVAppProperties gets a reference to the given EditApplicationRequestModelAppVAppProperties and assigns it to the AppVAppProperties field.
func (o *EditApplicationRequestModel) SetAppVAppProperties(v EditApplicationRequestModelAppVAppProperties) {
	o.AppVAppProperties = &v
}

// GetContentLocation returns the ContentLocation field value if set, zero value otherwise.
func (o *EditApplicationRequestModel) GetContentLocation() string {
	if o == nil || IsNil(o.ContentLocation) {
		var ret string
		return ret
	}
	return *o.ContentLocation
}

// GetContentLocationOk returns a tuple with the ContentLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditApplicationRequestModel) GetContentLocationOk() (*string, bool) {
	if o == nil || IsNil(o.ContentLocation) {
		return nil, false
	}
	return o.ContentLocation, true
}

// HasContentLocation returns a boolean if a field has been set.
func (o *EditApplicationRequestModel) HasContentLocation() bool {
	if o != nil && !IsNil(o.ContentLocation) {
		return true
	}

	return false
}

// SetContentLocation gets a reference to the given string and assigns it to the ContentLocation field.
func (o *EditApplicationRequestModel) SetContentLocation(v string) {
	o.ContentLocation = &v
}

// GetMaxPerUserInstances returns the MaxPerUserInstances field value if set, zero value otherwise.
func (o *EditApplicationRequestModel) GetMaxPerUserInstances() int32 {
	if o == nil || IsNil(o.MaxPerUserInstances) {
		var ret int32
		return ret
	}
	return *o.MaxPerUserInstances
}

// GetMaxPerUserInstancesOk returns a tuple with the MaxPerUserInstances field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditApplicationRequestModel) GetMaxPerUserInstancesOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxPerUserInstances) {
		return nil, false
	}
	return o.MaxPerUserInstances, true
}

// HasMaxPerUserInstances returns a boolean if a field has been set.
func (o *EditApplicationRequestModel) HasMaxPerUserInstances() bool {
	if o != nil && !IsNil(o.MaxPerUserInstances) {
		return true
	}

	return false
}

// SetMaxPerUserInstances gets a reference to the given int32 and assigns it to the MaxPerUserInstances field.
func (o *EditApplicationRequestModel) SetMaxPerUserInstances(v int32) {
	o.MaxPerUserInstances = &v
}

// GetMaxTotalInstances returns the MaxTotalInstances field value if set, zero value otherwise.
func (o *EditApplicationRequestModel) GetMaxTotalInstances() int32 {
	if o == nil || IsNil(o.MaxTotalInstances) {
		var ret int32
		return ret
	}
	return *o.MaxTotalInstances
}

// GetMaxTotalInstancesOk returns a tuple with the MaxTotalInstances field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditApplicationRequestModel) GetMaxTotalInstancesOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxTotalInstances) {
		return nil, false
	}
	return o.MaxTotalInstances, true
}

// HasMaxTotalInstances returns a boolean if a field has been set.
func (o *EditApplicationRequestModel) HasMaxTotalInstances() bool {
	if o != nil && !IsNil(o.MaxTotalInstances) {
		return true
	}

	return false
}

// SetMaxTotalInstances gets a reference to the given int32 and assigns it to the MaxTotalInstances field.
func (o *EditApplicationRequestModel) SetMaxTotalInstances(v int32) {
	o.MaxTotalInstances = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *EditApplicationRequestModel) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditApplicationRequestModel) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *EditApplicationRequestModel) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *EditApplicationRequestModel) SetName(v string) {
	o.Name = &v
}

// GetPublishedName returns the PublishedName field value if set, zero value otherwise.
func (o *EditApplicationRequestModel) GetPublishedName() string {
	if o == nil || IsNil(o.PublishedName) {
		var ret string
		return ret
	}
	return *o.PublishedName
}

// GetPublishedNameOk returns a tuple with the PublishedName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditApplicationRequestModel) GetPublishedNameOk() (*string, bool) {
	if o == nil || IsNil(o.PublishedName) {
		return nil, false
	}
	return o.PublishedName, true
}

// HasPublishedName returns a boolean if a field has been set.
func (o *EditApplicationRequestModel) HasPublishedName() bool {
	if o != nil && !IsNil(o.PublishedName) {
		return true
	}

	return false
}

// SetPublishedName gets a reference to the given string and assigns it to the PublishedName field.
func (o *EditApplicationRequestModel) SetPublishedName(v string) {
	o.PublishedName = &v
}

// GetShortcutAddedToDesktop returns the ShortcutAddedToDesktop field value if set, zero value otherwise.
func (o *EditApplicationRequestModel) GetShortcutAddedToDesktop() bool {
	if o == nil || IsNil(o.ShortcutAddedToDesktop) {
		var ret bool
		return ret
	}
	return *o.ShortcutAddedToDesktop
}

// GetShortcutAddedToDesktopOk returns a tuple with the ShortcutAddedToDesktop field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditApplicationRequestModel) GetShortcutAddedToDesktopOk() (*bool, bool) {
	if o == nil || IsNil(o.ShortcutAddedToDesktop) {
		return nil, false
	}
	return o.ShortcutAddedToDesktop, true
}

// HasShortcutAddedToDesktop returns a boolean if a field has been set.
func (o *EditApplicationRequestModel) HasShortcutAddedToDesktop() bool {
	if o != nil && !IsNil(o.ShortcutAddedToDesktop) {
		return true
	}

	return false
}

// SetShortcutAddedToDesktop gets a reference to the given bool and assigns it to the ShortcutAddedToDesktop field.
func (o *EditApplicationRequestModel) SetShortcutAddedToDesktop(v bool) {
	o.ShortcutAddedToDesktop = &v
}

// GetShortcutAddedToStartMenu returns the ShortcutAddedToStartMenu field value if set, zero value otherwise.
func (o *EditApplicationRequestModel) GetShortcutAddedToStartMenu() bool {
	if o == nil || IsNil(o.ShortcutAddedToStartMenu) {
		var ret bool
		return ret
	}
	return *o.ShortcutAddedToStartMenu
}

// GetShortcutAddedToStartMenuOk returns a tuple with the ShortcutAddedToStartMenu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditApplicationRequestModel) GetShortcutAddedToStartMenuOk() (*bool, bool) {
	if o == nil || IsNil(o.ShortcutAddedToStartMenu) {
		return nil, false
	}
	return o.ShortcutAddedToStartMenu, true
}

// HasShortcutAddedToStartMenu returns a boolean if a field has been set.
func (o *EditApplicationRequestModel) HasShortcutAddedToStartMenu() bool {
	if o != nil && !IsNil(o.ShortcutAddedToStartMenu) {
		return true
	}

	return false
}

// SetShortcutAddedToStartMenu gets a reference to the given bool and assigns it to the ShortcutAddedToStartMenu field.
func (o *EditApplicationRequestModel) SetShortcutAddedToStartMenu(v bool) {
	o.ShortcutAddedToStartMenu = &v
}

// GetStartMenuFolder returns the StartMenuFolder field value if set, zero value otherwise.
func (o *EditApplicationRequestModel) GetStartMenuFolder() string {
	if o == nil || IsNil(o.StartMenuFolder) {
		var ret string
		return ret
	}
	return *o.StartMenuFolder
}

// GetStartMenuFolderOk returns a tuple with the StartMenuFolder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditApplicationRequestModel) GetStartMenuFolderOk() (*string, bool) {
	if o == nil || IsNil(o.StartMenuFolder) {
		return nil, false
	}
	return o.StartMenuFolder, true
}

// HasStartMenuFolder returns a boolean if a field has been set.
func (o *EditApplicationRequestModel) HasStartMenuFolder() bool {
	if o != nil && !IsNil(o.StartMenuFolder) {
		return true
	}

	return false
}

// SetStartMenuFolder gets a reference to the given string and assigns it to the StartMenuFolder field.
func (o *EditApplicationRequestModel) SetStartMenuFolder(v string) {
	o.StartMenuFolder = &v
}

// GetVisible returns the Visible field value if set, zero value otherwise.
func (o *EditApplicationRequestModel) GetVisible() bool {
	if o == nil || IsNil(o.Visible) {
		var ret bool
		return ret
	}
	return *o.Visible
}

// GetVisibleOk returns a tuple with the Visible field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditApplicationRequestModel) GetVisibleOk() (*bool, bool) {
	if o == nil || IsNil(o.Visible) {
		return nil, false
	}
	return o.Visible, true
}

// HasVisible returns a boolean if a field has been set.
func (o *EditApplicationRequestModel) HasVisible() bool {
	if o != nil && !IsNil(o.Visible) {
		return true
	}

	return false
}

// SetVisible gets a reference to the given bool and assigns it to the Visible field.
func (o *EditApplicationRequestModel) SetVisible(v bool) {
	o.Visible = &v
}

// GetWaitForPrinterCreation returns the WaitForPrinterCreation field value if set, zero value otherwise.
func (o *EditApplicationRequestModel) GetWaitForPrinterCreation() bool {
	if o == nil || IsNil(o.WaitForPrinterCreation) {
		var ret bool
		return ret
	}
	return *o.WaitForPrinterCreation
}

// GetWaitForPrinterCreationOk returns a tuple with the WaitForPrinterCreation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditApplicationRequestModel) GetWaitForPrinterCreationOk() (*bool, bool) {
	if o == nil || IsNil(o.WaitForPrinterCreation) {
		return nil, false
	}
	return o.WaitForPrinterCreation, true
}

// HasWaitForPrinterCreation returns a boolean if a field has been set.
func (o *EditApplicationRequestModel) HasWaitForPrinterCreation() bool {
	if o != nil && !IsNil(o.WaitForPrinterCreation) {
		return true
	}

	return false
}

// SetWaitForPrinterCreation gets a reference to the given bool and assigns it to the WaitForPrinterCreation field.
func (o *EditApplicationRequestModel) SetWaitForPrinterCreation(v bool) {
	o.WaitForPrinterCreation = &v
}

func (o EditApplicationRequestModel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EditApplicationRequestModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ApplicationFolder) {
		toSerialize["ApplicationFolder"] = o.ApplicationFolder
	}
	if !IsNil(o.ApplicationGroups) {
		toSerialize["ApplicationGroups"] = o.ApplicationGroups
	}
	if !IsNil(o.DeliveryGroups) {
		toSerialize["DeliveryGroups"] = o.DeliveryGroups
	}
	if !IsNil(o.BrowserName) {
		toSerialize["BrowserName"] = o.BrowserName
	}
	if !IsNil(o.Categories) {
		toSerialize["Categories"] = o.Categories
	}
	if !IsNil(o.ClientFolder) {
		toSerialize["ClientFolder"] = o.ClientFolder
	}
	if !IsNil(o.CpuPriorityLevel) {
		toSerialize["CpuPriorityLevel"] = o.CpuPriorityLevel
	}
	if !IsNil(o.Description) {
		toSerialize["Description"] = o.Description
	}
	if !IsNil(o.Enabled) {
		toSerialize["Enabled"] = o.Enabled
	}
	if !IsNil(o.DoNotEnumerate) {
		toSerialize["DoNotEnumerate"] = o.DoNotEnumerate
	}
	if !IsNil(o.HomeZone) {
		toSerialize["HomeZone"] = o.HomeZone
	}
	if !IsNil(o.HomeZoneMode) {
		toSerialize["HomeZoneMode"] = o.HomeZoneMode
	}
	if !IsNil(o.Icon) {
		toSerialize["Icon"] = o.Icon
	}
	if !IsNil(o.IconFromClient) {
		toSerialize["IconFromClient"] = o.IconFromClient
	}
	if !IsNil(o.IncludedUserFilterEnabled) {
		toSerialize["IncludedUserFilterEnabled"] = o.IncludedUserFilterEnabled
	}
	if !IsNil(o.IncludedUsers) {
		toSerialize["IncludedUsers"] = o.IncludedUsers
	}
	if !IsNil(o.InstalledAppProperties) {
		toSerialize["InstalledAppProperties"] = o.InstalledAppProperties
	}
	if !IsNil(o.AppVAppProperties) {
		toSerialize["AppVAppProperties"] = o.AppVAppProperties
	}
	if !IsNil(o.ContentLocation) {
		toSerialize["ContentLocation"] = o.ContentLocation
	}
	if !IsNil(o.MaxPerUserInstances) {
		toSerialize["MaxPerUserInstances"] = o.MaxPerUserInstances
	}
	if !IsNil(o.MaxTotalInstances) {
		toSerialize["MaxTotalInstances"] = o.MaxTotalInstances
	}
	if !IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if !IsNil(o.PublishedName) {
		toSerialize["PublishedName"] = o.PublishedName
	}
	if !IsNil(o.ShortcutAddedToDesktop) {
		toSerialize["ShortcutAddedToDesktop"] = o.ShortcutAddedToDesktop
	}
	if !IsNil(o.ShortcutAddedToStartMenu) {
		toSerialize["ShortcutAddedToStartMenu"] = o.ShortcutAddedToStartMenu
	}
	if !IsNil(o.StartMenuFolder) {
		toSerialize["StartMenuFolder"] = o.StartMenuFolder
	}
	if !IsNil(o.Visible) {
		toSerialize["Visible"] = o.Visible
	}
	if !IsNil(o.WaitForPrinterCreation) {
		toSerialize["WaitForPrinterCreation"] = o.WaitForPrinterCreation
	}
	return toSerialize, nil
}

type NullableEditApplicationRequestModel struct {
	value *EditApplicationRequestModel
	isSet bool
}

func (v NullableEditApplicationRequestModel) Get() *EditApplicationRequestModel {
	return v.value
}

func (v *NullableEditApplicationRequestModel) Set(val *EditApplicationRequestModel) {
	v.value = val
	v.isSet = true
}

func (v NullableEditApplicationRequestModel) IsSet() bool {
	return v.isSet
}

func (v *NullableEditApplicationRequestModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEditApplicationRequestModel(val *EditApplicationRequestModel) *NullableEditApplicationRequestModel {
	return &NullableEditApplicationRequestModel{value: val, isSet: true}
}

func (v NullableEditApplicationRequestModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEditApplicationRequestModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


