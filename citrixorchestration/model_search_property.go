/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-onprem-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
	"fmt"
)

// SearchProperty Names of policy set properties that can be specified in a search.
type SearchProperty string

// List of SearchProperty
const (
	SEARCHPROPERTY_DESCRIPTION     SearchProperty = "Description"
	SEARCHPROPERTY_IS_ASSIGNED     SearchProperty = "IsAssigned"
	SEARCHPROPERTY_NAME            SearchProperty = "Name"
	SEARCHPROPERTY_POLICY_COUNT    SearchProperty = "PolicyCount"
	SEARCHPROPERTY_POLICY_SET_TYPE SearchProperty = "PolicySetType"
)

// All allowed values of SearchProperty enum
var AllowedSearchPropertyEnumValues = []SearchProperty{
	"Description",
	"IsAssigned",
	"Name",
	"PolicyCount",
	"PolicySetType",
}

func (v *SearchProperty) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	*v = SearchProperty(value)
	return nil
}

// NewSearchPropertyFromValue returns a pointer to a valid SearchProperty
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSearchPropertyFromValue(v string) (*SearchProperty, error) {
	ev := SearchProperty(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SearchProperty: valid values are %v", v, AllowedSearchPropertyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SearchProperty) IsValid() bool {
	for _, existing := range AllowedSearchPropertyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SearchProperty value
func (v SearchProperty) Ptr() *SearchProperty {
	return &v
}

type NullableSearchProperty struct {
	value *SearchProperty
	isSet bool
}

func (v NullableSearchProperty) Get() *SearchProperty {
	return v.value
}

func (v *NullableSearchProperty) Set(val *SearchProperty) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchProperty) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchProperty) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchProperty(val *SearchProperty) *NullableSearchProperty {
	return &NullableSearchProperty{value: val, isSet: true}
}

func (v NullableSearchProperty) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchProperty) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
