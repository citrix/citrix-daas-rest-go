/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-onprem-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
	"fmt"
)

// TestScope Defines how a test must be run against a site.
type TestScope string

// List of TestScope
const (
	TESTSCOPE_SITE       TestScope = "Site"
	TESTSCOPE_CONTROLLER TestScope = "Controller"
	TESTSCOPE_UNKNOWN    TestScope = "Unknown"
)

// All allowed values of TestScope enum
var AllowedTestScopeEnumValues = []TestScope{
	"Site",
	"Controller",
	"Unknown",
}

func (v *TestScope) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	*v = TestScope(value)
	return nil
}

// NewTestScopeFromValue returns a pointer to a valid TestScope
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTestScopeFromValue(v string) (*TestScope, error) {
	ev := TestScope(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TestScope: valid values are %v", v, AllowedTestScopeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TestScope) IsValid() bool {
	for _, existing := range AllowedTestScopeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TestScope value
func (v TestScope) Ptr() *TestScope {
	return &v
}

type NullableTestScope struct {
	value *TestScope
	isSet bool
}

func (v NullableTestScope) Get() *TestScope {
	return v.value
}

func (v *NullableTestScope) Set(val *TestScope) {
	v.value = val
	v.isSet = true
}

func (v NullableTestScope) IsSet() bool {
	return v.isSet
}

func (v *NullableTestScope) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestScope(val *TestScope) *NullableTestScope {
	return &NullableTestScope{value: val, isSet: true}
}

func (v NullableTestScope) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestScope) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
