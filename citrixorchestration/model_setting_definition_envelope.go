/*
Citrix Virtual Apps and Desktops REST API TECHPREVIEW

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: techpreview
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
)

// checks if the SettingDefinitionEnvelope type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SettingDefinitionEnvelope{}

// SettingDefinitionEnvelope Top level object for setting definitions. Should support paging. Should support HATEOAS links.
type SettingDefinitionEnvelope struct {
	// Items of collection.
	Items []SettingDefinition `json:"items,omitempty"`
	// Continuation token if paging is requested. This is a compressed JSON string of the SettingSearchFilters object.
	ContinuationToken *string `json:"continuationToken,omitempty"`
}

// NewSettingDefinitionEnvelope instantiates a new SettingDefinitionEnvelope object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSettingDefinitionEnvelope() *SettingDefinitionEnvelope {
	this := SettingDefinitionEnvelope{}
	return &this
}

// NewSettingDefinitionEnvelopeWithDefaults instantiates a new SettingDefinitionEnvelope object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSettingDefinitionEnvelopeWithDefaults() *SettingDefinitionEnvelope {
	this := SettingDefinitionEnvelope{}
	return &this
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *SettingDefinitionEnvelope) GetItems() []SettingDefinition {
	if o == nil || IsNil(o.Items) {
		var ret []SettingDefinition
		return ret
	}
	return o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingDefinitionEnvelope) GetItemsOk() ([]SettingDefinition, bool) {
	if o == nil || IsNil(o.Items) {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *SettingDefinitionEnvelope) HasItems() bool {
	if o != nil && !IsNil(o.Items) {
		return true
	}

	return false
}

// SetItems gets a reference to the given []SettingDefinition and assigns it to the Items field.
func (o *SettingDefinitionEnvelope) SetItems(v []SettingDefinition) {
	o.Items = v
}

// GetContinuationToken returns the ContinuationToken field value if set, zero value otherwise.
func (o *SettingDefinitionEnvelope) GetContinuationToken() string {
	if o == nil || IsNil(o.ContinuationToken) {
		var ret string
		return ret
	}
	return *o.ContinuationToken
}

// GetContinuationTokenOk returns a tuple with the ContinuationToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingDefinitionEnvelope) GetContinuationTokenOk() (*string, bool) {
	if o == nil || IsNil(o.ContinuationToken) {
		return nil, false
	}
	return o.ContinuationToken, true
}

// HasContinuationToken returns a boolean if a field has been set.
func (o *SettingDefinitionEnvelope) HasContinuationToken() bool {
	if o != nil && !IsNil(o.ContinuationToken) {
		return true
	}

	return false
}

// SetContinuationToken gets a reference to the given string and assigns it to the ContinuationToken field.
func (o *SettingDefinitionEnvelope) SetContinuationToken(v string) {
	o.ContinuationToken = &v
}

func (o SettingDefinitionEnvelope) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SettingDefinitionEnvelope) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Items) {
		toSerialize["items"] = o.Items
	}
	if !IsNil(o.ContinuationToken) {
		toSerialize["continuationToken"] = o.ContinuationToken
	}
	return toSerialize, nil
}

type NullableSettingDefinitionEnvelope struct {
	value *SettingDefinitionEnvelope
	isSet bool
}

func (v NullableSettingDefinitionEnvelope) Get() *SettingDefinitionEnvelope {
	return v.value
}

func (v *NullableSettingDefinitionEnvelope) Set(val *SettingDefinitionEnvelope) {
	v.value = val
	v.isSet = true
}

func (v NullableSettingDefinitionEnvelope) IsSet() bool {
	return v.isSet
}

func (v *NullableSettingDefinitionEnvelope) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSettingDefinitionEnvelope(val *SettingDefinitionEnvelope) *NullableSettingDefinitionEnvelope {
	return &NullableSettingDefinitionEnvelope{value: val, isSet: true}
}

func (v NullableSettingDefinitionEnvelope) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSettingDefinitionEnvelope) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


