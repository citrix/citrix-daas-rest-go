/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
)

// checks if the DesktopRequestModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DesktopRequestModel{}

// DesktopRequestModel Request object for creation of a published desktop. When the delivery group type=DesktopsOnly and SharingKind=Private, this turns into New-BrokerAssignmentPolicyRule. When type=(DesktopsOnly or DesktopsAndApps) and SharingKind=Shared, this turns into New-BrokerEntitlementPolicyRule. When type=AppsOnly and SharingKind=Private, it is not allowed to add desktops to a delivery group. The combination of type=AppsAndDesktops and SharingKind=Private is also not allowed.
type DesktopRequestModel struct {
	// Identifier of an existing desktop associated with the delivery group.
	Id NullableString `json:"Id,omitempty"`
	ColorDepth *ColorDepth `json:"ColorDepth,omitempty"`
	// Specifies an optional description of the new desktop. The text may be visible to the end user, for example, as a tooltip associated with the desktop within receiver.
	Description NullableString `json:"Description,omitempty"`
	// Specifies whether the published desktop is enabled. A disabled desktop is ignored when determining which desktops are available for a user.
	Enabled NullableBool `json:"Enabled,omitempty"`
	// Specifies whether the ExcludedUsers filter is enabled.  If the filter is disabled then any user entries in the filter are ignored when determining which desktops are available for a user.
	ExcludedUserFilterEnabled NullableBool `json:"ExcludedUserFilterEnabled,omitempty"`
	// Specifies the excluded users filter of the desktop; that is, the users and groups who are explicitly denied access to the published desktop.
	ExcludedUsers []string `json:"ExcludedUsers,omitempty"`
	// Specifies the image data of the icon used to display the published desktop to the user, and of assigned desktop(s) in the case where SharingKind is equal to Private.
	Icon NullableString `json:"Icon,omitempty"`
	// Specifies whether the IncludedUsers filter is enabled.  If the filter is disabled then any user who satisfies the requirements of the delivery group's access policy is implicitly granted an entitlement to the published desktop.
	IncludedUserFilterEnabled NullableBool `json:"IncludedUserFilterEnabled,omitempty"`
	// Specifies the included users filter of the desktop; that is, the users and groups who are explicitly granted access to the published desktop.
	IncludedUsers []string `json:"IncludedUsers,omitempty"`
	LeasingBehavior *LeasingBehavior `json:"LeasingBehavior,omitempty"`
	// The number of machines from the delivery group which a user may privately allocate.
	MaxDesktops NullableInt32 `json:"MaxDesktops,omitempty"`
	// Specifies the administrative name of the desktop.  Each desktop in the site must have a unique name.
	Name NullableString `json:"Name,omitempty"`
	// The name of the published desktop as seen by the user, and of assigned desktop(s) in the case where SharingKind is equal to Private.
	PublishedName NullableString `json:"PublishedName,omitempty"`
	// Optional tag that may be used further to restrict which desktops may be made accessible to a user.
	RestrictToTag NullableString `json:"RestrictToTag,omitempty"`
	// Specifies whether the desktop requires the SecureICA protocol for desktop sessions.
	SecureIcaRequired NullableBool `json:"SecureIcaRequired,omitempty"`
	SessionReconnection *SessionReconnection `json:"SessionReconnection,omitempty"`
}

// NewDesktopRequestModel instantiates a new DesktopRequestModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDesktopRequestModel() *DesktopRequestModel {
	this := DesktopRequestModel{}
	return &this
}

// NewDesktopRequestModelWithDefaults instantiates a new DesktopRequestModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDesktopRequestModelWithDefaults() *DesktopRequestModel {
	this := DesktopRequestModel{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DesktopRequestModel) GetId() string {
	if o == nil || IsNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DesktopRequestModel) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *DesktopRequestModel) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *DesktopRequestModel) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *DesktopRequestModel) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *DesktopRequestModel) UnsetId() {
	o.Id.Unset()
}

// GetColorDepth returns the ColorDepth field value if set, zero value otherwise.
func (o *DesktopRequestModel) GetColorDepth() ColorDepth {
	if o == nil || IsNil(o.ColorDepth) {
		var ret ColorDepth
		return ret
	}
	return *o.ColorDepth
}

// GetColorDepthOk returns a tuple with the ColorDepth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopRequestModel) GetColorDepthOk() (*ColorDepth, bool) {
	if o == nil || IsNil(o.ColorDepth) {
		return nil, false
	}
	return o.ColorDepth, true
}

// HasColorDepth returns a boolean if a field has been set.
func (o *DesktopRequestModel) HasColorDepth() bool {
	if o != nil && !IsNil(o.ColorDepth) {
		return true
	}

	return false
}

// SetColorDepth gets a reference to the given ColorDepth and assigns it to the ColorDepth field.
func (o *DesktopRequestModel) SetColorDepth(v ColorDepth) {
	o.ColorDepth = &v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DesktopRequestModel) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DesktopRequestModel) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *DesktopRequestModel) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *DesktopRequestModel) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *DesktopRequestModel) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *DesktopRequestModel) UnsetDescription() {
	o.Description.Unset()
}

// GetEnabled returns the Enabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DesktopRequestModel) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled.Get()) {
		var ret bool
		return ret
	}
	return *o.Enabled.Get()
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DesktopRequestModel) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Enabled.Get(), o.Enabled.IsSet()
}

// HasEnabled returns a boolean if a field has been set.
func (o *DesktopRequestModel) HasEnabled() bool {
	if o != nil && o.Enabled.IsSet() {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given NullableBool and assigns it to the Enabled field.
func (o *DesktopRequestModel) SetEnabled(v bool) {
	o.Enabled.Set(&v)
}
// SetEnabledNil sets the value for Enabled to be an explicit nil
func (o *DesktopRequestModel) SetEnabledNil() {
	o.Enabled.Set(nil)
}

// UnsetEnabled ensures that no value is present for Enabled, not even an explicit nil
func (o *DesktopRequestModel) UnsetEnabled() {
	o.Enabled.Unset()
}

// GetExcludedUserFilterEnabled returns the ExcludedUserFilterEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DesktopRequestModel) GetExcludedUserFilterEnabled() bool {
	if o == nil || IsNil(o.ExcludedUserFilterEnabled.Get()) {
		var ret bool
		return ret
	}
	return *o.ExcludedUserFilterEnabled.Get()
}

// GetExcludedUserFilterEnabledOk returns a tuple with the ExcludedUserFilterEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DesktopRequestModel) GetExcludedUserFilterEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExcludedUserFilterEnabled.Get(), o.ExcludedUserFilterEnabled.IsSet()
}

// HasExcludedUserFilterEnabled returns a boolean if a field has been set.
func (o *DesktopRequestModel) HasExcludedUserFilterEnabled() bool {
	if o != nil && o.ExcludedUserFilterEnabled.IsSet() {
		return true
	}

	return false
}

// SetExcludedUserFilterEnabled gets a reference to the given NullableBool and assigns it to the ExcludedUserFilterEnabled field.
func (o *DesktopRequestModel) SetExcludedUserFilterEnabled(v bool) {
	o.ExcludedUserFilterEnabled.Set(&v)
}
// SetExcludedUserFilterEnabledNil sets the value for ExcludedUserFilterEnabled to be an explicit nil
func (o *DesktopRequestModel) SetExcludedUserFilterEnabledNil() {
	o.ExcludedUserFilterEnabled.Set(nil)
}

// UnsetExcludedUserFilterEnabled ensures that no value is present for ExcludedUserFilterEnabled, not even an explicit nil
func (o *DesktopRequestModel) UnsetExcludedUserFilterEnabled() {
	o.ExcludedUserFilterEnabled.Unset()
}

// GetExcludedUsers returns the ExcludedUsers field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DesktopRequestModel) GetExcludedUsers() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.ExcludedUsers
}

// GetExcludedUsersOk returns a tuple with the ExcludedUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DesktopRequestModel) GetExcludedUsersOk() ([]string, bool) {
	if o == nil || IsNil(o.ExcludedUsers) {
		return nil, false
	}
	return o.ExcludedUsers, true
}

// HasExcludedUsers returns a boolean if a field has been set.
func (o *DesktopRequestModel) HasExcludedUsers() bool {
	if o != nil && IsNil(o.ExcludedUsers) {
		return true
	}

	return false
}

// SetExcludedUsers gets a reference to the given []string and assigns it to the ExcludedUsers field.
func (o *DesktopRequestModel) SetExcludedUsers(v []string) {
	o.ExcludedUsers = v
}

// GetIcon returns the Icon field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DesktopRequestModel) GetIcon() string {
	if o == nil || IsNil(o.Icon.Get()) {
		var ret string
		return ret
	}
	return *o.Icon.Get()
}

// GetIconOk returns a tuple with the Icon field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DesktopRequestModel) GetIconOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Icon.Get(), o.Icon.IsSet()
}

// HasIcon returns a boolean if a field has been set.
func (o *DesktopRequestModel) HasIcon() bool {
	if o != nil && o.Icon.IsSet() {
		return true
	}

	return false
}

// SetIcon gets a reference to the given NullableString and assigns it to the Icon field.
func (o *DesktopRequestModel) SetIcon(v string) {
	o.Icon.Set(&v)
}
// SetIconNil sets the value for Icon to be an explicit nil
func (o *DesktopRequestModel) SetIconNil() {
	o.Icon.Set(nil)
}

// UnsetIcon ensures that no value is present for Icon, not even an explicit nil
func (o *DesktopRequestModel) UnsetIcon() {
	o.Icon.Unset()
}

// GetIncludedUserFilterEnabled returns the IncludedUserFilterEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DesktopRequestModel) GetIncludedUserFilterEnabled() bool {
	if o == nil || IsNil(o.IncludedUserFilterEnabled.Get()) {
		var ret bool
		return ret
	}
	return *o.IncludedUserFilterEnabled.Get()
}

// GetIncludedUserFilterEnabledOk returns a tuple with the IncludedUserFilterEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DesktopRequestModel) GetIncludedUserFilterEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IncludedUserFilterEnabled.Get(), o.IncludedUserFilterEnabled.IsSet()
}

// HasIncludedUserFilterEnabled returns a boolean if a field has been set.
func (o *DesktopRequestModel) HasIncludedUserFilterEnabled() bool {
	if o != nil && o.IncludedUserFilterEnabled.IsSet() {
		return true
	}

	return false
}

// SetIncludedUserFilterEnabled gets a reference to the given NullableBool and assigns it to the IncludedUserFilterEnabled field.
func (o *DesktopRequestModel) SetIncludedUserFilterEnabled(v bool) {
	o.IncludedUserFilterEnabled.Set(&v)
}
// SetIncludedUserFilterEnabledNil sets the value for IncludedUserFilterEnabled to be an explicit nil
func (o *DesktopRequestModel) SetIncludedUserFilterEnabledNil() {
	o.IncludedUserFilterEnabled.Set(nil)
}

// UnsetIncludedUserFilterEnabled ensures that no value is present for IncludedUserFilterEnabled, not even an explicit nil
func (o *DesktopRequestModel) UnsetIncludedUserFilterEnabled() {
	o.IncludedUserFilterEnabled.Unset()
}

// GetIncludedUsers returns the IncludedUsers field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DesktopRequestModel) GetIncludedUsers() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.IncludedUsers
}

// GetIncludedUsersOk returns a tuple with the IncludedUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DesktopRequestModel) GetIncludedUsersOk() ([]string, bool) {
	if o == nil || IsNil(o.IncludedUsers) {
		return nil, false
	}
	return o.IncludedUsers, true
}

// HasIncludedUsers returns a boolean if a field has been set.
func (o *DesktopRequestModel) HasIncludedUsers() bool {
	if o != nil && IsNil(o.IncludedUsers) {
		return true
	}

	return false
}

// SetIncludedUsers gets a reference to the given []string and assigns it to the IncludedUsers field.
func (o *DesktopRequestModel) SetIncludedUsers(v []string) {
	o.IncludedUsers = v
}

// GetLeasingBehavior returns the LeasingBehavior field value if set, zero value otherwise.
func (o *DesktopRequestModel) GetLeasingBehavior() LeasingBehavior {
	if o == nil || IsNil(o.LeasingBehavior) {
		var ret LeasingBehavior
		return ret
	}
	return *o.LeasingBehavior
}

// GetLeasingBehaviorOk returns a tuple with the LeasingBehavior field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopRequestModel) GetLeasingBehaviorOk() (*LeasingBehavior, bool) {
	if o == nil || IsNil(o.LeasingBehavior) {
		return nil, false
	}
	return o.LeasingBehavior, true
}

// HasLeasingBehavior returns a boolean if a field has been set.
func (o *DesktopRequestModel) HasLeasingBehavior() bool {
	if o != nil && !IsNil(o.LeasingBehavior) {
		return true
	}

	return false
}

// SetLeasingBehavior gets a reference to the given LeasingBehavior and assigns it to the LeasingBehavior field.
func (o *DesktopRequestModel) SetLeasingBehavior(v LeasingBehavior) {
	o.LeasingBehavior = &v
}

// GetMaxDesktops returns the MaxDesktops field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DesktopRequestModel) GetMaxDesktops() int32 {
	if o == nil || IsNil(o.MaxDesktops.Get()) {
		var ret int32
		return ret
	}
	return *o.MaxDesktops.Get()
}

// GetMaxDesktopsOk returns a tuple with the MaxDesktops field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DesktopRequestModel) GetMaxDesktopsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MaxDesktops.Get(), o.MaxDesktops.IsSet()
}

// HasMaxDesktops returns a boolean if a field has been set.
func (o *DesktopRequestModel) HasMaxDesktops() bool {
	if o != nil && o.MaxDesktops.IsSet() {
		return true
	}

	return false
}

// SetMaxDesktops gets a reference to the given NullableInt32 and assigns it to the MaxDesktops field.
func (o *DesktopRequestModel) SetMaxDesktops(v int32) {
	o.MaxDesktops.Set(&v)
}
// SetMaxDesktopsNil sets the value for MaxDesktops to be an explicit nil
func (o *DesktopRequestModel) SetMaxDesktopsNil() {
	o.MaxDesktops.Set(nil)
}

// UnsetMaxDesktops ensures that no value is present for MaxDesktops, not even an explicit nil
func (o *DesktopRequestModel) UnsetMaxDesktops() {
	o.MaxDesktops.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DesktopRequestModel) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DesktopRequestModel) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *DesktopRequestModel) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *DesktopRequestModel) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *DesktopRequestModel) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *DesktopRequestModel) UnsetName() {
	o.Name.Unset()
}

// GetPublishedName returns the PublishedName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DesktopRequestModel) GetPublishedName() string {
	if o == nil || IsNil(o.PublishedName.Get()) {
		var ret string
		return ret
	}
	return *o.PublishedName.Get()
}

// GetPublishedNameOk returns a tuple with the PublishedName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DesktopRequestModel) GetPublishedNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PublishedName.Get(), o.PublishedName.IsSet()
}

// HasPublishedName returns a boolean if a field has been set.
func (o *DesktopRequestModel) HasPublishedName() bool {
	if o != nil && o.PublishedName.IsSet() {
		return true
	}

	return false
}

// SetPublishedName gets a reference to the given NullableString and assigns it to the PublishedName field.
func (o *DesktopRequestModel) SetPublishedName(v string) {
	o.PublishedName.Set(&v)
}
// SetPublishedNameNil sets the value for PublishedName to be an explicit nil
func (o *DesktopRequestModel) SetPublishedNameNil() {
	o.PublishedName.Set(nil)
}

// UnsetPublishedName ensures that no value is present for PublishedName, not even an explicit nil
func (o *DesktopRequestModel) UnsetPublishedName() {
	o.PublishedName.Unset()
}

// GetRestrictToTag returns the RestrictToTag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DesktopRequestModel) GetRestrictToTag() string {
	if o == nil || IsNil(o.RestrictToTag.Get()) {
		var ret string
		return ret
	}
	return *o.RestrictToTag.Get()
}

// GetRestrictToTagOk returns a tuple with the RestrictToTag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DesktopRequestModel) GetRestrictToTagOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RestrictToTag.Get(), o.RestrictToTag.IsSet()
}

// HasRestrictToTag returns a boolean if a field has been set.
func (o *DesktopRequestModel) HasRestrictToTag() bool {
	if o != nil && o.RestrictToTag.IsSet() {
		return true
	}

	return false
}

// SetRestrictToTag gets a reference to the given NullableString and assigns it to the RestrictToTag field.
func (o *DesktopRequestModel) SetRestrictToTag(v string) {
	o.RestrictToTag.Set(&v)
}
// SetRestrictToTagNil sets the value for RestrictToTag to be an explicit nil
func (o *DesktopRequestModel) SetRestrictToTagNil() {
	o.RestrictToTag.Set(nil)
}

// UnsetRestrictToTag ensures that no value is present for RestrictToTag, not even an explicit nil
func (o *DesktopRequestModel) UnsetRestrictToTag() {
	o.RestrictToTag.Unset()
}

// GetSecureIcaRequired returns the SecureIcaRequired field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DesktopRequestModel) GetSecureIcaRequired() bool {
	if o == nil || IsNil(o.SecureIcaRequired.Get()) {
		var ret bool
		return ret
	}
	return *o.SecureIcaRequired.Get()
}

// GetSecureIcaRequiredOk returns a tuple with the SecureIcaRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DesktopRequestModel) GetSecureIcaRequiredOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.SecureIcaRequired.Get(), o.SecureIcaRequired.IsSet()
}

// HasSecureIcaRequired returns a boolean if a field has been set.
func (o *DesktopRequestModel) HasSecureIcaRequired() bool {
	if o != nil && o.SecureIcaRequired.IsSet() {
		return true
	}

	return false
}

// SetSecureIcaRequired gets a reference to the given NullableBool and assigns it to the SecureIcaRequired field.
func (o *DesktopRequestModel) SetSecureIcaRequired(v bool) {
	o.SecureIcaRequired.Set(&v)
}
// SetSecureIcaRequiredNil sets the value for SecureIcaRequired to be an explicit nil
func (o *DesktopRequestModel) SetSecureIcaRequiredNil() {
	o.SecureIcaRequired.Set(nil)
}

// UnsetSecureIcaRequired ensures that no value is present for SecureIcaRequired, not even an explicit nil
func (o *DesktopRequestModel) UnsetSecureIcaRequired() {
	o.SecureIcaRequired.Unset()
}

// GetSessionReconnection returns the SessionReconnection field value if set, zero value otherwise.
func (o *DesktopRequestModel) GetSessionReconnection() SessionReconnection {
	if o == nil || IsNil(o.SessionReconnection) {
		var ret SessionReconnection
		return ret
	}
	return *o.SessionReconnection
}

// GetSessionReconnectionOk returns a tuple with the SessionReconnection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DesktopRequestModel) GetSessionReconnectionOk() (*SessionReconnection, bool) {
	if o == nil || IsNil(o.SessionReconnection) {
		return nil, false
	}
	return o.SessionReconnection, true
}

// HasSessionReconnection returns a boolean if a field has been set.
func (o *DesktopRequestModel) HasSessionReconnection() bool {
	if o != nil && !IsNil(o.SessionReconnection) {
		return true
	}

	return false
}

// SetSessionReconnection gets a reference to the given SessionReconnection and assigns it to the SessionReconnection field.
func (o *DesktopRequestModel) SetSessionReconnection(v SessionReconnection) {
	o.SessionReconnection = &v
}

func (o DesktopRequestModel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DesktopRequestModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["Id"] = o.Id.Get()
	}
	if !IsNil(o.ColorDepth) {
		toSerialize["ColorDepth"] = o.ColorDepth
	}
	if o.Description.IsSet() {
		toSerialize["Description"] = o.Description.Get()
	}
	if o.Enabled.IsSet() {
		toSerialize["Enabled"] = o.Enabled.Get()
	}
	if o.ExcludedUserFilterEnabled.IsSet() {
		toSerialize["ExcludedUserFilterEnabled"] = o.ExcludedUserFilterEnabled.Get()
	}
	if o.ExcludedUsers != nil {
		toSerialize["ExcludedUsers"] = o.ExcludedUsers
	}
	if o.Icon.IsSet() {
		toSerialize["Icon"] = o.Icon.Get()
	}
	if o.IncludedUserFilterEnabled.IsSet() {
		toSerialize["IncludedUserFilterEnabled"] = o.IncludedUserFilterEnabled.Get()
	}
	if o.IncludedUsers != nil {
		toSerialize["IncludedUsers"] = o.IncludedUsers
	}
	if !IsNil(o.LeasingBehavior) {
		toSerialize["LeasingBehavior"] = o.LeasingBehavior
	}
	if o.MaxDesktops.IsSet() {
		toSerialize["MaxDesktops"] = o.MaxDesktops.Get()
	}
	if o.Name.IsSet() {
		toSerialize["Name"] = o.Name.Get()
	}
	if o.PublishedName.IsSet() {
		toSerialize["PublishedName"] = o.PublishedName.Get()
	}
	if o.RestrictToTag.IsSet() {
		toSerialize["RestrictToTag"] = o.RestrictToTag.Get()
	}
	if o.SecureIcaRequired.IsSet() {
		toSerialize["SecureIcaRequired"] = o.SecureIcaRequired.Get()
	}
	if !IsNil(o.SessionReconnection) {
		toSerialize["SessionReconnection"] = o.SessionReconnection
	}
	return toSerialize, nil
}

type NullableDesktopRequestModel struct {
	value *DesktopRequestModel
	isSet bool
}

func (v NullableDesktopRequestModel) Get() *DesktopRequestModel {
	return v.value
}

func (v *NullableDesktopRequestModel) Set(val *DesktopRequestModel) {
	v.value = val
	v.isSet = true
}

func (v NullableDesktopRequestModel) IsSet() bool {
	return v.isSet
}

func (v *NullableDesktopRequestModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDesktopRequestModel(val *DesktopRequestModel) *NullableDesktopRequestModel {
	return &NullableDesktopRequestModel{value: val, isSet: true}
}

func (v NullableDesktopRequestModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDesktopRequestModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


