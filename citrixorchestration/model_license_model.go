/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-onprem-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
	"fmt"
)

// LicenseModel Types of license.
type LicenseModel string

// List of LicenseModel
const (
	LICENSEMODEL_UNKNOWN     LicenseModel = "Unknown"
	LICENSEMODEL_NONE        LicenseModel = "None"
	LICENSEMODEL_CONCURRENT  LicenseModel = "Concurrent"
	LICENSEMODEL_USER_DEVICE LicenseModel = "UserDevice"
)

// All allowed values of LicenseModel enum
var AllowedLicenseModelEnumValues = []LicenseModel{
	"Unknown",
	"None",
	"Concurrent",
	"UserDevice",
}

func (v *LicenseModel) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	*v = LicenseModel(value)
	return nil
}

// NewLicenseModelFromValue returns a pointer to a valid LicenseModel
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLicenseModelFromValue(v string) (*LicenseModel, error) {
	ev := LicenseModel(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LicenseModel: valid values are %v", v, AllowedLicenseModelEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LicenseModel) IsValid() bool {
	for _, existing := range AllowedLicenseModelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LicenseModel value
func (v LicenseModel) Ptr() *LicenseModel {
	return &v
}

type NullableLicenseModel struct {
	value *LicenseModel
	isSet bool
}

func (v NullableLicenseModel) Get() *LicenseModel {
	return v.value
}

func (v *NullableLicenseModel) Set(val *LicenseModel) {
	v.value = val
	v.isSet = true
}

func (v NullableLicenseModel) IsSet() bool {
	return v.isSet
}

func (v *NullableLicenseModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLicenseModel(val *LicenseModel) *NullableLicenseModel {
	return &NullableLicenseModel{value: val, isSet: true}
}

func (v NullableLicenseModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLicenseModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
