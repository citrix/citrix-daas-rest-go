/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-onprem-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
)

// checks if the SettingDefinition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SettingDefinition{}

// SettingDefinition Setting definition.
type SettingDefinition struct {
	// Setting name. This is globally unique.
	SettingName NullableString `json:"settingName,omitempty"`
	// The setting editor name.
	EditorName NullableString `json:"editorName,omitempty"`
	// Translated setting name. Is globally unique.
	DisplayName NullableString `json:"displayName,omitempty"`
	// Setting category, e.g., ICA\\Printing.
	Category NullableString `json:"category,omitempty"`
	// Setting detailed description.
	Explanation NullableString `json:"explanation,omitempty"`
	// true = user, false = machine.
	IsUserSetting *bool `json:"isUserSetting,omitempty"`
	// Type of setting value.
	ValueType NullableString `json:"valueType,omitempty"`
	// Label test for a boolean setting, display enable/disable if true, otherwise allow/prohibit.
	IsEnableDisable *bool `json:"isEnableDisable,omitempty"`
	// Indicate if the integer, string, enum or multiline string is toggled.
	IsToggled *bool `json:"isToggled,omitempty"`
	// Indicate if the validation message for the value should be shown.
	HideValueHint *bool `json:"hideValueHint,omitempty"`
	// For a string setting, if this is true, it indicates the value should be treated as a JSON array of strings.
	ValueAsArray *bool `json:"valueAsArray,omitempty"`
	// Setting default value.
	DefaultValue NullableString `json:"defaultValue,omitempty"`
	// Setting secure default value
	SecureDefaultValue NullableString `json:"secureDefaultValue,omitempty"`
	// An abbreviated shortened version of the default value.
	DefaultSnip NullableString `json:"defaultSnip,omitempty"`
	// Disabled value for toggled settings.
	DisabledValue NullableString `json:"disabledValue,omitempty"`
	// Initial value for toggled settings when value is not disabled.
	InitialValue NullableString `json:"initialValue,omitempty"`
	// Minimal value for integer setting.
	ValueMinimum NullableString `json:"valueMinimum,omitempty"`
	// Maximal value for integer setting.
	ValueMaximum NullableString `json:"valueMaximum,omitempty"`
	// An expression executed to validate the value.
	ValueValidator NullableString `json:"valueValidator,omitempty"`
	// Warning message issued when validator fails (throws exception).
	ValidatorError NullableString `json:"validatorError,omitempty"`
	// Related settings.
	RelatedSettings map[string]string `json:"relatedSettings,omitempty"`
	// The setting that must be enabled for this setting to work.
	DependsOn NullableString `json:"dependsOn,omitempty"`
	// Unit of value in translated text.
	ValueUnit NullableString `json:"valueUnit,omitempty"`
	// Custom text for the allowed explanation for some boolean settings.
	AllowedText NullableString `json:"allowedText,omitempty"`
	// Custom text for the denied explanation for some boolean settings.
	DeniedText NullableString   `json:"deniedText,omitempty"`
	EnumType   *EnumerationType `json:"enumType,omitempty"`
	// VDA versions honoring this setting.
	VersionDetails []VersionDetail `json:"versionDetails,omitempty"`
	// The version string in GPFX file, e.g., XD=7.8,*,B.
	VersionCode NullableString `json:"versionCode,omitempty"`
	// Array of VDA versions, e.g., 7.8S, 7.8M. This is much lighter than VersionDetails.
	VdaVersions []string `json:"vdaVersions,omitempty"`
	// Scope, e.g. ConfigSlot.
	GpoScope NullableString `json:"gpoScope,omitempty"`
	// Group, e.g., UPM.
	ProductGroup NullableString `json:"productGroup,omitempty"`
}

// NewSettingDefinition instantiates a new SettingDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSettingDefinition() *SettingDefinition {
	this := SettingDefinition{}
	return &this
}

// NewSettingDefinitionWithDefaults instantiates a new SettingDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSettingDefinitionWithDefaults() *SettingDefinition {
	this := SettingDefinition{}
	return &this
}

// GetSettingName returns the SettingName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SettingDefinition) GetSettingName() string {
	if o == nil || IsNil(o.SettingName.Get()) {
		var ret string
		return ret
	}
	return *o.SettingName.Get()
}

// GetSettingNameOk returns a tuple with the SettingName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SettingDefinition) GetSettingNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SettingName.Get(), o.SettingName.IsSet()
}

// HasSettingName returns a boolean if a field has been set.
func (o *SettingDefinition) HasSettingName() bool {
	if o != nil && o.SettingName.IsSet() {
		return true
	}

	return false
}

// SetSettingName gets a reference to the given NullableString and assigns it to the SettingName field.
func (o *SettingDefinition) SetSettingName(v string) {
	o.SettingName.Set(&v)
}

// SetSettingNameNil sets the value for SettingName to be an explicit nil
func (o *SettingDefinition) SetSettingNameNil() {
	o.SettingName.Set(nil)
}

// UnsetSettingName ensures that no value is present for SettingName, not even an explicit nil
func (o *SettingDefinition) UnsetSettingName() {
	o.SettingName.Unset()
}

// GetEditorName returns the EditorName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SettingDefinition) GetEditorName() string {
	if o == nil || IsNil(o.EditorName.Get()) {
		var ret string
		return ret
	}
	return *o.EditorName.Get()
}

// GetEditorNameOk returns a tuple with the EditorName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SettingDefinition) GetEditorNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EditorName.Get(), o.EditorName.IsSet()
}

// HasEditorName returns a boolean if a field has been set.
func (o *SettingDefinition) HasEditorName() bool {
	if o != nil && o.EditorName.IsSet() {
		return true
	}

	return false
}

// SetEditorName gets a reference to the given NullableString and assigns it to the EditorName field.
func (o *SettingDefinition) SetEditorName(v string) {
	o.EditorName.Set(&v)
}

// SetEditorNameNil sets the value for EditorName to be an explicit nil
func (o *SettingDefinition) SetEditorNameNil() {
	o.EditorName.Set(nil)
}

// UnsetEditorName ensures that no value is present for EditorName, not even an explicit nil
func (o *SettingDefinition) UnsetEditorName() {
	o.EditorName.Unset()
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SettingDefinition) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName.Get()) {
		var ret string
		return ret
	}
	return *o.DisplayName.Get()
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SettingDefinition) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DisplayName.Get(), o.DisplayName.IsSet()
}

// HasDisplayName returns a boolean if a field has been set.
func (o *SettingDefinition) HasDisplayName() bool {
	if o != nil && o.DisplayName.IsSet() {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given NullableString and assigns it to the DisplayName field.
func (o *SettingDefinition) SetDisplayName(v string) {
	o.DisplayName.Set(&v)
}

// SetDisplayNameNil sets the value for DisplayName to be an explicit nil
func (o *SettingDefinition) SetDisplayNameNil() {
	o.DisplayName.Set(nil)
}

// UnsetDisplayName ensures that no value is present for DisplayName, not even an explicit nil
func (o *SettingDefinition) UnsetDisplayName() {
	o.DisplayName.Unset()
}

// GetCategory returns the Category field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SettingDefinition) GetCategory() string {
	if o == nil || IsNil(o.Category.Get()) {
		var ret string
		return ret
	}
	return *o.Category.Get()
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SettingDefinition) GetCategoryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Category.Get(), o.Category.IsSet()
}

// HasCategory returns a boolean if a field has been set.
func (o *SettingDefinition) HasCategory() bool {
	if o != nil && o.Category.IsSet() {
		return true
	}

	return false
}

// SetCategory gets a reference to the given NullableString and assigns it to the Category field.
func (o *SettingDefinition) SetCategory(v string) {
	o.Category.Set(&v)
}

// SetCategoryNil sets the value for Category to be an explicit nil
func (o *SettingDefinition) SetCategoryNil() {
	o.Category.Set(nil)
}

// UnsetCategory ensures that no value is present for Category, not even an explicit nil
func (o *SettingDefinition) UnsetCategory() {
	o.Category.Unset()
}

// GetExplanation returns the Explanation field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SettingDefinition) GetExplanation() string {
	if o == nil || IsNil(o.Explanation.Get()) {
		var ret string
		return ret
	}
	return *o.Explanation.Get()
}

// GetExplanationOk returns a tuple with the Explanation field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SettingDefinition) GetExplanationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Explanation.Get(), o.Explanation.IsSet()
}

// HasExplanation returns a boolean if a field has been set.
func (o *SettingDefinition) HasExplanation() bool {
	if o != nil && o.Explanation.IsSet() {
		return true
	}

	return false
}

// SetExplanation gets a reference to the given NullableString and assigns it to the Explanation field.
func (o *SettingDefinition) SetExplanation(v string) {
	o.Explanation.Set(&v)
}

// SetExplanationNil sets the value for Explanation to be an explicit nil
func (o *SettingDefinition) SetExplanationNil() {
	o.Explanation.Set(nil)
}

// UnsetExplanation ensures that no value is present for Explanation, not even an explicit nil
func (o *SettingDefinition) UnsetExplanation() {
	o.Explanation.Unset()
}

// GetIsUserSetting returns the IsUserSetting field value if set, zero value otherwise.
func (o *SettingDefinition) GetIsUserSetting() bool {
	if o == nil || IsNil(o.IsUserSetting) {
		var ret bool
		return ret
	}
	return *o.IsUserSetting
}

// GetIsUserSettingOk returns a tuple with the IsUserSetting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingDefinition) GetIsUserSettingOk() (*bool, bool) {
	if o == nil || IsNil(o.IsUserSetting) {
		return nil, false
	}
	return o.IsUserSetting, true
}

// HasIsUserSetting returns a boolean if a field has been set.
func (o *SettingDefinition) HasIsUserSetting() bool {
	if o != nil && !IsNil(o.IsUserSetting) {
		return true
	}

	return false
}

// SetIsUserSetting gets a reference to the given bool and assigns it to the IsUserSetting field.
func (o *SettingDefinition) SetIsUserSetting(v bool) {
	o.IsUserSetting = &v
}

// GetValueType returns the ValueType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SettingDefinition) GetValueType() string {
	if o == nil || IsNil(o.ValueType.Get()) {
		var ret string
		return ret
	}
	return *o.ValueType.Get()
}

// GetValueTypeOk returns a tuple with the ValueType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SettingDefinition) GetValueTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ValueType.Get(), o.ValueType.IsSet()
}

// HasValueType returns a boolean if a field has been set.
func (o *SettingDefinition) HasValueType() bool {
	if o != nil && o.ValueType.IsSet() {
		return true
	}

	return false
}

// SetValueType gets a reference to the given NullableString and assigns it to the ValueType field.
func (o *SettingDefinition) SetValueType(v string) {
	o.ValueType.Set(&v)
}

// SetValueTypeNil sets the value for ValueType to be an explicit nil
func (o *SettingDefinition) SetValueTypeNil() {
	o.ValueType.Set(nil)
}

// UnsetValueType ensures that no value is present for ValueType, not even an explicit nil
func (o *SettingDefinition) UnsetValueType() {
	o.ValueType.Unset()
}

// GetIsEnableDisable returns the IsEnableDisable field value if set, zero value otherwise.
func (o *SettingDefinition) GetIsEnableDisable() bool {
	if o == nil || IsNil(o.IsEnableDisable) {
		var ret bool
		return ret
	}
	return *o.IsEnableDisable
}

// GetIsEnableDisableOk returns a tuple with the IsEnableDisable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingDefinition) GetIsEnableDisableOk() (*bool, bool) {
	if o == nil || IsNil(o.IsEnableDisable) {
		return nil, false
	}
	return o.IsEnableDisable, true
}

// HasIsEnableDisable returns a boolean if a field has been set.
func (o *SettingDefinition) HasIsEnableDisable() bool {
	if o != nil && !IsNil(o.IsEnableDisable) {
		return true
	}

	return false
}

// SetIsEnableDisable gets a reference to the given bool and assigns it to the IsEnableDisable field.
func (o *SettingDefinition) SetIsEnableDisable(v bool) {
	o.IsEnableDisable = &v
}

// GetIsToggled returns the IsToggled field value if set, zero value otherwise.
func (o *SettingDefinition) GetIsToggled() bool {
	if o == nil || IsNil(o.IsToggled) {
		var ret bool
		return ret
	}
	return *o.IsToggled
}

// GetIsToggledOk returns a tuple with the IsToggled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingDefinition) GetIsToggledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsToggled) {
		return nil, false
	}
	return o.IsToggled, true
}

// HasIsToggled returns a boolean if a field has been set.
func (o *SettingDefinition) HasIsToggled() bool {
	if o != nil && !IsNil(o.IsToggled) {
		return true
	}

	return false
}

// SetIsToggled gets a reference to the given bool and assigns it to the IsToggled field.
func (o *SettingDefinition) SetIsToggled(v bool) {
	o.IsToggled = &v
}

// GetHideValueHint returns the HideValueHint field value if set, zero value otherwise.
func (o *SettingDefinition) GetHideValueHint() bool {
	if o == nil || IsNil(o.HideValueHint) {
		var ret bool
		return ret
	}
	return *o.HideValueHint
}

// GetHideValueHintOk returns a tuple with the HideValueHint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingDefinition) GetHideValueHintOk() (*bool, bool) {
	if o == nil || IsNil(o.HideValueHint) {
		return nil, false
	}
	return o.HideValueHint, true
}

// HasHideValueHint returns a boolean if a field has been set.
func (o *SettingDefinition) HasHideValueHint() bool {
	if o != nil && !IsNil(o.HideValueHint) {
		return true
	}

	return false
}

// SetHideValueHint gets a reference to the given bool and assigns it to the HideValueHint field.
func (o *SettingDefinition) SetHideValueHint(v bool) {
	o.HideValueHint = &v
}

// GetValueAsArray returns the ValueAsArray field value if set, zero value otherwise.
func (o *SettingDefinition) GetValueAsArray() bool {
	if o == nil || IsNil(o.ValueAsArray) {
		var ret bool
		return ret
	}
	return *o.ValueAsArray
}

// GetValueAsArrayOk returns a tuple with the ValueAsArray field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingDefinition) GetValueAsArrayOk() (*bool, bool) {
	if o == nil || IsNil(o.ValueAsArray) {
		return nil, false
	}
	return o.ValueAsArray, true
}

// HasValueAsArray returns a boolean if a field has been set.
func (o *SettingDefinition) HasValueAsArray() bool {
	if o != nil && !IsNil(o.ValueAsArray) {
		return true
	}

	return false
}

// SetValueAsArray gets a reference to the given bool and assigns it to the ValueAsArray field.
func (o *SettingDefinition) SetValueAsArray(v bool) {
	o.ValueAsArray = &v
}

// GetDefaultValue returns the DefaultValue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SettingDefinition) GetDefaultValue() string {
	if o == nil || IsNil(o.DefaultValue.Get()) {
		var ret string
		return ret
	}
	return *o.DefaultValue.Get()
}

// GetDefaultValueOk returns a tuple with the DefaultValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SettingDefinition) GetDefaultValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultValue.Get(), o.DefaultValue.IsSet()
}

// HasDefaultValue returns a boolean if a field has been set.
func (o *SettingDefinition) HasDefaultValue() bool {
	if o != nil && o.DefaultValue.IsSet() {
		return true
	}

	return false
}

// SetDefaultValue gets a reference to the given NullableString and assigns it to the DefaultValue field.
func (o *SettingDefinition) SetDefaultValue(v string) {
	o.DefaultValue.Set(&v)
}

// SetDefaultValueNil sets the value for DefaultValue to be an explicit nil
func (o *SettingDefinition) SetDefaultValueNil() {
	o.DefaultValue.Set(nil)
}

// UnsetDefaultValue ensures that no value is present for DefaultValue, not even an explicit nil
func (o *SettingDefinition) UnsetDefaultValue() {
	o.DefaultValue.Unset()
}

// GetSecureDefaultValue returns the SecureDefaultValue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SettingDefinition) GetSecureDefaultValue() string {
	if o == nil || IsNil(o.SecureDefaultValue.Get()) {
		var ret string
		return ret
	}
	return *o.SecureDefaultValue.Get()
}

// GetSecureDefaultValueOk returns a tuple with the SecureDefaultValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SettingDefinition) GetSecureDefaultValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SecureDefaultValue.Get(), o.SecureDefaultValue.IsSet()
}

// HasSecureDefaultValue returns a boolean if a field has been set.
func (o *SettingDefinition) HasSecureDefaultValue() bool {
	if o != nil && o.SecureDefaultValue.IsSet() {
		return true
	}

	return false
}

// SetSecureDefaultValue gets a reference to the given NullableString and assigns it to the SecureDefaultValue field.
func (o *SettingDefinition) SetSecureDefaultValue(v string) {
	o.SecureDefaultValue.Set(&v)
}

// SetSecureDefaultValueNil sets the value for SecureDefaultValue to be an explicit nil
func (o *SettingDefinition) SetSecureDefaultValueNil() {
	o.SecureDefaultValue.Set(nil)
}

// UnsetSecureDefaultValue ensures that no value is present for SecureDefaultValue, not even an explicit nil
func (o *SettingDefinition) UnsetSecureDefaultValue() {
	o.SecureDefaultValue.Unset()
}

// GetDefaultSnip returns the DefaultSnip field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SettingDefinition) GetDefaultSnip() string {
	if o == nil || IsNil(o.DefaultSnip.Get()) {
		var ret string
		return ret
	}
	return *o.DefaultSnip.Get()
}

// GetDefaultSnipOk returns a tuple with the DefaultSnip field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SettingDefinition) GetDefaultSnipOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultSnip.Get(), o.DefaultSnip.IsSet()
}

// HasDefaultSnip returns a boolean if a field has been set.
func (o *SettingDefinition) HasDefaultSnip() bool {
	if o != nil && o.DefaultSnip.IsSet() {
		return true
	}

	return false
}

// SetDefaultSnip gets a reference to the given NullableString and assigns it to the DefaultSnip field.
func (o *SettingDefinition) SetDefaultSnip(v string) {
	o.DefaultSnip.Set(&v)
}

// SetDefaultSnipNil sets the value for DefaultSnip to be an explicit nil
func (o *SettingDefinition) SetDefaultSnipNil() {
	o.DefaultSnip.Set(nil)
}

// UnsetDefaultSnip ensures that no value is present for DefaultSnip, not even an explicit nil
func (o *SettingDefinition) UnsetDefaultSnip() {
	o.DefaultSnip.Unset()
}

// GetDisabledValue returns the DisabledValue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SettingDefinition) GetDisabledValue() string {
	if o == nil || IsNil(o.DisabledValue.Get()) {
		var ret string
		return ret
	}
	return *o.DisabledValue.Get()
}

// GetDisabledValueOk returns a tuple with the DisabledValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SettingDefinition) GetDisabledValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DisabledValue.Get(), o.DisabledValue.IsSet()
}

// HasDisabledValue returns a boolean if a field has been set.
func (o *SettingDefinition) HasDisabledValue() bool {
	if o != nil && o.DisabledValue.IsSet() {
		return true
	}

	return false
}

// SetDisabledValue gets a reference to the given NullableString and assigns it to the DisabledValue field.
func (o *SettingDefinition) SetDisabledValue(v string) {
	o.DisabledValue.Set(&v)
}

// SetDisabledValueNil sets the value for DisabledValue to be an explicit nil
func (o *SettingDefinition) SetDisabledValueNil() {
	o.DisabledValue.Set(nil)
}

// UnsetDisabledValue ensures that no value is present for DisabledValue, not even an explicit nil
func (o *SettingDefinition) UnsetDisabledValue() {
	o.DisabledValue.Unset()
}

// GetInitialValue returns the InitialValue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SettingDefinition) GetInitialValue() string {
	if o == nil || IsNil(o.InitialValue.Get()) {
		var ret string
		return ret
	}
	return *o.InitialValue.Get()
}

// GetInitialValueOk returns a tuple with the InitialValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SettingDefinition) GetInitialValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.InitialValue.Get(), o.InitialValue.IsSet()
}

// HasInitialValue returns a boolean if a field has been set.
func (o *SettingDefinition) HasInitialValue() bool {
	if o != nil && o.InitialValue.IsSet() {
		return true
	}

	return false
}

// SetInitialValue gets a reference to the given NullableString and assigns it to the InitialValue field.
func (o *SettingDefinition) SetInitialValue(v string) {
	o.InitialValue.Set(&v)
}

// SetInitialValueNil sets the value for InitialValue to be an explicit nil
func (o *SettingDefinition) SetInitialValueNil() {
	o.InitialValue.Set(nil)
}

// UnsetInitialValue ensures that no value is present for InitialValue, not even an explicit nil
func (o *SettingDefinition) UnsetInitialValue() {
	o.InitialValue.Unset()
}

// GetValueMinimum returns the ValueMinimum field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SettingDefinition) GetValueMinimum() string {
	if o == nil || IsNil(o.ValueMinimum.Get()) {
		var ret string
		return ret
	}
	return *o.ValueMinimum.Get()
}

// GetValueMinimumOk returns a tuple with the ValueMinimum field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SettingDefinition) GetValueMinimumOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ValueMinimum.Get(), o.ValueMinimum.IsSet()
}

// HasValueMinimum returns a boolean if a field has been set.
func (o *SettingDefinition) HasValueMinimum() bool {
	if o != nil && o.ValueMinimum.IsSet() {
		return true
	}

	return false
}

// SetValueMinimum gets a reference to the given NullableString and assigns it to the ValueMinimum field.
func (o *SettingDefinition) SetValueMinimum(v string) {
	o.ValueMinimum.Set(&v)
}

// SetValueMinimumNil sets the value for ValueMinimum to be an explicit nil
func (o *SettingDefinition) SetValueMinimumNil() {
	o.ValueMinimum.Set(nil)
}

// UnsetValueMinimum ensures that no value is present for ValueMinimum, not even an explicit nil
func (o *SettingDefinition) UnsetValueMinimum() {
	o.ValueMinimum.Unset()
}

// GetValueMaximum returns the ValueMaximum field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SettingDefinition) GetValueMaximum() string {
	if o == nil || IsNil(o.ValueMaximum.Get()) {
		var ret string
		return ret
	}
	return *o.ValueMaximum.Get()
}

// GetValueMaximumOk returns a tuple with the ValueMaximum field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SettingDefinition) GetValueMaximumOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ValueMaximum.Get(), o.ValueMaximum.IsSet()
}

// HasValueMaximum returns a boolean if a field has been set.
func (o *SettingDefinition) HasValueMaximum() bool {
	if o != nil && o.ValueMaximum.IsSet() {
		return true
	}

	return false
}

// SetValueMaximum gets a reference to the given NullableString and assigns it to the ValueMaximum field.
func (o *SettingDefinition) SetValueMaximum(v string) {
	o.ValueMaximum.Set(&v)
}

// SetValueMaximumNil sets the value for ValueMaximum to be an explicit nil
func (o *SettingDefinition) SetValueMaximumNil() {
	o.ValueMaximum.Set(nil)
}

// UnsetValueMaximum ensures that no value is present for ValueMaximum, not even an explicit nil
func (o *SettingDefinition) UnsetValueMaximum() {
	o.ValueMaximum.Unset()
}

// GetValueValidator returns the ValueValidator field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SettingDefinition) GetValueValidator() string {
	if o == nil || IsNil(o.ValueValidator.Get()) {
		var ret string
		return ret
	}
	return *o.ValueValidator.Get()
}

// GetValueValidatorOk returns a tuple with the ValueValidator field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SettingDefinition) GetValueValidatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ValueValidator.Get(), o.ValueValidator.IsSet()
}

// HasValueValidator returns a boolean if a field has been set.
func (o *SettingDefinition) HasValueValidator() bool {
	if o != nil && o.ValueValidator.IsSet() {
		return true
	}

	return false
}

// SetValueValidator gets a reference to the given NullableString and assigns it to the ValueValidator field.
func (o *SettingDefinition) SetValueValidator(v string) {
	o.ValueValidator.Set(&v)
}

// SetValueValidatorNil sets the value for ValueValidator to be an explicit nil
func (o *SettingDefinition) SetValueValidatorNil() {
	o.ValueValidator.Set(nil)
}

// UnsetValueValidator ensures that no value is present for ValueValidator, not even an explicit nil
func (o *SettingDefinition) UnsetValueValidator() {
	o.ValueValidator.Unset()
}

// GetValidatorError returns the ValidatorError field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SettingDefinition) GetValidatorError() string {
	if o == nil || IsNil(o.ValidatorError.Get()) {
		var ret string
		return ret
	}
	return *o.ValidatorError.Get()
}

// GetValidatorErrorOk returns a tuple with the ValidatorError field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SettingDefinition) GetValidatorErrorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ValidatorError.Get(), o.ValidatorError.IsSet()
}

// HasValidatorError returns a boolean if a field has been set.
func (o *SettingDefinition) HasValidatorError() bool {
	if o != nil && o.ValidatorError.IsSet() {
		return true
	}

	return false
}

// SetValidatorError gets a reference to the given NullableString and assigns it to the ValidatorError field.
func (o *SettingDefinition) SetValidatorError(v string) {
	o.ValidatorError.Set(&v)
}

// SetValidatorErrorNil sets the value for ValidatorError to be an explicit nil
func (o *SettingDefinition) SetValidatorErrorNil() {
	o.ValidatorError.Set(nil)
}

// UnsetValidatorError ensures that no value is present for ValidatorError, not even an explicit nil
func (o *SettingDefinition) UnsetValidatorError() {
	o.ValidatorError.Unset()
}

// GetRelatedSettings returns the RelatedSettings field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SettingDefinition) GetRelatedSettings() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}
	return o.RelatedSettings
}

// GetRelatedSettingsOk returns a tuple with the RelatedSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SettingDefinition) GetRelatedSettingsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.RelatedSettings) {
		return nil, false
	}
	return &o.RelatedSettings, true
}

// HasRelatedSettings returns a boolean if a field has been set.
func (o *SettingDefinition) HasRelatedSettings() bool {
	if o != nil && IsNil(o.RelatedSettings) {
		return true
	}

	return false
}

// SetRelatedSettings gets a reference to the given map[string]string and assigns it to the RelatedSettings field.
func (o *SettingDefinition) SetRelatedSettings(v map[string]string) {
	o.RelatedSettings = v
}

// GetDependsOn returns the DependsOn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SettingDefinition) GetDependsOn() string {
	if o == nil || IsNil(o.DependsOn.Get()) {
		var ret string
		return ret
	}
	return *o.DependsOn.Get()
}

// GetDependsOnOk returns a tuple with the DependsOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SettingDefinition) GetDependsOnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DependsOn.Get(), o.DependsOn.IsSet()
}

// HasDependsOn returns a boolean if a field has been set.
func (o *SettingDefinition) HasDependsOn() bool {
	if o != nil && o.DependsOn.IsSet() {
		return true
	}

	return false
}

// SetDependsOn gets a reference to the given NullableString and assigns it to the DependsOn field.
func (o *SettingDefinition) SetDependsOn(v string) {
	o.DependsOn.Set(&v)
}

// SetDependsOnNil sets the value for DependsOn to be an explicit nil
func (o *SettingDefinition) SetDependsOnNil() {
	o.DependsOn.Set(nil)
}

// UnsetDependsOn ensures that no value is present for DependsOn, not even an explicit nil
func (o *SettingDefinition) UnsetDependsOn() {
	o.DependsOn.Unset()
}

// GetValueUnit returns the ValueUnit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SettingDefinition) GetValueUnit() string {
	if o == nil || IsNil(o.ValueUnit.Get()) {
		var ret string
		return ret
	}
	return *o.ValueUnit.Get()
}

// GetValueUnitOk returns a tuple with the ValueUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SettingDefinition) GetValueUnitOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ValueUnit.Get(), o.ValueUnit.IsSet()
}

// HasValueUnit returns a boolean if a field has been set.
func (o *SettingDefinition) HasValueUnit() bool {
	if o != nil && o.ValueUnit.IsSet() {
		return true
	}

	return false
}

// SetValueUnit gets a reference to the given NullableString and assigns it to the ValueUnit field.
func (o *SettingDefinition) SetValueUnit(v string) {
	o.ValueUnit.Set(&v)
}

// SetValueUnitNil sets the value for ValueUnit to be an explicit nil
func (o *SettingDefinition) SetValueUnitNil() {
	o.ValueUnit.Set(nil)
}

// UnsetValueUnit ensures that no value is present for ValueUnit, not even an explicit nil
func (o *SettingDefinition) UnsetValueUnit() {
	o.ValueUnit.Unset()
}

// GetAllowedText returns the AllowedText field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SettingDefinition) GetAllowedText() string {
	if o == nil || IsNil(o.AllowedText.Get()) {
		var ret string
		return ret
	}
	return *o.AllowedText.Get()
}

// GetAllowedTextOk returns a tuple with the AllowedText field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SettingDefinition) GetAllowedTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AllowedText.Get(), o.AllowedText.IsSet()
}

// HasAllowedText returns a boolean if a field has been set.
func (o *SettingDefinition) HasAllowedText() bool {
	if o != nil && o.AllowedText.IsSet() {
		return true
	}

	return false
}

// SetAllowedText gets a reference to the given NullableString and assigns it to the AllowedText field.
func (o *SettingDefinition) SetAllowedText(v string) {
	o.AllowedText.Set(&v)
}

// SetAllowedTextNil sets the value for AllowedText to be an explicit nil
func (o *SettingDefinition) SetAllowedTextNil() {
	o.AllowedText.Set(nil)
}

// UnsetAllowedText ensures that no value is present for AllowedText, not even an explicit nil
func (o *SettingDefinition) UnsetAllowedText() {
	o.AllowedText.Unset()
}

// GetDeniedText returns the DeniedText field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SettingDefinition) GetDeniedText() string {
	if o == nil || IsNil(o.DeniedText.Get()) {
		var ret string
		return ret
	}
	return *o.DeniedText.Get()
}

// GetDeniedTextOk returns a tuple with the DeniedText field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SettingDefinition) GetDeniedTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DeniedText.Get(), o.DeniedText.IsSet()
}

// HasDeniedText returns a boolean if a field has been set.
func (o *SettingDefinition) HasDeniedText() bool {
	if o != nil && o.DeniedText.IsSet() {
		return true
	}

	return false
}

// SetDeniedText gets a reference to the given NullableString and assigns it to the DeniedText field.
func (o *SettingDefinition) SetDeniedText(v string) {
	o.DeniedText.Set(&v)
}

// SetDeniedTextNil sets the value for DeniedText to be an explicit nil
func (o *SettingDefinition) SetDeniedTextNil() {
	o.DeniedText.Set(nil)
}

// UnsetDeniedText ensures that no value is present for DeniedText, not even an explicit nil
func (o *SettingDefinition) UnsetDeniedText() {
	o.DeniedText.Unset()
}

// GetEnumType returns the EnumType field value if set, zero value otherwise.
func (o *SettingDefinition) GetEnumType() EnumerationType {
	if o == nil || IsNil(o.EnumType) {
		var ret EnumerationType
		return ret
	}
	return *o.EnumType
}

// GetEnumTypeOk returns a tuple with the EnumType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingDefinition) GetEnumTypeOk() (*EnumerationType, bool) {
	if o == nil || IsNil(o.EnumType) {
		return nil, false
	}
	return o.EnumType, true
}

// HasEnumType returns a boolean if a field has been set.
func (o *SettingDefinition) HasEnumType() bool {
	if o != nil && !IsNil(o.EnumType) {
		return true
	}

	return false
}

// SetEnumType gets a reference to the given EnumerationType and assigns it to the EnumType field.
func (o *SettingDefinition) SetEnumType(v EnumerationType) {
	o.EnumType = &v
}

// GetVersionDetails returns the VersionDetails field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SettingDefinition) GetVersionDetails() []VersionDetail {
	if o == nil {
		var ret []VersionDetail
		return ret
	}
	return o.VersionDetails
}

// GetVersionDetailsOk returns a tuple with the VersionDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SettingDefinition) GetVersionDetailsOk() ([]VersionDetail, bool) {
	if o == nil || IsNil(o.VersionDetails) {
		return nil, false
	}
	return o.VersionDetails, true
}

// HasVersionDetails returns a boolean if a field has been set.
func (o *SettingDefinition) HasVersionDetails() bool {
	if o != nil && IsNil(o.VersionDetails) {
		return true
	}

	return false
}

// SetVersionDetails gets a reference to the given []VersionDetail and assigns it to the VersionDetails field.
func (o *SettingDefinition) SetVersionDetails(v []VersionDetail) {
	o.VersionDetails = v
}

// GetVersionCode returns the VersionCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SettingDefinition) GetVersionCode() string {
	if o == nil || IsNil(o.VersionCode.Get()) {
		var ret string
		return ret
	}
	return *o.VersionCode.Get()
}

// GetVersionCodeOk returns a tuple with the VersionCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SettingDefinition) GetVersionCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.VersionCode.Get(), o.VersionCode.IsSet()
}

// HasVersionCode returns a boolean if a field has been set.
func (o *SettingDefinition) HasVersionCode() bool {
	if o != nil && o.VersionCode.IsSet() {
		return true
	}

	return false
}

// SetVersionCode gets a reference to the given NullableString and assigns it to the VersionCode field.
func (o *SettingDefinition) SetVersionCode(v string) {
	o.VersionCode.Set(&v)
}

// SetVersionCodeNil sets the value for VersionCode to be an explicit nil
func (o *SettingDefinition) SetVersionCodeNil() {
	o.VersionCode.Set(nil)
}

// UnsetVersionCode ensures that no value is present for VersionCode, not even an explicit nil
func (o *SettingDefinition) UnsetVersionCode() {
	o.VersionCode.Unset()
}

// GetVdaVersions returns the VdaVersions field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SettingDefinition) GetVdaVersions() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.VdaVersions
}

// GetVdaVersionsOk returns a tuple with the VdaVersions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SettingDefinition) GetVdaVersionsOk() ([]string, bool) {
	if o == nil || IsNil(o.VdaVersions) {
		return nil, false
	}
	return o.VdaVersions, true
}

// HasVdaVersions returns a boolean if a field has been set.
func (o *SettingDefinition) HasVdaVersions() bool {
	if o != nil && IsNil(o.VdaVersions) {
		return true
	}

	return false
}

// SetVdaVersions gets a reference to the given []string and assigns it to the VdaVersions field.
func (o *SettingDefinition) SetVdaVersions(v []string) {
	o.VdaVersions = v
}

// GetGpoScope returns the GpoScope field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SettingDefinition) GetGpoScope() string {
	if o == nil || IsNil(o.GpoScope.Get()) {
		var ret string
		return ret
	}
	return *o.GpoScope.Get()
}

// GetGpoScopeOk returns a tuple with the GpoScope field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SettingDefinition) GetGpoScopeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.GpoScope.Get(), o.GpoScope.IsSet()
}

// HasGpoScope returns a boolean if a field has been set.
func (o *SettingDefinition) HasGpoScope() bool {
	if o != nil && o.GpoScope.IsSet() {
		return true
	}

	return false
}

// SetGpoScope gets a reference to the given NullableString and assigns it to the GpoScope field.
func (o *SettingDefinition) SetGpoScope(v string) {
	o.GpoScope.Set(&v)
}

// SetGpoScopeNil sets the value for GpoScope to be an explicit nil
func (o *SettingDefinition) SetGpoScopeNil() {
	o.GpoScope.Set(nil)
}

// UnsetGpoScope ensures that no value is present for GpoScope, not even an explicit nil
func (o *SettingDefinition) UnsetGpoScope() {
	o.GpoScope.Unset()
}

// GetProductGroup returns the ProductGroup field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SettingDefinition) GetProductGroup() string {
	if o == nil || IsNil(o.ProductGroup.Get()) {
		var ret string
		return ret
	}
	return *o.ProductGroup.Get()
}

// GetProductGroupOk returns a tuple with the ProductGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SettingDefinition) GetProductGroupOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProductGroup.Get(), o.ProductGroup.IsSet()
}

// HasProductGroup returns a boolean if a field has been set.
func (o *SettingDefinition) HasProductGroup() bool {
	if o != nil && o.ProductGroup.IsSet() {
		return true
	}

	return false
}

// SetProductGroup gets a reference to the given NullableString and assigns it to the ProductGroup field.
func (o *SettingDefinition) SetProductGroup(v string) {
	o.ProductGroup.Set(&v)
}

// SetProductGroupNil sets the value for ProductGroup to be an explicit nil
func (o *SettingDefinition) SetProductGroupNil() {
	o.ProductGroup.Set(nil)
}

// UnsetProductGroup ensures that no value is present for ProductGroup, not even an explicit nil
func (o *SettingDefinition) UnsetProductGroup() {
	o.ProductGroup.Unset()
}

func (o SettingDefinition) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SettingDefinition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.SettingName.IsSet() {
		toSerialize["settingName"] = o.SettingName.Get()
	}
	if o.EditorName.IsSet() {
		toSerialize["editorName"] = o.EditorName.Get()
	}
	if o.DisplayName.IsSet() {
		toSerialize["displayName"] = o.DisplayName.Get()
	}
	if o.Category.IsSet() {
		toSerialize["category"] = o.Category.Get()
	}
	if o.Explanation.IsSet() {
		toSerialize["explanation"] = o.Explanation.Get()
	}
	if !IsNil(o.IsUserSetting) {
		toSerialize["isUserSetting"] = o.IsUserSetting
	}
	if o.ValueType.IsSet() {
		toSerialize["valueType"] = o.ValueType.Get()
	}
	if !IsNil(o.IsEnableDisable) {
		toSerialize["isEnableDisable"] = o.IsEnableDisable
	}
	if !IsNil(o.IsToggled) {
		toSerialize["isToggled"] = o.IsToggled
	}
	if !IsNil(o.HideValueHint) {
		toSerialize["hideValueHint"] = o.HideValueHint
	}
	if !IsNil(o.ValueAsArray) {
		toSerialize["valueAsArray"] = o.ValueAsArray
	}
	if o.DefaultValue.IsSet() {
		toSerialize["defaultValue"] = o.DefaultValue.Get()
	}
	if o.SecureDefaultValue.IsSet() {
		toSerialize["secureDefaultValue"] = o.SecureDefaultValue.Get()
	}
	if o.DefaultSnip.IsSet() {
		toSerialize["defaultSnip"] = o.DefaultSnip.Get()
	}
	if o.DisabledValue.IsSet() {
		toSerialize["disabledValue"] = o.DisabledValue.Get()
	}
	if o.InitialValue.IsSet() {
		toSerialize["initialValue"] = o.InitialValue.Get()
	}
	if o.ValueMinimum.IsSet() {
		toSerialize["valueMinimum"] = o.ValueMinimum.Get()
	}
	if o.ValueMaximum.IsSet() {
		toSerialize["valueMaximum"] = o.ValueMaximum.Get()
	}
	if o.ValueValidator.IsSet() {
		toSerialize["valueValidator"] = o.ValueValidator.Get()
	}
	if o.ValidatorError.IsSet() {
		toSerialize["validatorError"] = o.ValidatorError.Get()
	}
	if o.RelatedSettings != nil {
		toSerialize["relatedSettings"] = o.RelatedSettings
	}
	if o.DependsOn.IsSet() {
		toSerialize["dependsOn"] = o.DependsOn.Get()
	}
	if o.ValueUnit.IsSet() {
		toSerialize["valueUnit"] = o.ValueUnit.Get()
	}
	if o.AllowedText.IsSet() {
		toSerialize["allowedText"] = o.AllowedText.Get()
	}
	if o.DeniedText.IsSet() {
		toSerialize["deniedText"] = o.DeniedText.Get()
	}
	if !IsNil(o.EnumType) {
		toSerialize["enumType"] = o.EnumType
	}
	if o.VersionDetails != nil {
		toSerialize["versionDetails"] = o.VersionDetails
	}
	if o.VersionCode.IsSet() {
		toSerialize["versionCode"] = o.VersionCode.Get()
	}
	if o.VdaVersions != nil {
		toSerialize["vdaVersions"] = o.VdaVersions
	}
	if o.GpoScope.IsSet() {
		toSerialize["gpoScope"] = o.GpoScope.Get()
	}
	if o.ProductGroup.IsSet() {
		toSerialize["productGroup"] = o.ProductGroup.Get()
	}
	return toSerialize, nil
}

type NullableSettingDefinition struct {
	value *SettingDefinition
	isSet bool
}

func (v NullableSettingDefinition) Get() *SettingDefinition {
	return v.value
}

func (v *NullableSettingDefinition) Set(val *SettingDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableSettingDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableSettingDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSettingDefinition(val *SettingDefinition) *NullableSettingDefinition {
	return &NullableSettingDefinition{value: val, isSet: true}
}

func (v NullableSettingDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSettingDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
