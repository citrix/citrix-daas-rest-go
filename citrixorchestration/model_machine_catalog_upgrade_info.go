/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
)

// checks if the MachineCatalogUpgradeInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MachineCatalogUpgradeInfo{}

// MachineCatalogUpgradeInfo Machine catalog level VDA upgrade status info. This is included in the machine catalog response model and used to render available upgrade options.
type MachineCatalogUpgradeInfo struct {
	UpgradeType *VdaUpgradeType `json:"UpgradeType,omitempty"`
	UpgradeState *VdaUpgradeState `json:"UpgradeState,omitempty"`
	UpgradeScheduleStatus *VdaUpgradeScheduleStatus `json:"UpgradeScheduleStatus,omitempty"`
	// Number of machines in the machine catalog with in-progress upgrades.
	UpgradeOngoingMachinesCount *int32 `json:"UpgradeOngoingMachinesCount,omitempty"`
	// Number of machines in the machine catalog with failed upgrades.
	UpgradeFailedMachinesCount *int32 `json:"UpgradeFailedMachinesCount,omitempty"`
}

// NewMachineCatalogUpgradeInfo instantiates a new MachineCatalogUpgradeInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMachineCatalogUpgradeInfo() *MachineCatalogUpgradeInfo {
	this := MachineCatalogUpgradeInfo{}
	return &this
}

// NewMachineCatalogUpgradeInfoWithDefaults instantiates a new MachineCatalogUpgradeInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMachineCatalogUpgradeInfoWithDefaults() *MachineCatalogUpgradeInfo {
	this := MachineCatalogUpgradeInfo{}
	return &this
}

// GetUpgradeType returns the UpgradeType field value if set, zero value otherwise.
func (o *MachineCatalogUpgradeInfo) GetUpgradeType() VdaUpgradeType {
	if o == nil || IsNil(o.UpgradeType) {
		var ret VdaUpgradeType
		return ret
	}
	return *o.UpgradeType
}

// GetUpgradeTypeOk returns a tuple with the UpgradeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MachineCatalogUpgradeInfo) GetUpgradeTypeOk() (*VdaUpgradeType, bool) {
	if o == nil || IsNil(o.UpgradeType) {
		return nil, false
	}
	return o.UpgradeType, true
}

// HasUpgradeType returns a boolean if a field has been set.
func (o *MachineCatalogUpgradeInfo) HasUpgradeType() bool {
	if o != nil && !IsNil(o.UpgradeType) {
		return true
	}

	return false
}

// SetUpgradeType gets a reference to the given VdaUpgradeType and assigns it to the UpgradeType field.
func (o *MachineCatalogUpgradeInfo) SetUpgradeType(v VdaUpgradeType) {
	o.UpgradeType = &v
}

// GetUpgradeState returns the UpgradeState field value if set, zero value otherwise.
func (o *MachineCatalogUpgradeInfo) GetUpgradeState() VdaUpgradeState {
	if o == nil || IsNil(o.UpgradeState) {
		var ret VdaUpgradeState
		return ret
	}
	return *o.UpgradeState
}

// GetUpgradeStateOk returns a tuple with the UpgradeState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MachineCatalogUpgradeInfo) GetUpgradeStateOk() (*VdaUpgradeState, bool) {
	if o == nil || IsNil(o.UpgradeState) {
		return nil, false
	}
	return o.UpgradeState, true
}

// HasUpgradeState returns a boolean if a field has been set.
func (o *MachineCatalogUpgradeInfo) HasUpgradeState() bool {
	if o != nil && !IsNil(o.UpgradeState) {
		return true
	}

	return false
}

// SetUpgradeState gets a reference to the given VdaUpgradeState and assigns it to the UpgradeState field.
func (o *MachineCatalogUpgradeInfo) SetUpgradeState(v VdaUpgradeState) {
	o.UpgradeState = &v
}

// GetUpgradeScheduleStatus returns the UpgradeScheduleStatus field value if set, zero value otherwise.
func (o *MachineCatalogUpgradeInfo) GetUpgradeScheduleStatus() VdaUpgradeScheduleStatus {
	if o == nil || IsNil(o.UpgradeScheduleStatus) {
		var ret VdaUpgradeScheduleStatus
		return ret
	}
	return *o.UpgradeScheduleStatus
}

// GetUpgradeScheduleStatusOk returns a tuple with the UpgradeScheduleStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MachineCatalogUpgradeInfo) GetUpgradeScheduleStatusOk() (*VdaUpgradeScheduleStatus, bool) {
	if o == nil || IsNil(o.UpgradeScheduleStatus) {
		return nil, false
	}
	return o.UpgradeScheduleStatus, true
}

// HasUpgradeScheduleStatus returns a boolean if a field has been set.
func (o *MachineCatalogUpgradeInfo) HasUpgradeScheduleStatus() bool {
	if o != nil && !IsNil(o.UpgradeScheduleStatus) {
		return true
	}

	return false
}

// SetUpgradeScheduleStatus gets a reference to the given VdaUpgradeScheduleStatus and assigns it to the UpgradeScheduleStatus field.
func (o *MachineCatalogUpgradeInfo) SetUpgradeScheduleStatus(v VdaUpgradeScheduleStatus) {
	o.UpgradeScheduleStatus = &v
}

// GetUpgradeOngoingMachinesCount returns the UpgradeOngoingMachinesCount field value if set, zero value otherwise.
func (o *MachineCatalogUpgradeInfo) GetUpgradeOngoingMachinesCount() int32 {
	if o == nil || IsNil(o.UpgradeOngoingMachinesCount) {
		var ret int32
		return ret
	}
	return *o.UpgradeOngoingMachinesCount
}

// GetUpgradeOngoingMachinesCountOk returns a tuple with the UpgradeOngoingMachinesCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MachineCatalogUpgradeInfo) GetUpgradeOngoingMachinesCountOk() (*int32, bool) {
	if o == nil || IsNil(o.UpgradeOngoingMachinesCount) {
		return nil, false
	}
	return o.UpgradeOngoingMachinesCount, true
}

// HasUpgradeOngoingMachinesCount returns a boolean if a field has been set.
func (o *MachineCatalogUpgradeInfo) HasUpgradeOngoingMachinesCount() bool {
	if o != nil && !IsNil(o.UpgradeOngoingMachinesCount) {
		return true
	}

	return false
}

// SetUpgradeOngoingMachinesCount gets a reference to the given int32 and assigns it to the UpgradeOngoingMachinesCount field.
func (o *MachineCatalogUpgradeInfo) SetUpgradeOngoingMachinesCount(v int32) {
	o.UpgradeOngoingMachinesCount = &v
}

// GetUpgradeFailedMachinesCount returns the UpgradeFailedMachinesCount field value if set, zero value otherwise.
func (o *MachineCatalogUpgradeInfo) GetUpgradeFailedMachinesCount() int32 {
	if o == nil || IsNil(o.UpgradeFailedMachinesCount) {
		var ret int32
		return ret
	}
	return *o.UpgradeFailedMachinesCount
}

// GetUpgradeFailedMachinesCountOk returns a tuple with the UpgradeFailedMachinesCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MachineCatalogUpgradeInfo) GetUpgradeFailedMachinesCountOk() (*int32, bool) {
	if o == nil || IsNil(o.UpgradeFailedMachinesCount) {
		return nil, false
	}
	return o.UpgradeFailedMachinesCount, true
}

// HasUpgradeFailedMachinesCount returns a boolean if a field has been set.
func (o *MachineCatalogUpgradeInfo) HasUpgradeFailedMachinesCount() bool {
	if o != nil && !IsNil(o.UpgradeFailedMachinesCount) {
		return true
	}

	return false
}

// SetUpgradeFailedMachinesCount gets a reference to the given int32 and assigns it to the UpgradeFailedMachinesCount field.
func (o *MachineCatalogUpgradeInfo) SetUpgradeFailedMachinesCount(v int32) {
	o.UpgradeFailedMachinesCount = &v
}

func (o MachineCatalogUpgradeInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MachineCatalogUpgradeInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UpgradeType) {
		toSerialize["UpgradeType"] = o.UpgradeType
	}
	if !IsNil(o.UpgradeState) {
		toSerialize["UpgradeState"] = o.UpgradeState
	}
	if !IsNil(o.UpgradeScheduleStatus) {
		toSerialize["UpgradeScheduleStatus"] = o.UpgradeScheduleStatus
	}
	if !IsNil(o.UpgradeOngoingMachinesCount) {
		toSerialize["UpgradeOngoingMachinesCount"] = o.UpgradeOngoingMachinesCount
	}
	if !IsNil(o.UpgradeFailedMachinesCount) {
		toSerialize["UpgradeFailedMachinesCount"] = o.UpgradeFailedMachinesCount
	}
	return toSerialize, nil
}

type NullableMachineCatalogUpgradeInfo struct {
	value *MachineCatalogUpgradeInfo
	isSet bool
}

func (v NullableMachineCatalogUpgradeInfo) Get() *MachineCatalogUpgradeInfo {
	return v.value
}

func (v *NullableMachineCatalogUpgradeInfo) Set(val *MachineCatalogUpgradeInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableMachineCatalogUpgradeInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableMachineCatalogUpgradeInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMachineCatalogUpgradeInfo(val *MachineCatalogUpgradeInfo) *NullableMachineCatalogUpgradeInfo {
	return &NullableMachineCatalogUpgradeInfo{value: val, isSet: true}
}

func (v NullableMachineCatalogUpgradeInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMachineCatalogUpgradeInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


