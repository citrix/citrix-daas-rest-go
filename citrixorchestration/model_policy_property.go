/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-onprem-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
	"fmt"
)

// PolicyProperty Names of policy properties that can be specified in a search.
type PolicyProperty string

// List of PolicyProperty
const (
	POLICYPROPERTY_DESCRIPTION PolicyProperty = "Description"
	POLICYPROPERTY_IS_ENABLED  PolicyProperty = "IsEnabled"
	POLICYPROPERTY_NAME        PolicyProperty = "Name"
	POLICYPROPERTY_PRIORITY    PolicyProperty = "Priority"
)

// All allowed values of PolicyProperty enum
var AllowedPolicyPropertyEnumValues = []PolicyProperty{
	"Description",
	"IsEnabled",
	"Name",
	"Priority",
}

func (v *PolicyProperty) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	*v = PolicyProperty(value)
	return nil
}

// NewPolicyPropertyFromValue returns a pointer to a valid PolicyProperty
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPolicyPropertyFromValue(v string) (*PolicyProperty, error) {
	ev := PolicyProperty(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PolicyProperty: valid values are %v", v, AllowedPolicyPropertyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PolicyProperty) IsValid() bool {
	for _, existing := range AllowedPolicyPropertyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PolicyProperty value
func (v PolicyProperty) Ptr() *PolicyProperty {
	return &v
}

type NullablePolicyProperty struct {
	value *PolicyProperty
	isSet bool
}

func (v NullablePolicyProperty) Get() *PolicyProperty {
	return v.value
}

func (v *NullablePolicyProperty) Set(val *PolicyProperty) {
	v.value = val
	v.isSet = true
}

func (v NullablePolicyProperty) IsSet() bool {
	return v.isSet
}

func (v *NullablePolicyProperty) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePolicyProperty(val *PolicyProperty) *NullablePolicyProperty {
	return &NullablePolicyProperty{value: val, isSet: true}
}

func (v NullablePolicyProperty) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePolicyProperty) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
