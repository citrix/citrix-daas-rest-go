/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-onprem-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
	"fmt"
)

// ImageVersionSpecStatus Status of an image version specification.
type ImageVersionSpecStatus string

// List of ImageVersionSpecStatus
const (
	IMAGEVERSIONSPECSTATUS_UNKNOWN ImageVersionSpecStatus = "Unknown"
	IMAGEVERSIONSPECSTATUS_IN_PROGRESS ImageVersionSpecStatus = "InProgress"
	IMAGEVERSIONSPECSTATUS_SUCCESS ImageVersionSpecStatus = "Success"
	IMAGEVERSIONSPECSTATUS_FAILED ImageVersionSpecStatus = "Failed"
)

// All allowed values of ImageVersionSpecStatus enum
var AllowedImageVersionSpecStatusEnumValues = []ImageVersionSpecStatus{
	"Unknown",
	"InProgress",
	"Success",
	"Failed",
}

func (v *ImageVersionSpecStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ImageVersionSpecStatus(value)
	for _, existing := range AllowedImageVersionSpecStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ImageVersionSpecStatus", value)
}

// NewImageVersionSpecStatusFromValue returns a pointer to a valid ImageVersionSpecStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewImageVersionSpecStatusFromValue(v string) (*ImageVersionSpecStatus, error) {
	ev := ImageVersionSpecStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ImageVersionSpecStatus: valid values are %v", v, AllowedImageVersionSpecStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ImageVersionSpecStatus) IsValid() bool {
	for _, existing := range AllowedImageVersionSpecStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ImageVersionSpecStatus value
func (v ImageVersionSpecStatus) Ptr() *ImageVersionSpecStatus {
	return &v
}

type NullableImageVersionSpecStatus struct {
	value *ImageVersionSpecStatus
	isSet bool
}

func (v NullableImageVersionSpecStatus) Get() *ImageVersionSpecStatus {
	return v.value
}

func (v *NullableImageVersionSpecStatus) Set(val *ImageVersionSpecStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableImageVersionSpecStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableImageVersionSpecStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImageVersionSpecStatus(val *ImageVersionSpecStatus) *NullableImageVersionSpecStatus {
	return &NullableImageVersionSpecStatus{value: val, isSet: true}
}

func (v NullableImageVersionSpecStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImageVersionSpecStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

