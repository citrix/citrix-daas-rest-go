/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-onprem-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
	"fmt"
)

// DatabaseAuthenticationMode
type DatabaseAuthenticationMode string

// List of DatabaseAuthenticationMode
const (
	DATABASEAUTHENTICATIONMODE_WINDOWS    DatabaseAuthenticationMode = "Windows"
	DATABASEAUTHENTICATIONMODE_SQL_SERVER DatabaseAuthenticationMode = "SQLServer"
)

// All allowed values of DatabaseAuthenticationMode enum
var AllowedDatabaseAuthenticationModeEnumValues = []DatabaseAuthenticationMode{
	"Windows",
	"SQLServer",
}

func (v *DatabaseAuthenticationMode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	*v = DatabaseAuthenticationMode(value)
	return nil
}

// NewDatabaseAuthenticationModeFromValue returns a pointer to a valid DatabaseAuthenticationMode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDatabaseAuthenticationModeFromValue(v string) (*DatabaseAuthenticationMode, error) {
	ev := DatabaseAuthenticationMode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DatabaseAuthenticationMode: valid values are %v", v, AllowedDatabaseAuthenticationModeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DatabaseAuthenticationMode) IsValid() bool {
	for _, existing := range AllowedDatabaseAuthenticationModeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DatabaseAuthenticationMode value
func (v DatabaseAuthenticationMode) Ptr() *DatabaseAuthenticationMode {
	return &v
}

type NullableDatabaseAuthenticationMode struct {
	value *DatabaseAuthenticationMode
	isSet bool
}

func (v NullableDatabaseAuthenticationMode) Get() *DatabaseAuthenticationMode {
	return v.value
}

func (v *NullableDatabaseAuthenticationMode) Set(val *DatabaseAuthenticationMode) {
	v.value = val
	v.isSet = true
}

func (v NullableDatabaseAuthenticationMode) IsSet() bool {
	return v.isSet
}

func (v *NullableDatabaseAuthenticationMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatabaseAuthenticationMode(val *DatabaseAuthenticationMode) *NullableDatabaseAuthenticationMode {
	return &NullableDatabaseAuthenticationMode{value: val, isSet: true}
}

func (v NullableDatabaseAuthenticationMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatabaseAuthenticationMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
