/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-onprem-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
	"fmt"
)

// ImageVersionStatus Status of an image version.
type ImageVersionStatus string

// List of ImageVersionStatus
const (
	IMAGEVERSIONSTATUS_UNKNOWN ImageVersionStatus = "Unknown"
	IMAGEVERSIONSTATUS_IN_PROGRESS ImageVersionStatus = "InProgress"
	IMAGEVERSIONSTATUS_SUCCESS ImageVersionStatus = "Success"
	IMAGEVERSIONSTATUS_FAILED ImageVersionStatus = "Failed"
)

// All allowed values of ImageVersionStatus enum
var AllowedImageVersionStatusEnumValues = []ImageVersionStatus{
	"Unknown",
	"InProgress",
	"Success",
	"Failed",
}

func (v *ImageVersionStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ImageVersionStatus(value)
	for _, existing := range AllowedImageVersionStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ImageVersionStatus", value)
}

// NewImageVersionStatusFromValue returns a pointer to a valid ImageVersionStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewImageVersionStatusFromValue(v string) (*ImageVersionStatus, error) {
	ev := ImageVersionStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ImageVersionStatus: valid values are %v", v, AllowedImageVersionStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ImageVersionStatus) IsValid() bool {
	for _, existing := range AllowedImageVersionStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ImageVersionStatus value
func (v ImageVersionStatus) Ptr() *ImageVersionStatus {
	return &v
}

type NullableImageVersionStatus struct {
	value *ImageVersionStatus
	isSet bool
}

func (v NullableImageVersionStatus) Get() *ImageVersionStatus {
	return v.value
}

func (v *NullableImageVersionStatus) Set(val *ImageVersionStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableImageVersionStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableImageVersionStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImageVersionStatus(val *ImageVersionStatus) *NullableImageVersionStatus {
	return &NullableImageVersionStatus{value: val, isSet: true}
}

func (v NullableImageVersionStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImageVersionStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

