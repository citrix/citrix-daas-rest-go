/*
Citrix Virtual Apps and Desktops REST API TECHPREVIEW

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: techpreview
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
)

// checks if the SettingResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SettingResponse{}

// SettingResponse Setting instance contract
type SettingResponse struct {
	// The policy GUID.
	PolicyGuid string `json:"policyGuid"`
	// The setting GUID.
	SettingGuid string `json:"settingGuid"`
	// Setting name. Is globally unique.
	SettingName *string `json:"settingName,omitempty"`
	// Indicate if the default setting value is used. If the setting data type is bool, this is ignored. For all other settings, if this value is true, the setting value is ignored and if this value is false, the setting value is used.
	UseDefault bool `json:"useDefault"`
	// The current setting value. For boolean types, the returned value is \"True\"/\"False\". The caller should assume the value is case-insensitive.
	SettingValue *string `json:"settingValue,omitempty"`
}

// NewSettingResponse instantiates a new SettingResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSettingResponse(policyGuid string, settingGuid string, useDefault bool) *SettingResponse {
	this := SettingResponse{}
	this.PolicyGuid = policyGuid
	this.SettingGuid = settingGuid
	this.UseDefault = useDefault
	return &this
}

// NewSettingResponseWithDefaults instantiates a new SettingResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSettingResponseWithDefaults() *SettingResponse {
	this := SettingResponse{}
	return &this
}

// GetPolicyGuid returns the PolicyGuid field value
func (o *SettingResponse) GetPolicyGuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PolicyGuid
}

// GetPolicyGuidOk returns a tuple with the PolicyGuid field value
// and a boolean to check if the value has been set.
func (o *SettingResponse) GetPolicyGuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PolicyGuid, true
}

// SetPolicyGuid sets field value
func (o *SettingResponse) SetPolicyGuid(v string) {
	o.PolicyGuid = v
}

// GetSettingGuid returns the SettingGuid field value
func (o *SettingResponse) GetSettingGuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SettingGuid
}

// GetSettingGuidOk returns a tuple with the SettingGuid field value
// and a boolean to check if the value has been set.
func (o *SettingResponse) GetSettingGuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SettingGuid, true
}

// SetSettingGuid sets field value
func (o *SettingResponse) SetSettingGuid(v string) {
	o.SettingGuid = v
}

// GetSettingName returns the SettingName field value if set, zero value otherwise.
func (o *SettingResponse) GetSettingName() string {
	if o == nil || IsNil(o.SettingName) {
		var ret string
		return ret
	}
	return *o.SettingName
}

// GetSettingNameOk returns a tuple with the SettingName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingResponse) GetSettingNameOk() (*string, bool) {
	if o == nil || IsNil(o.SettingName) {
		return nil, false
	}
	return o.SettingName, true
}

// HasSettingName returns a boolean if a field has been set.
func (o *SettingResponse) HasSettingName() bool {
	if o != nil && !IsNil(o.SettingName) {
		return true
	}

	return false
}

// SetSettingName gets a reference to the given string and assigns it to the SettingName field.
func (o *SettingResponse) SetSettingName(v string) {
	o.SettingName = &v
}

// GetUseDefault returns the UseDefault field value
func (o *SettingResponse) GetUseDefault() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.UseDefault
}

// GetUseDefaultOk returns a tuple with the UseDefault field value
// and a boolean to check if the value has been set.
func (o *SettingResponse) GetUseDefaultOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UseDefault, true
}

// SetUseDefault sets field value
func (o *SettingResponse) SetUseDefault(v bool) {
	o.UseDefault = v
}

// GetSettingValue returns the SettingValue field value if set, zero value otherwise.
func (o *SettingResponse) GetSettingValue() string {
	if o == nil || IsNil(o.SettingValue) {
		var ret string
		return ret
	}
	return *o.SettingValue
}

// GetSettingValueOk returns a tuple with the SettingValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingResponse) GetSettingValueOk() (*string, bool) {
	if o == nil || IsNil(o.SettingValue) {
		return nil, false
	}
	return o.SettingValue, true
}

// HasSettingValue returns a boolean if a field has been set.
func (o *SettingResponse) HasSettingValue() bool {
	if o != nil && !IsNil(o.SettingValue) {
		return true
	}

	return false
}

// SetSettingValue gets a reference to the given string and assigns it to the SettingValue field.
func (o *SettingResponse) SetSettingValue(v string) {
	o.SettingValue = &v
}

func (o SettingResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SettingResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["policyGuid"] = o.PolicyGuid
	toSerialize["settingGuid"] = o.SettingGuid
	if !IsNil(o.SettingName) {
		toSerialize["settingName"] = o.SettingName
	}
	toSerialize["useDefault"] = o.UseDefault
	if !IsNil(o.SettingValue) {
		toSerialize["settingValue"] = o.SettingValue
	}
	return toSerialize, nil
}

type NullableSettingResponse struct {
	value *SettingResponse
	isSet bool
}

func (v NullableSettingResponse) Get() *SettingResponse {
	return v.value
}

func (v *NullableSettingResponse) Set(val *SettingResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSettingResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSettingResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSettingResponse(val *SettingResponse) *NullableSettingResponse {
	return &NullableSettingResponse{value: val, isSet: true}
}

func (v NullableSettingResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSettingResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


