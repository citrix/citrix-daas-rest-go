/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
)

// checks if the SettingResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SettingResponse{}

// SettingResponse Setting instance contract
type SettingResponse struct {
	// The policy GUID.
	PolicyGuid *string `json:"policyGuid,omitempty"`
	// The setting GUID.
	SettingGuid *string `json:"settingGuid,omitempty"`
	// Setting name. Is globally unique.
	SettingName NullableString `json:"settingName,omitempty"`
	// Indicate if the default setting value is used. If the setting data type is bool, this is ignored. For all other settings, if this value is true, the setting value is ignored and if this value is false, the setting value is used.
	UseDefault *bool `json:"useDefault,omitempty"`
	// The current setting value. For boolean types, the returned value is \"True\"/\"False\". The caller should assume the value is case-insensitive.
	SettingValue NullableString `json:"settingValue,omitempty"`
}

// NewSettingResponse instantiates a new SettingResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSettingResponse() *SettingResponse {
	this := SettingResponse{}
	return &this
}

// NewSettingResponseWithDefaults instantiates a new SettingResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSettingResponseWithDefaults() *SettingResponse {
	this := SettingResponse{}
	return &this
}

// GetPolicyGuid returns the PolicyGuid field value if set, zero value otherwise.
func (o *SettingResponse) GetPolicyGuid() string {
	if o == nil || IsNil(o.PolicyGuid) {
		var ret string
		return ret
	}
	return *o.PolicyGuid
}

// GetPolicyGuidOk returns a tuple with the PolicyGuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingResponse) GetPolicyGuidOk() (*string, bool) {
	if o == nil || IsNil(o.PolicyGuid) {
		return nil, false
	}
	return o.PolicyGuid, true
}

// HasPolicyGuid returns a boolean if a field has been set.
func (o *SettingResponse) HasPolicyGuid() bool {
	if o != nil && !IsNil(o.PolicyGuid) {
		return true
	}

	return false
}

// SetPolicyGuid gets a reference to the given string and assigns it to the PolicyGuid field.
func (o *SettingResponse) SetPolicyGuid(v string) {
	o.PolicyGuid = &v
}

// GetSettingGuid returns the SettingGuid field value if set, zero value otherwise.
func (o *SettingResponse) GetSettingGuid() string {
	if o == nil || IsNil(o.SettingGuid) {
		var ret string
		return ret
	}
	return *o.SettingGuid
}

// GetSettingGuidOk returns a tuple with the SettingGuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingResponse) GetSettingGuidOk() (*string, bool) {
	if o == nil || IsNil(o.SettingGuid) {
		return nil, false
	}
	return o.SettingGuid, true
}

// HasSettingGuid returns a boolean if a field has been set.
func (o *SettingResponse) HasSettingGuid() bool {
	if o != nil && !IsNil(o.SettingGuid) {
		return true
	}

	return false
}

// SetSettingGuid gets a reference to the given string and assigns it to the SettingGuid field.
func (o *SettingResponse) SetSettingGuid(v string) {
	o.SettingGuid = &v
}

// GetSettingName returns the SettingName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SettingResponse) GetSettingName() string {
	if o == nil || IsNil(o.SettingName.Get()) {
		var ret string
		return ret
	}
	return *o.SettingName.Get()
}

// GetSettingNameOk returns a tuple with the SettingName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SettingResponse) GetSettingNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SettingName.Get(), o.SettingName.IsSet()
}

// HasSettingName returns a boolean if a field has been set.
func (o *SettingResponse) HasSettingName() bool {
	if o != nil && o.SettingName.IsSet() {
		return true
	}

	return false
}

// SetSettingName gets a reference to the given NullableString and assigns it to the SettingName field.
func (o *SettingResponse) SetSettingName(v string) {
	o.SettingName.Set(&v)
}
// SetSettingNameNil sets the value for SettingName to be an explicit nil
func (o *SettingResponse) SetSettingNameNil() {
	o.SettingName.Set(nil)
}

// UnsetSettingName ensures that no value is present for SettingName, not even an explicit nil
func (o *SettingResponse) UnsetSettingName() {
	o.SettingName.Unset()
}

// GetUseDefault returns the UseDefault field value if set, zero value otherwise.
func (o *SettingResponse) GetUseDefault() bool {
	if o == nil || IsNil(o.UseDefault) {
		var ret bool
		return ret
	}
	return *o.UseDefault
}

// GetUseDefaultOk returns a tuple with the UseDefault field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingResponse) GetUseDefaultOk() (*bool, bool) {
	if o == nil || IsNil(o.UseDefault) {
		return nil, false
	}
	return o.UseDefault, true
}

// HasUseDefault returns a boolean if a field has been set.
func (o *SettingResponse) HasUseDefault() bool {
	if o != nil && !IsNil(o.UseDefault) {
		return true
	}

	return false
}

// SetUseDefault gets a reference to the given bool and assigns it to the UseDefault field.
func (o *SettingResponse) SetUseDefault(v bool) {
	o.UseDefault = &v
}

// GetSettingValue returns the SettingValue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SettingResponse) GetSettingValue() string {
	if o == nil || IsNil(o.SettingValue.Get()) {
		var ret string
		return ret
	}
	return *o.SettingValue.Get()
}

// GetSettingValueOk returns a tuple with the SettingValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SettingResponse) GetSettingValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SettingValue.Get(), o.SettingValue.IsSet()
}

// HasSettingValue returns a boolean if a field has been set.
func (o *SettingResponse) HasSettingValue() bool {
	if o != nil && o.SettingValue.IsSet() {
		return true
	}

	return false
}

// SetSettingValue gets a reference to the given NullableString and assigns it to the SettingValue field.
func (o *SettingResponse) SetSettingValue(v string) {
	o.SettingValue.Set(&v)
}
// SetSettingValueNil sets the value for SettingValue to be an explicit nil
func (o *SettingResponse) SetSettingValueNil() {
	o.SettingValue.Set(nil)
}

// UnsetSettingValue ensures that no value is present for SettingValue, not even an explicit nil
func (o *SettingResponse) UnsetSettingValue() {
	o.SettingValue.Unset()
}

func (o SettingResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SettingResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PolicyGuid) {
		toSerialize["policyGuid"] = o.PolicyGuid
	}
	if !IsNil(o.SettingGuid) {
		toSerialize["settingGuid"] = o.SettingGuid
	}
	if o.SettingName.IsSet() {
		toSerialize["settingName"] = o.SettingName.Get()
	}
	if !IsNil(o.UseDefault) {
		toSerialize["useDefault"] = o.UseDefault
	}
	if o.SettingValue.IsSet() {
		toSerialize["settingValue"] = o.SettingValue.Get()
	}
	return toSerialize, nil
}

type NullableSettingResponse struct {
	value *SettingResponse
	isSet bool
}

func (v NullableSettingResponse) Get() *SettingResponse {
	return v.value
}

func (v *NullableSettingResponse) Set(val *SettingResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSettingResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSettingResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSettingResponse(val *SettingResponse) *NullableSettingResponse {
	return &NullableSettingResponse{value: val, isSet: true}
}

func (v NullableSettingResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSettingResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


