/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-onprem-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
)

// checks if the UnitPriceResponseModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UnitPriceResponseModel{}

// UnitPriceResponseModel The response object indicating the unit price. The unit price refers to the cost per unit of a billing component.
type UnitPriceResponseModel struct {
	// Gets or sets the price.
	Price NullableFloat32 `json:"Price,omitempty"`
	// Gets or sets the unit of measure, such as per hour, per month, etc.
	UnitOfMeasure NullableString `json:"UnitOfMeasure,omitempty"`
	// Gets or sets the currency, such as USD, EUR, etc.
	Currency NullableString `json:"Currency,omitempty"`
}

// NewUnitPriceResponseModel instantiates a new UnitPriceResponseModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUnitPriceResponseModel() *UnitPriceResponseModel {
	this := UnitPriceResponseModel{}
	return &this
}

// NewUnitPriceResponseModelWithDefaults instantiates a new UnitPriceResponseModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUnitPriceResponseModelWithDefaults() *UnitPriceResponseModel {
	this := UnitPriceResponseModel{}
	return &this
}

// GetPrice returns the Price field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UnitPriceResponseModel) GetPrice() float32 {
	if o == nil || IsNil(o.Price.Get()) {
		var ret float32
		return ret
	}
	return *o.Price.Get()
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UnitPriceResponseModel) GetPriceOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Price.Get(), o.Price.IsSet()
}

// HasPrice returns a boolean if a field has been set.
func (o *UnitPriceResponseModel) HasPrice() bool {
	if o != nil && o.Price.IsSet() {
		return true
	}

	return false
}

// SetPrice gets a reference to the given NullableFloat32 and assigns it to the Price field.
func (o *UnitPriceResponseModel) SetPrice(v float32) {
	o.Price.Set(&v)
}
// SetPriceNil sets the value for Price to be an explicit nil
func (o *UnitPriceResponseModel) SetPriceNil() {
	o.Price.Set(nil)
}

// UnsetPrice ensures that no value is present for Price, not even an explicit nil
func (o *UnitPriceResponseModel) UnsetPrice() {
	o.Price.Unset()
}

// GetUnitOfMeasure returns the UnitOfMeasure field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UnitPriceResponseModel) GetUnitOfMeasure() string {
	if o == nil || IsNil(o.UnitOfMeasure.Get()) {
		var ret string
		return ret
	}
	return *o.UnitOfMeasure.Get()
}

// GetUnitOfMeasureOk returns a tuple with the UnitOfMeasure field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UnitPriceResponseModel) GetUnitOfMeasureOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UnitOfMeasure.Get(), o.UnitOfMeasure.IsSet()
}

// HasUnitOfMeasure returns a boolean if a field has been set.
func (o *UnitPriceResponseModel) HasUnitOfMeasure() bool {
	if o != nil && o.UnitOfMeasure.IsSet() {
		return true
	}

	return false
}

// SetUnitOfMeasure gets a reference to the given NullableString and assigns it to the UnitOfMeasure field.
func (o *UnitPriceResponseModel) SetUnitOfMeasure(v string) {
	o.UnitOfMeasure.Set(&v)
}
// SetUnitOfMeasureNil sets the value for UnitOfMeasure to be an explicit nil
func (o *UnitPriceResponseModel) SetUnitOfMeasureNil() {
	o.UnitOfMeasure.Set(nil)
}

// UnsetUnitOfMeasure ensures that no value is present for UnitOfMeasure, not even an explicit nil
func (o *UnitPriceResponseModel) UnsetUnitOfMeasure() {
	o.UnitOfMeasure.Unset()
}

// GetCurrency returns the Currency field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UnitPriceResponseModel) GetCurrency() string {
	if o == nil || IsNil(o.Currency.Get()) {
		var ret string
		return ret
	}
	return *o.Currency.Get()
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UnitPriceResponseModel) GetCurrencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Currency.Get(), o.Currency.IsSet()
}

// HasCurrency returns a boolean if a field has been set.
func (o *UnitPriceResponseModel) HasCurrency() bool {
	if o != nil && o.Currency.IsSet() {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given NullableString and assigns it to the Currency field.
func (o *UnitPriceResponseModel) SetCurrency(v string) {
	o.Currency.Set(&v)
}
// SetCurrencyNil sets the value for Currency to be an explicit nil
func (o *UnitPriceResponseModel) SetCurrencyNil() {
	o.Currency.Set(nil)
}

// UnsetCurrency ensures that no value is present for Currency, not even an explicit nil
func (o *UnitPriceResponseModel) UnsetCurrency() {
	o.Currency.Unset()
}

func (o UnitPriceResponseModel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UnitPriceResponseModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Price.IsSet() {
		toSerialize["Price"] = o.Price.Get()
	}
	if o.UnitOfMeasure.IsSet() {
		toSerialize["UnitOfMeasure"] = o.UnitOfMeasure.Get()
	}
	if o.Currency.IsSet() {
		toSerialize["Currency"] = o.Currency.Get()
	}
	return toSerialize, nil
}

type NullableUnitPriceResponseModel struct {
	value *UnitPriceResponseModel
	isSet bool
}

func (v NullableUnitPriceResponseModel) Get() *UnitPriceResponseModel {
	return v.value
}

func (v *NullableUnitPriceResponseModel) Set(val *UnitPriceResponseModel) {
	v.value = val
	v.isSet = true
}

func (v NullableUnitPriceResponseModel) IsSet() bool {
	return v.isSet
}

func (v *NullableUnitPriceResponseModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUnitPriceResponseModel(val *UnitPriceResponseModel) *NullableUnitPriceResponseModel {
	return &NullableUnitPriceResponseModel{value: val, isSet: true}
}

func (v NullableUnitPriceResponseModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUnitPriceResponseModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


