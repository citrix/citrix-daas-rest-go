/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-onprem-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
)

// checks if the IdentityUserResponseModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IdentityUserResponseModel{}

// IdentityUserResponseModel struct for IdentityUserResponseModel
type IdentityUserResponseModel struct {
	// The Domain the object belongs to. NOTE: When doing a forest level search, the domain property is populated only if the object contains a SID and the SID was requested as property to be fetched.
	Domain NullableString `json:"Domain,omitempty"`
	// The forest the object belongs to.
	Forest NullableString `json:"Forest,omitempty"`
	// The GUID of the object, the GUID is unique across the enterprise and anywhere else.
	Guid NullableString `json:"Guid,omitempty"`
	// The Distinguished name of the object. Distinguished names (DNs) are unique and they unambiguously identify objects in the directory.
	DistinguishedName NullableString `json:"DistinguishedName,omitempty"`
	// The unique distinguished name of the object in canonical format.
	CanonicalName NullableString `json:"CanonicalName,omitempty"`
	// Set to True during a bulk identity lookup operation. For individual identity lookup, usually an exception will be thrown.
	PossibleLookupFailure *bool `json:"PossibleLookupFailure,omitempty"`
	// Domain controller that performed the add/update operation on this object
	DirectoryServer NullableString `json:"DirectoryServer,omitempty"`
	// Display name of the user or group. Usually something like \"John Q. Doe\".
	DisplayName string `json:"DisplayName"`
	// Fully qualified sAMAccountName of the User or Group object (including domain).
	SamName NullableString `json:"SamName,omitempty"`
	// Unqualified SAM name (Directory property) of the User or Group object.  Does not include the domain. The sAMAccountName is unique within a domain.
	SamAccountName NullableString `json:"SamAccountName,omitempty"`
	// The common name associated with the User or Group object.
	CommonName NullableString `json:"CommonName,omitempty"`
	// The user principal name of a User object. The UPN must be unique among all security principal objects within the directory forest.
	PrincipalName NullableString `json:"PrincipalName,omitempty"`
	// The Object Identifier associated with the User or Group object.
	Oid NullableString `json:"Oid,omitempty"`
	// The Security Identifier associated with the User or Group object.
	Sid NullableString `json:"Sid,omitempty"`
	// The User Identity.
	UserIdentity NullableString `json:"UserIdentity,omitempty"`
	// Security Identifiers of groups of which the object is a member.
	GroupSids []string `json:"GroupSids,omitempty"`
	// Security Identifiers of resources to which the object is explicitly denied access.
	DenyOnlySids []string `json:"DenyOnlySids,omitempty"`
	// Indicates whether the password can expire on this User object.
	PasswordCanExpire NullableBool `json:"PasswordCanExpire,omitempty"`
	// Indicates the number of days before the password can expire on this User object.
	DaysUntilPasswordExpiry NullableInt64 `json:"DaysUntilPasswordExpiry,omitempty"`
	// Indicates whether this a built-in object.
	IsBuiltIn NullableBool `json:"IsBuiltIn,omitempty"`
	// Indicates whether this is a User or Group object.
	IsGroup NullableBool `json:"IsGroup,omitempty"`
	// The name of the User or Group object.
	Name NullableString `json:"Name,omitempty"`
	// The street address associated with the User object.
	StreetAddress NullableString `json:"StreetAddress,omitempty"`
	// The city associated with the User object.
	City NullableString `json:"City,omitempty"`
	// The state associated with the User object.
	State NullableString `json:"State,omitempty"`
	// The country associated with the user object.
	Country NullableString `json:"Country,omitempty"`
	// The e-mail address associated with the user object.
	Mail NullableString `json:"Mail,omitempty"`
	// The telephone number associated with the user object.
	TelephoneNumber NullableString `json:"TelephoneNumber,omitempty"`
	// The home telephone number associated with the user object.
	HomePhone NullableString `json:"HomePhone,omitempty"`
	// The mobile telephone number associated with the user object.
	Mobile NullableString `json:"Mobile,omitempty"`
	// Indicates whether the User object is disabled. NOTE that this is opposite of the low-level SDK, which has \"IsDisabled\". By changing to \"Enabled\" it avoids a confusing double-negative.  It also matches all other SDK objects by using \"Enabled\" rather than \"IsEnabled\".
	Enabled NullableBool `json:"Enabled,omitempty"`
	// Indicates whether the User object is locked.
	Locked NullableBool `json:"Locked,omitempty"`
	// Properties fetched and populated in the User or Group object.  This is a bitfield indicating the fetched properties.
	PropertiesFetched int32                           `json:"PropertiesFetched"`
	Claims            *IdentityClaimsResponseModel    `json:"Claims,omitempty"`
	Directory         *IdentityDirectoryResponseModel `json:"Directory,omitempty"`
}

type _IdentityUserResponseModel IdentityUserResponseModel

// NewIdentityUserResponseModel instantiates a new IdentityUserResponseModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdentityUserResponseModel(displayName string, propertiesFetched int32) *IdentityUserResponseModel {
	this := IdentityUserResponseModel{}
	this.DisplayName = displayName
	this.PropertiesFetched = propertiesFetched
	return &this
}

// NewIdentityUserResponseModelWithDefaults instantiates a new IdentityUserResponseModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdentityUserResponseModelWithDefaults() *IdentityUserResponseModel {
	this := IdentityUserResponseModel{}
	return &this
}

// GetDomain returns the Domain field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IdentityUserResponseModel) GetDomain() string {
	if o == nil || IsNil(o.Domain.Get()) {
		var ret string
		return ret
	}
	return *o.Domain.Get()
}

// GetDomainOk returns a tuple with the Domain field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IdentityUserResponseModel) GetDomainOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Domain.Get(), o.Domain.IsSet()
}

// HasDomain returns a boolean if a field has been set.
func (o *IdentityUserResponseModel) HasDomain() bool {
	if o != nil && o.Domain.IsSet() {
		return true
	}

	return false
}

// SetDomain gets a reference to the given NullableString and assigns it to the Domain field.
func (o *IdentityUserResponseModel) SetDomain(v string) {
	o.Domain.Set(&v)
}

// SetDomainNil sets the value for Domain to be an explicit nil
func (o *IdentityUserResponseModel) SetDomainNil() {
	o.Domain.Set(nil)
}

// UnsetDomain ensures that no value is present for Domain, not even an explicit nil
func (o *IdentityUserResponseModel) UnsetDomain() {
	o.Domain.Unset()
}

// GetForest returns the Forest field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IdentityUserResponseModel) GetForest() string {
	if o == nil || IsNil(o.Forest.Get()) {
		var ret string
		return ret
	}
	return *o.Forest.Get()
}

// GetForestOk returns a tuple with the Forest field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IdentityUserResponseModel) GetForestOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Forest.Get(), o.Forest.IsSet()
}

// HasForest returns a boolean if a field has been set.
func (o *IdentityUserResponseModel) HasForest() bool {
	if o != nil && o.Forest.IsSet() {
		return true
	}

	return false
}

// SetForest gets a reference to the given NullableString and assigns it to the Forest field.
func (o *IdentityUserResponseModel) SetForest(v string) {
	o.Forest.Set(&v)
}

// SetForestNil sets the value for Forest to be an explicit nil
func (o *IdentityUserResponseModel) SetForestNil() {
	o.Forest.Set(nil)
}

// UnsetForest ensures that no value is present for Forest, not even an explicit nil
func (o *IdentityUserResponseModel) UnsetForest() {
	o.Forest.Unset()
}

// GetGuid returns the Guid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IdentityUserResponseModel) GetGuid() string {
	if o == nil || IsNil(o.Guid.Get()) {
		var ret string
		return ret
	}
	return *o.Guid.Get()
}

// GetGuidOk returns a tuple with the Guid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IdentityUserResponseModel) GetGuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Guid.Get(), o.Guid.IsSet()
}

// HasGuid returns a boolean if a field has been set.
func (o *IdentityUserResponseModel) HasGuid() bool {
	if o != nil && o.Guid.IsSet() {
		return true
	}

	return false
}

// SetGuid gets a reference to the given NullableString and assigns it to the Guid field.
func (o *IdentityUserResponseModel) SetGuid(v string) {
	o.Guid.Set(&v)
}

// SetGuidNil sets the value for Guid to be an explicit nil
func (o *IdentityUserResponseModel) SetGuidNil() {
	o.Guid.Set(nil)
}

// UnsetGuid ensures that no value is present for Guid, not even an explicit nil
func (o *IdentityUserResponseModel) UnsetGuid() {
	o.Guid.Unset()
}

// GetDistinguishedName returns the DistinguishedName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IdentityUserResponseModel) GetDistinguishedName() string {
	if o == nil || IsNil(o.DistinguishedName.Get()) {
		var ret string
		return ret
	}
	return *o.DistinguishedName.Get()
}

// GetDistinguishedNameOk returns a tuple with the DistinguishedName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IdentityUserResponseModel) GetDistinguishedNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DistinguishedName.Get(), o.DistinguishedName.IsSet()
}

// HasDistinguishedName returns a boolean if a field has been set.
func (o *IdentityUserResponseModel) HasDistinguishedName() bool {
	if o != nil && o.DistinguishedName.IsSet() {
		return true
	}

	return false
}

// SetDistinguishedName gets a reference to the given NullableString and assigns it to the DistinguishedName field.
func (o *IdentityUserResponseModel) SetDistinguishedName(v string) {
	o.DistinguishedName.Set(&v)
}

// SetDistinguishedNameNil sets the value for DistinguishedName to be an explicit nil
func (o *IdentityUserResponseModel) SetDistinguishedNameNil() {
	o.DistinguishedName.Set(nil)
}

// UnsetDistinguishedName ensures that no value is present for DistinguishedName, not even an explicit nil
func (o *IdentityUserResponseModel) UnsetDistinguishedName() {
	o.DistinguishedName.Unset()
}

// GetCanonicalName returns the CanonicalName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IdentityUserResponseModel) GetCanonicalName() string {
	if o == nil || IsNil(o.CanonicalName.Get()) {
		var ret string
		return ret
	}
	return *o.CanonicalName.Get()
}

// GetCanonicalNameOk returns a tuple with the CanonicalName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IdentityUserResponseModel) GetCanonicalNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CanonicalName.Get(), o.CanonicalName.IsSet()
}

// HasCanonicalName returns a boolean if a field has been set.
func (o *IdentityUserResponseModel) HasCanonicalName() bool {
	if o != nil && o.CanonicalName.IsSet() {
		return true
	}

	return false
}

// SetCanonicalName gets a reference to the given NullableString and assigns it to the CanonicalName field.
func (o *IdentityUserResponseModel) SetCanonicalName(v string) {
	o.CanonicalName.Set(&v)
}

// SetCanonicalNameNil sets the value for CanonicalName to be an explicit nil
func (o *IdentityUserResponseModel) SetCanonicalNameNil() {
	o.CanonicalName.Set(nil)
}

// UnsetCanonicalName ensures that no value is present for CanonicalName, not even an explicit nil
func (o *IdentityUserResponseModel) UnsetCanonicalName() {
	o.CanonicalName.Unset()
}

// GetPossibleLookupFailure returns the PossibleLookupFailure field value if set, zero value otherwise.
func (o *IdentityUserResponseModel) GetPossibleLookupFailure() bool {
	if o == nil || IsNil(o.PossibleLookupFailure) {
		var ret bool
		return ret
	}
	return *o.PossibleLookupFailure
}

// GetPossibleLookupFailureOk returns a tuple with the PossibleLookupFailure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityUserResponseModel) GetPossibleLookupFailureOk() (*bool, bool) {
	if o == nil || IsNil(o.PossibleLookupFailure) {
		return nil, false
	}
	return o.PossibleLookupFailure, true
}

// HasPossibleLookupFailure returns a boolean if a field has been set.
func (o *IdentityUserResponseModel) HasPossibleLookupFailure() bool {
	if o != nil && !IsNil(o.PossibleLookupFailure) {
		return true
	}

	return false
}

// SetPossibleLookupFailure gets a reference to the given bool and assigns it to the PossibleLookupFailure field.
func (o *IdentityUserResponseModel) SetPossibleLookupFailure(v bool) {
	o.PossibleLookupFailure = &v
}

// GetDirectoryServer returns the DirectoryServer field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IdentityUserResponseModel) GetDirectoryServer() string {
	if o == nil || IsNil(o.DirectoryServer.Get()) {
		var ret string
		return ret
	}
	return *o.DirectoryServer.Get()
}

// GetDirectoryServerOk returns a tuple with the DirectoryServer field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IdentityUserResponseModel) GetDirectoryServerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DirectoryServer.Get(), o.DirectoryServer.IsSet()
}

// HasDirectoryServer returns a boolean if a field has been set.
func (o *IdentityUserResponseModel) HasDirectoryServer() bool {
	if o != nil && o.DirectoryServer.IsSet() {
		return true
	}

	return false
}

// SetDirectoryServer gets a reference to the given NullableString and assigns it to the DirectoryServer field.
func (o *IdentityUserResponseModel) SetDirectoryServer(v string) {
	o.DirectoryServer.Set(&v)
}

// SetDirectoryServerNil sets the value for DirectoryServer to be an explicit nil
func (o *IdentityUserResponseModel) SetDirectoryServerNil() {
	o.DirectoryServer.Set(nil)
}

// UnsetDirectoryServer ensures that no value is present for DirectoryServer, not even an explicit nil
func (o *IdentityUserResponseModel) UnsetDirectoryServer() {
	o.DirectoryServer.Unset()
}

// GetDisplayName returns the DisplayName field value
func (o *IdentityUserResponseModel) GetDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
func (o *IdentityUserResponseModel) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayName, true
}

// SetDisplayName sets field value
func (o *IdentityUserResponseModel) SetDisplayName(v string) {
	o.DisplayName = v
}

// GetSamName returns the SamName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IdentityUserResponseModel) GetSamName() string {
	if o == nil || IsNil(o.SamName.Get()) {
		var ret string
		return ret
	}
	return *o.SamName.Get()
}

// GetSamNameOk returns a tuple with the SamName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IdentityUserResponseModel) GetSamNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SamName.Get(), o.SamName.IsSet()
}

// HasSamName returns a boolean if a field has been set.
func (o *IdentityUserResponseModel) HasSamName() bool {
	if o != nil && o.SamName.IsSet() {
		return true
	}

	return false
}

// SetSamName gets a reference to the given NullableString and assigns it to the SamName field.
func (o *IdentityUserResponseModel) SetSamName(v string) {
	o.SamName.Set(&v)
}

// SetSamNameNil sets the value for SamName to be an explicit nil
func (o *IdentityUserResponseModel) SetSamNameNil() {
	o.SamName.Set(nil)
}

// UnsetSamName ensures that no value is present for SamName, not even an explicit nil
func (o *IdentityUserResponseModel) UnsetSamName() {
	o.SamName.Unset()
}

// GetSamAccountName returns the SamAccountName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IdentityUserResponseModel) GetSamAccountName() string {
	if o == nil || IsNil(o.SamAccountName.Get()) {
		var ret string
		return ret
	}
	return *o.SamAccountName.Get()
}

// GetSamAccountNameOk returns a tuple with the SamAccountName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IdentityUserResponseModel) GetSamAccountNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SamAccountName.Get(), o.SamAccountName.IsSet()
}

// HasSamAccountName returns a boolean if a field has been set.
func (o *IdentityUserResponseModel) HasSamAccountName() bool {
	if o != nil && o.SamAccountName.IsSet() {
		return true
	}

	return false
}

// SetSamAccountName gets a reference to the given NullableString and assigns it to the SamAccountName field.
func (o *IdentityUserResponseModel) SetSamAccountName(v string) {
	o.SamAccountName.Set(&v)
}

// SetSamAccountNameNil sets the value for SamAccountName to be an explicit nil
func (o *IdentityUserResponseModel) SetSamAccountNameNil() {
	o.SamAccountName.Set(nil)
}

// UnsetSamAccountName ensures that no value is present for SamAccountName, not even an explicit nil
func (o *IdentityUserResponseModel) UnsetSamAccountName() {
	o.SamAccountName.Unset()
}

// GetCommonName returns the CommonName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IdentityUserResponseModel) GetCommonName() string {
	if o == nil || IsNil(o.CommonName.Get()) {
		var ret string
		return ret
	}
	return *o.CommonName.Get()
}

// GetCommonNameOk returns a tuple with the CommonName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IdentityUserResponseModel) GetCommonNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CommonName.Get(), o.CommonName.IsSet()
}

// HasCommonName returns a boolean if a field has been set.
func (o *IdentityUserResponseModel) HasCommonName() bool {
	if o != nil && o.CommonName.IsSet() {
		return true
	}

	return false
}

// SetCommonName gets a reference to the given NullableString and assigns it to the CommonName field.
func (o *IdentityUserResponseModel) SetCommonName(v string) {
	o.CommonName.Set(&v)
}

// SetCommonNameNil sets the value for CommonName to be an explicit nil
func (o *IdentityUserResponseModel) SetCommonNameNil() {
	o.CommonName.Set(nil)
}

// UnsetCommonName ensures that no value is present for CommonName, not even an explicit nil
func (o *IdentityUserResponseModel) UnsetCommonName() {
	o.CommonName.Unset()
}

// GetPrincipalName returns the PrincipalName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IdentityUserResponseModel) GetPrincipalName() string {
	if o == nil || IsNil(o.PrincipalName.Get()) {
		var ret string
		return ret
	}
	return *o.PrincipalName.Get()
}

// GetPrincipalNameOk returns a tuple with the PrincipalName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IdentityUserResponseModel) GetPrincipalNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PrincipalName.Get(), o.PrincipalName.IsSet()
}

// HasPrincipalName returns a boolean if a field has been set.
func (o *IdentityUserResponseModel) HasPrincipalName() bool {
	if o != nil && o.PrincipalName.IsSet() {
		return true
	}

	return false
}

// SetPrincipalName gets a reference to the given NullableString and assigns it to the PrincipalName field.
func (o *IdentityUserResponseModel) SetPrincipalName(v string) {
	o.PrincipalName.Set(&v)
}

// SetPrincipalNameNil sets the value for PrincipalName to be an explicit nil
func (o *IdentityUserResponseModel) SetPrincipalNameNil() {
	o.PrincipalName.Set(nil)
}

// UnsetPrincipalName ensures that no value is present for PrincipalName, not even an explicit nil
func (o *IdentityUserResponseModel) UnsetPrincipalName() {
	o.PrincipalName.Unset()
}

// GetOid returns the Oid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IdentityUserResponseModel) GetOid() string {
	if o == nil || IsNil(o.Oid.Get()) {
		var ret string
		return ret
	}
	return *o.Oid.Get()
}

// GetOidOk returns a tuple with the Oid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IdentityUserResponseModel) GetOidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Oid.Get(), o.Oid.IsSet()
}

// HasOid returns a boolean if a field has been set.
func (o *IdentityUserResponseModel) HasOid() bool {
	if o != nil && o.Oid.IsSet() {
		return true
	}

	return false
}

// SetOid gets a reference to the given NullableString and assigns it to the Oid field.
func (o *IdentityUserResponseModel) SetOid(v string) {
	o.Oid.Set(&v)
}

// SetOidNil sets the value for Oid to be an explicit nil
func (o *IdentityUserResponseModel) SetOidNil() {
	o.Oid.Set(nil)
}

// UnsetOid ensures that no value is present for Oid, not even an explicit nil
func (o *IdentityUserResponseModel) UnsetOid() {
	o.Oid.Unset()
}

// GetSid returns the Sid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IdentityUserResponseModel) GetSid() string {
	if o == nil || IsNil(o.Sid.Get()) {
		var ret string
		return ret
	}
	return *o.Sid.Get()
}

// GetSidOk returns a tuple with the Sid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IdentityUserResponseModel) GetSidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Sid.Get(), o.Sid.IsSet()
}

// HasSid returns a boolean if a field has been set.
func (o *IdentityUserResponseModel) HasSid() bool {
	if o != nil && o.Sid.IsSet() {
		return true
	}

	return false
}

// SetSid gets a reference to the given NullableString and assigns it to the Sid field.
func (o *IdentityUserResponseModel) SetSid(v string) {
	o.Sid.Set(&v)
}

// SetSidNil sets the value for Sid to be an explicit nil
func (o *IdentityUserResponseModel) SetSidNil() {
	o.Sid.Set(nil)
}

// UnsetSid ensures that no value is present for Sid, not even an explicit nil
func (o *IdentityUserResponseModel) UnsetSid() {
	o.Sid.Unset()
}

// GetUserIdentity returns the UserIdentity field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IdentityUserResponseModel) GetUserIdentity() string {
	if o == nil || IsNil(o.UserIdentity.Get()) {
		var ret string
		return ret
	}
	return *o.UserIdentity.Get()
}

// GetUserIdentityOk returns a tuple with the UserIdentity field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IdentityUserResponseModel) GetUserIdentityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UserIdentity.Get(), o.UserIdentity.IsSet()
}

// HasUserIdentity returns a boolean if a field has been set.
func (o *IdentityUserResponseModel) HasUserIdentity() bool {
	if o != nil && o.UserIdentity.IsSet() {
		return true
	}

	return false
}

// SetUserIdentity gets a reference to the given NullableString and assigns it to the UserIdentity field.
func (o *IdentityUserResponseModel) SetUserIdentity(v string) {
	o.UserIdentity.Set(&v)
}

// SetUserIdentityNil sets the value for UserIdentity to be an explicit nil
func (o *IdentityUserResponseModel) SetUserIdentityNil() {
	o.UserIdentity.Set(nil)
}

// UnsetUserIdentity ensures that no value is present for UserIdentity, not even an explicit nil
func (o *IdentityUserResponseModel) UnsetUserIdentity() {
	o.UserIdentity.Unset()
}

// GetGroupSids returns the GroupSids field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IdentityUserResponseModel) GetGroupSids() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.GroupSids
}

// GetGroupSidsOk returns a tuple with the GroupSids field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IdentityUserResponseModel) GetGroupSidsOk() ([]string, bool) {
	if o == nil || IsNil(o.GroupSids) {
		return nil, false
	}
	return o.GroupSids, true
}

// HasGroupSids returns a boolean if a field has been set.
func (o *IdentityUserResponseModel) HasGroupSids() bool {
	if o != nil && !IsNil(o.GroupSids) {
		return true
	}

	return false
}

// SetGroupSids gets a reference to the given []string and assigns it to the GroupSids field.
func (o *IdentityUserResponseModel) SetGroupSids(v []string) {
	o.GroupSids = v
}

// GetDenyOnlySids returns the DenyOnlySids field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IdentityUserResponseModel) GetDenyOnlySids() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.DenyOnlySids
}

// GetDenyOnlySidsOk returns a tuple with the DenyOnlySids field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IdentityUserResponseModel) GetDenyOnlySidsOk() ([]string, bool) {
	if o == nil || IsNil(o.DenyOnlySids) {
		return nil, false
	}
	return o.DenyOnlySids, true
}

// HasDenyOnlySids returns a boolean if a field has been set.
func (o *IdentityUserResponseModel) HasDenyOnlySids() bool {
	if o != nil && !IsNil(o.DenyOnlySids) {
		return true
	}

	return false
}

// SetDenyOnlySids gets a reference to the given []string and assigns it to the DenyOnlySids field.
func (o *IdentityUserResponseModel) SetDenyOnlySids(v []string) {
	o.DenyOnlySids = v
}

// GetPasswordCanExpire returns the PasswordCanExpire field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IdentityUserResponseModel) GetPasswordCanExpire() bool {
	if o == nil || IsNil(o.PasswordCanExpire.Get()) {
		var ret bool
		return ret
	}
	return *o.PasswordCanExpire.Get()
}

// GetPasswordCanExpireOk returns a tuple with the PasswordCanExpire field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IdentityUserResponseModel) GetPasswordCanExpireOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.PasswordCanExpire.Get(), o.PasswordCanExpire.IsSet()
}

// HasPasswordCanExpire returns a boolean if a field has been set.
func (o *IdentityUserResponseModel) HasPasswordCanExpire() bool {
	if o != nil && o.PasswordCanExpire.IsSet() {
		return true
	}

	return false
}

// SetPasswordCanExpire gets a reference to the given NullableBool and assigns it to the PasswordCanExpire field.
func (o *IdentityUserResponseModel) SetPasswordCanExpire(v bool) {
	o.PasswordCanExpire.Set(&v)
}

// SetPasswordCanExpireNil sets the value for PasswordCanExpire to be an explicit nil
func (o *IdentityUserResponseModel) SetPasswordCanExpireNil() {
	o.PasswordCanExpire.Set(nil)
}

// UnsetPasswordCanExpire ensures that no value is present for PasswordCanExpire, not even an explicit nil
func (o *IdentityUserResponseModel) UnsetPasswordCanExpire() {
	o.PasswordCanExpire.Unset()
}

// GetDaysUntilPasswordExpiry returns the DaysUntilPasswordExpiry field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IdentityUserResponseModel) GetDaysUntilPasswordExpiry() int64 {
	if o == nil || IsNil(o.DaysUntilPasswordExpiry.Get()) {
		var ret int64
		return ret
	}
	return *o.DaysUntilPasswordExpiry.Get()
}

// GetDaysUntilPasswordExpiryOk returns a tuple with the DaysUntilPasswordExpiry field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IdentityUserResponseModel) GetDaysUntilPasswordExpiryOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.DaysUntilPasswordExpiry.Get(), o.DaysUntilPasswordExpiry.IsSet()
}

// HasDaysUntilPasswordExpiry returns a boolean if a field has been set.
func (o *IdentityUserResponseModel) HasDaysUntilPasswordExpiry() bool {
	if o != nil && o.DaysUntilPasswordExpiry.IsSet() {
		return true
	}

	return false
}

// SetDaysUntilPasswordExpiry gets a reference to the given NullableInt64 and assigns it to the DaysUntilPasswordExpiry field.
func (o *IdentityUserResponseModel) SetDaysUntilPasswordExpiry(v int64) {
	o.DaysUntilPasswordExpiry.Set(&v)
}

// SetDaysUntilPasswordExpiryNil sets the value for DaysUntilPasswordExpiry to be an explicit nil
func (o *IdentityUserResponseModel) SetDaysUntilPasswordExpiryNil() {
	o.DaysUntilPasswordExpiry.Set(nil)
}

// UnsetDaysUntilPasswordExpiry ensures that no value is present for DaysUntilPasswordExpiry, not even an explicit nil
func (o *IdentityUserResponseModel) UnsetDaysUntilPasswordExpiry() {
	o.DaysUntilPasswordExpiry.Unset()
}

// GetIsBuiltIn returns the IsBuiltIn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IdentityUserResponseModel) GetIsBuiltIn() bool {
	if o == nil || IsNil(o.IsBuiltIn.Get()) {
		var ret bool
		return ret
	}
	return *o.IsBuiltIn.Get()
}

// GetIsBuiltInOk returns a tuple with the IsBuiltIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IdentityUserResponseModel) GetIsBuiltInOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsBuiltIn.Get(), o.IsBuiltIn.IsSet()
}

// HasIsBuiltIn returns a boolean if a field has been set.
func (o *IdentityUserResponseModel) HasIsBuiltIn() bool {
	if o != nil && o.IsBuiltIn.IsSet() {
		return true
	}

	return false
}

// SetIsBuiltIn gets a reference to the given NullableBool and assigns it to the IsBuiltIn field.
func (o *IdentityUserResponseModel) SetIsBuiltIn(v bool) {
	o.IsBuiltIn.Set(&v)
}

// SetIsBuiltInNil sets the value for IsBuiltIn to be an explicit nil
func (o *IdentityUserResponseModel) SetIsBuiltInNil() {
	o.IsBuiltIn.Set(nil)
}

// UnsetIsBuiltIn ensures that no value is present for IsBuiltIn, not even an explicit nil
func (o *IdentityUserResponseModel) UnsetIsBuiltIn() {
	o.IsBuiltIn.Unset()
}

// GetIsGroup returns the IsGroup field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IdentityUserResponseModel) GetIsGroup() bool {
	if o == nil || IsNil(o.IsGroup.Get()) {
		var ret bool
		return ret
	}
	return *o.IsGroup.Get()
}

// GetIsGroupOk returns a tuple with the IsGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IdentityUserResponseModel) GetIsGroupOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsGroup.Get(), o.IsGroup.IsSet()
}

// HasIsGroup returns a boolean if a field has been set.
func (o *IdentityUserResponseModel) HasIsGroup() bool {
	if o != nil && o.IsGroup.IsSet() {
		return true
	}

	return false
}

// SetIsGroup gets a reference to the given NullableBool and assigns it to the IsGroup field.
func (o *IdentityUserResponseModel) SetIsGroup(v bool) {
	o.IsGroup.Set(&v)
}

// SetIsGroupNil sets the value for IsGroup to be an explicit nil
func (o *IdentityUserResponseModel) SetIsGroupNil() {
	o.IsGroup.Set(nil)
}

// UnsetIsGroup ensures that no value is present for IsGroup, not even an explicit nil
func (o *IdentityUserResponseModel) UnsetIsGroup() {
	o.IsGroup.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IdentityUserResponseModel) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IdentityUserResponseModel) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *IdentityUserResponseModel) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *IdentityUserResponseModel) SetName(v string) {
	o.Name.Set(&v)
}

// SetNameNil sets the value for Name to be an explicit nil
func (o *IdentityUserResponseModel) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *IdentityUserResponseModel) UnsetName() {
	o.Name.Unset()
}

// GetStreetAddress returns the StreetAddress field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IdentityUserResponseModel) GetStreetAddress() string {
	if o == nil || IsNil(o.StreetAddress.Get()) {
		var ret string
		return ret
	}
	return *o.StreetAddress.Get()
}

// GetStreetAddressOk returns a tuple with the StreetAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IdentityUserResponseModel) GetStreetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.StreetAddress.Get(), o.StreetAddress.IsSet()
}

// HasStreetAddress returns a boolean if a field has been set.
func (o *IdentityUserResponseModel) HasStreetAddress() bool {
	if o != nil && o.StreetAddress.IsSet() {
		return true
	}

	return false
}

// SetStreetAddress gets a reference to the given NullableString and assigns it to the StreetAddress field.
func (o *IdentityUserResponseModel) SetStreetAddress(v string) {
	o.StreetAddress.Set(&v)
}

// SetStreetAddressNil sets the value for StreetAddress to be an explicit nil
func (o *IdentityUserResponseModel) SetStreetAddressNil() {
	o.StreetAddress.Set(nil)
}

// UnsetStreetAddress ensures that no value is present for StreetAddress, not even an explicit nil
func (o *IdentityUserResponseModel) UnsetStreetAddress() {
	o.StreetAddress.Unset()
}

// GetCity returns the City field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IdentityUserResponseModel) GetCity() string {
	if o == nil || IsNil(o.City.Get()) {
		var ret string
		return ret
	}
	return *o.City.Get()
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IdentityUserResponseModel) GetCityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.City.Get(), o.City.IsSet()
}

// HasCity returns a boolean if a field has been set.
func (o *IdentityUserResponseModel) HasCity() bool {
	if o != nil && o.City.IsSet() {
		return true
	}

	return false
}

// SetCity gets a reference to the given NullableString and assigns it to the City field.
func (o *IdentityUserResponseModel) SetCity(v string) {
	o.City.Set(&v)
}

// SetCityNil sets the value for City to be an explicit nil
func (o *IdentityUserResponseModel) SetCityNil() {
	o.City.Set(nil)
}

// UnsetCity ensures that no value is present for City, not even an explicit nil
func (o *IdentityUserResponseModel) UnsetCity() {
	o.City.Unset()
}

// GetState returns the State field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IdentityUserResponseModel) GetState() string {
	if o == nil || IsNil(o.State.Get()) {
		var ret string
		return ret
	}
	return *o.State.Get()
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IdentityUserResponseModel) GetStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.State.Get(), o.State.IsSet()
}

// HasState returns a boolean if a field has been set.
func (o *IdentityUserResponseModel) HasState() bool {
	if o != nil && o.State.IsSet() {
		return true
	}

	return false
}

// SetState gets a reference to the given NullableString and assigns it to the State field.
func (o *IdentityUserResponseModel) SetState(v string) {
	o.State.Set(&v)
}

// SetStateNil sets the value for State to be an explicit nil
func (o *IdentityUserResponseModel) SetStateNil() {
	o.State.Set(nil)
}

// UnsetState ensures that no value is present for State, not even an explicit nil
func (o *IdentityUserResponseModel) UnsetState() {
	o.State.Unset()
}

// GetCountry returns the Country field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IdentityUserResponseModel) GetCountry() string {
	if o == nil || IsNil(o.Country.Get()) {
		var ret string
		return ret
	}
	return *o.Country.Get()
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IdentityUserResponseModel) GetCountryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Country.Get(), o.Country.IsSet()
}

// HasCountry returns a boolean if a field has been set.
func (o *IdentityUserResponseModel) HasCountry() bool {
	if o != nil && o.Country.IsSet() {
		return true
	}

	return false
}

// SetCountry gets a reference to the given NullableString and assigns it to the Country field.
func (o *IdentityUserResponseModel) SetCountry(v string) {
	o.Country.Set(&v)
}

// SetCountryNil sets the value for Country to be an explicit nil
func (o *IdentityUserResponseModel) SetCountryNil() {
	o.Country.Set(nil)
}

// UnsetCountry ensures that no value is present for Country, not even an explicit nil
func (o *IdentityUserResponseModel) UnsetCountry() {
	o.Country.Unset()
}

// GetMail returns the Mail field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IdentityUserResponseModel) GetMail() string {
	if o == nil || IsNil(o.Mail.Get()) {
		var ret string
		return ret
	}
	return *o.Mail.Get()
}

// GetMailOk returns a tuple with the Mail field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IdentityUserResponseModel) GetMailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Mail.Get(), o.Mail.IsSet()
}

// HasMail returns a boolean if a field has been set.
func (o *IdentityUserResponseModel) HasMail() bool {
	if o != nil && o.Mail.IsSet() {
		return true
	}

	return false
}

// SetMail gets a reference to the given NullableString and assigns it to the Mail field.
func (o *IdentityUserResponseModel) SetMail(v string) {
	o.Mail.Set(&v)
}

// SetMailNil sets the value for Mail to be an explicit nil
func (o *IdentityUserResponseModel) SetMailNil() {
	o.Mail.Set(nil)
}

// UnsetMail ensures that no value is present for Mail, not even an explicit nil
func (o *IdentityUserResponseModel) UnsetMail() {
	o.Mail.Unset()
}

// GetTelephoneNumber returns the TelephoneNumber field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IdentityUserResponseModel) GetTelephoneNumber() string {
	if o == nil || IsNil(o.TelephoneNumber.Get()) {
		var ret string
		return ret
	}
	return *o.TelephoneNumber.Get()
}

// GetTelephoneNumberOk returns a tuple with the TelephoneNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IdentityUserResponseModel) GetTelephoneNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TelephoneNumber.Get(), o.TelephoneNumber.IsSet()
}

// HasTelephoneNumber returns a boolean if a field has been set.
func (o *IdentityUserResponseModel) HasTelephoneNumber() bool {
	if o != nil && o.TelephoneNumber.IsSet() {
		return true
	}

	return false
}

// SetTelephoneNumber gets a reference to the given NullableString and assigns it to the TelephoneNumber field.
func (o *IdentityUserResponseModel) SetTelephoneNumber(v string) {
	o.TelephoneNumber.Set(&v)
}

// SetTelephoneNumberNil sets the value for TelephoneNumber to be an explicit nil
func (o *IdentityUserResponseModel) SetTelephoneNumberNil() {
	o.TelephoneNumber.Set(nil)
}

// UnsetTelephoneNumber ensures that no value is present for TelephoneNumber, not even an explicit nil
func (o *IdentityUserResponseModel) UnsetTelephoneNumber() {
	o.TelephoneNumber.Unset()
}

// GetHomePhone returns the HomePhone field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IdentityUserResponseModel) GetHomePhone() string {
	if o == nil || IsNil(o.HomePhone.Get()) {
		var ret string
		return ret
	}
	return *o.HomePhone.Get()
}

// GetHomePhoneOk returns a tuple with the HomePhone field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IdentityUserResponseModel) GetHomePhoneOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.HomePhone.Get(), o.HomePhone.IsSet()
}

// HasHomePhone returns a boolean if a field has been set.
func (o *IdentityUserResponseModel) HasHomePhone() bool {
	if o != nil && o.HomePhone.IsSet() {
		return true
	}

	return false
}

// SetHomePhone gets a reference to the given NullableString and assigns it to the HomePhone field.
func (o *IdentityUserResponseModel) SetHomePhone(v string) {
	o.HomePhone.Set(&v)
}

// SetHomePhoneNil sets the value for HomePhone to be an explicit nil
func (o *IdentityUserResponseModel) SetHomePhoneNil() {
	o.HomePhone.Set(nil)
}

// UnsetHomePhone ensures that no value is present for HomePhone, not even an explicit nil
func (o *IdentityUserResponseModel) UnsetHomePhone() {
	o.HomePhone.Unset()
}

// GetMobile returns the Mobile field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IdentityUserResponseModel) GetMobile() string {
	if o == nil || IsNil(o.Mobile.Get()) {
		var ret string
		return ret
	}
	return *o.Mobile.Get()
}

// GetMobileOk returns a tuple with the Mobile field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IdentityUserResponseModel) GetMobileOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Mobile.Get(), o.Mobile.IsSet()
}

// HasMobile returns a boolean if a field has been set.
func (o *IdentityUserResponseModel) HasMobile() bool {
	if o != nil && o.Mobile.IsSet() {
		return true
	}

	return false
}

// SetMobile gets a reference to the given NullableString and assigns it to the Mobile field.
func (o *IdentityUserResponseModel) SetMobile(v string) {
	o.Mobile.Set(&v)
}

// SetMobileNil sets the value for Mobile to be an explicit nil
func (o *IdentityUserResponseModel) SetMobileNil() {
	o.Mobile.Set(nil)
}

// UnsetMobile ensures that no value is present for Mobile, not even an explicit nil
func (o *IdentityUserResponseModel) UnsetMobile() {
	o.Mobile.Unset()
}

// GetEnabled returns the Enabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IdentityUserResponseModel) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled.Get()) {
		var ret bool
		return ret
	}
	return *o.Enabled.Get()
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IdentityUserResponseModel) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Enabled.Get(), o.Enabled.IsSet()
}

// HasEnabled returns a boolean if a field has been set.
func (o *IdentityUserResponseModel) HasEnabled() bool {
	if o != nil && o.Enabled.IsSet() {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given NullableBool and assigns it to the Enabled field.
func (o *IdentityUserResponseModel) SetEnabled(v bool) {
	o.Enabled.Set(&v)
}

// SetEnabledNil sets the value for Enabled to be an explicit nil
func (o *IdentityUserResponseModel) SetEnabledNil() {
	o.Enabled.Set(nil)
}

// UnsetEnabled ensures that no value is present for Enabled, not even an explicit nil
func (o *IdentityUserResponseModel) UnsetEnabled() {
	o.Enabled.Unset()
}

// GetLocked returns the Locked field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IdentityUserResponseModel) GetLocked() bool {
	if o == nil || IsNil(o.Locked.Get()) {
		var ret bool
		return ret
	}
	return *o.Locked.Get()
}

// GetLockedOk returns a tuple with the Locked field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IdentityUserResponseModel) GetLockedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Locked.Get(), o.Locked.IsSet()
}

// HasLocked returns a boolean if a field has been set.
func (o *IdentityUserResponseModel) HasLocked() bool {
	if o != nil && o.Locked.IsSet() {
		return true
	}

	return false
}

// SetLocked gets a reference to the given NullableBool and assigns it to the Locked field.
func (o *IdentityUserResponseModel) SetLocked(v bool) {
	o.Locked.Set(&v)
}

// SetLockedNil sets the value for Locked to be an explicit nil
func (o *IdentityUserResponseModel) SetLockedNil() {
	o.Locked.Set(nil)
}

// UnsetLocked ensures that no value is present for Locked, not even an explicit nil
func (o *IdentityUserResponseModel) UnsetLocked() {
	o.Locked.Unset()
}

// GetPropertiesFetched returns the PropertiesFetched field value
func (o *IdentityUserResponseModel) GetPropertiesFetched() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PropertiesFetched
}

// GetPropertiesFetchedOk returns a tuple with the PropertiesFetched field value
// and a boolean to check if the value has been set.
func (o *IdentityUserResponseModel) GetPropertiesFetchedOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PropertiesFetched, true
}

// SetPropertiesFetched sets field value
func (o *IdentityUserResponseModel) SetPropertiesFetched(v int32) {
	o.PropertiesFetched = v
}

// GetClaims returns the Claims field value if set, zero value otherwise.
func (o *IdentityUserResponseModel) GetClaims() IdentityClaimsResponseModel {
	if o == nil || IsNil(o.Claims) {
		var ret IdentityClaimsResponseModel
		return ret
	}
	return *o.Claims
}

// GetClaimsOk returns a tuple with the Claims field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityUserResponseModel) GetClaimsOk() (*IdentityClaimsResponseModel, bool) {
	if o == nil || IsNil(o.Claims) {
		return nil, false
	}
	return o.Claims, true
}

// HasClaims returns a boolean if a field has been set.
func (o *IdentityUserResponseModel) HasClaims() bool {
	if o != nil && !IsNil(o.Claims) {
		return true
	}

	return false
}

// SetClaims gets a reference to the given IdentityClaimsResponseModel and assigns it to the Claims field.
func (o *IdentityUserResponseModel) SetClaims(v IdentityClaimsResponseModel) {
	o.Claims = &v
}

// GetDirectory returns the Directory field value if set, zero value otherwise.
func (o *IdentityUserResponseModel) GetDirectory() IdentityDirectoryResponseModel {
	if o == nil || IsNil(o.Directory) {
		var ret IdentityDirectoryResponseModel
		return ret
	}
	return *o.Directory
}

// GetDirectoryOk returns a tuple with the Directory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityUserResponseModel) GetDirectoryOk() (*IdentityDirectoryResponseModel, bool) {
	if o == nil || IsNil(o.Directory) {
		return nil, false
	}
	return o.Directory, true
}

// HasDirectory returns a boolean if a field has been set.
func (o *IdentityUserResponseModel) HasDirectory() bool {
	if o != nil && !IsNil(o.Directory) {
		return true
	}

	return false
}

// SetDirectory gets a reference to the given IdentityDirectoryResponseModel and assigns it to the Directory field.
func (o *IdentityUserResponseModel) SetDirectory(v IdentityDirectoryResponseModel) {
	o.Directory = &v
}

func (o IdentityUserResponseModel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IdentityUserResponseModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Domain.IsSet() {
		toSerialize["Domain"] = o.Domain.Get()
	}
	if o.Forest.IsSet() {
		toSerialize["Forest"] = o.Forest.Get()
	}
	if o.Guid.IsSet() {
		toSerialize["Guid"] = o.Guid.Get()
	}
	if o.DistinguishedName.IsSet() {
		toSerialize["DistinguishedName"] = o.DistinguishedName.Get()
	}
	if o.CanonicalName.IsSet() {
		toSerialize["CanonicalName"] = o.CanonicalName.Get()
	}
	if !IsNil(o.PossibleLookupFailure) {
		toSerialize["PossibleLookupFailure"] = o.PossibleLookupFailure
	}
	if o.DirectoryServer.IsSet() {
		toSerialize["DirectoryServer"] = o.DirectoryServer.Get()
	}
	toSerialize["DisplayName"] = o.DisplayName
	if o.SamName.IsSet() {
		toSerialize["SamName"] = o.SamName.Get()
	}
	if o.SamAccountName.IsSet() {
		toSerialize["SamAccountName"] = o.SamAccountName.Get()
	}
	if o.CommonName.IsSet() {
		toSerialize["CommonName"] = o.CommonName.Get()
	}
	if o.PrincipalName.IsSet() {
		toSerialize["PrincipalName"] = o.PrincipalName.Get()
	}
	if o.Oid.IsSet() {
		toSerialize["Oid"] = o.Oid.Get()
	}
	if o.Sid.IsSet() {
		toSerialize["Sid"] = o.Sid.Get()
	}
	if o.UserIdentity.IsSet() {
		toSerialize["UserIdentity"] = o.UserIdentity.Get()
	}
	if o.GroupSids != nil {
		toSerialize["GroupSids"] = o.GroupSids
	}
	if o.DenyOnlySids != nil {
		toSerialize["DenyOnlySids"] = o.DenyOnlySids
	}
	if o.PasswordCanExpire.IsSet() {
		toSerialize["PasswordCanExpire"] = o.PasswordCanExpire.Get()
	}
	if o.DaysUntilPasswordExpiry.IsSet() {
		toSerialize["DaysUntilPasswordExpiry"] = o.DaysUntilPasswordExpiry.Get()
	}
	if o.IsBuiltIn.IsSet() {
		toSerialize["IsBuiltIn"] = o.IsBuiltIn.Get()
	}
	if o.IsGroup.IsSet() {
		toSerialize["IsGroup"] = o.IsGroup.Get()
	}
	if o.Name.IsSet() {
		toSerialize["Name"] = o.Name.Get()
	}
	if o.StreetAddress.IsSet() {
		toSerialize["StreetAddress"] = o.StreetAddress.Get()
	}
	if o.City.IsSet() {
		toSerialize["City"] = o.City.Get()
	}
	if o.State.IsSet() {
		toSerialize["State"] = o.State.Get()
	}
	if o.Country.IsSet() {
		toSerialize["Country"] = o.Country.Get()
	}
	if o.Mail.IsSet() {
		toSerialize["Mail"] = o.Mail.Get()
	}
	if o.TelephoneNumber.IsSet() {
		toSerialize["TelephoneNumber"] = o.TelephoneNumber.Get()
	}
	if o.HomePhone.IsSet() {
		toSerialize["HomePhone"] = o.HomePhone.Get()
	}
	if o.Mobile.IsSet() {
		toSerialize["Mobile"] = o.Mobile.Get()
	}
	if o.Enabled.IsSet() {
		toSerialize["Enabled"] = o.Enabled.Get()
	}
	if o.Locked.IsSet() {
		toSerialize["Locked"] = o.Locked.Get()
	}
	toSerialize["PropertiesFetched"] = o.PropertiesFetched
	if !IsNil(o.Claims) {
		toSerialize["Claims"] = o.Claims
	}
	if !IsNil(o.Directory) {
		toSerialize["Directory"] = o.Directory
	}
	return toSerialize, nil
}

type NullableIdentityUserResponseModel struct {
	value *IdentityUserResponseModel
	isSet bool
}

func (v NullableIdentityUserResponseModel) Get() *IdentityUserResponseModel {
	return v.value
}

func (v *NullableIdentityUserResponseModel) Set(val *IdentityUserResponseModel) {
	v.value = val
	v.isSet = true
}

func (v NullableIdentityUserResponseModel) IsSet() bool {
	return v.isSet
}

func (v *NullableIdentityUserResponseModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdentityUserResponseModel(val *IdentityUserResponseModel) *NullableIdentityUserResponseModel {
	return &NullableIdentityUserResponseModel{value: val, isSet: true}
}

func (v NullableIdentityUserResponseModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdentityUserResponseModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
