/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-onprem-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
)

// checks if the SiteStatusResponseModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SiteStatusResponseModel{}

// SiteStatusResponseModel Site status.
type SiteStatusResponseModel struct {
	SiteState SiteState `json:"SiteState"`
	// If the current administrator can perform upgrade.
	CurrentUserCanPerformUpgrade *bool `json:"CurrentUserCanPerformUpgrade,omitempty"`
	// These controllers have been upgraded and will function normally at the latest version.
	UpgradedControllers []string `json:"UpgradedControllers,omitempty"`
	// These controllers require their binaries to be upgraded to bring them inline with the rest of the site.
	ControllersRequiringBinaryUpgrade []string `json:"ControllersRequiringBinaryUpgrade,omitempty"`
	// The highest of all controller versions in the site. All controllers should be upgraded to this version.
	LatestControllerVersion NullableString `json:"LatestControllerVersion,omitempty"`
	// These database servers must be upgraded to be compatible with the site controllers.
	DatabaseServersRequiringUpgrade []string `json:"DatabaseServersRequiringUpgrade,omitempty"`
	// The database versions for these data stores are older than what is required by the most up-to-date controllers.
	DataStoresRequiringUpgrade []string `json:"DataStoresRequiringUpgrade,omitempty"`
}

// NewSiteStatusResponseModel instantiates a new SiteStatusResponseModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSiteStatusResponseModel(siteState SiteState) *SiteStatusResponseModel {
	this := SiteStatusResponseModel{}
	this.SiteState = siteState
	return &this
}

// NewSiteStatusResponseModelWithDefaults instantiates a new SiteStatusResponseModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSiteStatusResponseModelWithDefaults() *SiteStatusResponseModel {
	this := SiteStatusResponseModel{}
	return &this
}

// GetSiteState returns the SiteState field value
func (o *SiteStatusResponseModel) GetSiteState() SiteState {
	if o == nil {
		var ret SiteState
		return ret
	}

	return o.SiteState
}

// GetSiteStateOk returns a tuple with the SiteState field value
// and a boolean to check if the value has been set.
func (o *SiteStatusResponseModel) GetSiteStateOk() (*SiteState, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SiteState, true
}

// SetSiteState sets field value
func (o *SiteStatusResponseModel) SetSiteState(v SiteState) {
	o.SiteState = v
}

// GetCurrentUserCanPerformUpgrade returns the CurrentUserCanPerformUpgrade field value if set, zero value otherwise.
func (o *SiteStatusResponseModel) GetCurrentUserCanPerformUpgrade() bool {
	if o == nil || IsNil(o.CurrentUserCanPerformUpgrade) {
		var ret bool
		return ret
	}
	return *o.CurrentUserCanPerformUpgrade
}

// GetCurrentUserCanPerformUpgradeOk returns a tuple with the CurrentUserCanPerformUpgrade field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteStatusResponseModel) GetCurrentUserCanPerformUpgradeOk() (*bool, bool) {
	if o == nil || IsNil(o.CurrentUserCanPerformUpgrade) {
		return nil, false
	}
	return o.CurrentUserCanPerformUpgrade, true
}

// HasCurrentUserCanPerformUpgrade returns a boolean if a field has been set.
func (o *SiteStatusResponseModel) HasCurrentUserCanPerformUpgrade() bool {
	if o != nil && !IsNil(o.CurrentUserCanPerformUpgrade) {
		return true
	}

	return false
}

// SetCurrentUserCanPerformUpgrade gets a reference to the given bool and assigns it to the CurrentUserCanPerformUpgrade field.
func (o *SiteStatusResponseModel) SetCurrentUserCanPerformUpgrade(v bool) {
	o.CurrentUserCanPerformUpgrade = &v
}

// GetUpgradedControllers returns the UpgradedControllers field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SiteStatusResponseModel) GetUpgradedControllers() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.UpgradedControllers
}

// GetUpgradedControllersOk returns a tuple with the UpgradedControllers field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SiteStatusResponseModel) GetUpgradedControllersOk() ([]string, bool) {
	if o == nil || IsNil(o.UpgradedControllers) {
		return nil, false
	}
	return o.UpgradedControllers, true
}

// HasUpgradedControllers returns a boolean if a field has been set.
func (o *SiteStatusResponseModel) HasUpgradedControllers() bool {
	if o != nil && IsNil(o.UpgradedControllers) {
		return true
	}

	return false
}

// SetUpgradedControllers gets a reference to the given []string and assigns it to the UpgradedControllers field.
func (o *SiteStatusResponseModel) SetUpgradedControllers(v []string) {
	o.UpgradedControllers = v
}

// GetControllersRequiringBinaryUpgrade returns the ControllersRequiringBinaryUpgrade field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SiteStatusResponseModel) GetControllersRequiringBinaryUpgrade() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.ControllersRequiringBinaryUpgrade
}

// GetControllersRequiringBinaryUpgradeOk returns a tuple with the ControllersRequiringBinaryUpgrade field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SiteStatusResponseModel) GetControllersRequiringBinaryUpgradeOk() ([]string, bool) {
	if o == nil || IsNil(o.ControllersRequiringBinaryUpgrade) {
		return nil, false
	}
	return o.ControllersRequiringBinaryUpgrade, true
}

// HasControllersRequiringBinaryUpgrade returns a boolean if a field has been set.
func (o *SiteStatusResponseModel) HasControllersRequiringBinaryUpgrade() bool {
	if o != nil && IsNil(o.ControllersRequiringBinaryUpgrade) {
		return true
	}

	return false
}

// SetControllersRequiringBinaryUpgrade gets a reference to the given []string and assigns it to the ControllersRequiringBinaryUpgrade field.
func (o *SiteStatusResponseModel) SetControllersRequiringBinaryUpgrade(v []string) {
	o.ControllersRequiringBinaryUpgrade = v
}

// GetLatestControllerVersion returns the LatestControllerVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SiteStatusResponseModel) GetLatestControllerVersion() string {
	if o == nil || IsNil(o.LatestControllerVersion.Get()) {
		var ret string
		return ret
	}
	return *o.LatestControllerVersion.Get()
}

// GetLatestControllerVersionOk returns a tuple with the LatestControllerVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SiteStatusResponseModel) GetLatestControllerVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LatestControllerVersion.Get(), o.LatestControllerVersion.IsSet()
}

// HasLatestControllerVersion returns a boolean if a field has been set.
func (o *SiteStatusResponseModel) HasLatestControllerVersion() bool {
	if o != nil && o.LatestControllerVersion.IsSet() {
		return true
	}

	return false
}

// SetLatestControllerVersion gets a reference to the given NullableString and assigns it to the LatestControllerVersion field.
func (o *SiteStatusResponseModel) SetLatestControllerVersion(v string) {
	o.LatestControllerVersion.Set(&v)
}

// SetLatestControllerVersionNil sets the value for LatestControllerVersion to be an explicit nil
func (o *SiteStatusResponseModel) SetLatestControllerVersionNil() {
	o.LatestControllerVersion.Set(nil)
}

// UnsetLatestControllerVersion ensures that no value is present for LatestControllerVersion, not even an explicit nil
func (o *SiteStatusResponseModel) UnsetLatestControllerVersion() {
	o.LatestControllerVersion.Unset()
}

// GetDatabaseServersRequiringUpgrade returns the DatabaseServersRequiringUpgrade field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SiteStatusResponseModel) GetDatabaseServersRequiringUpgrade() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.DatabaseServersRequiringUpgrade
}

// GetDatabaseServersRequiringUpgradeOk returns a tuple with the DatabaseServersRequiringUpgrade field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SiteStatusResponseModel) GetDatabaseServersRequiringUpgradeOk() ([]string, bool) {
	if o == nil || IsNil(o.DatabaseServersRequiringUpgrade) {
		return nil, false
	}
	return o.DatabaseServersRequiringUpgrade, true
}

// HasDatabaseServersRequiringUpgrade returns a boolean if a field has been set.
func (o *SiteStatusResponseModel) HasDatabaseServersRequiringUpgrade() bool {
	if o != nil && IsNil(o.DatabaseServersRequiringUpgrade) {
		return true
	}

	return false
}

// SetDatabaseServersRequiringUpgrade gets a reference to the given []string and assigns it to the DatabaseServersRequiringUpgrade field.
func (o *SiteStatusResponseModel) SetDatabaseServersRequiringUpgrade(v []string) {
	o.DatabaseServersRequiringUpgrade = v
}

// GetDataStoresRequiringUpgrade returns the DataStoresRequiringUpgrade field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SiteStatusResponseModel) GetDataStoresRequiringUpgrade() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.DataStoresRequiringUpgrade
}

// GetDataStoresRequiringUpgradeOk returns a tuple with the DataStoresRequiringUpgrade field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SiteStatusResponseModel) GetDataStoresRequiringUpgradeOk() ([]string, bool) {
	if o == nil || IsNil(o.DataStoresRequiringUpgrade) {
		return nil, false
	}
	return o.DataStoresRequiringUpgrade, true
}

// HasDataStoresRequiringUpgrade returns a boolean if a field has been set.
func (o *SiteStatusResponseModel) HasDataStoresRequiringUpgrade() bool {
	if o != nil && IsNil(o.DataStoresRequiringUpgrade) {
		return true
	}

	return false
}

// SetDataStoresRequiringUpgrade gets a reference to the given []string and assigns it to the DataStoresRequiringUpgrade field.
func (o *SiteStatusResponseModel) SetDataStoresRequiringUpgrade(v []string) {
	o.DataStoresRequiringUpgrade = v
}

func (o SiteStatusResponseModel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SiteStatusResponseModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["SiteState"] = o.SiteState
	if !IsNil(o.CurrentUserCanPerformUpgrade) {
		toSerialize["CurrentUserCanPerformUpgrade"] = o.CurrentUserCanPerformUpgrade
	}
	if o.UpgradedControllers != nil {
		toSerialize["UpgradedControllers"] = o.UpgradedControllers
	}
	if o.ControllersRequiringBinaryUpgrade != nil {
		toSerialize["ControllersRequiringBinaryUpgrade"] = o.ControllersRequiringBinaryUpgrade
	}
	if o.LatestControllerVersion.IsSet() {
		toSerialize["LatestControllerVersion"] = o.LatestControllerVersion.Get()
	}
	if o.DatabaseServersRequiringUpgrade != nil {
		toSerialize["DatabaseServersRequiringUpgrade"] = o.DatabaseServersRequiringUpgrade
	}
	if o.DataStoresRequiringUpgrade != nil {
		toSerialize["DataStoresRequiringUpgrade"] = o.DataStoresRequiringUpgrade
	}
	return toSerialize, nil
}

type NullableSiteStatusResponseModel struct {
	value *SiteStatusResponseModel
	isSet bool
}

func (v NullableSiteStatusResponseModel) Get() *SiteStatusResponseModel {
	return v.value
}

func (v *NullableSiteStatusResponseModel) Set(val *SiteStatusResponseModel) {
	v.value = val
	v.isSet = true
}

func (v NullableSiteStatusResponseModel) IsSet() bool {
	return v.isSet
}

func (v *NullableSiteStatusResponseModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSiteStatusResponseModel(val *SiteStatusResponseModel) *NullableSiteStatusResponseModel {
	return &NullableSiteStatusResponseModel{value: val, isSet: true}
}

func (v NullableSiteStatusResponseModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSiteStatusResponseModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
