/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
	"fmt"
)

// LogOperationType Operation type for configuration log entries.
type LogOperationType string

// List of LogOperationType
const (
	LOGOPERATIONTYPE_UNKNOWN LogOperationType = "Unknown"
	LOGOPERATIONTYPE_CONFIGURATION_CHANGE LogOperationType = "ConfigurationChange"
	LOGOPERATIONTYPE_ADMIN_ACTIVITY LogOperationType = "AdminActivity"
)

// All allowed values of LogOperationType enum
var AllowedLogOperationTypeEnumValues = []LogOperationType{
	"Unknown",
	"ConfigurationChange",
	"AdminActivity",
}

func (v *LogOperationType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LogOperationType(value)
	for _, existing := range AllowedLogOperationTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LogOperationType", value)
}

// NewLogOperationTypeFromValue returns a pointer to a valid LogOperationType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLogOperationTypeFromValue(v string) (*LogOperationType, error) {
	ev := LogOperationType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LogOperationType: valid values are %v", v, AllowedLogOperationTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LogOperationType) IsValid() bool {
	for _, existing := range AllowedLogOperationTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LogOperationType value
func (v LogOperationType) Ptr() *LogOperationType {
	return &v
}

type NullableLogOperationType struct {
	value *LogOperationType
	isSet bool
}

func (v NullableLogOperationType) Get() *LogOperationType {
	return v.value
}

func (v *NullableLogOperationType) Set(val *LogOperationType) {
	v.value = val
	v.isSet = true
}

func (v NullableLogOperationType) IsSet() bool {
	return v.isSet
}

func (v *NullableLogOperationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogOperationType(val *LogOperationType) *NullableLogOperationType {
	return &NullableLogOperationType{value: val, isSet: true}
}

func (v NullableLogOperationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogOperationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

