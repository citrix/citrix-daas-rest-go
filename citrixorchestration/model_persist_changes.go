/*
Citrix Virtual Apps and Desktops REST API TECHPREVIEW

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: techpreview
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
	"fmt"
)

// PersistChanges Methods by which changes are persisted on a machine.
type PersistChanges string

// List of PersistChanges
const (
	PERSISTCHANGES_UNKNOWN PersistChanges = "Unknown"
	PERSISTCHANGES_DISCARD PersistChanges = "Discard"
	PERSISTCHANGES_ON_LOCAL PersistChanges = "OnLocal"
	PERSISTCHANGES_ON_PVD PersistChanges = "OnPvd"
)

// All allowed values of PersistChanges enum
var AllowedPersistChangesEnumValues = []PersistChanges{
	"Unknown",
	"Discard",
	"OnLocal",
	"OnPvd",
}

func (v *PersistChanges) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PersistChanges(value)
	for _, existing := range AllowedPersistChangesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PersistChanges", value)
}

// NewPersistChangesFromValue returns a pointer to a valid PersistChanges
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPersistChangesFromValue(v string) (*PersistChanges, error) {
	ev := PersistChanges(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PersistChanges: valid values are %v", v, AllowedPersistChangesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PersistChanges) IsValid() bool {
	for _, existing := range AllowedPersistChangesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PersistChanges value
func (v PersistChanges) Ptr() *PersistChanges {
	return &v
}

type NullablePersistChanges struct {
	value *PersistChanges
	isSet bool
}

func (v NullablePersistChanges) Get() *PersistChanges {
	return v.value
}

func (v *NullablePersistChanges) Set(val *PersistChanges) {
	v.value = val
	v.isSet = true
}

func (v NullablePersistChanges) IsSet() bool {
	return v.isSet
}

func (v *NullablePersistChanges) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePersistChanges(val *PersistChanges) *NullablePersistChanges {
	return &NullablePersistChanges{value: val, isSet: true}
}

func (v NullablePersistChanges) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePersistChanges) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

