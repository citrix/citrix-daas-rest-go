/*
Citrix Virtual Apps and Desktops REST API TECHPREVIEW

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: techpreview
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
	"fmt"
)

// VdaUpgradeMachineScheduleStatus VDA package upgrade schedule status.
type VdaUpgradeMachineScheduleStatus string

// List of VdaUpgradeMachineScheduleStatus
const (
	VDAUPGRADEMACHINESCHEDULESTATUS_UNKNOWN VdaUpgradeMachineScheduleStatus = "Unknown"
	VDAUPGRADEMACHINESCHEDULESTATUS_UPGRADE_SCHEDULED VdaUpgradeMachineScheduleStatus = "UpgradeScheduled"
	VDAUPGRADEMACHINESCHEDULESTATUS_UPGRADE_IN_UPGRADE_WINDOW VdaUpgradeMachineScheduleStatus = "UpgradeInUpgradeWindow"
	VDAUPGRADEMACHINESCHEDULESTATUS_UPGRADE_IN_PROGRESS VdaUpgradeMachineScheduleStatus = "UpgradeInProgress"
	VDAUPGRADEMACHINESCHEDULESTATUS_UPGRADE_CANCELLED VdaUpgradeMachineScheduleStatus = "UpgradeCancelled"
	VDAUPGRADEMACHINESCHEDULESTATUS_UPGRADE_FAILED VdaUpgradeMachineScheduleStatus = "UpgradeFailed"
	VDAUPGRADEMACHINESCHEDULESTATUS_UPGRADE_SUCCESS VdaUpgradeMachineScheduleStatus = "UpgradeSuccess"
	VDAUPGRADEMACHINESCHEDULESTATUS_UPGRADE_VALIDATION_FAILED VdaUpgradeMachineScheduleStatus = "UpgradeValidationFailed"
)

// All allowed values of VdaUpgradeMachineScheduleStatus enum
var AllowedVdaUpgradeMachineScheduleStatusEnumValues = []VdaUpgradeMachineScheduleStatus{
	"Unknown",
	"UpgradeScheduled",
	"UpgradeInUpgradeWindow",
	"UpgradeInProgress",
	"UpgradeCancelled",
	"UpgradeFailed",
	"UpgradeSuccess",
	"UpgradeValidationFailed",
}

func (v *VdaUpgradeMachineScheduleStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VdaUpgradeMachineScheduleStatus(value)
	for _, existing := range AllowedVdaUpgradeMachineScheduleStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VdaUpgradeMachineScheduleStatus", value)
}

// NewVdaUpgradeMachineScheduleStatusFromValue returns a pointer to a valid VdaUpgradeMachineScheduleStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVdaUpgradeMachineScheduleStatusFromValue(v string) (*VdaUpgradeMachineScheduleStatus, error) {
	ev := VdaUpgradeMachineScheduleStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VdaUpgradeMachineScheduleStatus: valid values are %v", v, AllowedVdaUpgradeMachineScheduleStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VdaUpgradeMachineScheduleStatus) IsValid() bool {
	for _, existing := range AllowedVdaUpgradeMachineScheduleStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VdaUpgradeMachineScheduleStatus value
func (v VdaUpgradeMachineScheduleStatus) Ptr() *VdaUpgradeMachineScheduleStatus {
	return &v
}

type NullableVdaUpgradeMachineScheduleStatus struct {
	value *VdaUpgradeMachineScheduleStatus
	isSet bool
}

func (v NullableVdaUpgradeMachineScheduleStatus) Get() *VdaUpgradeMachineScheduleStatus {
	return v.value
}

func (v *NullableVdaUpgradeMachineScheduleStatus) Set(val *VdaUpgradeMachineScheduleStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableVdaUpgradeMachineScheduleStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableVdaUpgradeMachineScheduleStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVdaUpgradeMachineScheduleStatus(val *VdaUpgradeMachineScheduleStatus) *NullableVdaUpgradeMachineScheduleStatus {
	return &NullableVdaUpgradeMachineScheduleStatus{value: val, isSet: true}
}

func (v NullableVdaUpgradeMachineScheduleStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVdaUpgradeMachineScheduleStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

