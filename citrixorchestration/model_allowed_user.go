/*
Citrix Virtual Apps and Desktops Rest API for Developer Portal

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: devportal-onprem-ga
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixorchestration

import (
	"encoding/json"
	"fmt"
)

// AllowedUser
type AllowedUser string

// List of AllowedUser
const (
	ALLOWEDUSER_UNKNOWN               AllowedUser = "Unknown"
	ALLOWEDUSER_FILTERED              AllowedUser = "Filtered"
	ALLOWEDUSER_ANY_AUTHENTICATED     AllowedUser = "AnyAuthenticated"
	ALLOWEDUSER_ANY                   AllowedUser = "Any"
	ALLOWEDUSER_ANONYMOUS_ONLY        AllowedUser = "AnonymousOnly"
	ALLOWEDUSER_FILTERED_OR_ANONYMOUS AllowedUser = "FilteredOrAnonymous"
)

// All allowed values of AllowedUser enum
var AllowedAllowedUserEnumValues = []AllowedUser{
	"Unknown",
	"Filtered",
	"AnyAuthenticated",
	"Any",
	"AnonymousOnly",
	"FilteredOrAnonymous",
}

func (v *AllowedUser) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	*v = AllowedUser(value)
	return nil
}

// NewAllowedUserFromValue returns a pointer to a valid AllowedUser
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAllowedUserFromValue(v string) (*AllowedUser, error) {
	ev := AllowedUser(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AllowedUser: valid values are %v", v, AllowedAllowedUserEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AllowedUser) IsValid() bool {
	for _, existing := range AllowedAllowedUserEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AllowedUser value
func (v AllowedUser) Ptr() *AllowedUser {
	return &v
}

type NullableAllowedUser struct {
	value *AllowedUser
	isSet bool
}

func (v NullableAllowedUser) Get() *AllowedUser {
	return v.value
}

func (v *NullableAllowedUser) Set(val *AllowedUser) {
	v.value = val
	v.isSet = true
}

func (v NullableAllowedUser) IsSet() bool {
	return v.isSet
}

func (v *NullableAllowedUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAllowedUser(val *AllowedUser) *NullableAllowedUser {
	return &NullableAllowedUser{value: val, isSet: true}
}

func (v NullableAllowedUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAllowedUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
