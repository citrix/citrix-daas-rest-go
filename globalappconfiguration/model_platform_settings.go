/*
Global App Config Admin

Describes API used by Global App Config Admin Service

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package globalappconfiguration

import (
	"encoding/json"
)

// checks if the PlatformSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PlatformSettings{}

// PlatformSettings struct for PlatformSettings
type PlatformSettings struct {
	AssignedTo         []string           `json:"assignedTo,omitempty"`
	AssignmentPriority *int32             `json:"assignmentPriority,omitempty"`
	Category           *string            `json:"category,omitempty"`
	Settings           []CategorySettings `json:"settings,omitempty"`
	UserOverride       *bool              `json:"userOverride,omitempty"`
}

// NewPlatformSettings instantiates a new PlatformSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlatformSettings() *PlatformSettings {
	this := PlatformSettings{}
	return &this
}

// NewPlatformSettingsWithDefaults instantiates a new PlatformSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlatformSettingsWithDefaults() *PlatformSettings {
	this := PlatformSettings{}
	return &this
}

// GetAssignedTo returns the AssignedTo field value if set, zero value otherwise.
func (o *PlatformSettings) GetAssignedTo() []string {
	if o == nil || IsNil(o.AssignedTo) {
		var ret []string
		return ret
	}
	return o.AssignedTo
}

// GetAssignedToOk returns a tuple with the AssignedTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlatformSettings) GetAssignedToOk() ([]string, bool) {
	if o == nil || IsNil(o.AssignedTo) {
		return nil, false
	}
	return o.AssignedTo, true
}

// HasAssignedTo returns a boolean if a field has been set.
func (o *PlatformSettings) HasAssignedTo() bool {
	if o != nil && !IsNil(o.AssignedTo) {
		return true
	}

	return false
}

// SetAssignedTo gets a reference to the given []string and assigns it to the AssignedTo field.
func (o *PlatformSettings) SetAssignedTo(v []string) {
	o.AssignedTo = v
}

// GetAssignmentPriority returns the AssignmentPriority field value if set, zero value otherwise.
func (o *PlatformSettings) GetAssignmentPriority() int32 {
	if o == nil || IsNil(o.AssignmentPriority) {
		var ret int32
		return ret
	}
	return *o.AssignmentPriority
}

// GetAssignmentPriorityOk returns a tuple with the AssignmentPriority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlatformSettings) GetAssignmentPriorityOk() (*int32, bool) {
	if o == nil || IsNil(o.AssignmentPriority) {
		return nil, false
	}
	return o.AssignmentPriority, true
}

// HasAssignmentPriority returns a boolean if a field has been set.
func (o *PlatformSettings) HasAssignmentPriority() bool {
	if o != nil && !IsNil(o.AssignmentPriority) {
		return true
	}

	return false
}

// SetAssignmentPriority gets a reference to the given int32 and assigns it to the AssignmentPriority field.
func (o *PlatformSettings) SetAssignmentPriority(v int32) {
	o.AssignmentPriority = &v
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *PlatformSettings) GetCategory() string {
	if o == nil || IsNil(o.Category) {
		var ret string
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlatformSettings) GetCategoryOk() (*string, bool) {
	if o == nil || IsNil(o.Category) {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *PlatformSettings) HasCategory() bool {
	if o != nil && !IsNil(o.Category) {
		return true
	}

	return false
}

// SetCategory gets a reference to the given string and assigns it to the Category field.
func (o *PlatformSettings) SetCategory(v string) {
	o.Category = &v
}

// GetSettings returns the Settings field value if set, zero value otherwise.
func (o *PlatformSettings) GetSettings() []CategorySettings {
	if o == nil || IsNil(o.Settings) {
		var ret []CategorySettings
		return ret
	}
	return o.Settings
}

// GetSettingsOk returns a tuple with the Settings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlatformSettings) GetSettingsOk() ([]CategorySettings, bool) {
	if o == nil || IsNil(o.Settings) {
		return nil, false
	}
	return o.Settings, true
}

// HasSettings returns a boolean if a field has been set.
func (o *PlatformSettings) HasSettings() bool {
	if o != nil && !IsNil(o.Settings) {
		return true
	}

	return false
}

// SetSettings gets a reference to the given []CategorySettings and assigns it to the Settings field.
func (o *PlatformSettings) SetSettings(v []CategorySettings) {
	o.Settings = v
}

// GetUserOverride returns the UserOverride field value if set, zero value otherwise.
func (o *PlatformSettings) GetUserOverride() bool {
	if o == nil || IsNil(o.UserOverride) {
		var ret bool
		return ret
	}
	return *o.UserOverride
}

// GetUserOverrideOk returns a tuple with the UserOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlatformSettings) GetUserOverrideOk() (*bool, bool) {
	if o == nil || IsNil(o.UserOverride) {
		return nil, false
	}
	return o.UserOverride, true
}

// HasUserOverride returns a boolean if a field has been set.
func (o *PlatformSettings) HasUserOverride() bool {
	if o != nil && !IsNil(o.UserOverride) {
		return true
	}

	return false
}

// SetUserOverride gets a reference to the given bool and assigns it to the UserOverride field.
func (o *PlatformSettings) SetUserOverride(v bool) {
	o.UserOverride = &v
}

func (o PlatformSettings) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PlatformSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AssignedTo) {
		toSerialize["assignedTo"] = o.AssignedTo
	}
	if !IsNil(o.AssignmentPriority) {
		toSerialize["assignmentPriority"] = o.AssignmentPriority
	}
	if !IsNil(o.Category) {
		toSerialize["category"] = o.Category
	}
	if !IsNil(o.Settings) {
		toSerialize["settings"] = o.Settings
	}
	if !IsNil(o.UserOverride) {
		toSerialize["userOverride"] = o.UserOverride
	}
	return toSerialize, nil
}

type NullablePlatformSettings struct {
	value *PlatformSettings
	isSet bool
}

func (v NullablePlatformSettings) Get() *PlatformSettings {
	return v.value
}

func (v *NullablePlatformSettings) Set(val *PlatformSettings) {
	v.value = val
	v.isSet = true
}

func (v NullablePlatformSettings) IsSet() bool {
	return v.isSet
}

func (v *NullablePlatformSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlatformSettings(val *PlatformSettings) *NullablePlatformSettings {
	return &NullablePlatformSettings{value: val, isSet: true}
}

func (v NullablePlatformSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlatformSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
