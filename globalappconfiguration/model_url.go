/*
Global App Config Admin

Describes API used by Global App Config Admin Service

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package globalappconfiguration

import (
	"encoding/json"
)

// checks if the Url type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Url{}

// Url struct for Url
type Url struct {
	MigrationUrl []MigrationUrl `json:"migrationUrl,omitempty"`
	Name         *string        `json:"name,omitempty"`
}

// NewUrl instantiates a new Url object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUrl() *Url {
	this := Url{}
	return &this
}

// NewUrlWithDefaults instantiates a new Url object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUrlWithDefaults() *Url {
	this := Url{}
	return &this
}

// GetMigrationUrl returns the MigrationUrl field value if set, zero value otherwise.
func (o *Url) GetMigrationUrl() []MigrationUrl {
	if o == nil || IsNil(o.MigrationUrl) {
		var ret []MigrationUrl
		return ret
	}
	return o.MigrationUrl
}

// GetMigrationUrlOk returns a tuple with the MigrationUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Url) GetMigrationUrlOk() ([]MigrationUrl, bool) {
	if o == nil || IsNil(o.MigrationUrl) {
		return nil, false
	}
	return o.MigrationUrl, true
}

// HasMigrationUrl returns a boolean if a field has been set.
func (o *Url) HasMigrationUrl() bool {
	if o != nil && !IsNil(o.MigrationUrl) {
		return true
	}

	return false
}

// SetMigrationUrl gets a reference to the given []MigrationUrl and assigns it to the MigrationUrl field.
func (o *Url) SetMigrationUrl(v []MigrationUrl) {
	o.MigrationUrl = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Url) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Url) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Url) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Url) SetName(v string) {
	o.Name = &v
}

func (o Url) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Url) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MigrationUrl) {
		toSerialize["migrationUrl"] = o.MigrationUrl
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return toSerialize, nil
}

type NullableUrl struct {
	value *Url
	isSet bool
}

func (v NullableUrl) Get() *Url {
	return v.value
}

func (v *NullableUrl) Set(val *Url) {
	v.value = val
	v.isSet = true
}

func (v NullableUrl) IsSet() bool {
	return v.isSet
}

func (v *NullableUrl) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUrl(val *Url) *NullableUrl {
	return &NullableUrl{value: val, isSet: true}
}

func (v NullableUrl) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUrl) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
