/*
Global App Config Admin

Testing ProfilesDAASService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package globalappconfiguration

import (
	"context"
	"testing"

	openapiclient "github.com/citrix/citrix-daas-rest-go/globalappconfiguration"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_globalappconfiguration_ProfilesDAASService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ProfilesDAASService AddGroupsInProfile", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var profileId string

		resp, httpRes, err := apiClient.ProfilesDAAS.AddGroupsInProfile(context.Background(), profileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfilesDAASService CreateProfile", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ProfilesDAAS.CreateProfile(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfilesDAASService DeleteProfile", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string

		resp, httpRes, err := apiClient.ProfilesDAAS.DeleteProfile(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfilesDAASService GetAllProfile", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ProfilesDAAS.GetAllProfile(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfilesDAASService GetById", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var profileId string

		resp, httpRes, err := apiClient.ProfilesDAAS.GetById(context.Background(), profileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfilesDAASService GetByUrl", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var url string

		resp, httpRes, err := apiClient.ProfilesDAAS.GetByUrl(context.Background(), url).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfilesDAASService RemoveGroupsInProfile", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var profileId string

		resp, httpRes, err := apiClient.ProfilesDAAS.RemoveGroupsInProfile(context.Background(), profileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfilesDAASService UpdatePriorityInProfile", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var profileId string

		resp, httpRes, err := apiClient.ProfilesDAAS.UpdatePriorityInProfile(context.Background(), profileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfilesDAASService Updateprofile", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var profileId string

		resp, httpRes, err := apiClient.ProfilesDAAS.Updateprofile(context.Background(), profileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
