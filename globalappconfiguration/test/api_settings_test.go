/*
Global App Config Admin

Testing SettingsDAASService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package globalappconfiguration

import (
	"context"
	"testing"

	openapiclient "github.com/citrix/citrix-daas-rest-go/globalappconfiguration"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_globalappconfiguration_SettingsDAASService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test SettingsDAASService CreateSettings", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var app string

		resp, httpRes, err := apiClient.SettingsDAAS.CreateSettings(context.Background(), app).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SettingsDAASService DeleteSettings", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var app string
		var url string

		resp, httpRes, err := apiClient.SettingsDAAS.DeleteSettings(context.Background(), app, url).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SettingsDAASService DeleteSettingsForChannel", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var app string
		var url string
		var channelName string

		resp, httpRes, err := apiClient.SettingsDAAS.DeleteSettingsForChannel(context.Background(), app, url, channelName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SettingsDAASService DeleteSettingsForProfile", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var app string
		var url string
		var profileId string

		resp, httpRes, err := apiClient.SettingsDAAS.DeleteSettingsForProfile(context.Background(), app, url, profileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SettingsDAASService RetrieveAllChannelSettings", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var app string
		var url string

		resp, httpRes, err := apiClient.SettingsDAAS.RetrieveAllChannelSettings(context.Background(), app, url).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SettingsDAASService RetrieveAllProfileSettings", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var app string
		var url string

		resp, httpRes, err := apiClient.SettingsDAAS.RetrieveAllProfileSettings(context.Background(), app, url).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SettingsDAASService RetrieveAllSettings", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SettingsDAAS.RetrieveAllSettings(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SettingsDAASService RetrieveSettingsForChannel", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var app string
		var url string
		var channelName string

		resp, httpRes, err := apiClient.SettingsDAAS.RetrieveSettingsForChannel(context.Background(), app, url, channelName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SettingsDAASService RetrieveSettingsForProfile", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var app string
		var url string
		var profileId string

		resp, httpRes, err := apiClient.SettingsDAAS.RetrieveSettingsForProfile(context.Background(), app, url, profileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SettingsDAASService RetrieveSettingsForURL", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var app string
		var url string

		resp, httpRes, err := apiClient.SettingsDAAS.RetrieveSettingsForURL(context.Background(), app, url).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SettingsDAASService UpdateSettings", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var app string
		var url string

		resp, httpRes, err := apiClient.SettingsDAAS.UpdateSettings(context.Background(), app, url).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
