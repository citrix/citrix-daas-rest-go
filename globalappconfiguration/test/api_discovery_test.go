/*
Global App Config Admin

Testing DiscoveryDAASService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package globalappconfiguration

import (
	"context"
	"testing"

	openapiclient "github.com/citrix/citrix-daas-rest-go/globalappconfiguration"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_globalappconfiguration_DiscoveryDAASService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test DiscoveryDAASService CreateDiscovery", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var app string

		resp, httpRes, err := apiClient.DiscoveryDAAS.CreateDiscovery(context.Background(), app).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DiscoveryDAASService DeleteDiscovery", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var app string
		var domain string

		resp, httpRes, err := apiClient.DiscoveryDAAS.DeleteDiscovery(context.Background(), app, domain).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DiscoveryDAASService RetrieveAllDiscovery", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DiscoveryDAAS.RetrieveAllDiscovery(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DiscoveryDAASService RetrieveDiscovery", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var app string
		var domain string

		resp, httpRes, err := apiClient.DiscoveryDAAS.RetrieveDiscovery(context.Background(), app, domain).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DiscoveryDAASService UpdateDiscovery", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var app string
		var domain string

		resp, httpRes, err := apiClient.DiscoveryDAAS.UpdateDiscovery(context.Background(), app, domain).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
