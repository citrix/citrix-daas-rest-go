/*
Global App Config Admin

Describes API used by Global App Config Admin Service

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package globalappconfiguration

import (
	"encoding/json"
)

// checks if the Settings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Settings{}

// Settings struct for Settings
type Settings struct {
	AppSettings     *AppSettings `json:"appSettings,omitempty"`
	Description     *string      `json:"description,omitempty"`
	Name            *string      `json:"name,omitempty"`
	UseForAppConfig *bool        `json:"useForAppConfig,omitempty"`
}

// NewSettings instantiates a new Settings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSettings() *Settings {
	this := Settings{}
	return &this
}

// NewSettingsWithDefaults instantiates a new Settings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSettingsWithDefaults() *Settings {
	this := Settings{}
	return &this
}

// GetAppSettings returns the AppSettings field value if set, zero value otherwise.
func (o *Settings) GetAppSettings() AppSettings {
	if o == nil || IsNil(o.AppSettings) {
		var ret AppSettings
		return ret
	}
	return *o.AppSettings
}

// GetAppSettingsOk returns a tuple with the AppSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Settings) GetAppSettingsOk() (*AppSettings, bool) {
	if o == nil || IsNil(o.AppSettings) {
		return nil, false
	}
	return o.AppSettings, true
}

// HasAppSettings returns a boolean if a field has been set.
func (o *Settings) HasAppSettings() bool {
	if o != nil && !IsNil(o.AppSettings) {
		return true
	}

	return false
}

// SetAppSettings gets a reference to the given AppSettings and assigns it to the AppSettings field.
func (o *Settings) SetAppSettings(v AppSettings) {
	o.AppSettings = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Settings) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Settings) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Settings) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Settings) SetDescription(v string) {
	o.Description = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Settings) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Settings) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Settings) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Settings) SetName(v string) {
	o.Name = &v
}

// GetUseForAppConfig returns the UseForAppConfig field value if set, zero value otherwise.
func (o *Settings) GetUseForAppConfig() bool {
	if o == nil || IsNil(o.UseForAppConfig) {
		var ret bool
		return ret
	}
	return *o.UseForAppConfig
}

// GetUseForAppConfigOk returns a tuple with the UseForAppConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Settings) GetUseForAppConfigOk() (*bool, bool) {
	if o == nil || IsNil(o.UseForAppConfig) {
		return nil, false
	}
	return o.UseForAppConfig, true
}

// HasUseForAppConfig returns a boolean if a field has been set.
func (o *Settings) HasUseForAppConfig() bool {
	if o != nil && !IsNil(o.UseForAppConfig) {
		return true
	}

	return false
}

// SetUseForAppConfig gets a reference to the given bool and assigns it to the UseForAppConfig field.
func (o *Settings) SetUseForAppConfig(v bool) {
	o.UseForAppConfig = &v
}

func (o Settings) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Settings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AppSettings) {
		toSerialize["appSettings"] = o.AppSettings
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.UseForAppConfig) {
		toSerialize["useForAppConfig"] = o.UseForAppConfig
	}
	return toSerialize, nil
}

type NullableSettings struct {
	value *Settings
	isSet bool
}

func (v NullableSettings) Get() *Settings {
	return v.value
}

func (v *NullableSettings) Set(val *Settings) {
	v.value = val
	v.isSet = true
}

func (v NullableSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSettings(val *Settings) *NullableSettings {
	return &NullableSettings{value: val, isSet: true}
}

func (v NullableSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
