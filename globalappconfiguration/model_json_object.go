/*
Global App Config Admin

Describes API used by Global App Config Admin Service

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package globalappconfiguration

import (
	"encoding/json"
)

// checks if the JSONObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JSONObject{}

// JSONObject struct for JSONObject
type JSONObject struct {
	Empty *bool `json:"empty,omitempty"`
}

// NewJSONObject instantiates a new JSONObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJSONObject() *JSONObject {
	this := JSONObject{}
	return &this
}

// NewJSONObjectWithDefaults instantiates a new JSONObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJSONObjectWithDefaults() *JSONObject {
	this := JSONObject{}
	return &this
}

// GetEmpty returns the Empty field value if set, zero value otherwise.
func (o *JSONObject) GetEmpty() bool {
	if o == nil || IsNil(o.Empty) {
		var ret bool
		return ret
	}
	return *o.Empty
}

// GetEmptyOk returns a tuple with the Empty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSONObject) GetEmptyOk() (*bool, bool) {
	if o == nil || IsNil(o.Empty) {
		return nil, false
	}
	return o.Empty, true
}

// HasEmpty returns a boolean if a field has been set.
func (o *JSONObject) HasEmpty() bool {
	if o != nil && !IsNil(o.Empty) {
		return true
	}

	return false
}

// SetEmpty gets a reference to the given bool and assigns it to the Empty field.
func (o *JSONObject) SetEmpty(v bool) {
	o.Empty = &v
}

func (o JSONObject) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JSONObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Empty) {
		toSerialize["empty"] = o.Empty
	}
	return toSerialize, nil
}

type NullableJSONObject struct {
	value *JSONObject
	isSet bool
}

func (v NullableJSONObject) Get() *JSONObject {
	return v.value
}

func (v *NullableJSONObject) Set(val *JSONObject) {
	v.value = val
	v.isSet = true
}

func (v NullableJSONObject) IsSet() bool {
	return v.isSet
}

func (v *NullableJSONObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJSONObject(val *JSONObject) *NullableJSONObject {
	return &NullableJSONObject{value: val, isSet: true}
}

func (v NullableJSONObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJSONObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
