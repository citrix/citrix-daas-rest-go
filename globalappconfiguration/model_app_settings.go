/*
Global App Config Admin

Describes API used by Global App Config Admin Service

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package globalappconfiguration

import (
	"encoding/json"
)

// checks if the AppSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AppSettings{}

// AppSettings struct for AppSettings
type AppSettings struct {
	Android []PlatformSettings `json:"android,omitempty"`
	Chromeos []PlatformSettings `json:"chromeos,omitempty"`
	Html5 []PlatformSettings `json:"html5,omitempty"`
	Ios []PlatformSettings `json:"ios,omitempty"`
	Macos []PlatformSettings `json:"macos,omitempty"`
	Windows []PlatformSettings `json:"windows,omitempty"`
}

// NewAppSettings instantiates a new AppSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppSettings() *AppSettings {
	this := AppSettings{}
	return &this
}

// NewAppSettingsWithDefaults instantiates a new AppSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppSettingsWithDefaults() *AppSettings {
	this := AppSettings{}
	return &this
}

// GetAndroid returns the Android field value if set, zero value otherwise.
func (o *AppSettings) GetAndroid() []PlatformSettings {
	if o == nil || IsNil(o.Android) {
		var ret []PlatformSettings
		return ret
	}
	return o.Android
}

// GetAndroidOk returns a tuple with the Android field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppSettings) GetAndroidOk() ([]PlatformSettings, bool) {
	if o == nil || IsNil(o.Android) {
		return nil, false
	}
	return o.Android, true
}

// HasAndroid returns a boolean if a field has been set.
func (o *AppSettings) HasAndroid() bool {
	if o != nil && !IsNil(o.Android) {
		return true
	}

	return false
}

// SetAndroid gets a reference to the given []PlatformSettings and assigns it to the Android field.
func (o *AppSettings) SetAndroid(v []PlatformSettings) {
	o.Android = v
}

// GetChromeos returns the Chromeos field value if set, zero value otherwise.
func (o *AppSettings) GetChromeos() []PlatformSettings {
	if o == nil || IsNil(o.Chromeos) {
		var ret []PlatformSettings
		return ret
	}
	return o.Chromeos
}

// GetChromeosOk returns a tuple with the Chromeos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppSettings) GetChromeosOk() ([]PlatformSettings, bool) {
	if o == nil || IsNil(o.Chromeos) {
		return nil, false
	}
	return o.Chromeos, true
}

// HasChromeos returns a boolean if a field has been set.
func (o *AppSettings) HasChromeos() bool {
	if o != nil && !IsNil(o.Chromeos) {
		return true
	}

	return false
}

// SetChromeos gets a reference to the given []PlatformSettings and assigns it to the Chromeos field.
func (o *AppSettings) SetChromeos(v []PlatformSettings) {
	o.Chromeos = v
}

// GetHtml5 returns the Html5 field value if set, zero value otherwise.
func (o *AppSettings) GetHtml5() []PlatformSettings {
	if o == nil || IsNil(o.Html5) {
		var ret []PlatformSettings
		return ret
	}
	return o.Html5
}

// GetHtml5Ok returns a tuple with the Html5 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppSettings) GetHtml5Ok() ([]PlatformSettings, bool) {
	if o == nil || IsNil(o.Html5) {
		return nil, false
	}
	return o.Html5, true
}

// HasHtml5 returns a boolean if a field has been set.
func (o *AppSettings) HasHtml5() bool {
	if o != nil && !IsNil(o.Html5) {
		return true
	}

	return false
}

// SetHtml5 gets a reference to the given []PlatformSettings and assigns it to the Html5 field.
func (o *AppSettings) SetHtml5(v []PlatformSettings) {
	o.Html5 = v
}

// GetIos returns the Ios field value if set, zero value otherwise.
func (o *AppSettings) GetIos() []PlatformSettings {
	if o == nil || IsNil(o.Ios) {
		var ret []PlatformSettings
		return ret
	}
	return o.Ios
}

// GetIosOk returns a tuple with the Ios field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppSettings) GetIosOk() ([]PlatformSettings, bool) {
	if o == nil || IsNil(o.Ios) {
		return nil, false
	}
	return o.Ios, true
}

// HasIos returns a boolean if a field has been set.
func (o *AppSettings) HasIos() bool {
	if o != nil && !IsNil(o.Ios) {
		return true
	}

	return false
}

// SetIos gets a reference to the given []PlatformSettings and assigns it to the Ios field.
func (o *AppSettings) SetIos(v []PlatformSettings) {
	o.Ios = v
}

// GetMacos returns the Macos field value if set, zero value otherwise.
func (o *AppSettings) GetMacos() []PlatformSettings {
	if o == nil || IsNil(o.Macos) {
		var ret []PlatformSettings
		return ret
	}
	return o.Macos
}

// GetMacosOk returns a tuple with the Macos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppSettings) GetMacosOk() ([]PlatformSettings, bool) {
	if o == nil || IsNil(o.Macos) {
		return nil, false
	}
	return o.Macos, true
}

// HasMacos returns a boolean if a field has been set.
func (o *AppSettings) HasMacos() bool {
	if o != nil && !IsNil(o.Macos) {
		return true
	}

	return false
}

// SetMacos gets a reference to the given []PlatformSettings and assigns it to the Macos field.
func (o *AppSettings) SetMacos(v []PlatformSettings) {
	o.Macos = v
}

// GetWindows returns the Windows field value if set, zero value otherwise.
func (o *AppSettings) GetWindows() []PlatformSettings {
	if o == nil || IsNil(o.Windows) {
		var ret []PlatformSettings
		return ret
	}
	return o.Windows
}

// GetWindowsOk returns a tuple with the Windows field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppSettings) GetWindowsOk() ([]PlatformSettings, bool) {
	if o == nil || IsNil(o.Windows) {
		return nil, false
	}
	return o.Windows, true
}

// HasWindows returns a boolean if a field has been set.
func (o *AppSettings) HasWindows() bool {
	if o != nil && !IsNil(o.Windows) {
		return true
	}

	return false
}

// SetWindows gets a reference to the given []PlatformSettings and assigns it to the Windows field.
func (o *AppSettings) SetWindows(v []PlatformSettings) {
	o.Windows = v
}

func (o AppSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AppSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Android) {
		toSerialize["android"] = o.Android
	}
	if !IsNil(o.Chromeos) {
		toSerialize["chromeos"] = o.Chromeos
	}
	if !IsNil(o.Html5) {
		toSerialize["html5"] = o.Html5
	}
	if !IsNil(o.Ios) {
		toSerialize["ios"] = o.Ios
	}
	if !IsNil(o.Macos) {
		toSerialize["macos"] = o.Macos
	}
	if !IsNil(o.Windows) {
		toSerialize["windows"] = o.Windows
	}
	return toSerialize, nil
}

type NullableAppSettings struct {
	value *AppSettings
	isSet bool
}

func (v NullableAppSettings) Get() *AppSettings {
	return v.value
}

func (v *NullableAppSettings) Set(val *AppSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableAppSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableAppSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppSettings(val *AppSettings) *NullableAppSettings {
	return &NullableAppSettings{value: val, isSet: true}
}

func (v NullableAppSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


