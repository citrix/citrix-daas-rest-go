/*
Global App Config Admin

Describes API used by Global App Config Admin Service

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package globalappconfiguration

import (
	"encoding/json"
)

// checks if the Workspace type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Workspace{}

// Workspace struct for Workspace
type Workspace struct {
	AllowedWebStoreURLs []AdminDomainURL `json:"allowedWebStoreURLs,omitempty"`
	ServiceURLs         []AdminDomainURL `json:"serviceURLs,omitempty"`
}

// NewWorkspace instantiates a new Workspace object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkspace() *Workspace {
	this := Workspace{}
	return &this
}

// NewWorkspaceWithDefaults instantiates a new Workspace object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkspaceWithDefaults() *Workspace {
	this := Workspace{}
	return &this
}

// GetAllowedWebStoreURLs returns the AllowedWebStoreURLs field value if set, zero value otherwise.
func (o *Workspace) GetAllowedWebStoreURLs() []AdminDomainURL {
	if o == nil || IsNil(o.AllowedWebStoreURLs) {
		var ret []AdminDomainURL
		return ret
	}
	return o.AllowedWebStoreURLs
}

// GetAllowedWebStoreURLsOk returns a tuple with the AllowedWebStoreURLs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Workspace) GetAllowedWebStoreURLsOk() ([]AdminDomainURL, bool) {
	if o == nil || IsNil(o.AllowedWebStoreURLs) {
		return nil, false
	}
	return o.AllowedWebStoreURLs, true
}

// HasAllowedWebStoreURLs returns a boolean if a field has been set.
func (o *Workspace) HasAllowedWebStoreURLs() bool {
	if o != nil && !IsNil(o.AllowedWebStoreURLs) {
		return true
	}

	return false
}

// SetAllowedWebStoreURLs gets a reference to the given []AdminDomainURL and assigns it to the AllowedWebStoreURLs field.
func (o *Workspace) SetAllowedWebStoreURLs(v []AdminDomainURL) {
	o.AllowedWebStoreURLs = v
}

// GetServiceURLs returns the ServiceURLs field value if set, zero value otherwise.
func (o *Workspace) GetServiceURLs() []AdminDomainURL {
	if o == nil || IsNil(o.ServiceURLs) {
		var ret []AdminDomainURL
		return ret
	}
	return o.ServiceURLs
}

// GetServiceURLsOk returns a tuple with the ServiceURLs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Workspace) GetServiceURLsOk() ([]AdminDomainURL, bool) {
	if o == nil || IsNil(o.ServiceURLs) {
		return nil, false
	}
	return o.ServiceURLs, true
}

// HasServiceURLs returns a boolean if a field has been set.
func (o *Workspace) HasServiceURLs() bool {
	if o != nil && !IsNil(o.ServiceURLs) {
		return true
	}

	return false
}

// SetServiceURLs gets a reference to the given []AdminDomainURL and assigns it to the ServiceURLs field.
func (o *Workspace) SetServiceURLs(v []AdminDomainURL) {
	o.ServiceURLs = v
}

func (o Workspace) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Workspace) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AllowedWebStoreURLs) {
		toSerialize["allowedWebStoreURLs"] = o.AllowedWebStoreURLs
	}
	if !IsNil(o.ServiceURLs) {
		toSerialize["serviceURLs"] = o.ServiceURLs
	}
	return toSerialize, nil
}

type NullableWorkspace struct {
	value *Workspace
	isSet bool
}

func (v NullableWorkspace) Get() *Workspace {
	return v.value
}

func (v *NullableWorkspace) Set(val *Workspace) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkspace) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkspace) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkspace(val *Workspace) *NullableWorkspace {
	return &NullableWorkspace{value: val, isSet: true}
}

func (v NullableWorkspace) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkspace) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
