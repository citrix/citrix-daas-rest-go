/*
Global App Config Admin

Describes API used by Global App Config Admin Service

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package globalappconfiguration

import (
	"encoding/json"
)

// checks if the SettingsRecordModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SettingsRecordModel{}

// SettingsRecordModel struct for SettingsRecordModel
type SettingsRecordModel struct {
	ServiceURL      *ServiceURL      `json:"serviceURL,omitempty"`
	Settings        *Settings        `json:"settings,omitempty"`
	SettingsChannel *SettingsChannel `json:"settingsChannel,omitempty"`
	SettingsProfile *SettingsProfile `json:"settingsProfile,omitempty"`
}

// NewSettingsRecordModel instantiates a new SettingsRecordModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSettingsRecordModel() *SettingsRecordModel {
	this := SettingsRecordModel{}
	return &this
}

// NewSettingsRecordModelWithDefaults instantiates a new SettingsRecordModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSettingsRecordModelWithDefaults() *SettingsRecordModel {
	this := SettingsRecordModel{}
	return &this
}

// GetServiceURL returns the ServiceURL field value if set, zero value otherwise.
func (o *SettingsRecordModel) GetServiceURL() ServiceURL {
	if o == nil || IsNil(o.ServiceURL) {
		var ret ServiceURL
		return ret
	}
	return *o.ServiceURL
}

// GetServiceURLOk returns a tuple with the ServiceURL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingsRecordModel) GetServiceURLOk() (*ServiceURL, bool) {
	if o == nil || IsNil(o.ServiceURL) {
		return nil, false
	}
	return o.ServiceURL, true
}

// HasServiceURL returns a boolean if a field has been set.
func (o *SettingsRecordModel) HasServiceURL() bool {
	if o != nil && !IsNil(o.ServiceURL) {
		return true
	}

	return false
}

// SetServiceURL gets a reference to the given ServiceURL and assigns it to the ServiceURL field.
func (o *SettingsRecordModel) SetServiceURL(v ServiceURL) {
	o.ServiceURL = &v
}

// GetSettings returns the Settings field value if set, zero value otherwise.
func (o *SettingsRecordModel) GetSettings() Settings {
	if o == nil || IsNil(o.Settings) {
		var ret Settings
		return ret
	}
	return *o.Settings
}

// GetSettingsOk returns a tuple with the Settings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingsRecordModel) GetSettingsOk() (*Settings, bool) {
	if o == nil || IsNil(o.Settings) {
		return nil, false
	}
	return o.Settings, true
}

// HasSettings returns a boolean if a field has been set.
func (o *SettingsRecordModel) HasSettings() bool {
	if o != nil && !IsNil(o.Settings) {
		return true
	}

	return false
}

// SetSettings gets a reference to the given Settings and assigns it to the Settings field.
func (o *SettingsRecordModel) SetSettings(v Settings) {
	o.Settings = &v
}

// GetSettingsChannel returns the SettingsChannel field value if set, zero value otherwise.
func (o *SettingsRecordModel) GetSettingsChannel() SettingsChannel {
	if o == nil || IsNil(o.SettingsChannel) {
		var ret SettingsChannel
		return ret
	}
	return *o.SettingsChannel
}

// GetSettingsChannelOk returns a tuple with the SettingsChannel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingsRecordModel) GetSettingsChannelOk() (*SettingsChannel, bool) {
	if o == nil || IsNil(o.SettingsChannel) {
		return nil, false
	}
	return o.SettingsChannel, true
}

// HasSettingsChannel returns a boolean if a field has been set.
func (o *SettingsRecordModel) HasSettingsChannel() bool {
	if o != nil && !IsNil(o.SettingsChannel) {
		return true
	}

	return false
}

// SetSettingsChannel gets a reference to the given SettingsChannel and assigns it to the SettingsChannel field.
func (o *SettingsRecordModel) SetSettingsChannel(v SettingsChannel) {
	o.SettingsChannel = &v
}

// GetSettingsProfile returns the SettingsProfile field value if set, zero value otherwise.
func (o *SettingsRecordModel) GetSettingsProfile() SettingsProfile {
	if o == nil || IsNil(o.SettingsProfile) {
		var ret SettingsProfile
		return ret
	}
	return *o.SettingsProfile
}

// GetSettingsProfileOk returns a tuple with the SettingsProfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingsRecordModel) GetSettingsProfileOk() (*SettingsProfile, bool) {
	if o == nil || IsNil(o.SettingsProfile) {
		return nil, false
	}
	return o.SettingsProfile, true
}

// HasSettingsProfile returns a boolean if a field has been set.
func (o *SettingsRecordModel) HasSettingsProfile() bool {
	if o != nil && !IsNil(o.SettingsProfile) {
		return true
	}

	return false
}

// SetSettingsProfile gets a reference to the given SettingsProfile and assigns it to the SettingsProfile field.
func (o *SettingsRecordModel) SetSettingsProfile(v SettingsProfile) {
	o.SettingsProfile = &v
}

func (o SettingsRecordModel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SettingsRecordModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ServiceURL) {
		toSerialize["serviceURL"] = o.ServiceURL
	}
	if !IsNil(o.Settings) {
		toSerialize["settings"] = o.Settings
	}
	if !IsNil(o.SettingsChannel) {
		toSerialize["settingsChannel"] = o.SettingsChannel
	}
	if !IsNil(o.SettingsProfile) {
		toSerialize["settingsProfile"] = o.SettingsProfile
	}
	return toSerialize, nil
}

type NullableSettingsRecordModel struct {
	value *SettingsRecordModel
	isSet bool
}

func (v NullableSettingsRecordModel) Get() *SettingsRecordModel {
	return v.value
}

func (v *NullableSettingsRecordModel) Set(val *SettingsRecordModel) {
	v.value = val
	v.isSet = true
}

func (v NullableSettingsRecordModel) IsSet() bool {
	return v.isSet
}

func (v *NullableSettingsRecordModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSettingsRecordModel(val *SettingsRecordModel) *NullableSettingsRecordModel {
	return &NullableSettingsRecordModel{value: val, isSet: true}
}

func (v NullableSettingsRecordModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSettingsRecordModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
