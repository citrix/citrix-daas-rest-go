/*
Citrix.CloudServices.Cws.Api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixcws

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// AuthDomainsDAASService AuthDomainsDAAS service
type AuthDomainsDAASService service

type AuthDomainsDAASCustomerAuthDomainsCheckGetRequest struct {
	ctx context.Context
	ApiService *AuthDomainsDAASService
	name *string
	customer string
}

func (r AuthDomainsDAASCustomerAuthDomainsCheckGetRequest) Name(name string) AuthDomainsDAASCustomerAuthDomainsCheckGetRequest {
	r.name = &name
	return r
}

func (r AuthDomainsDAASCustomerAuthDomainsCheckGetRequest) Execute() (bool, *http.Response, error) {
	return r.ApiService.CustomerAuthDomainsCheckGetExecute(r)
}

/*
CustomerAuthDomainsCheckGet Method for CustomerAuthDomainsCheckGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param customer
 @return AuthDomainsDAASCustomerAuthDomainsCheckGetRequest
*/
func (a *AuthDomainsDAASService) CustomerAuthDomainsCheckGet(ctx context.Context, customer string) AuthDomainsDAASCustomerAuthDomainsCheckGetRequest {
	return AuthDomainsDAASCustomerAuthDomainsCheckGetRequest{
		ApiService: a,
		ctx: ctx,
		customer: customer,
	}
}

// Execute executes the request
//  @return bool
func (a *AuthDomainsDAASService) CustomerAuthDomainsCheckGetExecute(r AuthDomainsDAASCustomerAuthDomainsCheckGetRequest) (bool, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  bool
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuthDomainsDAASService.CustomerAuthDomainsCheckGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{customer}/AuthDomains/Check"
	localVarPath = strings.Replace(localVarPath, "{"+"customer"+"}", url.PathEscape(parameterValueToString(r.customer, "customer")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.name == nil {
		return localVarReturnValue, nil, reportError("name is required and must be specified")
	}
	if strlen(*r.name) < 0 {
		return localVarReturnValue, nil, reportError("name must have at least 0 elements")
	}
	if strlen(*r.name) > 100 {
		return localVarReturnValue, nil, reportError("name must have less than 100 elements")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AuthDomainsDAASCustomerAuthDomainsPutRequest struct {
	ctx context.Context
	ApiService *AuthDomainsDAASService
	oldName *string
	newName *string
	customer string
}

func (r AuthDomainsDAASCustomerAuthDomainsPutRequest) OldName(oldName string) AuthDomainsDAASCustomerAuthDomainsPutRequest {
	r.oldName = &oldName
	return r
}

func (r AuthDomainsDAASCustomerAuthDomainsPutRequest) NewName(newName string) AuthDomainsDAASCustomerAuthDomainsPutRequest {
	r.newName = &newName
	return r
}

func (r AuthDomainsDAASCustomerAuthDomainsPutRequest) Execute() (*UpdatedCustomerModel, *http.Response, error) {
	return r.ApiService.CustomerAuthDomainsPutExecute(r)
}

/*
CustomerAuthDomainsPut Method for CustomerAuthDomainsPut

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param customer
 @return AuthDomainsDAASCustomerAuthDomainsPutRequest
*/
func (a *AuthDomainsDAASService) CustomerAuthDomainsPut(ctx context.Context, customer string) AuthDomainsDAASCustomerAuthDomainsPutRequest {
	return AuthDomainsDAASCustomerAuthDomainsPutRequest{
		ApiService: a,
		ctx: ctx,
		customer: customer,
	}
}

// Execute executes the request
//  @return UpdatedCustomerModel
func (a *AuthDomainsDAASService) CustomerAuthDomainsPutExecute(r AuthDomainsDAASCustomerAuthDomainsPutRequest) (*UpdatedCustomerModel, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UpdatedCustomerModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuthDomainsDAASService.CustomerAuthDomainsPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{customer}/AuthDomains"
	localVarPath = strings.Replace(localVarPath, "{"+"customer"+"}", url.PathEscape(parameterValueToString(r.customer, "customer")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.oldName == nil {
		return localVarReturnValue, nil, reportError("oldName is required and must be specified")
	}
	if strlen(*r.oldName) < 0 {
		return localVarReturnValue, nil, reportError("oldName must have at least 0 elements")
	}
	if strlen(*r.oldName) > 100 {
		return localVarReturnValue, nil, reportError("oldName must have less than 100 elements")
	}
	if r.newName == nil {
		return localVarReturnValue, nil, reportError("newName is required and must be specified")
	}
	if strlen(*r.newName) < 0 {
		return localVarReturnValue, nil, reportError("newName must have at least 0 elements")
	}
	if strlen(*r.newName) > 100 {
		return localVarReturnValue, nil, reportError("newName must have less than 100 elements")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "oldName", r.oldName, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "newName", r.newName, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
