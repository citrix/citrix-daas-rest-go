/*
Citrix.CloudServices.Cws.Api

Testing IdentityProvidersDAASService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package citrixcws

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/citrix/citrix-daas-rest-go/citrixcws"
)

func Test_citrixcws_IdentityProvidersDAASService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test IdentityProvidersDAASService CustomerIdentityProvidersAllStatusGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customer string

		resp, httpRes, err := apiClient.IdentityProvidersDAAS.CustomerIdentityProvidersAllStatusGet(context.Background(), customer).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityProvidersDAASService CustomerIdentityProvidersClientGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customer string

		resp, httpRes, err := apiClient.IdentityProvidersDAAS.CustomerIdentityProvidersClientGet(context.Background(), customer).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityProvidersDAASService CustomerIdentityProvidersConfigurationSamlIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var customer string

		resp, httpRes, err := apiClient.IdentityProvidersDAAS.CustomerIdentityProvidersConfigurationSamlIdGet(context.Background(), id, customer).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityProvidersDAASService CustomerIdentityProvidersConfigureGooglePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customer string

		resp, httpRes, err := apiClient.IdentityProvidersDAAS.CustomerIdentityProvidersConfigureGooglePost(context.Background(), customer).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityProvidersDAASService CustomerIdentityProvidersConfigureOktaPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customer string

		resp, httpRes, err := apiClient.IdentityProvidersDAAS.CustomerIdentityProvidersConfigureOktaPost(context.Background(), customer).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityProvidersDAASService CustomerIdentityProvidersGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customer string

		resp, httpRes, err := apiClient.IdentityProvidersDAAS.CustomerIdentityProvidersGet(context.Background(), customer).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityProvidersDAASService CustomerIdentityProvidersIdPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var customer string

		resp, httpRes, err := apiClient.IdentityProvidersDAAS.CustomerIdentityProvidersIdPost(context.Background(), id, customer).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityProvidersDAASService CustomerIdentityProvidersIdentityProviderIdPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var identityProvider string
		var id string
		var customer string

		resp, httpRes, err := apiClient.IdentityProvidersDAAS.CustomerIdentityProvidersIdentityProviderIdPut(context.Background(), identityProvider, id, customer).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityProvidersDAASService CustomerIdentityProvidersIdpTypeGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var idpType string
		var customer string

		resp, httpRes, err := apiClient.IdentityProvidersDAAS.CustomerIdentityProvidersIdpTypeGet(context.Background(), idpType, customer).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityProvidersDAASService CustomerIdentityProvidersMultiIdentityProvidersPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customer string

		resp, httpRes, err := apiClient.IdentityProvidersDAAS.CustomerIdentityProvidersMultiIdentityProvidersPost(context.Background(), customer).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityProvidersDAASService CustomerIdentityProvidersPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customer string

		resp, httpRes, err := apiClient.IdentityProvidersDAAS.CustomerIdentityProvidersPost(context.Background(), customer).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityProvidersDAASService CustomerIdentityProvidersTypeIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var type_ string
		var id string
		var customer string

		resp, httpRes, err := apiClient.IdentityProvidersDAAS.CustomerIdentityProvidersTypeIdDelete(context.Background(), type_, id, customer).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityProvidersDAASService CustomerIdentityProvidersValidateClientsClientIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var clientId string
		var customer string

		resp, httpRes, err := apiClient.IdentityProvidersDAAS.CustomerIdentityProvidersValidateClientsClientIdGet(context.Background(), clientId, customer).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityProvidersDAASService CustomerIdentityProvidersValidateFqdnGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customer string

		resp, httpRes, err := apiClient.IdentityProvidersDAAS.CustomerIdentityProvidersValidateFqdnGet(context.Background(), customer).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityProvidersDAASService CustomerIdentityProvidersValidateSamlPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customer string

		resp, httpRes, err := apiClient.IdentityProvidersDAAS.CustomerIdentityProvidersValidateSamlPost(context.Background(), customer).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityProvidersDAASService CustomerIdentityprovidersIdentityProviderCreateconnectPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var identityProvider string
		var customer string

		resp, httpRes, err := apiClient.IdentityProvidersDAAS.CustomerIdentityprovidersIdentityProviderCreateconnectPost(context.Background(), identityProvider, customer).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
