/*
Citrix.CloudServices.Cws.Api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixcws

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"os"
	"strings"
)

// IdentityProvidersDAASService IdentityProvidersDAAS service
type IdentityProvidersDAASService service

type IdentityProvidersDAASCustomerIdentityProvidersAllStatusGetRequest struct {
	ctx        context.Context
	ApiService *IdentityProvidersDAASService
	customer   string
}

func (r IdentityProvidersDAASCustomerIdentityProvidersAllStatusGetRequest) Execute() (*IdentityProvidersStatus, *http.Response, error) {
	return r.ApiService.CustomerIdentityProvidersAllStatusGetExecute(r)
}

/*
CustomerIdentityProvidersAllStatusGet Method for CustomerIdentityProvidersAllStatusGet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param customer
	@return IdentityProvidersDAASCustomerIdentityProvidersAllStatusGetRequest
*/
func (a *IdentityProvidersDAASService) CustomerIdentityProvidersAllStatusGet(ctx context.Context, customer string) IdentityProvidersDAASCustomerIdentityProvidersAllStatusGetRequest {
	return IdentityProvidersDAASCustomerIdentityProvidersAllStatusGetRequest{
		ApiService: a,
		ctx:        ctx,
		customer:   customer,
	}
}

// Execute executes the request
//
//	@return IdentityProvidersStatus
func (a *IdentityProvidersDAASService) CustomerIdentityProvidersAllStatusGetExecute(r IdentityProvidersDAASCustomerIdentityProvidersAllStatusGetRequest) (*IdentityProvidersStatus, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *IdentityProvidersStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityProvidersDAASService.CustomerIdentityProvidersAllStatusGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{customer}/identityProviders/all/status"
	localVarPath = strings.Replace(localVarPath, "{"+"customer"+"}", url.PathEscape(parameterValueToString(r.customer, "customer")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type IdentityProvidersDAASCustomerIdentityProvidersClientGetRequest struct {
	ctx        context.Context
	ApiService *IdentityProvidersDAASService
	customer   string
	fqdn       *string
}

func (r IdentityProvidersDAASCustomerIdentityProvidersClientGetRequest) Fqdn(fqdn string) IdentityProvidersDAASCustomerIdentityProvidersClientGetRequest {
	r.fqdn = &fqdn
	return r
}

func (r IdentityProvidersDAASCustomerIdentityProvidersClientGetRequest) Execute() (*CipClientResultModel, *http.Response, error) {
	return r.ApiService.CustomerIdentityProvidersClientGetExecute(r)
}

/*
CustomerIdentityProvidersClientGet Method for CustomerIdentityProvidersClientGet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param customer
	@return IdentityProvidersDAASCustomerIdentityProvidersClientGetRequest
*/
func (a *IdentityProvidersDAASService) CustomerIdentityProvidersClientGet(ctx context.Context, customer string) IdentityProvidersDAASCustomerIdentityProvidersClientGetRequest {
	return IdentityProvidersDAASCustomerIdentityProvidersClientGetRequest{
		ApiService: a,
		ctx:        ctx,
		customer:   customer,
	}
}

// Execute executes the request
//
//	@return CipClientResultModel
func (a *IdentityProvidersDAASService) CustomerIdentityProvidersClientGetExecute(r IdentityProvidersDAASCustomerIdentityProvidersClientGetRequest) (*CipClientResultModel, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CipClientResultModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityProvidersDAASService.CustomerIdentityProvidersClientGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{customer}/identityProviders/client"
	localVarPath = strings.Replace(localVarPath, "{"+"customer"+"}", url.PathEscape(parameterValueToString(r.customer, "customer")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fqdn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fqdn", r.fqdn, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type IdentityProvidersDAASCustomerIdentityProvidersConfigurationSamlIdGetRequest struct {
	ctx        context.Context
	ApiService *IdentityProvidersDAASService
	id         string
	customer   string
}

func (r IdentityProvidersDAASCustomerIdentityProvidersConfigurationSamlIdGetRequest) Execute() (*SamlConfigModel, *http.Response, error) {
	return r.ApiService.CustomerIdentityProvidersConfigurationSamlIdGetExecute(r)
}

/*
CustomerIdentityProvidersConfigurationSamlIdGet Method for CustomerIdentityProvidersConfigurationSamlIdGet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id
	@param customer
	@return IdentityProvidersDAASCustomerIdentityProvidersConfigurationSamlIdGetRequest
*/
func (a *IdentityProvidersDAASService) CustomerIdentityProvidersConfigurationSamlIdGet(ctx context.Context, id string, customer string) IdentityProvidersDAASCustomerIdentityProvidersConfigurationSamlIdGetRequest {
	return IdentityProvidersDAASCustomerIdentityProvidersConfigurationSamlIdGetRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		customer:   customer,
	}
}

// Execute executes the request
//
//	@return SamlConfigModel
func (a *IdentityProvidersDAASService) CustomerIdentityProvidersConfigurationSamlIdGetExecute(r IdentityProvidersDAASCustomerIdentityProvidersConfigurationSamlIdGetRequest) (*SamlConfigModel, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SamlConfigModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityProvidersDAASService.CustomerIdentityProvidersConfigurationSamlIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{customer}/identityProviders/configuration/saml/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"customer"+"}", url.PathEscape(parameterValueToString(r.customer, "customer")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.id) < 0 {
		return localVarReturnValue, nil, reportError("id must have at least 0 elements")
	}
	if strlen(r.id) > 100 {
		return localVarReturnValue, nil, reportError("id must have less than 100 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type IdentityProvidersDAASCustomerIdentityProvidersConfigureGooglePostRequest struct {
	ctx                   context.Context
	ApiService            *IdentityProvidersDAASService
	customer              string
	googleConnectionModel *GoogleConnectionModel
}

func (r IdentityProvidersDAASCustomerIdentityProvidersConfigureGooglePostRequest) GoogleConnectionModel(googleConnectionModel GoogleConnectionModel) IdentityProvidersDAASCustomerIdentityProvidersConfigureGooglePostRequest {
	r.googleConnectionModel = &googleConnectionModel
	return r
}

func (r IdentityProvidersDAASCustomerIdentityProvidersConfigureGooglePostRequest) Execute() (*GoogleResultModel, *http.Response, error) {
	return r.ApiService.CustomerIdentityProvidersConfigureGooglePostExecute(r)
}

/*
CustomerIdentityProvidersConfigureGooglePost Method for CustomerIdentityProvidersConfigureGooglePost

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param customer
	@return IdentityProvidersDAASCustomerIdentityProvidersConfigureGooglePostRequest
*/
func (a *IdentityProvidersDAASService) CustomerIdentityProvidersConfigureGooglePost(ctx context.Context, customer string) IdentityProvidersDAASCustomerIdentityProvidersConfigureGooglePostRequest {
	return IdentityProvidersDAASCustomerIdentityProvidersConfigureGooglePostRequest{
		ApiService: a,
		ctx:        ctx,
		customer:   customer,
	}
}

// Execute executes the request
//
//	@return GoogleResultModel
func (a *IdentityProvidersDAASService) CustomerIdentityProvidersConfigureGooglePostExecute(r IdentityProvidersDAASCustomerIdentityProvidersConfigureGooglePostRequest) (*GoogleResultModel, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *GoogleResultModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityProvidersDAASService.CustomerIdentityProvidersConfigureGooglePost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{customer}/identityProviders/configure/google"
	localVarPath = strings.Replace(localVarPath, "{"+"customer"+"}", url.PathEscape(parameterValueToString(r.customer, "customer")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.googleConnectionModel
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type IdentityProvidersDAASCustomerIdentityProvidersConfigureOktaPostRequest struct {
	ctx                 context.Context
	ApiService          *IdentityProvidersDAASService
	customer            string
	oktaConnectionModel *OktaConnectionModel
}

func (r IdentityProvidersDAASCustomerIdentityProvidersConfigureOktaPostRequest) OktaConnectionModel(oktaConnectionModel OktaConnectionModel) IdentityProvidersDAASCustomerIdentityProvidersConfigureOktaPostRequest {
	r.oktaConnectionModel = &oktaConnectionModel
	return r
}

func (r IdentityProvidersDAASCustomerIdentityProvidersConfigureOktaPostRequest) Execute() (*OktaResultModel, *http.Response, error) {
	return r.ApiService.CustomerIdentityProvidersConfigureOktaPostExecute(r)
}

/*
CustomerIdentityProvidersConfigureOktaPost Method for CustomerIdentityProvidersConfigureOktaPost

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param customer
	@return IdentityProvidersDAASCustomerIdentityProvidersConfigureOktaPostRequest
*/
func (a *IdentityProvidersDAASService) CustomerIdentityProvidersConfigureOktaPost(ctx context.Context, customer string) IdentityProvidersDAASCustomerIdentityProvidersConfigureOktaPostRequest {
	return IdentityProvidersDAASCustomerIdentityProvidersConfigureOktaPostRequest{
		ApiService: a,
		ctx:        ctx,
		customer:   customer,
	}
}

// Execute executes the request
//
//	@return OktaResultModel
func (a *IdentityProvidersDAASService) CustomerIdentityProvidersConfigureOktaPostExecute(r IdentityProvidersDAASCustomerIdentityProvidersConfigureOktaPostRequest) (*OktaResultModel, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *OktaResultModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityProvidersDAASService.CustomerIdentityProvidersConfigureOktaPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{customer}/identityProviders/configure/okta"
	localVarPath = strings.Replace(localVarPath, "{"+"customer"+"}", url.PathEscape(parameterValueToString(r.customer, "customer")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.oktaConnectionModel
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type IdentityProvidersDAASCustomerIdentityProvidersGetRequest struct {
	ctx        context.Context
	ApiService *IdentityProvidersDAASService
	customer   string
}

func (r IdentityProvidersDAASCustomerIdentityProvidersGetRequest) Execute() ([]string, *http.Response, error) {
	return r.ApiService.CustomerIdentityProvidersGetExecute(r)
}

/*
CustomerIdentityProvidersGet Method for CustomerIdentityProvidersGet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param customer
	@return IdentityProvidersDAASCustomerIdentityProvidersGetRequest
*/
func (a *IdentityProvidersDAASService) CustomerIdentityProvidersGet(ctx context.Context, customer string) IdentityProvidersDAASCustomerIdentityProvidersGetRequest {
	return IdentityProvidersDAASCustomerIdentityProvidersGetRequest{
		ApiService: a,
		ctx:        ctx,
		customer:   customer,
	}
}

// Execute executes the request
//
//	@return []string
func (a *IdentityProvidersDAASService) CustomerIdentityProvidersGetExecute(r IdentityProvidersDAASCustomerIdentityProvidersGetRequest) ([]string, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityProvidersDAASService.CustomerIdentityProvidersGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{customer}/identityProviders"
	localVarPath = strings.Replace(localVarPath, "{"+"customer"+"}", url.PathEscape(parameterValueToString(r.customer, "customer")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type IdentityProvidersDAASCustomerIdentityProvidersIdPostRequest struct {
	ctx                     context.Context
	ApiService              *IdentityProvidersDAASService
	id                      string
	customer                string
	idpInstanceConnectModel *IdpInstanceConnectModel
}

func (r IdentityProvidersDAASCustomerIdentityProvidersIdPostRequest) IdpInstanceConnectModel(idpInstanceConnectModel IdpInstanceConnectModel) IdentityProvidersDAASCustomerIdentityProvidersIdPostRequest {
	r.idpInstanceConnectModel = &idpInstanceConnectModel
	return r
}

func (r IdentityProvidersDAASCustomerIdentityProvidersIdPostRequest) Execute() (*IdpStatusModel, *http.Response, error) {
	return r.ApiService.CustomerIdentityProvidersIdPostExecute(r)
}

/*
CustomerIdentityProvidersIdPost Method for CustomerIdentityProvidersIdPost

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id
	@param customer
	@return IdentityProvidersDAASCustomerIdentityProvidersIdPostRequest
*/
func (a *IdentityProvidersDAASService) CustomerIdentityProvidersIdPost(ctx context.Context, id string, customer string) IdentityProvidersDAASCustomerIdentityProvidersIdPostRequest {
	return IdentityProvidersDAASCustomerIdentityProvidersIdPostRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		customer:   customer,
	}
}

// Execute executes the request
//
//	@return IdpStatusModel
func (a *IdentityProvidersDAASService) CustomerIdentityProvidersIdPostExecute(r IdentityProvidersDAASCustomerIdentityProvidersIdPostRequest) (*IdpStatusModel, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *IdpStatusModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityProvidersDAASService.CustomerIdentityProvidersIdPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{customer}/identityProviders/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"customer"+"}", url.PathEscape(parameterValueToString(r.customer, "customer")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.id) < 0 {
		return localVarReturnValue, nil, reportError("id must have at least 0 elements")
	}
	if strlen(r.id) > 100 {
		return localVarReturnValue, nil, reportError("id must have less than 100 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.idpInstanceConnectModel
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type IdentityProvidersDAASCustomerIdentityProvidersIdentityProviderIdPutRequest struct {
	ctx              context.Context
	ApiService       *IdentityProvidersDAASService
	identityProvider string
	id               string
	customer         string
	idpUpdateModel   *IdpUpdateModel
}

func (r IdentityProvidersDAASCustomerIdentityProvidersIdentityProviderIdPutRequest) IdpUpdateModel(idpUpdateModel IdpUpdateModel) IdentityProvidersDAASCustomerIdentityProvidersIdentityProviderIdPutRequest {
	r.idpUpdateModel = &idpUpdateModel
	return r
}

func (r IdentityProvidersDAASCustomerIdentityProvidersIdentityProviderIdPutRequest) Execute() (*IdpUpdateModel, *http.Response, error) {
	return r.ApiService.CustomerIdentityProvidersIdentityProviderIdPutExecute(r)
}

/*
CustomerIdentityProvidersIdentityProviderIdPut Method for CustomerIdentityProvidersIdentityProviderIdPut

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param identityProvider
	@param id
	@param customer
	@return IdentityProvidersDAASCustomerIdentityProvidersIdentityProviderIdPutRequest
*/
func (a *IdentityProvidersDAASService) CustomerIdentityProvidersIdentityProviderIdPut(ctx context.Context, identityProvider string, id string, customer string) IdentityProvidersDAASCustomerIdentityProvidersIdentityProviderIdPutRequest {
	return IdentityProvidersDAASCustomerIdentityProvidersIdentityProviderIdPutRequest{
		ApiService:       a,
		ctx:              ctx,
		identityProvider: identityProvider,
		id:               id,
		customer:         customer,
	}
}

// Execute executes the request
//
//	@return IdpUpdateModel
func (a *IdentityProvidersDAASService) CustomerIdentityProvidersIdentityProviderIdPutExecute(r IdentityProvidersDAASCustomerIdentityProvidersIdentityProviderIdPutRequest) (*IdpUpdateModel, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *IdpUpdateModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityProvidersDAASService.CustomerIdentityProvidersIdentityProviderIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{customer}/identityProviders/{identityProvider}/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"identityProvider"+"}", url.PathEscape(parameterValueToString(r.identityProvider, "identityProvider")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"customer"+"}", url.PathEscape(parameterValueToString(r.customer, "customer")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.id) < 0 {
		return localVarReturnValue, nil, reportError("id must have at least 0 elements")
	}
	if strlen(r.id) > 100 {
		return localVarReturnValue, nil, reportError("id must have less than 100 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.idpUpdateModel
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type IdentityProvidersDAASCustomerIdentityProvidersIdpTypeGetRequest struct {
	ctx               context.Context
	ApiService        *IdentityProvidersDAASService
	idpType           string
	customer          string
	limit             *int32
	continuationToken *string
}

func (r IdentityProvidersDAASCustomerIdentityProvidersIdpTypeGetRequest) Limit(limit int32) IdentityProvidersDAASCustomerIdentityProvidersIdpTypeGetRequest {
	r.limit = &limit
	return r
}

func (r IdentityProvidersDAASCustomerIdentityProvidersIdpTypeGetRequest) ContinuationToken(continuationToken string) IdentityProvidersDAASCustomerIdentityProvidersIdpTypeGetRequest {
	r.continuationToken = &continuationToken
	return r
}

func (r IdentityProvidersDAASCustomerIdentityProvidersIdpTypeGetRequest) Execute() (*IdpStatusesModel, *http.Response, error) {
	return r.ApiService.CustomerIdentityProvidersIdpTypeGetExecute(r)
}

/*
CustomerIdentityProvidersIdpTypeGet Method for CustomerIdentityProvidersIdpTypeGet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param idpType
	@param customer
	@return IdentityProvidersDAASCustomerIdentityProvidersIdpTypeGetRequest
*/
func (a *IdentityProvidersDAASService) CustomerIdentityProvidersIdpTypeGet(ctx context.Context, idpType string, customer string) IdentityProvidersDAASCustomerIdentityProvidersIdpTypeGetRequest {
	return IdentityProvidersDAASCustomerIdentityProvidersIdpTypeGetRequest{
		ApiService: a,
		ctx:        ctx,
		idpType:    idpType,
		customer:   customer,
	}
}

// Execute executes the request
//
//	@return IdpStatusesModel
func (a *IdentityProvidersDAASService) CustomerIdentityProvidersIdpTypeGetExecute(r IdentityProvidersDAASCustomerIdentityProvidersIdpTypeGetRequest) (*IdpStatusesModel, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *IdpStatusesModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityProvidersDAASService.CustomerIdentityProvidersIdpTypeGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{customer}/identityProviders/{idpType}"
	localVarPath = strings.Replace(localVarPath, "{"+"idpType"+"}", url.PathEscape(parameterValueToString(r.idpType, "idpType")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"customer"+"}", url.PathEscape(parameterValueToString(r.customer, "customer")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.idpType) < 0 {
		return localVarReturnValue, nil, reportError("idpType must have at least 0 elements")
	}
	if strlen(r.idpType) > 100 {
		return localVarReturnValue, nil, reportError("idpType must have less than 100 elements")
	}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
		var defaultValue int32 = 30
		r.limit = &defaultValue
	}
	if r.continuationToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "continuationToken", r.continuationToken, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type IdentityProvidersDAASCustomerIdentityProvidersMultiIdentityProvidersPostRequest struct {
	ctx            context.Context
	ApiService     *IdentityProvidersDAASService
	customer       string
	idpCreateModel *IdpCreateModel
}

func (r IdentityProvidersDAASCustomerIdentityProvidersMultiIdentityProvidersPostRequest) IdpCreateModel(idpCreateModel IdpCreateModel) IdentityProvidersDAASCustomerIdentityProvidersMultiIdentityProvidersPostRequest {
	r.idpCreateModel = &idpCreateModel
	return r
}

func (r IdentityProvidersDAASCustomerIdentityProvidersMultiIdentityProvidersPostRequest) Execute() (*IdpStatusModel, *http.Response, error) {
	return r.ApiService.CustomerIdentityProvidersMultiIdentityProvidersPostExecute(r)
}

/*
CustomerIdentityProvidersMultiIdentityProvidersPost Method for CustomerIdentityProvidersMultiIdentityProvidersPost

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param customer
	@return IdentityProvidersDAASCustomerIdentityProvidersMultiIdentityProvidersPostRequest
*/
func (a *IdentityProvidersDAASService) CustomerIdentityProvidersMultiIdentityProvidersPost(ctx context.Context, customer string) IdentityProvidersDAASCustomerIdentityProvidersMultiIdentityProvidersPostRequest {
	return IdentityProvidersDAASCustomerIdentityProvidersMultiIdentityProvidersPostRequest{
		ApiService: a,
		ctx:        ctx,
		customer:   customer,
	}
}

// Execute executes the request
//
//	@return IdpStatusModel
func (a *IdentityProvidersDAASService) CustomerIdentityProvidersMultiIdentityProvidersPostExecute(r IdentityProvidersDAASCustomerIdentityProvidersMultiIdentityProvidersPostRequest) (*IdpStatusModel, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *IdpStatusModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityProvidersDAASService.CustomerIdentityProvidersMultiIdentityProvidersPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{customer}/identityProviders/multiIdentityProviders"
	localVarPath = strings.Replace(localVarPath, "{"+"customer"+"}", url.PathEscape(parameterValueToString(r.customer, "customer")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.idpCreateModel
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type IdentityProvidersDAASCustomerIdentityProvidersPostRequest struct {
	ctx             context.Context
	ApiService      *IdentityProvidersDAASService
	customer        string
	idpConnectModel *IdpConnectModel
}

func (r IdentityProvidersDAASCustomerIdentityProvidersPostRequest) IdpConnectModel(idpConnectModel IdpConnectModel) IdentityProvidersDAASCustomerIdentityProvidersPostRequest {
	r.idpConnectModel = &idpConnectModel
	return r
}

func (r IdentityProvidersDAASCustomerIdentityProvidersPostRequest) Execute() (*IdpStatusModel, *http.Response, error) {
	return r.ApiService.CustomerIdentityProvidersPostExecute(r)
}

/*
CustomerIdentityProvidersPost Method for CustomerIdentityProvidersPost

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param customer
	@return IdentityProvidersDAASCustomerIdentityProvidersPostRequest
*/
func (a *IdentityProvidersDAASService) CustomerIdentityProvidersPost(ctx context.Context, customer string) IdentityProvidersDAASCustomerIdentityProvidersPostRequest {
	return IdentityProvidersDAASCustomerIdentityProvidersPostRequest{
		ApiService: a,
		ctx:        ctx,
		customer:   customer,
	}
}

// Execute executes the request
//
//	@return IdpStatusModel
func (a *IdentityProvidersDAASService) CustomerIdentityProvidersPostExecute(r IdentityProvidersDAASCustomerIdentityProvidersPostRequest) (*IdpStatusModel, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *IdpStatusModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityProvidersDAASService.CustomerIdentityProvidersPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{customer}/identityProviders"
	localVarPath = strings.Replace(localVarPath, "{"+"customer"+"}", url.PathEscape(parameterValueToString(r.customer, "customer")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.idpConnectModel
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type IdentityProvidersDAASCustomerIdentityProvidersTypeIdDeleteRequest struct {
	ctx        context.Context
	ApiService *IdentityProvidersDAASService
	type_      string
	id         string
	customer   string
}

func (r IdentityProvidersDAASCustomerIdentityProvidersTypeIdDeleteRequest) Execute() (*IdpStatusModel, *http.Response, error) {
	return r.ApiService.CustomerIdentityProvidersTypeIdDeleteExecute(r)
}

/*
CustomerIdentityProvidersTypeIdDelete Method for CustomerIdentityProvidersTypeIdDelete

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param type_
	@param id
	@param customer
	@return IdentityProvidersDAASCustomerIdentityProvidersTypeIdDeleteRequest
*/
func (a *IdentityProvidersDAASService) CustomerIdentityProvidersTypeIdDelete(ctx context.Context, type_ string, id string, customer string) IdentityProvidersDAASCustomerIdentityProvidersTypeIdDeleteRequest {
	return IdentityProvidersDAASCustomerIdentityProvidersTypeIdDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		type_:      type_,
		id:         id,
		customer:   customer,
	}
}

// Execute executes the request
//
//	@return IdpStatusModel
func (a *IdentityProvidersDAASService) CustomerIdentityProvidersTypeIdDeleteExecute(r IdentityProvidersDAASCustomerIdentityProvidersTypeIdDeleteRequest) (*IdpStatusModel, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodDelete
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *IdpStatusModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityProvidersDAASService.CustomerIdentityProvidersTypeIdDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{customer}/identityProviders/{type}/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"type"+"}", url.PathEscape(parameterValueToString(r.type_, "type_")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"customer"+"}", url.PathEscape(parameterValueToString(r.customer, "customer")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.id) < 0 {
		return localVarReturnValue, nil, reportError("id must have at least 0 elements")
	}
	if strlen(r.id) > 100 {
		return localVarReturnValue, nil, reportError("id must have less than 100 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type IdentityProvidersDAASCustomerIdentityProvidersValidateClientsClientIdGetRequest struct {
	ctx        context.Context
	ApiService *IdentityProvidersDAASService
	clientId   string
	customer   string
}

func (r IdentityProvidersDAASCustomerIdentityProvidersValidateClientsClientIdGetRequest) Execute() (bool, *http.Response, error) {
	return r.ApiService.CustomerIdentityProvidersValidateClientsClientIdGetExecute(r)
}

/*
CustomerIdentityProvidersValidateClientsClientIdGet Method for CustomerIdentityProvidersValidateClientsClientIdGet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param clientId
	@param customer
	@return IdentityProvidersDAASCustomerIdentityProvidersValidateClientsClientIdGetRequest
*/
func (a *IdentityProvidersDAASService) CustomerIdentityProvidersValidateClientsClientIdGet(ctx context.Context, clientId string, customer string) IdentityProvidersDAASCustomerIdentityProvidersValidateClientsClientIdGetRequest {
	return IdentityProvidersDAASCustomerIdentityProvidersValidateClientsClientIdGetRequest{
		ApiService: a,
		ctx:        ctx,
		clientId:   clientId,
		customer:   customer,
	}
}

// Execute executes the request
//
//	@return bool
func (a *IdentityProvidersDAASService) CustomerIdentityProvidersValidateClientsClientIdGetExecute(r IdentityProvidersDAASCustomerIdentityProvidersValidateClientsClientIdGetRequest) (bool, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue bool
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityProvidersDAASService.CustomerIdentityProvidersValidateClientsClientIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{customer}/identityProviders/validate/clients/{clientId}"
	localVarPath = strings.Replace(localVarPath, "{"+"clientId"+"}", url.PathEscape(parameterValueToString(r.clientId, "clientId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"customer"+"}", url.PathEscape(parameterValueToString(r.customer, "customer")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.clientId) < 0 {
		return localVarReturnValue, nil, reportError("clientId must have at least 0 elements")
	}
	if strlen(r.clientId) > 100 {
		return localVarReturnValue, nil, reportError("clientId must have less than 100 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type IdentityProvidersDAASCustomerIdentityProvidersValidateFqdnGetRequest struct {
	ctx        context.Context
	ApiService *IdentityProvidersDAASService
	customer   string
	fqdn       *string
}

func (r IdentityProvidersDAASCustomerIdentityProvidersValidateFqdnGetRequest) Fqdn(fqdn string) IdentityProvidersDAASCustomerIdentityProvidersValidateFqdnGetRequest {
	r.fqdn = &fqdn
	return r
}

func (r IdentityProvidersDAASCustomerIdentityProvidersValidateFqdnGetRequest) Execute() (bool, *http.Response, error) {
	return r.ApiService.CustomerIdentityProvidersValidateFqdnGetExecute(r)
}

/*
CustomerIdentityProvidersValidateFqdnGet Method for CustomerIdentityProvidersValidateFqdnGet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param customer
	@return IdentityProvidersDAASCustomerIdentityProvidersValidateFqdnGetRequest
*/
func (a *IdentityProvidersDAASService) CustomerIdentityProvidersValidateFqdnGet(ctx context.Context, customer string) IdentityProvidersDAASCustomerIdentityProvidersValidateFqdnGetRequest {
	return IdentityProvidersDAASCustomerIdentityProvidersValidateFqdnGetRequest{
		ApiService: a,
		ctx:        ctx,
		customer:   customer,
	}
}

// Execute executes the request
//
//	@return bool
func (a *IdentityProvidersDAASService) CustomerIdentityProvidersValidateFqdnGetExecute(r IdentityProvidersDAASCustomerIdentityProvidersValidateFqdnGetRequest) (bool, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue bool
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityProvidersDAASService.CustomerIdentityProvidersValidateFqdnGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{customer}/identityProviders/validate/fqdn"
	localVarPath = strings.Replace(localVarPath, "{"+"customer"+"}", url.PathEscape(parameterValueToString(r.customer, "customer")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fqdn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fqdn", r.fqdn, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type IdentityProvidersDAASCustomerIdentityProvidersValidateSamlPostRequest struct {
	ctx        context.Context
	ApiService *IdentityProvidersDAASService
	customer   string
	fileName   *string
	certFile   *os.File
}

func (r IdentityProvidersDAASCustomerIdentityProvidersValidateSamlPostRequest) FileName(fileName string) IdentityProvidersDAASCustomerIdentityProvidersValidateSamlPostRequest {
	r.fileName = &fileName
	return r
}

func (r IdentityProvidersDAASCustomerIdentityProvidersValidateSamlPostRequest) CertFile(certFile *os.File) IdentityProvidersDAASCustomerIdentityProvidersValidateSamlPostRequest {
	r.certFile = certFile
	return r
}

func (r IdentityProvidersDAASCustomerIdentityProvidersValidateSamlPostRequest) Execute() (*SamlCertInfoModel, *http.Response, error) {
	return r.ApiService.CustomerIdentityProvidersValidateSamlPostExecute(r)
}

/*
CustomerIdentityProvidersValidateSamlPost Method for CustomerIdentityProvidersValidateSamlPost

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param customer
	@return IdentityProvidersDAASCustomerIdentityProvidersValidateSamlPostRequest
*/
func (a *IdentityProvidersDAASService) CustomerIdentityProvidersValidateSamlPost(ctx context.Context, customer string) IdentityProvidersDAASCustomerIdentityProvidersValidateSamlPostRequest {
	return IdentityProvidersDAASCustomerIdentityProvidersValidateSamlPostRequest{
		ApiService: a,
		ctx:        ctx,
		customer:   customer,
	}
}

// Execute executes the request
//
//	@return SamlCertInfoModel
func (a *IdentityProvidersDAASService) CustomerIdentityProvidersValidateSamlPostExecute(r IdentityProvidersDAASCustomerIdentityProvidersValidateSamlPostRequest) (*SamlCertInfoModel, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SamlCertInfoModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityProvidersDAASService.CustomerIdentityProvidersValidateSamlPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{customer}/identityProviders/validate/saml"
	localVarPath = strings.Replace(localVarPath, "{"+"customer"+"}", url.PathEscape(parameterValueToString(r.customer, "customer")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fileName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fileName", r.fileName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	var certFileLocalVarFormFileName string
	var certFileLocalVarFileName string
	var certFileLocalVarFileBytes []byte

	certFileLocalVarFormFileName = "certFile"
	certFileLocalVarFile := r.certFile

	if certFileLocalVarFile != nil {
		fbs, _ := io.ReadAll(certFileLocalVarFile)

		certFileLocalVarFileBytes = fbs
		certFileLocalVarFileName = certFileLocalVarFile.Name()
		certFileLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: certFileLocalVarFileBytes, fileName: certFileLocalVarFileName, formFileName: certFileLocalVarFormFileName})
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type IdentityProvidersDAASCustomerIdentityprovidersIdentityProviderCreateconnectPostRequest struct {
	ctx                           context.Context
	ApiService                    *IdentityProvidersDAASService
	identityProvider              string
	customer                      string
	idpInstanceCreateConnectModel *IdpInstanceCreateConnectModel
}

func (r IdentityProvidersDAASCustomerIdentityprovidersIdentityProviderCreateconnectPostRequest) IdpInstanceCreateConnectModel(idpInstanceCreateConnectModel IdpInstanceCreateConnectModel) IdentityProvidersDAASCustomerIdentityprovidersIdentityProviderCreateconnectPostRequest {
	r.idpInstanceCreateConnectModel = &idpInstanceCreateConnectModel
	return r
}

func (r IdentityProvidersDAASCustomerIdentityprovidersIdentityProviderCreateconnectPostRequest) Execute() (*IdpStatusModel, *http.Response, error) {
	return r.ApiService.CustomerIdentityprovidersIdentityProviderCreateconnectPostExecute(r)
}

/*
CustomerIdentityprovidersIdentityProviderCreateconnectPost Method for CustomerIdentityprovidersIdentityProviderCreateconnectPost

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param identityProvider
	@param customer
	@return IdentityProvidersDAASCustomerIdentityprovidersIdentityProviderCreateconnectPostRequest
*/
func (a *IdentityProvidersDAASService) CustomerIdentityprovidersIdentityProviderCreateconnectPost(ctx context.Context, identityProvider string, customer string) IdentityProvidersDAASCustomerIdentityprovidersIdentityProviderCreateconnectPostRequest {
	return IdentityProvidersDAASCustomerIdentityprovidersIdentityProviderCreateconnectPostRequest{
		ApiService:       a,
		ctx:              ctx,
		identityProvider: identityProvider,
		customer:         customer,
	}
}

// Execute executes the request
//
//	@return IdpStatusModel
func (a *IdentityProvidersDAASService) CustomerIdentityprovidersIdentityProviderCreateconnectPostExecute(r IdentityProvidersDAASCustomerIdentityprovidersIdentityProviderCreateconnectPostRequest) (*IdpStatusModel, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *IdpStatusModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityProvidersDAASService.CustomerIdentityprovidersIdentityProviderCreateconnectPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{customer}/identityproviders/{identityProvider}/$createconnect"
	localVarPath = strings.Replace(localVarPath, "{"+"identityProvider"+"}", url.PathEscape(parameterValueToString(r.identityProvider, "identityProvider")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"customer"+"}", url.PathEscape(parameterValueToString(r.customer, "customer")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.idpInstanceCreateConnectModel
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
