/*
Citrix.CloudServices.Cws.Api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixcws

import (
	"encoding/json"
	"fmt"
)

// SamlAuthContextType the model 'SamlAuthContextType'
type SamlAuthContextType string

// List of SamlAuthContextType
const (
	SAMLAUTHCONTEXTTYPE_UNSPECIFIED                  SamlAuthContextType = "Unspecified"
	SAMLAUTHCONTEXTTYPE_USER_NAME_AND_PASSWORD       SamlAuthContextType = "UserNameAndPassword"
	SAMLAUTHCONTEXTTYPE_X509_CERT                    SamlAuthContextType = "X509Cert"
	SAMLAUTHCONTEXTTYPE_INTEGRATED_WIN_AUTH          SamlAuthContextType = "IntegratedWinAuth"
	SAMLAUTHCONTEXTTYPE_KERBEROS                     SamlAuthContextType = "Kerberos"
	SAMLAUTHCONTEXTTYPE_PASSWORD_PROTECTED_TRANSPORT SamlAuthContextType = "PasswordProtectedTransport"
	SAMLAUTHCONTEXTTYPE_TLS_CLIENT                   SamlAuthContextType = "TLSClient"
)

// All allowed values of SamlAuthContextType enum
var AllowedSamlAuthContextTypeEnumValues = []SamlAuthContextType{
	"Unspecified",
	"UserNameAndPassword",
	"X509Cert",
	"IntegratedWinAuth",
	"Kerberos",
	"PasswordProtectedTransport",
	"TLSClient",
}

func (v *SamlAuthContextType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SamlAuthContextType(value)
	for _, existing := range AllowedSamlAuthContextTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SamlAuthContextType", value)
}

// NewSamlAuthContextTypeFromValue returns a pointer to a valid SamlAuthContextType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSamlAuthContextTypeFromValue(v string) (*SamlAuthContextType, error) {
	ev := SamlAuthContextType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SamlAuthContextType: valid values are %v", v, AllowedSamlAuthContextTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SamlAuthContextType) IsValid() bool {
	for _, existing := range AllowedSamlAuthContextTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SamlAuthContextType value
func (v SamlAuthContextType) Ptr() *SamlAuthContextType {
	return &v
}

type NullableSamlAuthContextType struct {
	value *SamlAuthContextType
	isSet bool
}

func (v NullableSamlAuthContextType) Get() *SamlAuthContextType {
	return v.value
}

func (v *NullableSamlAuthContextType) Set(val *SamlAuthContextType) {
	v.value = val
	v.isSet = true
}

func (v NullableSamlAuthContextType) IsSet() bool {
	return v.isSet
}

func (v *NullableSamlAuthContextType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSamlAuthContextType(val *SamlAuthContextType) *NullableSamlAuthContextType {
	return &NullableSamlAuthContextType{value: val, isSet: true}
}

func (v NullableSamlAuthContextType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSamlAuthContextType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
