/*
Citrix.CloudServices.Cws.Api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixcws

import (
	"encoding/json"
	"fmt"
)

// SamlResponseType the model 'SamlResponseType'
type SamlResponseType string

// List of SamlResponseType
const (
	SAMLRESPONSETYPE_SIGN_EITHER_RESPONSE_OR_ASSERTION SamlResponseType = "SignEitherResponseOrAssertion"
	SAMLRESPONSETYPE_MUST_SIGN_RESPONSE                SamlResponseType = "MustSignResponse"
	SAMLRESPONSETYPE_MUST_SIGN_ASSERTION               SamlResponseType = "MustSignAssertion"
)

// All allowed values of SamlResponseType enum
var AllowedSamlResponseTypeEnumValues = []SamlResponseType{
	"SignEitherResponseOrAssertion",
	"MustSignResponse",
	"MustSignAssertion",
}

func (v *SamlResponseType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SamlResponseType(value)
	for _, existing := range AllowedSamlResponseTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SamlResponseType", value)
}

// NewSamlResponseTypeFromValue returns a pointer to a valid SamlResponseType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSamlResponseTypeFromValue(v string) (*SamlResponseType, error) {
	ev := SamlResponseType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SamlResponseType: valid values are %v", v, AllowedSamlResponseTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SamlResponseType) IsValid() bool {
	for _, existing := range AllowedSamlResponseTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SamlResponseType value
func (v SamlResponseType) Ptr() *SamlResponseType {
	return &v
}

type NullableSamlResponseType struct {
	value *SamlResponseType
	isSet bool
}

func (v NullableSamlResponseType) Get() *SamlResponseType {
	return v.value
}

func (v *NullableSamlResponseType) Set(val *SamlResponseType) {
	v.value = val
	v.isSet = true
}

func (v NullableSamlResponseType) IsSet() bool {
	return v.isSet
}

func (v *NullableSamlResponseType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSamlResponseType(val *SamlResponseType) *NullableSamlResponseType {
	return &NullableSamlResponseType{value: val, isSet: true}
}

func (v NullableSamlResponseType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSamlResponseType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
