/*
Citrix.CloudServices.Cws.Api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixcws

import (
	"encoding/json"
	"fmt"
)

// SamlAuthContextComparisonType the model 'SamlAuthContextComparisonType'
type SamlAuthContextComparisonType string

// List of SamlAuthContextComparisonType
const (
	SAMLAUTHCONTEXTCOMPARISONTYPE_EXACT SamlAuthContextComparisonType = "Exact"
	SAMLAUTHCONTEXTCOMPARISONTYPE_MINIMUM SamlAuthContextComparisonType = "Minimum"
)

// All allowed values of SamlAuthContextComparisonType enum
var AllowedSamlAuthContextComparisonTypeEnumValues = []SamlAuthContextComparisonType{
	"Exact",
	"Minimum",
}

func (v *SamlAuthContextComparisonType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SamlAuthContextComparisonType(value)
	for _, existing := range AllowedSamlAuthContextComparisonTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SamlAuthContextComparisonType", value)
}

// NewSamlAuthContextComparisonTypeFromValue returns a pointer to a valid SamlAuthContextComparisonType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSamlAuthContextComparisonTypeFromValue(v string) (*SamlAuthContextComparisonType, error) {
	ev := SamlAuthContextComparisonType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SamlAuthContextComparisonType: valid values are %v", v, AllowedSamlAuthContextComparisonTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SamlAuthContextComparisonType) IsValid() bool {
	for _, existing := range AllowedSamlAuthContextComparisonTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SamlAuthContextComparisonType value
func (v SamlAuthContextComparisonType) Ptr() *SamlAuthContextComparisonType {
	return &v
}

type NullableSamlAuthContextComparisonType struct {
	value *SamlAuthContextComparisonType
	isSet bool
}

func (v NullableSamlAuthContextComparisonType) Get() *SamlAuthContextComparisonType {
	return v.value
}

func (v *NullableSamlAuthContextComparisonType) Set(val *SamlAuthContextComparisonType) {
	v.value = val
	v.isSet = true
}

func (v NullableSamlAuthContextComparisonType) IsSet() bool {
	return v.isSet
}

func (v *NullableSamlAuthContextComparisonType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSamlAuthContextComparisonType(val *SamlAuthContextComparisonType) *NullableSamlAuthContextComparisonType {
	return &NullableSamlAuthContextComparisonType{value: val, isSet: true}
}

func (v NullableSamlAuthContextComparisonType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSamlAuthContextComparisonType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

