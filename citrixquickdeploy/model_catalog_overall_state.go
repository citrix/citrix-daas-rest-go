/*
Citrix Virtual App & Desktop Catalog Service 147.0.26651.57932

Catalog Service

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickdeploy

import (
	"encoding/json"
	"fmt"
)

// CatalogOverallState the model 'CatalogOverallState'
type CatalogOverallState string

// List of CatalogOverallState
const (
	CATALOGOVERALLSTATE_PRE_DEPLOYMENT CatalogOverallState = "PreDeployment"
	CATALOGOVERALLSTATE_ACTIVE         CatalogOverallState = "Active"
	CATALOGOVERALLSTATE_PROCESSING     CatalogOverallState = "Processing"
	CATALOGOVERALLSTATE_INPUT_REQUIRED CatalogOverallState = "InputRequired"
	CATALOGOVERALLSTATE_ERROR          CatalogOverallState = "Error"
	CATALOGOVERALLSTATE_DELETING       CatalogOverallState = "Deleting"
	CATALOGOVERALLSTATE_UNKNOWN        CatalogOverallState = "Unknown"
	CATALOGOVERALLSTATE_NOT_FOUND      CatalogOverallState = "NotFound"
)

// All allowed values of CatalogOverallState enum
var AllowedCatalogOverallStateEnumValues = []CatalogOverallState{
	"PreDeployment",
	"Active",
	"Processing",
	"InputRequired",
	"Error",
	"Deleting",
	"Unknown",
	"NotFound",
}

func (v *CatalogOverallState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	*v = CatalogOverallState(value)
	return nil
}

// NewCatalogOverallStateFromValue returns a pointer to a valid CatalogOverallState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCatalogOverallStateFromValue(v string) (*CatalogOverallState, error) {
	ev := CatalogOverallState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CatalogOverallState: valid values are %v", v, AllowedCatalogOverallStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CatalogOverallState) IsValid() bool {
	for _, existing := range AllowedCatalogOverallStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CatalogOverallState value
func (v CatalogOverallState) Ptr() *CatalogOverallState {
	return &v
}

type NullableCatalogOverallState struct {
	value *CatalogOverallState
	isSet bool
}

func (v NullableCatalogOverallState) Get() *CatalogOverallState {
	return v.value
}

func (v *NullableCatalogOverallState) Set(val *CatalogOverallState) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogOverallState) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogOverallState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogOverallState(val *CatalogOverallState) *NullableCatalogOverallState {
	return &NullableCatalogOverallState{value: val, isSet: true}
}

func (v NullableCatalogOverallState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogOverallState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
