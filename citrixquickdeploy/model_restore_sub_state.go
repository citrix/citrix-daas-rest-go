/*
Citrix Virtual App & Desktop Catalog Service 147.0.26651.57932

Catalog Service

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickdeploy

import (
	"encoding/json"
	"fmt"
)

// RestoreSubState the model 'RestoreSubState'
type RestoreSubState string

// List of RestoreSubState
const (
	RESTORESUBSTATE_STOPPING_VM          RestoreSubState = "StoppingVm"
	RESTORESUBSTATE_ATTACH_DISK          RestoreSubState = "AttachDisk"
	RESTORESUBSTATE_STARTING_VM          RestoreSubState = "StartingVm"
	RESTORESUBSTATE_FAILED_WITH_ROLLBACK RestoreSubState = "FailedWithRollback"
)

// All allowed values of RestoreSubState enum
var AllowedRestoreSubStateEnumValues = []RestoreSubState{
	"StoppingVm",
	"AttachDisk",
	"StartingVm",
	"FailedWithRollback",
}

func (v *RestoreSubState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	*v = RestoreSubState(value)
	return nil
}

// NewRestoreSubStateFromValue returns a pointer to a valid RestoreSubState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRestoreSubStateFromValue(v string) (*RestoreSubState, error) {
	ev := RestoreSubState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RestoreSubState: valid values are %v", v, AllowedRestoreSubStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RestoreSubState) IsValid() bool {
	for _, existing := range AllowedRestoreSubStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RestoreSubState value
func (v RestoreSubState) Ptr() *RestoreSubState {
	return &v
}

type NullableRestoreSubState struct {
	value *RestoreSubState
	isSet bool
}

func (v NullableRestoreSubState) Get() *RestoreSubState {
	return v.value
}

func (v *NullableRestoreSubState) Set(val *RestoreSubState) {
	v.value = val
	v.isSet = true
}

func (v NullableRestoreSubState) IsSet() bool {
	return v.isSet
}

func (v *NullableRestoreSubState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestoreSubState(val *RestoreSubState) *NullableRestoreSubState {
	return &NullableRestoreSubState{value: val, isSet: true}
}

func (v NullableRestoreSubState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestoreSubState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
