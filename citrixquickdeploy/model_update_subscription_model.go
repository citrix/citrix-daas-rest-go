/*
Citrix Virtual App & Desktop Catalog Service 148.0.26750.34636

Catalog Service

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickdeploy

import (
	"encoding/json"
	"time"
)

// checks if the UpdateSubscriptionModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateSubscriptionModel{}

// UpdateSubscriptionModel struct for UpdateSubscriptionModel
type UpdateSubscriptionModel struct {
	// The name of the user that consented to using managed subscription
	ConsentedBy *string `json:"consentedBy,omitempty"`
	// ID of the Azure AD App to use with this subscription
	ClientId *string `json:"clientId,omitempty"`
	// Client Secret of the Azure App
	ClientSecret *string `json:"clientSecret,omitempty"`
	// The expiration date of the user provided secret, if one was used
	SecretExpirationDate *time.Time `json:"secretExpirationDate,omitempty"`
	// ID of the Auzre tenant the subscription and app belong to
	TenantId *string `json:"tenantId,omitempty"`
	// The identifier string containing the CSP customer ID and site ID.
	CspCustomer *string `json:"cspCustomer,omitempty"`
}

// NewUpdateSubscriptionModelWithDefaults instantiates a new UpdateSubscriptionModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateSubscriptionModelWithDefaults() *UpdateSubscriptionModel {
	this := UpdateSubscriptionModel{}
	return &this
}

// GetConsentedBy returns the ConsentedBy field value if set, zero value otherwise.
func (o *UpdateSubscriptionModel) GetConsentedBy() string {
	if o == nil || IsNil(o.ConsentedBy) {
		var ret string
		return ret
	}
	return *o.ConsentedBy
}

// GetConsentedByOk returns a tuple with the ConsentedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateSubscriptionModel) GetConsentedByOk() (*string, bool) {
	if o == nil || IsNil(o.ConsentedBy) {
		return nil, false
	}
	return o.ConsentedBy, true
}

// SetConsentedBy gets a reference to the given string and assigns it to the ConsentedBy field.
func (o *UpdateSubscriptionModel) SetConsentedBy(v string) {
	o.ConsentedBy = &v
}

// GetClientId returns the ClientId field value if set, zero value otherwise.
func (o *UpdateSubscriptionModel) GetClientId() string {
	if o == nil || IsNil(o.ClientId) {
		var ret string
		return ret
	}
	return *o.ClientId
}

// GetClientIdOk returns a tuple with the ClientId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateSubscriptionModel) GetClientIdOk() (*string, bool) {
	if o == nil || IsNil(o.ClientId) {
		return nil, false
	}
	return o.ClientId, true
}

// SetClientId gets a reference to the given string and assigns it to the ClientId field.
func (o *UpdateSubscriptionModel) SetClientId(v string) {
	o.ClientId = &v
}

// GetClientSecret returns the ClientSecret field value if set, zero value otherwise.
func (o *UpdateSubscriptionModel) GetClientSecret() string {
	if o == nil || IsNil(o.ClientSecret) {
		var ret string
		return ret
	}
	return *o.ClientSecret
}

// GetClientSecretOk returns a tuple with the ClientSecret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateSubscriptionModel) GetClientSecretOk() (*string, bool) {
	if o == nil || IsNil(o.ClientSecret) {
		return nil, false
	}
	return o.ClientSecret, true
}

// SetClientSecret gets a reference to the given string and assigns it to the ClientSecret field.
func (o *UpdateSubscriptionModel) SetClientSecret(v string) {
	o.ClientSecret = &v
}

// GetSecretExpirationDate returns the SecretExpirationDate field value if set, zero value otherwise.
func (o *UpdateSubscriptionModel) GetSecretExpirationDate() time.Time {
	if o == nil || IsNil(o.SecretExpirationDate) {
		var ret time.Time
		return ret
	}
	return *o.SecretExpirationDate
}

// GetSecretExpirationDateOk returns a tuple with the SecretExpirationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateSubscriptionModel) GetSecretExpirationDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.SecretExpirationDate) {
		return nil, false
	}
	return o.SecretExpirationDate, true
}

// SetSecretExpirationDate gets a reference to the given time.Time and assigns it to the SecretExpirationDate field.
func (o *UpdateSubscriptionModel) SetSecretExpirationDate(v time.Time) {
	o.SecretExpirationDate = &v
}

// GetTenantId returns the TenantId field value if set, zero value otherwise.
func (o *UpdateSubscriptionModel) GetTenantId() string {
	if o == nil || IsNil(o.TenantId) {
		var ret string
		return ret
	}
	return *o.TenantId
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateSubscriptionModel) GetTenantIdOk() (*string, bool) {
	if o == nil || IsNil(o.TenantId) {
		return nil, false
	}
	return o.TenantId, true
}

// SetTenantId gets a reference to the given string and assigns it to the TenantId field.
func (o *UpdateSubscriptionModel) SetTenantId(v string) {
	o.TenantId = &v
}

// GetCspCustomer returns the CspCustomer field value if set, zero value otherwise.
func (o *UpdateSubscriptionModel) GetCspCustomer() string {
	if o == nil || IsNil(o.CspCustomer) {
		var ret string
		return ret
	}
	return *o.CspCustomer
}

// GetCspCustomerOk returns a tuple with the CspCustomer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateSubscriptionModel) GetCspCustomerOk() (*string, bool) {
	if o == nil || IsNil(o.CspCustomer) {
		return nil, false
	}
	return o.CspCustomer, true
}

// SetCspCustomer gets a reference to the given string and assigns it to the CspCustomer field.
func (o *UpdateSubscriptionModel) SetCspCustomer(v string) {
	o.CspCustomer = &v
}

func (o UpdateSubscriptionModel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateSubscriptionModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ConsentedBy) {
		toSerialize["consentedBy"] = o.ConsentedBy
	}
	if !IsNil(o.ClientId) {
		toSerialize["clientId"] = o.ClientId
	}
	if !IsNil(o.ClientSecret) {
		toSerialize["clientSecret"] = o.ClientSecret
	}
	if !IsNil(o.SecretExpirationDate) {
		toSerialize["secretExpirationDate"] = o.SecretExpirationDate
	}
	if !IsNil(o.TenantId) {
		toSerialize["tenantId"] = o.TenantId
	}
	if !IsNil(o.CspCustomer) {
		toSerialize["cspCustomer"] = o.CspCustomer
	}
	return toSerialize, nil
}

type NullableUpdateSubscriptionModel struct {
	value *UpdateSubscriptionModel
	isSet bool
}

func (v NullableUpdateSubscriptionModel) Get() *UpdateSubscriptionModel {
	return v.value
}

func (v *NullableUpdateSubscriptionModel) Set(val *UpdateSubscriptionModel) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateSubscriptionModel) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateSubscriptionModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateSubscriptionModel(val *UpdateSubscriptionModel) *NullableUpdateSubscriptionModel {
	return &NullableUpdateSubscriptionModel{value: val, isSet: true}
}

func (v NullableUpdateSubscriptionModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateSubscriptionModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
