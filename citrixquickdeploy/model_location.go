/*
Citrix Virtual App & Desktop Catalog Service 148.0.26750.34636

Catalog Service

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickdeploy

import (
	"encoding/json"
)

// checks if the Location type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Location{}

// Location struct for Location
type Location struct {
	Id *string `json:"id,omitempty"`
	// The subscription ID.
	SubscriptionId *string `json:"subscriptionId,omitempty"`
	// The location name.
	Name *string `json:"name,omitempty"`
	// The location type.
	Type *LocationType `json:"type,omitempty"`
	// The display name of the location.
	DisplayName *string `json:"displayName,omitempty"`
	// The display name of the location and its region.
	RegionalDisplayName *string `json:"regionalDisplayName,omitempty"`
	// Metadata of the location, such as lat/long, paired region, and others.
	Metadata *LocationMetaData `json:"metadata,omitempty"`
}

// NewLocationWithDefaults instantiates a new Location object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLocationWithDefaults() *Location {
	this := Location{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Location) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Location) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Location) SetId(v string) {
	o.Id = &v
}

// GetSubscriptionId returns the SubscriptionId field value if set, zero value otherwise.
func (o *Location) GetSubscriptionId() string {
	if o == nil || IsNil(o.SubscriptionId) {
		var ret string
		return ret
	}
	return *o.SubscriptionId
}

// GetSubscriptionIdOk returns a tuple with the SubscriptionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Location) GetSubscriptionIdOk() (*string, bool) {
	if o == nil || IsNil(o.SubscriptionId) {
		return nil, false
	}
	return o.SubscriptionId, true
}

// SetSubscriptionId gets a reference to the given string and assigns it to the SubscriptionId field.
func (o *Location) SetSubscriptionId(v string) {
	o.SubscriptionId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Location) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Location) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Location) SetName(v string) {
	o.Name = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Location) GetType() LocationType {
	if o == nil || IsNil(o.Type) {
		var ret LocationType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Location) GetTypeOk() (*LocationType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// SetType gets a reference to the given LocationType and assigns it to the Type field.
func (o *Location) SetType(v LocationType) {
	o.Type = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *Location) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Location) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *Location) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetRegionalDisplayName returns the RegionalDisplayName field value if set, zero value otherwise.
func (o *Location) GetRegionalDisplayName() string {
	if o == nil || IsNil(o.RegionalDisplayName) {
		var ret string
		return ret
	}
	return *o.RegionalDisplayName
}

// GetRegionalDisplayNameOk returns a tuple with the RegionalDisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Location) GetRegionalDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.RegionalDisplayName) {
		return nil, false
	}
	return o.RegionalDisplayName, true
}

// SetRegionalDisplayName gets a reference to the given string and assigns it to the RegionalDisplayName field.
func (o *Location) SetRegionalDisplayName(v string) {
	o.RegionalDisplayName = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *Location) GetMetadata() LocationMetaData {
	if o == nil || IsNil(o.Metadata) {
		var ret LocationMetaData
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Location) GetMetadataOk() (*LocationMetaData, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// SetMetadata gets a reference to the given LocationMetaData and assigns it to the Metadata field.
func (o *Location) SetMetadata(v LocationMetaData) {
	o.Metadata = &v
}

func (o Location) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Location) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.SubscriptionId) {
		toSerialize["subscriptionId"] = o.SubscriptionId
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.RegionalDisplayName) {
		toSerialize["regionalDisplayName"] = o.RegionalDisplayName
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	return toSerialize, nil
}

type NullableLocation struct {
	value *Location
	isSet bool
}

func (v NullableLocation) Get() *Location {
	return v.value
}

func (v *NullableLocation) Set(val *Location) {
	v.value = val
	v.isSet = true
}

func (v NullableLocation) IsSet() bool {
	return v.isSet
}

func (v *NullableLocation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLocation(val *Location) *NullableLocation {
	return &NullableLocation{value: val, isSet: true}
}

func (v NullableLocation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLocation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
