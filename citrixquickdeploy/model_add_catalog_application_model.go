/*
Citrix Virtual App & Desktop Catalog Service 147.0.26651.57932

Catalog Service

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickdeploy

import (
	"encoding/json"
)

// checks if the AddCatalogApplicationModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddCatalogApplicationModel{}

// AddCatalogApplicationModel struct for AddCatalogApplicationModel
type AddCatalogApplicationModel struct {
	// The application id in the datastore. If the id is not known (for a start menu application) or for adding a custom application, the Id should be left null
	Id *string `json:"id,omitempty"`
	// Indicates if the application was discovered via scan of start menu apps or manually entered
	IsStartMenuDiscovered *bool `json:"isStartMenuDiscovered,omitempty"`
	// Name of the image
	Name string `json:"name"`
	// Path of the application
	Path string `json:"path"`
	// Working directory of the app at launch
	WorkingDirectory *string `json:"workingDirectory,omitempty"`
	// Application description that show up in Workspace
	Description *string `json:"description,omitempty"`
	// Command line paramters to pass to the app when launching
	CommandLineParameters *string `json:"commandLineParameters,omitempty"`
	// The raw app icon represented as a base64 string. For start menu app, if you want to use the default app icon, this field should be left blank.
	Base64Icon *string `json:"base64Icon,omitempty"`
}

// NewAddCatalogApplicationModelWithDefaults instantiates a new AddCatalogApplicationModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddCatalogApplicationModelWithDefaults() *AddCatalogApplicationModel {
	this := AddCatalogApplicationModel{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AddCatalogApplicationModel) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddCatalogApplicationModel) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *AddCatalogApplicationModel) SetId(v string) {
	o.Id = &v
}

// GetIsStartMenuDiscovered returns the IsStartMenuDiscovered field value if set, zero value otherwise.
func (o *AddCatalogApplicationModel) GetIsStartMenuDiscovered() bool {
	if o == nil || IsNil(o.IsStartMenuDiscovered) {
		var ret bool
		return ret
	}
	return *o.IsStartMenuDiscovered
}

// GetIsStartMenuDiscoveredOk returns a tuple with the IsStartMenuDiscovered field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddCatalogApplicationModel) GetIsStartMenuDiscoveredOk() (*bool, bool) {
	if o == nil || IsNil(o.IsStartMenuDiscovered) {
		return nil, false
	}
	return o.IsStartMenuDiscovered, true
}

// SetIsStartMenuDiscovered gets a reference to the given bool and assigns it to the IsStartMenuDiscovered field.
func (o *AddCatalogApplicationModel) SetIsStartMenuDiscovered(v bool) {
	o.IsStartMenuDiscovered = &v
}

// GetName returns the Name field value
func (o *AddCatalogApplicationModel) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AddCatalogApplicationModel) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AddCatalogApplicationModel) SetName(v string) {
	o.Name = v
}

// GetPath returns the Path field value
func (o *AddCatalogApplicationModel) GetPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Path
}

// GetPathOk returns a tuple with the Path field value
// and a boolean to check if the value has been set.
func (o *AddCatalogApplicationModel) GetPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Path, true
}

// SetPath sets field value
func (o *AddCatalogApplicationModel) SetPath(v string) {
	o.Path = v
}

// GetWorkingDirectory returns the WorkingDirectory field value if set, zero value otherwise.
func (o *AddCatalogApplicationModel) GetWorkingDirectory() string {
	if o == nil || IsNil(o.WorkingDirectory) {
		var ret string
		return ret
	}
	return *o.WorkingDirectory
}

// GetWorkingDirectoryOk returns a tuple with the WorkingDirectory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddCatalogApplicationModel) GetWorkingDirectoryOk() (*string, bool) {
	if o == nil || IsNil(o.WorkingDirectory) {
		return nil, false
	}
	return o.WorkingDirectory, true
}

// SetWorkingDirectory gets a reference to the given string and assigns it to the WorkingDirectory field.
func (o *AddCatalogApplicationModel) SetWorkingDirectory(v string) {
	o.WorkingDirectory = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *AddCatalogApplicationModel) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddCatalogApplicationModel) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *AddCatalogApplicationModel) SetDescription(v string) {
	o.Description = &v
}

// GetCommandLineParameters returns the CommandLineParameters field value if set, zero value otherwise.
func (o *AddCatalogApplicationModel) GetCommandLineParameters() string {
	if o == nil || IsNil(o.CommandLineParameters) {
		var ret string
		return ret
	}
	return *o.CommandLineParameters
}

// GetCommandLineParametersOk returns a tuple with the CommandLineParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddCatalogApplicationModel) GetCommandLineParametersOk() (*string, bool) {
	if o == nil || IsNil(o.CommandLineParameters) {
		return nil, false
	}
	return o.CommandLineParameters, true
}

// SetCommandLineParameters gets a reference to the given string and assigns it to the CommandLineParameters field.
func (o *AddCatalogApplicationModel) SetCommandLineParameters(v string) {
	o.CommandLineParameters = &v
}

// GetBase64Icon returns the Base64Icon field value if set, zero value otherwise.
func (o *AddCatalogApplicationModel) GetBase64Icon() string {
	if o == nil || IsNil(o.Base64Icon) {
		var ret string
		return ret
	}
	return *o.Base64Icon
}

// GetBase64IconOk returns a tuple with the Base64Icon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddCatalogApplicationModel) GetBase64IconOk() (*string, bool) {
	if o == nil || IsNil(o.Base64Icon) {
		return nil, false
	}
	return o.Base64Icon, true
}

// SetBase64Icon gets a reference to the given string and assigns it to the Base64Icon field.
func (o *AddCatalogApplicationModel) SetBase64Icon(v string) {
	o.Base64Icon = &v
}

func (o AddCatalogApplicationModel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddCatalogApplicationModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.IsStartMenuDiscovered) {
		toSerialize["isStartMenuDiscovered"] = o.IsStartMenuDiscovered
	}
	toSerialize["name"] = o.Name
	toSerialize["path"] = o.Path
	if !IsNil(o.WorkingDirectory) {
		toSerialize["workingDirectory"] = o.WorkingDirectory
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.CommandLineParameters) {
		toSerialize["commandLineParameters"] = o.CommandLineParameters
	}
	if !IsNil(o.Base64Icon) {
		toSerialize["base64Icon"] = o.Base64Icon
	}
	return toSerialize, nil
}

type NullableAddCatalogApplicationModel struct {
	value *AddCatalogApplicationModel
	isSet bool
}

func (v NullableAddCatalogApplicationModel) Get() *AddCatalogApplicationModel {
	return v.value
}

func (v *NullableAddCatalogApplicationModel) Set(val *AddCatalogApplicationModel) {
	v.value = val
	v.isSet = true
}

func (v NullableAddCatalogApplicationModel) IsSet() bool {
	return v.isSet
}

func (v *NullableAddCatalogApplicationModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddCatalogApplicationModel(val *AddCatalogApplicationModel) *NullableAddCatalogApplicationModel {
	return &NullableAddCatalogApplicationModel{value: val, isSet: true}
}

func (v NullableAddCatalogApplicationModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddCatalogApplicationModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
