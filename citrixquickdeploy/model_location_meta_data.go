/*
Citrix Virtual App & Desktop Catalog Service 147.0.26651.57932

Catalog Service

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickdeploy

import (
	"encoding/json"
)

// checks if the LocationMetaData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LocationMetaData{}

// LocationMetaData struct for LocationMetaData
type LocationMetaData struct {
	// The type of the region.
	RegionType *string `json:"regionType,omitempty"`
	// The category of the region.
	RegionCategory *string `json:"regionCategory,omitempty"`
	// The geography group of the location.
	GeographyGroup *string `json:"geographyGroup,omitempty"`
	// The longitude of the location.
	Longitude *string `json:"longitude,omitempty"`
	// The latitude of the location.
	Latitude *string `json:"latitude,omitempty"`
	// The physical location of the Azure location.
	PhysicalLocation *string `json:"physicalLocation,omitempty"`
	// The regions paired to this region.
	PairedRegions []PairedRegion `json:"pairedRegions,omitempty"`
	// The home location of an edge zone.
	HomeLocation *string `json:"homeLocation,omitempty"`
}

// NewLocationMetaDataWithDefaults instantiates a new LocationMetaData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLocationMetaDataWithDefaults() *LocationMetaData {
	this := LocationMetaData{}
	return &this
}

// GetRegionType returns the RegionType field value if set, zero value otherwise.
func (o *LocationMetaData) GetRegionType() string {
	if o == nil || IsNil(o.RegionType) {
		var ret string
		return ret
	}
	return *o.RegionType
}

// GetRegionTypeOk returns a tuple with the RegionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationMetaData) GetRegionTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RegionType) {
		return nil, false
	}
	return o.RegionType, true
}

// SetRegionType gets a reference to the given string and assigns it to the RegionType field.
func (o *LocationMetaData) SetRegionType(v string) {
	o.RegionType = &v
}

// GetRegionCategory returns the RegionCategory field value if set, zero value otherwise.
func (o *LocationMetaData) GetRegionCategory() string {
	if o == nil || IsNil(o.RegionCategory) {
		var ret string
		return ret
	}
	return *o.RegionCategory
}

// GetRegionCategoryOk returns a tuple with the RegionCategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationMetaData) GetRegionCategoryOk() (*string, bool) {
	if o == nil || IsNil(o.RegionCategory) {
		return nil, false
	}
	return o.RegionCategory, true
}

// SetRegionCategory gets a reference to the given string and assigns it to the RegionCategory field.
func (o *LocationMetaData) SetRegionCategory(v string) {
	o.RegionCategory = &v
}

// GetGeographyGroup returns the GeographyGroup field value if set, zero value otherwise.
func (o *LocationMetaData) GetGeographyGroup() string {
	if o == nil || IsNil(o.GeographyGroup) {
		var ret string
		return ret
	}
	return *o.GeographyGroup
}

// GetGeographyGroupOk returns a tuple with the GeographyGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationMetaData) GetGeographyGroupOk() (*string, bool) {
	if o == nil || IsNil(o.GeographyGroup) {
		return nil, false
	}
	return o.GeographyGroup, true
}

// SetGeographyGroup gets a reference to the given string and assigns it to the GeographyGroup field.
func (o *LocationMetaData) SetGeographyGroup(v string) {
	o.GeographyGroup = &v
}

// GetLongitude returns the Longitude field value if set, zero value otherwise.
func (o *LocationMetaData) GetLongitude() string {
	if o == nil || IsNil(o.Longitude) {
		var ret string
		return ret
	}
	return *o.Longitude
}

// GetLongitudeOk returns a tuple with the Longitude field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationMetaData) GetLongitudeOk() (*string, bool) {
	if o == nil || IsNil(o.Longitude) {
		return nil, false
	}
	return o.Longitude, true
}

// SetLongitude gets a reference to the given string and assigns it to the Longitude field.
func (o *LocationMetaData) SetLongitude(v string) {
	o.Longitude = &v
}

// GetLatitude returns the Latitude field value if set, zero value otherwise.
func (o *LocationMetaData) GetLatitude() string {
	if o == nil || IsNil(o.Latitude) {
		var ret string
		return ret
	}
	return *o.Latitude
}

// GetLatitudeOk returns a tuple with the Latitude field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationMetaData) GetLatitudeOk() (*string, bool) {
	if o == nil || IsNil(o.Latitude) {
		return nil, false
	}
	return o.Latitude, true
}

// SetLatitude gets a reference to the given string and assigns it to the Latitude field.
func (o *LocationMetaData) SetLatitude(v string) {
	o.Latitude = &v
}

// GetPhysicalLocation returns the PhysicalLocation field value if set, zero value otherwise.
func (o *LocationMetaData) GetPhysicalLocation() string {
	if o == nil || IsNil(o.PhysicalLocation) {
		var ret string
		return ret
	}
	return *o.PhysicalLocation
}

// GetPhysicalLocationOk returns a tuple with the PhysicalLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationMetaData) GetPhysicalLocationOk() (*string, bool) {
	if o == nil || IsNil(o.PhysicalLocation) {
		return nil, false
	}
	return o.PhysicalLocation, true
}

// SetPhysicalLocation gets a reference to the given string and assigns it to the PhysicalLocation field.
func (o *LocationMetaData) SetPhysicalLocation(v string) {
	o.PhysicalLocation = &v
}

// GetPairedRegions returns the PairedRegions field value if set, zero value otherwise.
func (o *LocationMetaData) GetPairedRegions() []PairedRegion {
	if o == nil || IsNil(o.PairedRegions) {
		var ret []PairedRegion
		return ret
	}
	return o.PairedRegions
}

// GetPairedRegionsOk returns a tuple with the PairedRegions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationMetaData) GetPairedRegionsOk() ([]PairedRegion, bool) {
	if o == nil || IsNil(o.PairedRegions) {
		return nil, false
	}
	return o.PairedRegions, true
}

// SetPairedRegions gets a reference to the given []PairedRegion and assigns it to the PairedRegions field.
func (o *LocationMetaData) SetPairedRegions(v []PairedRegion) {
	o.PairedRegions = v
}

// GetHomeLocation returns the HomeLocation field value if set, zero value otherwise.
func (o *LocationMetaData) GetHomeLocation() string {
	if o == nil || IsNil(o.HomeLocation) {
		var ret string
		return ret
	}
	return *o.HomeLocation
}

// GetHomeLocationOk returns a tuple with the HomeLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationMetaData) GetHomeLocationOk() (*string, bool) {
	if o == nil || IsNil(o.HomeLocation) {
		return nil, false
	}
	return o.HomeLocation, true
}

// SetHomeLocation gets a reference to the given string and assigns it to the HomeLocation field.
func (o *LocationMetaData) SetHomeLocation(v string) {
	o.HomeLocation = &v
}

func (o LocationMetaData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LocationMetaData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RegionType) {
		toSerialize["regionType"] = o.RegionType
	}
	if !IsNil(o.RegionCategory) {
		toSerialize["regionCategory"] = o.RegionCategory
	}
	if !IsNil(o.GeographyGroup) {
		toSerialize["geographyGroup"] = o.GeographyGroup
	}
	if !IsNil(o.Longitude) {
		toSerialize["longitude"] = o.Longitude
	}
	if !IsNil(o.Latitude) {
		toSerialize["latitude"] = o.Latitude
	}
	if !IsNil(o.PhysicalLocation) {
		toSerialize["physicalLocation"] = o.PhysicalLocation
	}
	if !IsNil(o.PairedRegions) {
		toSerialize["pairedRegions"] = o.PairedRegions
	}
	if !IsNil(o.HomeLocation) {
		toSerialize["homeLocation"] = o.HomeLocation
	}
	return toSerialize, nil
}

type NullableLocationMetaData struct {
	value *LocationMetaData
	isSet bool
}

func (v NullableLocationMetaData) Get() *LocationMetaData {
	return v.value
}

func (v *NullableLocationMetaData) Set(val *LocationMetaData) {
	v.value = val
	v.isSet = true
}

func (v NullableLocationMetaData) IsSet() bool {
	return v.isSet
}

func (v *NullableLocationMetaData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLocationMetaData(val *LocationMetaData) *NullableLocationMetaData {
	return &NullableLocationMetaData{value: val, isSet: true}
}

func (v NullableLocationMetaData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLocationMetaData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
