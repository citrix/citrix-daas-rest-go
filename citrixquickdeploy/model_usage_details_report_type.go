/*
Citrix Virtual App & Desktop Catalog Service 148.0.26750.34636

Catalog Service

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickdeploy

import (
	"encoding/json"
	"fmt"
)

// UsageDetailsReportType the model 'UsageDetailsReportType'
type UsageDetailsReportType string

// List of UsageDetailsReportType
const (
	USAGEDETAILSREPORTTYPE_UNDEFINED UsageDetailsReportType = "Undefined"
	USAGEDETAILSREPORTTYPE_DAILY     UsageDetailsReportType = "Daily"
	USAGEDETAILSREPORTTYPE_MONTHLY   UsageDetailsReportType = "Monthly"
)

// All allowed values of UsageDetailsReportType enum
var AllowedUsageDetailsReportTypeEnumValues = []UsageDetailsReportType{
	"Undefined",
	"Daily",
	"Monthly",
}

func (v *UsageDetailsReportType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	*v = UsageDetailsReportType(value)
	return nil
}

// NewUsageDetailsReportTypeFromValue returns a pointer to a valid UsageDetailsReportType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewUsageDetailsReportTypeFromValue(v string) (*UsageDetailsReportType, error) {
	ev := UsageDetailsReportType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for UsageDetailsReportType: valid values are %v", v, AllowedUsageDetailsReportTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v UsageDetailsReportType) IsValid() bool {
	for _, existing := range AllowedUsageDetailsReportTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to UsageDetailsReportType value
func (v UsageDetailsReportType) Ptr() *UsageDetailsReportType {
	return &v
}

type NullableUsageDetailsReportType struct {
	value *UsageDetailsReportType
	isSet bool
}

func (v NullableUsageDetailsReportType) Get() *UsageDetailsReportType {
	return v.value
}

func (v *NullableUsageDetailsReportType) Set(val *UsageDetailsReportType) {
	v.value = val
	v.isSet = true
}

func (v NullableUsageDetailsReportType) IsSet() bool {
	return v.isSet
}

func (v *NullableUsageDetailsReportType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsageDetailsReportType(val *UsageDetailsReportType) *NullableUsageDetailsReportType {
	return &NullableUsageDetailsReportType{value: val, isSet: true}
}

func (v NullableUsageDetailsReportType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsageDetailsReportType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
