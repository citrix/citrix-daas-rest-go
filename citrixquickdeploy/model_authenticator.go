/*
Citrix Virtual App & Desktop Catalog Service 147.0.26651.57932

Catalog Service

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickdeploy

import (
	"encoding/json"
	"fmt"
)

// Authenticator Authentication scheme for Orchestration service.
type Authenticator string

// List of Authenticator
const (
	AUTHENTICATOR_NONE                                        Authenticator = "None"
	AUTHENTICATOR_BASIC                                       Authenticator = "Basic"
	AUTHENTICATOR_INTEGRATED_WINDOWS_AUTHENTICATION           Authenticator = "IntegratedWindowsAuthentication"
	AUTHENTICATOR_BASIC_AND_INTEGRATED_WINDOWS_AUTHENTICATION Authenticator = "BasicAndIntegratedWindowsAuthentication"
	AUTHENTICATOR_SMART_CARD                                  Authenticator = "SmartCard"
	AUTHENTICATOR_BASIC_AND_SMART_CARD                        Authenticator = "BasicAndSmartCard"
	AUTHENTICATOR_ALL                                         Authenticator = "All"
)

// All allowed values of Authenticator enum
var AllowedAuthenticatorEnumValues = []Authenticator{
	"None",
	"Basic",
	"IntegratedWindowsAuthentication",
	"BasicAndIntegratedWindowsAuthentication",
	"SmartCard",
	"BasicAndSmartCard",
	"All",
}

func (v *Authenticator) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	*v = Authenticator(value)
	return nil
}

// NewAuthenticatorFromValue returns a pointer to a valid Authenticator
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAuthenticatorFromValue(v string) (*Authenticator, error) {
	ev := Authenticator(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Authenticator: valid values are %v", v, AllowedAuthenticatorEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Authenticator) IsValid() bool {
	for _, existing := range AllowedAuthenticatorEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Authenticator value
func (v Authenticator) Ptr() *Authenticator {
	return &v
}

type NullableAuthenticator struct {
	value *Authenticator
	isSet bool
}

func (v NullableAuthenticator) Get() *Authenticator {
	return v.value
}

func (v *NullableAuthenticator) Set(val *Authenticator) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthenticator) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthenticator) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthenticator(val *Authenticator) *NullableAuthenticator {
	return &NullableAuthenticator{value: val, isSet: true}
}

func (v NullableAuthenticator) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthenticator) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
