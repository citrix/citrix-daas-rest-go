/*
Citrix Virtual App & Desktop Catalog Service 148.0.26750.34636

Catalog Service

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickdeploy

import (
	"encoding/json"
)

// checks if the ManagedDirectoriesVerificationState type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ManagedDirectoriesVerificationState{}

// ManagedDirectoriesVerificationState struct for ManagedDirectoriesVerificationState
type ManagedDirectoriesVerificationState struct {
	// List of directories that are invalid
	InvalidDirectories []DirectoryVerificationState `json:"invalidDirectories,omitempty"`
}

// NewManagedDirectoriesVerificationStateWithDefaults instantiates a new ManagedDirectoriesVerificationState object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewManagedDirectoriesVerificationStateWithDefaults() *ManagedDirectoriesVerificationState {
	this := ManagedDirectoriesVerificationState{}
	return &this
}

// GetInvalidDirectories returns the InvalidDirectories field value if set, zero value otherwise.
func (o *ManagedDirectoriesVerificationState) GetInvalidDirectories() []DirectoryVerificationState {
	if o == nil || IsNil(o.InvalidDirectories) {
		var ret []DirectoryVerificationState
		return ret
	}
	return o.InvalidDirectories
}

// GetInvalidDirectoriesOk returns a tuple with the InvalidDirectories field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedDirectoriesVerificationState) GetInvalidDirectoriesOk() ([]DirectoryVerificationState, bool) {
	if o == nil || IsNil(o.InvalidDirectories) {
		return nil, false
	}
	return o.InvalidDirectories, true
}

// SetInvalidDirectories gets a reference to the given []DirectoryVerificationState and assigns it to the InvalidDirectories field.
func (o *ManagedDirectoriesVerificationState) SetInvalidDirectories(v []DirectoryVerificationState) {
	o.InvalidDirectories = v
}

func (o ManagedDirectoriesVerificationState) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ManagedDirectoriesVerificationState) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.InvalidDirectories) {
		toSerialize["invalidDirectories"] = o.InvalidDirectories
	}
	return toSerialize, nil
}

type NullableManagedDirectoriesVerificationState struct {
	value *ManagedDirectoriesVerificationState
	isSet bool
}

func (v NullableManagedDirectoriesVerificationState) Get() *ManagedDirectoriesVerificationState {
	return v.value
}

func (v *NullableManagedDirectoriesVerificationState) Set(val *ManagedDirectoriesVerificationState) {
	v.value = val
	v.isSet = true
}

func (v NullableManagedDirectoriesVerificationState) IsSet() bool {
	return v.isSet
}

func (v *NullableManagedDirectoriesVerificationState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableManagedDirectoriesVerificationState(val *ManagedDirectoriesVerificationState) *NullableManagedDirectoriesVerificationState {
	return &NullableManagedDirectoriesVerificationState{value: val, isSet: true}
}

func (v NullableManagedDirectoriesVerificationState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableManagedDirectoriesVerificationState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
