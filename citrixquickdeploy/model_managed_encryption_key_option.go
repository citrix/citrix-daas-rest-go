/*
Citrix Virtual App & Desktop Catalog Service 148.0.26750.34636

Catalog Service

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickdeploy

import (
	"encoding/json"
	"fmt"
)

// ManagedEncryptionKeyOption Enum to describe option to either generate or upload a key
type ManagedEncryptionKeyOption string

// List of ManagedEncryptionKeyOption
const (
	MANAGEDENCRYPTIONKEYOPTION_GENERATE ManagedEncryptionKeyOption = "Generate"
	MANAGEDENCRYPTIONKEYOPTION_IMPORT   ManagedEncryptionKeyOption = "Import"
)

// All allowed values of ManagedEncryptionKeyOption enum
var AllowedManagedEncryptionKeyOptionEnumValues = []ManagedEncryptionKeyOption{
	"Generate",
	"Import",
}

func (v *ManagedEncryptionKeyOption) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	*v = ManagedEncryptionKeyOption(value)
	return nil
}

// NewManagedEncryptionKeyOptionFromValue returns a pointer to a valid ManagedEncryptionKeyOption
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewManagedEncryptionKeyOptionFromValue(v string) (*ManagedEncryptionKeyOption, error) {
	ev := ManagedEncryptionKeyOption(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ManagedEncryptionKeyOption: valid values are %v", v, AllowedManagedEncryptionKeyOptionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ManagedEncryptionKeyOption) IsValid() bool {
	for _, existing := range AllowedManagedEncryptionKeyOptionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ManagedEncryptionKeyOption value
func (v ManagedEncryptionKeyOption) Ptr() *ManagedEncryptionKeyOption {
	return &v
}

type NullableManagedEncryptionKeyOption struct {
	value *ManagedEncryptionKeyOption
	isSet bool
}

func (v NullableManagedEncryptionKeyOption) Get() *ManagedEncryptionKeyOption {
	return v.value
}

func (v *NullableManagedEncryptionKeyOption) Set(val *ManagedEncryptionKeyOption) {
	v.value = val
	v.isSet = true
}

func (v NullableManagedEncryptionKeyOption) IsSet() bool {
	return v.isSet
}

func (v *NullableManagedEncryptionKeyOption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableManagedEncryptionKeyOption(val *ManagedEncryptionKeyOption) *NullableManagedEncryptionKeyOption {
	return &NullableManagedEncryptionKeyOption{value: val, isSet: true}
}

func (v NullableManagedEncryptionKeyOption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableManagedEncryptionKeyOption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
