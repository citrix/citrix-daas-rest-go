/*
Citrix Virtual App & Desktop Catalog Service 147.0.26651.57932

Catalog Service

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickdeploy

import (
	"encoding/json"
)

// checks if the SiteModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SiteModel{}

// SiteModel struct for SiteModel
type SiteModel struct {
	// The virtual site id of the customer
	Id string `json:"id"`
	// The display name of the virtual site
	DisplayName *string `json:"displayName,omitempty"`
}

// NewSiteModelWithDefaults instantiates a new SiteModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSiteModelWithDefaults() *SiteModel {
	this := SiteModel{}
	return &this
}

// GetId returns the Id field value
func (o *SiteModel) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *SiteModel) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *SiteModel) SetId(v string) {
	o.Id = v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *SiteModel) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteModel) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *SiteModel) SetDisplayName(v string) {
	o.DisplayName = &v
}

func (o SiteModel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SiteModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	return toSerialize, nil
}

type NullableSiteModel struct {
	value *SiteModel
	isSet bool
}

func (v NullableSiteModel) Get() *SiteModel {
	return v.value
}

func (v *NullableSiteModel) Set(val *SiteModel) {
	v.value = val
	v.isSet = true
}

func (v NullableSiteModel) IsSet() bool {
	return v.isSet
}

func (v *NullableSiteModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSiteModel(val *SiteModel) *NullableSiteModel {
	return &NullableSiteModel{value: val, isSet: true}
}

func (v NullableSiteModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSiteModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
