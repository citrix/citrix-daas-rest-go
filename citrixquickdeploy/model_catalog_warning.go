/*
Citrix Virtual App & Desktop Catalog Service 147.0.26651.57932

Catalog Service

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickdeploy

import (
	"encoding/json"
)

// checks if the CatalogWarning type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CatalogWarning{}

// CatalogWarning struct for CatalogWarning
type CatalogWarning struct {
	// Type of warning
	Type *CatalogWarningType `json:"type,omitempty"`
	// Indicates if the warning message can be cleared out by the user
	IsDismissible *bool `json:"isDismissible,omitempty"`
	// Warning message to display to the user
	WarningMessage *string `json:"warningMessage,omitempty"`
	IsError        *bool   `json:"isError,omitempty"`
}

// NewCatalogWarningWithDefaults instantiates a new CatalogWarning object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCatalogWarningWithDefaults() *CatalogWarning {
	this := CatalogWarning{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *CatalogWarning) GetType() CatalogWarningType {
	if o == nil || IsNil(o.Type) {
		var ret CatalogWarningType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogWarning) GetTypeOk() (*CatalogWarningType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// SetType gets a reference to the given CatalogWarningType and assigns it to the Type field.
func (o *CatalogWarning) SetType(v CatalogWarningType) {
	o.Type = &v
}

// GetIsDismissible returns the IsDismissible field value if set, zero value otherwise.
func (o *CatalogWarning) GetIsDismissible() bool {
	if o == nil || IsNil(o.IsDismissible) {
		var ret bool
		return ret
	}
	return *o.IsDismissible
}

// GetIsDismissibleOk returns a tuple with the IsDismissible field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogWarning) GetIsDismissibleOk() (*bool, bool) {
	if o == nil || IsNil(o.IsDismissible) {
		return nil, false
	}
	return o.IsDismissible, true
}

// SetIsDismissible gets a reference to the given bool and assigns it to the IsDismissible field.
func (o *CatalogWarning) SetIsDismissible(v bool) {
	o.IsDismissible = &v
}

// GetWarningMessage returns the WarningMessage field value if set, zero value otherwise.
func (o *CatalogWarning) GetWarningMessage() string {
	if o == nil || IsNil(o.WarningMessage) {
		var ret string
		return ret
	}
	return *o.WarningMessage
}

// GetWarningMessageOk returns a tuple with the WarningMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogWarning) GetWarningMessageOk() (*string, bool) {
	if o == nil || IsNil(o.WarningMessage) {
		return nil, false
	}
	return o.WarningMessage, true
}

// SetWarningMessage gets a reference to the given string and assigns it to the WarningMessage field.
func (o *CatalogWarning) SetWarningMessage(v string) {
	o.WarningMessage = &v
}

// GetIsError returns the IsError field value if set, zero value otherwise.
func (o *CatalogWarning) GetIsError() bool {
	if o == nil || IsNil(o.IsError) {
		var ret bool
		return ret
	}
	return *o.IsError
}

// GetIsErrorOk returns a tuple with the IsError field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogWarning) GetIsErrorOk() (*bool, bool) {
	if o == nil || IsNil(o.IsError) {
		return nil, false
	}
	return o.IsError, true
}

// SetIsError gets a reference to the given bool and assigns it to the IsError field.
func (o *CatalogWarning) SetIsError(v bool) {
	o.IsError = &v
}

func (o CatalogWarning) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CatalogWarning) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.IsDismissible) {
		toSerialize["isDismissible"] = o.IsDismissible
	}
	if !IsNil(o.WarningMessage) {
		toSerialize["warningMessage"] = o.WarningMessage
	}
	if !IsNil(o.IsError) {
		toSerialize["isError"] = o.IsError
	}
	return toSerialize, nil
}

type NullableCatalogWarning struct {
	value *CatalogWarning
	isSet bool
}

func (v NullableCatalogWarning) Get() *CatalogWarning {
	return v.value
}

func (v *NullableCatalogWarning) Set(val *CatalogWarning) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogWarning) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogWarning) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogWarning(val *CatalogWarning) *NullableCatalogWarning {
	return &NullableCatalogWarning{value: val, isSet: true}
}

func (v NullableCatalogWarning) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogWarning) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
