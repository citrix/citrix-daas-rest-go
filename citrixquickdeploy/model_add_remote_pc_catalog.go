/*
Citrix Virtual App & Desktop Catalog Service 148.0.26750.34636

Catalog Service

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickdeploy

import (
	"encoding/json"
)

// checks if the AddRemotePcCatalog type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddRemotePcCatalog{}

// AddRemotePcCatalog struct for AddRemotePcCatalog
type AddRemotePcCatalog struct {
	// Name of the catalog.
	Name string `json:"name"`
	// ID of the Resource Location to associate with this catalog.
	ResourceLocationId string `json:"resourceLocationId"`
	// Indicates if we are creating a catalog for Static or Random Assignment.
	Type *AddRemotePcType `json:"type,omitempty"`
	// List of OUs that will be associated with this catalog.
	EnrollmentScopes []RemotePcEnrollmentScope `json:"enrollmentScopes,omitempty"`
	// List of Machines to add to the catalog and the users to assign them to.
	MachineAssignments []AddCatalogMachineAssignment `json:"machineAssignments,omitempty"`
	// Name of tenant customer ID if partner-tenant relationship exists otherwise null.
	CspCustomerId *string `json:"cspCustomerId,omitempty"`
	// Name of tenant customer ID if partner-tenant relationship exists otherwise null.
	CspSiteId *string `json:"cspSiteId,omitempty"`
}

// NewAddRemotePcCatalogWithDefaults instantiates a new AddRemotePcCatalog object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddRemotePcCatalogWithDefaults() *AddRemotePcCatalog {
	this := AddRemotePcCatalog{}
	return &this
}

// GetName returns the Name field value
func (o *AddRemotePcCatalog) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AddRemotePcCatalog) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AddRemotePcCatalog) SetName(v string) {
	o.Name = v
}

// GetResourceLocationId returns the ResourceLocationId field value
func (o *AddRemotePcCatalog) GetResourceLocationId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceLocationId
}

// GetResourceLocationIdOk returns a tuple with the ResourceLocationId field value
// and a boolean to check if the value has been set.
func (o *AddRemotePcCatalog) GetResourceLocationIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceLocationId, true
}

// SetResourceLocationId sets field value
func (o *AddRemotePcCatalog) SetResourceLocationId(v string) {
	o.ResourceLocationId = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *AddRemotePcCatalog) GetType() AddRemotePcType {
	if o == nil || IsNil(o.Type) {
		var ret AddRemotePcType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddRemotePcCatalog) GetTypeOk() (*AddRemotePcType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// SetType gets a reference to the given AddRemotePcType and assigns it to the Type field.
func (o *AddRemotePcCatalog) SetType(v AddRemotePcType) {
	o.Type = &v
}

// GetEnrollmentScopes returns the EnrollmentScopes field value if set, zero value otherwise.
func (o *AddRemotePcCatalog) GetEnrollmentScopes() []RemotePcEnrollmentScope {
	if o == nil || IsNil(o.EnrollmentScopes) {
		var ret []RemotePcEnrollmentScope
		return ret
	}
	return o.EnrollmentScopes
}

// GetEnrollmentScopesOk returns a tuple with the EnrollmentScopes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddRemotePcCatalog) GetEnrollmentScopesOk() ([]RemotePcEnrollmentScope, bool) {
	if o == nil || IsNil(o.EnrollmentScopes) {
		return nil, false
	}
	return o.EnrollmentScopes, true
}

// SetEnrollmentScopes gets a reference to the given []RemotePcEnrollmentScope and assigns it to the EnrollmentScopes field.
func (o *AddRemotePcCatalog) SetEnrollmentScopes(v []RemotePcEnrollmentScope) {
	o.EnrollmentScopes = v
}

// GetMachineAssignments returns the MachineAssignments field value if set, zero value otherwise.
func (o *AddRemotePcCatalog) GetMachineAssignments() []AddCatalogMachineAssignment {
	if o == nil || IsNil(o.MachineAssignments) {
		var ret []AddCatalogMachineAssignment
		return ret
	}
	return o.MachineAssignments
}

// GetMachineAssignmentsOk returns a tuple with the MachineAssignments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddRemotePcCatalog) GetMachineAssignmentsOk() ([]AddCatalogMachineAssignment, bool) {
	if o == nil || IsNil(o.MachineAssignments) {
		return nil, false
	}
	return o.MachineAssignments, true
}

// SetMachineAssignments gets a reference to the given []AddCatalogMachineAssignment and assigns it to the MachineAssignments field.
func (o *AddRemotePcCatalog) SetMachineAssignments(v []AddCatalogMachineAssignment) {
	o.MachineAssignments = v
}

// GetCspCustomerId returns the CspCustomerId field value if set, zero value otherwise.
func (o *AddRemotePcCatalog) GetCspCustomerId() string {
	if o == nil || IsNil(o.CspCustomerId) {
		var ret string
		return ret
	}
	return *o.CspCustomerId
}

// GetCspCustomerIdOk returns a tuple with the CspCustomerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddRemotePcCatalog) GetCspCustomerIdOk() (*string, bool) {
	if o == nil || IsNil(o.CspCustomerId) {
		return nil, false
	}
	return o.CspCustomerId, true
}

// SetCspCustomerId gets a reference to the given string and assigns it to the CspCustomerId field.
func (o *AddRemotePcCatalog) SetCspCustomerId(v string) {
	o.CspCustomerId = &v
}

// GetCspSiteId returns the CspSiteId field value if set, zero value otherwise.
func (o *AddRemotePcCatalog) GetCspSiteId() string {
	if o == nil || IsNil(o.CspSiteId) {
		var ret string
		return ret
	}
	return *o.CspSiteId
}

// GetCspSiteIdOk returns a tuple with the CspSiteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddRemotePcCatalog) GetCspSiteIdOk() (*string, bool) {
	if o == nil || IsNil(o.CspSiteId) {
		return nil, false
	}
	return o.CspSiteId, true
}

// SetCspSiteId gets a reference to the given string and assigns it to the CspSiteId field.
func (o *AddRemotePcCatalog) SetCspSiteId(v string) {
	o.CspSiteId = &v
}

func (o AddRemotePcCatalog) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddRemotePcCatalog) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["resourceLocationId"] = o.ResourceLocationId
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.EnrollmentScopes) {
		toSerialize["enrollmentScopes"] = o.EnrollmentScopes
	}
	if !IsNil(o.MachineAssignments) {
		toSerialize["machineAssignments"] = o.MachineAssignments
	}
	if !IsNil(o.CspCustomerId) {
		toSerialize["cspCustomerId"] = o.CspCustomerId
	}
	if !IsNil(o.CspSiteId) {
		toSerialize["cspSiteId"] = o.CspSiteId
	}
	return toSerialize, nil
}

type NullableAddRemotePcCatalog struct {
	value *AddRemotePcCatalog
	isSet bool
}

func (v NullableAddRemotePcCatalog) Get() *AddRemotePcCatalog {
	return v.value
}

func (v *NullableAddRemotePcCatalog) Set(val *AddRemotePcCatalog) {
	v.value = val
	v.isSet = true
}

func (v NullableAddRemotePcCatalog) IsSet() bool {
	return v.isSet
}

func (v *NullableAddRemotePcCatalog) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddRemotePcCatalog(val *AddRemotePcCatalog) *NullableAddRemotePcCatalog {
	return &NullableAddRemotePcCatalog{value: val, isSet: true}
}

func (v NullableAddRemotePcCatalog) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddRemotePcCatalog) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
