/*
Citrix Virtual App & Desktop Catalog Service 148.0.26750.34636

Catalog Service

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickdeploy

import (
	"encoding/json"
)

// checks if the CatalogCapacitySettingsModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CatalogCapacitySettingsModel{}

// CatalogCapacitySettingsModel struct for CatalogCapacitySettingsModel
type CatalogCapacitySettingsModel struct {
	// Compute settings for the catalog
	ComputeWorker *CatalogComputeWorkerModel `json:"computeWorker,omitempty"`
	// Scale settings for the catalog
	ScaleSettings *CatalogScaleSettingsModel `json:"scaleSettings,omitempty"`
	// Idle timeout for session in the catalog (in mins)
	SessionTimeout *int32 `json:"sessionTimeout,omitempty"`
	// Minutes to wait for disconnected sessions to be logged off on multi-session VMs
	MultiSessionDisconnectedSessionTimeout *int32 `json:"multiSessionDisconnectedSessionTimeout,omitempty"`
	// Indicates if the capacity job is currently active
	IsActive *bool `json:"isActive,omitempty"`
}

// NewCatalogCapacitySettingsModelWithDefaults instantiates a new CatalogCapacitySettingsModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCatalogCapacitySettingsModelWithDefaults() *CatalogCapacitySettingsModel {
	this := CatalogCapacitySettingsModel{}
	return &this
}

// GetComputeWorker returns the ComputeWorker field value if set, zero value otherwise.
func (o *CatalogCapacitySettingsModel) GetComputeWorker() CatalogComputeWorkerModel {
	if o == nil || IsNil(o.ComputeWorker) {
		var ret CatalogComputeWorkerModel
		return ret
	}
	return *o.ComputeWorker
}

// GetComputeWorkerOk returns a tuple with the ComputeWorker field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogCapacitySettingsModel) GetComputeWorkerOk() (*CatalogComputeWorkerModel, bool) {
	if o == nil || IsNil(o.ComputeWorker) {
		return nil, false
	}
	return o.ComputeWorker, true
}

// SetComputeWorker gets a reference to the given CatalogComputeWorkerModel and assigns it to the ComputeWorker field.
func (o *CatalogCapacitySettingsModel) SetComputeWorker(v CatalogComputeWorkerModel) {
	o.ComputeWorker = &v
}

// GetScaleSettings returns the ScaleSettings field value if set, zero value otherwise.
func (o *CatalogCapacitySettingsModel) GetScaleSettings() CatalogScaleSettingsModel {
	if o == nil || IsNil(o.ScaleSettings) {
		var ret CatalogScaleSettingsModel
		return ret
	}
	return *o.ScaleSettings
}

// GetScaleSettingsOk returns a tuple with the ScaleSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogCapacitySettingsModel) GetScaleSettingsOk() (*CatalogScaleSettingsModel, bool) {
	if o == nil || IsNil(o.ScaleSettings) {
		return nil, false
	}
	return o.ScaleSettings, true
}

// SetScaleSettings gets a reference to the given CatalogScaleSettingsModel and assigns it to the ScaleSettings field.
func (o *CatalogCapacitySettingsModel) SetScaleSettings(v CatalogScaleSettingsModel) {
	o.ScaleSettings = &v
}

// GetSessionTimeout returns the SessionTimeout field value if set, zero value otherwise.
func (o *CatalogCapacitySettingsModel) GetSessionTimeout() int32 {
	if o == nil || IsNil(o.SessionTimeout) {
		var ret int32
		return ret
	}
	return *o.SessionTimeout
}

// GetSessionTimeoutOk returns a tuple with the SessionTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogCapacitySettingsModel) GetSessionTimeoutOk() (*int32, bool) {
	if o == nil || IsNil(o.SessionTimeout) {
		return nil, false
	}
	return o.SessionTimeout, true
}

// SetSessionTimeout gets a reference to the given int32 and assigns it to the SessionTimeout field.
func (o *CatalogCapacitySettingsModel) SetSessionTimeout(v int32) {
	o.SessionTimeout = &v
}

// GetMultiSessionDisconnectedSessionTimeout returns the MultiSessionDisconnectedSessionTimeout field value if set, zero value otherwise.
func (o *CatalogCapacitySettingsModel) GetMultiSessionDisconnectedSessionTimeout() int32 {
	if o == nil || IsNil(o.MultiSessionDisconnectedSessionTimeout) {
		var ret int32
		return ret
	}
	return *o.MultiSessionDisconnectedSessionTimeout
}

// GetMultiSessionDisconnectedSessionTimeoutOk returns a tuple with the MultiSessionDisconnectedSessionTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogCapacitySettingsModel) GetMultiSessionDisconnectedSessionTimeoutOk() (*int32, bool) {
	if o == nil || IsNil(o.MultiSessionDisconnectedSessionTimeout) {
		return nil, false
	}
	return o.MultiSessionDisconnectedSessionTimeout, true
}

// SetMultiSessionDisconnectedSessionTimeout gets a reference to the given int32 and assigns it to the MultiSessionDisconnectedSessionTimeout field.
func (o *CatalogCapacitySettingsModel) SetMultiSessionDisconnectedSessionTimeout(v int32) {
	o.MultiSessionDisconnectedSessionTimeout = &v
}

// GetIsActive returns the IsActive field value if set, zero value otherwise.
func (o *CatalogCapacitySettingsModel) GetIsActive() bool {
	if o == nil || IsNil(o.IsActive) {
		var ret bool
		return ret
	}
	return *o.IsActive
}

// GetIsActiveOk returns a tuple with the IsActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogCapacitySettingsModel) GetIsActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.IsActive) {
		return nil, false
	}
	return o.IsActive, true
}

// SetIsActive gets a reference to the given bool and assigns it to the IsActive field.
func (o *CatalogCapacitySettingsModel) SetIsActive(v bool) {
	o.IsActive = &v
}

func (o CatalogCapacitySettingsModel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CatalogCapacitySettingsModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ComputeWorker) {
		toSerialize["computeWorker"] = o.ComputeWorker
	}
	if !IsNil(o.ScaleSettings) {
		toSerialize["scaleSettings"] = o.ScaleSettings
	}
	if !IsNil(o.SessionTimeout) {
		toSerialize["sessionTimeout"] = o.SessionTimeout
	}
	if !IsNil(o.MultiSessionDisconnectedSessionTimeout) {
		toSerialize["multiSessionDisconnectedSessionTimeout"] = o.MultiSessionDisconnectedSessionTimeout
	}
	if !IsNil(o.IsActive) {
		toSerialize["isActive"] = o.IsActive
	}
	return toSerialize, nil
}

type NullableCatalogCapacitySettingsModel struct {
	value *CatalogCapacitySettingsModel
	isSet bool
}

func (v NullableCatalogCapacitySettingsModel) Get() *CatalogCapacitySettingsModel {
	return v.value
}

func (v *NullableCatalogCapacitySettingsModel) Set(val *CatalogCapacitySettingsModel) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogCapacitySettingsModel) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogCapacitySettingsModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogCapacitySettingsModel(val *CatalogCapacitySettingsModel) *NullableCatalogCapacitySettingsModel {
	return &NullableCatalogCapacitySettingsModel{value: val, isSet: true}
}

func (v NullableCatalogCapacitySettingsModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogCapacitySettingsModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
