/*
Citrix Virtual App & Desktop Catalog Service 147.0.26651.57932

Catalog Service

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickdeploy

import (
	"encoding/json"
	"fmt"
)

// ConnectorJobState the model 'ConnectorJobState'
type ConnectorJobState string

// List of ConnectorJobState
const (
	CONNECTORJOBSTATE_INACTIVE          ConnectorJobState = "Inactive"
	CONNECTORJOBSTATE_PROVISIONING_VM   ConnectorJobState = "ProvisioningVm"
	CONNECTORJOBSTATE_DOMAIN_JOIN       ConnectorJobState = "DomainJoin"
	CONNECTORJOBSTATE_CONNECTOR_INSTALL ConnectorJobState = "ConnectorInstall"
	CONNECTORJOBSTATE_FAILED            ConnectorJobState = "Failed"
	CONNECTORJOBSTATE_ACTIVE            ConnectorJobState = "Active"
	CONNECTORJOBSTATE_NOT_STARTED       ConnectorJobState = "NotStarted"
	CONNECTORJOBSTATE_DELETING          ConnectorJobState = "Deleting"
	CONNECTORJOBSTATE_DELETE_FAILED     ConnectorJobState = "DeleteFailed"
	CONNECTORJOBSTATE_CONNECTORLESS     ConnectorJobState = "Connectorless"
)

// All allowed values of ConnectorJobState enum
var AllowedConnectorJobStateEnumValues = []ConnectorJobState{
	"Inactive",
	"ProvisioningVm",
	"DomainJoin",
	"ConnectorInstall",
	"Failed",
	"Active",
	"NotStarted",
	"Deleting",
	"DeleteFailed",
	"Connectorless",
}

func (v *ConnectorJobState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	*v = ConnectorJobState(value)
	return nil
}

// NewConnectorJobStateFromValue returns a pointer to a valid ConnectorJobState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewConnectorJobStateFromValue(v string) (*ConnectorJobState, error) {
	ev := ConnectorJobState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ConnectorJobState: valid values are %v", v, AllowedConnectorJobStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ConnectorJobState) IsValid() bool {
	for _, existing := range AllowedConnectorJobStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ConnectorJobState value
func (v ConnectorJobState) Ptr() *ConnectorJobState {
	return &v
}

type NullableConnectorJobState struct {
	value *ConnectorJobState
	isSet bool
}

func (v NullableConnectorJobState) Get() *ConnectorJobState {
	return v.value
}

func (v *NullableConnectorJobState) Set(val *ConnectorJobState) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectorJobState) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectorJobState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectorJobState(val *ConnectorJobState) *NullableConnectorJobState {
	return &NullableConnectorJobState{value: val, isSet: true}
}

func (v NullableConnectorJobState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectorJobState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
