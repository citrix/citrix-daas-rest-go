/*
Citrix Virtual App & Desktop Catalog Service 147.0.26651.57932

Catalog Service

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickdeploy

import (
	"encoding/json"
)

// checks if the PublishedApplication type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PublishedApplication{}

// PublishedApplication struct for PublishedApplication
type PublishedApplication struct {
	// Current state in publishing the application
	State AppsAndDesktopsProvisionState `json:"state"`
	// Status message related to application state
	Status *string `json:"status,omitempty"`
	// Unique identifier of app, generally a GUID
	Id string `json:"id"`
	// Display name of app
	Name string `json:"name"`
	// Path to execute the application
	ApplicationPath string `json:"applicationPath"`
	// Working directory of the app at launch
	WorkingDirectory *string `json:"workingDirectory,omitempty"`
	// Application description that show up in Workspace
	Description *string `json:"description,omitempty"`
	// The compressed b64 icon used by UI
	Compressedb64Icon *string `json:"compressedb64Icon,omitempty"`
	// Extra parameters to provide the application when it is launched
	CommandLineParams *string `json:"commandLineParams,omitempty"`
}

// NewPublishedApplicationWithDefaults instantiates a new PublishedApplication object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPublishedApplicationWithDefaults() *PublishedApplication {
	this := PublishedApplication{}
	return &this
}

// GetState returns the State field value
func (o *PublishedApplication) GetState() AppsAndDesktopsProvisionState {
	if o == nil {
		var ret AppsAndDesktopsProvisionState
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *PublishedApplication) GetStateOk() (*AppsAndDesktopsProvisionState, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *PublishedApplication) SetState(v AppsAndDesktopsProvisionState) {
	o.State = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *PublishedApplication) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublishedApplication) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *PublishedApplication) SetStatus(v string) {
	o.Status = &v
}

// GetId returns the Id field value
func (o *PublishedApplication) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *PublishedApplication) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *PublishedApplication) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *PublishedApplication) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *PublishedApplication) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *PublishedApplication) SetName(v string) {
	o.Name = v
}

// GetApplicationPath returns the ApplicationPath field value
func (o *PublishedApplication) GetApplicationPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ApplicationPath
}

// GetApplicationPathOk returns a tuple with the ApplicationPath field value
// and a boolean to check if the value has been set.
func (o *PublishedApplication) GetApplicationPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ApplicationPath, true
}

// SetApplicationPath sets field value
func (o *PublishedApplication) SetApplicationPath(v string) {
	o.ApplicationPath = v
}

// GetWorkingDirectory returns the WorkingDirectory field value if set, zero value otherwise.
func (o *PublishedApplication) GetWorkingDirectory() string {
	if o == nil || IsNil(o.WorkingDirectory) {
		var ret string
		return ret
	}
	return *o.WorkingDirectory
}

// GetWorkingDirectoryOk returns a tuple with the WorkingDirectory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublishedApplication) GetWorkingDirectoryOk() (*string, bool) {
	if o == nil || IsNil(o.WorkingDirectory) {
		return nil, false
	}
	return o.WorkingDirectory, true
}

// SetWorkingDirectory gets a reference to the given string and assigns it to the WorkingDirectory field.
func (o *PublishedApplication) SetWorkingDirectory(v string) {
	o.WorkingDirectory = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *PublishedApplication) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublishedApplication) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *PublishedApplication) SetDescription(v string) {
	o.Description = &v
}

// GetCompressedb64Icon returns the Compressedb64Icon field value if set, zero value otherwise.
func (o *PublishedApplication) GetCompressedb64Icon() string {
	if o == nil || IsNil(o.Compressedb64Icon) {
		var ret string
		return ret
	}
	return *o.Compressedb64Icon
}

// GetCompressedb64IconOk returns a tuple with the Compressedb64Icon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublishedApplication) GetCompressedb64IconOk() (*string, bool) {
	if o == nil || IsNil(o.Compressedb64Icon) {
		return nil, false
	}
	return o.Compressedb64Icon, true
}

// SetCompressedb64Icon gets a reference to the given string and assigns it to the Compressedb64Icon field.
func (o *PublishedApplication) SetCompressedb64Icon(v string) {
	o.Compressedb64Icon = &v
}

// GetCommandLineParams returns the CommandLineParams field value if set, zero value otherwise.
func (o *PublishedApplication) GetCommandLineParams() string {
	if o == nil || IsNil(o.CommandLineParams) {
		var ret string
		return ret
	}
	return *o.CommandLineParams
}

// GetCommandLineParamsOk returns a tuple with the CommandLineParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublishedApplication) GetCommandLineParamsOk() (*string, bool) {
	if o == nil || IsNil(o.CommandLineParams) {
		return nil, false
	}
	return o.CommandLineParams, true
}

// SetCommandLineParams gets a reference to the given string and assigns it to the CommandLineParams field.
func (o *PublishedApplication) SetCommandLineParams(v string) {
	o.CommandLineParams = &v
}

func (o PublishedApplication) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PublishedApplication) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["state"] = o.State
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["applicationPath"] = o.ApplicationPath
	if !IsNil(o.WorkingDirectory) {
		toSerialize["workingDirectory"] = o.WorkingDirectory
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Compressedb64Icon) {
		toSerialize["compressedb64Icon"] = o.Compressedb64Icon
	}
	if !IsNil(o.CommandLineParams) {
		toSerialize["commandLineParams"] = o.CommandLineParams
	}
	return toSerialize, nil
}

type NullablePublishedApplication struct {
	value *PublishedApplication
	isSet bool
}

func (v NullablePublishedApplication) Get() *PublishedApplication {
	return v.value
}

func (v *NullablePublishedApplication) Set(val *PublishedApplication) {
	v.value = val
	v.isSet = true
}

func (v NullablePublishedApplication) IsSet() bool {
	return v.isSet
}

func (v *NullablePublishedApplication) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublishedApplication(val *PublishedApplication) *NullablePublishedApplication {
	return &NullablePublishedApplication{value: val, isSet: true}
}

func (v NullablePublishedApplication) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublishedApplication) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
