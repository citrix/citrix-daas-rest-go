/*
Citrix Virtual App & Desktop Catalog Service 147.0.26651.57932

Catalog Service

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickdeploy

import (
	"encoding/json"
	"fmt"
)

// TroubleshootState the model 'TroubleshootState'
type TroubleshootState string

// List of TroubleshootState
const (
	TROUBLESHOOTSTATE_RUNNING    TroubleshootState = "Running"
	TROUBLESHOOTSTATE_SUCCESSFUL TroubleshootState = "Successful"
	TROUBLESHOOTSTATE_FAILED     TroubleshootState = "Failed"
)

// All allowed values of TroubleshootState enum
var AllowedTroubleshootStateEnumValues = []TroubleshootState{
	"Running",
	"Successful",
	"Failed",
}

func (v *TroubleshootState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	*v = TroubleshootState(value)
	return nil
}

// NewTroubleshootStateFromValue returns a pointer to a valid TroubleshootState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTroubleshootStateFromValue(v string) (*TroubleshootState, error) {
	ev := TroubleshootState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TroubleshootState: valid values are %v", v, AllowedTroubleshootStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TroubleshootState) IsValid() bool {
	for _, existing := range AllowedTroubleshootStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TroubleshootState value
func (v TroubleshootState) Ptr() *TroubleshootState {
	return &v
}

type NullableTroubleshootState struct {
	value *TroubleshootState
	isSet bool
}

func (v NullableTroubleshootState) Get() *TroubleshootState {
	return v.value
}

func (v *NullableTroubleshootState) Set(val *TroubleshootState) {
	v.value = val
	v.isSet = true
}

func (v NullableTroubleshootState) IsSet() bool {
	return v.isSet
}

func (v *NullableTroubleshootState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTroubleshootState(val *TroubleshootState) *NullableTroubleshootState {
	return &NullableTroubleshootState{value: val, isSet: true}
}

func (v NullableTroubleshootState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTroubleshootState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
