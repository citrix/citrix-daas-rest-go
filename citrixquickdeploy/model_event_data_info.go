/*
Citrix Virtual App & Desktop Catalog Service 147.0.26651.57932

Catalog Service

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickdeploy

import (
	"encoding/json"
	"time"
)

// checks if the EventDataInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventDataInfo{}

// EventDataInfo struct for EventDataInfo
type EventDataInfo struct {
	Authorization        *SenderAuthorization      `json:"authorization,omitempty"`
	Claims               *map[string]string        `json:"claims,omitempty"`
	Caller               *string                   `json:"caller,omitempty"`
	Description          *string                   `json:"description,omitempty"`
	Id                   *string                   `json:"id,omitempty"`
	EventDataId          *string                   `json:"eventDataId,omitempty"`
	CorrelationId        *string                   `json:"correlationId,omitempty"`
	EventName            *MonitorLocalizableString `json:"eventName,omitempty"`
	Category             *MonitorLocalizableString `json:"category,omitempty"`
	HttpRequest          *EventDataHttpRequestInfo `json:"httpRequest,omitempty"`
	Level                *MonitorEventLevel        `json:"level,omitempty"`
	ResourceGroupName    *string                   `json:"resourceGroupName,omitempty"`
	ResourceProviderName *MonitorLocalizableString `json:"resourceProviderName,omitempty"`
	ResourceId           *ResourceIdentifier       `json:"resourceId,omitempty"`
	ResourceType         *MonitorLocalizableString `json:"resourceType,omitempty"`
	OperationId          *string                   `json:"operationId,omitempty"`
	OperationName        *MonitorLocalizableString `json:"operationName,omitempty"`
	Properties           *map[string]string        `json:"properties,omitempty"`
	Status               *MonitorLocalizableString `json:"status,omitempty"`
	SubStatus            *MonitorLocalizableString `json:"subStatus,omitempty"`
	EventTimestamp       *time.Time                `json:"eventTimestamp,omitempty"`
	SubmissionTimestamp  *time.Time                `json:"submissionTimestamp,omitempty"`
	SubscriptionId       *string                   `json:"subscriptionId,omitempty"`
	TenantId             *string                   `json:"tenantId,omitempty"`
}

// NewEventDataInfoWithDefaults instantiates a new EventDataInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventDataInfoWithDefaults() *EventDataInfo {
	this := EventDataInfo{}
	return &this
}

// GetAuthorization returns the Authorization field value if set, zero value otherwise.
func (o *EventDataInfo) GetAuthorization() SenderAuthorization {
	if o == nil || IsNil(o.Authorization) {
		var ret SenderAuthorization
		return ret
	}
	return *o.Authorization
}

// GetAuthorizationOk returns a tuple with the Authorization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventDataInfo) GetAuthorizationOk() (*SenderAuthorization, bool) {
	if o == nil || IsNil(o.Authorization) {
		return nil, false
	}
	return o.Authorization, true
}

// SetAuthorization gets a reference to the given SenderAuthorization and assigns it to the Authorization field.
func (o *EventDataInfo) SetAuthorization(v SenderAuthorization) {
	o.Authorization = &v
}

// GetClaims returns the Claims field value if set, zero value otherwise.
func (o *EventDataInfo) GetClaims() map[string]string {
	if o == nil || IsNil(o.Claims) {
		var ret map[string]string
		return ret
	}
	return *o.Claims
}

// GetClaimsOk returns a tuple with the Claims field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventDataInfo) GetClaimsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Claims) {
		return nil, false
	}
	return o.Claims, true
}

// SetClaims gets a reference to the given map[string]string and assigns it to the Claims field.
func (o *EventDataInfo) SetClaims(v map[string]string) {
	o.Claims = &v
}

// GetCaller returns the Caller field value if set, zero value otherwise.
func (o *EventDataInfo) GetCaller() string {
	if o == nil || IsNil(o.Caller) {
		var ret string
		return ret
	}
	return *o.Caller
}

// GetCallerOk returns a tuple with the Caller field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventDataInfo) GetCallerOk() (*string, bool) {
	if o == nil || IsNil(o.Caller) {
		return nil, false
	}
	return o.Caller, true
}

// SetCaller gets a reference to the given string and assigns it to the Caller field.
func (o *EventDataInfo) SetCaller(v string) {
	o.Caller = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *EventDataInfo) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventDataInfo) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *EventDataInfo) SetDescription(v string) {
	o.Description = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *EventDataInfo) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventDataInfo) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *EventDataInfo) SetId(v string) {
	o.Id = &v
}

// GetEventDataId returns the EventDataId field value if set, zero value otherwise.
func (o *EventDataInfo) GetEventDataId() string {
	if o == nil || IsNil(o.EventDataId) {
		var ret string
		return ret
	}
	return *o.EventDataId
}

// GetEventDataIdOk returns a tuple with the EventDataId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventDataInfo) GetEventDataIdOk() (*string, bool) {
	if o == nil || IsNil(o.EventDataId) {
		return nil, false
	}
	return o.EventDataId, true
}

// SetEventDataId gets a reference to the given string and assigns it to the EventDataId field.
func (o *EventDataInfo) SetEventDataId(v string) {
	o.EventDataId = &v
}

// GetCorrelationId returns the CorrelationId field value if set, zero value otherwise.
func (o *EventDataInfo) GetCorrelationId() string {
	if o == nil || IsNil(o.CorrelationId) {
		var ret string
		return ret
	}
	return *o.CorrelationId
}

// GetCorrelationIdOk returns a tuple with the CorrelationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventDataInfo) GetCorrelationIdOk() (*string, bool) {
	if o == nil || IsNil(o.CorrelationId) {
		return nil, false
	}
	return o.CorrelationId, true
}

// SetCorrelationId gets a reference to the given string and assigns it to the CorrelationId field.
func (o *EventDataInfo) SetCorrelationId(v string) {
	o.CorrelationId = &v
}

// GetEventName returns the EventName field value if set, zero value otherwise.
func (o *EventDataInfo) GetEventName() MonitorLocalizableString {
	if o == nil || IsNil(o.EventName) {
		var ret MonitorLocalizableString
		return ret
	}
	return *o.EventName
}

// GetEventNameOk returns a tuple with the EventName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventDataInfo) GetEventNameOk() (*MonitorLocalizableString, bool) {
	if o == nil || IsNil(o.EventName) {
		return nil, false
	}
	return o.EventName, true
}

// SetEventName gets a reference to the given MonitorLocalizableString and assigns it to the EventName field.
func (o *EventDataInfo) SetEventName(v MonitorLocalizableString) {
	o.EventName = &v
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *EventDataInfo) GetCategory() MonitorLocalizableString {
	if o == nil || IsNil(o.Category) {
		var ret MonitorLocalizableString
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventDataInfo) GetCategoryOk() (*MonitorLocalizableString, bool) {
	if o == nil || IsNil(o.Category) {
		return nil, false
	}
	return o.Category, true
}

// SetCategory gets a reference to the given MonitorLocalizableString and assigns it to the Category field.
func (o *EventDataInfo) SetCategory(v MonitorLocalizableString) {
	o.Category = &v
}

// GetHttpRequest returns the HttpRequest field value if set, zero value otherwise.
func (o *EventDataInfo) GetHttpRequest() EventDataHttpRequestInfo {
	if o == nil || IsNil(o.HttpRequest) {
		var ret EventDataHttpRequestInfo
		return ret
	}
	return *o.HttpRequest
}

// GetHttpRequestOk returns a tuple with the HttpRequest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventDataInfo) GetHttpRequestOk() (*EventDataHttpRequestInfo, bool) {
	if o == nil || IsNil(o.HttpRequest) {
		return nil, false
	}
	return o.HttpRequest, true
}

// SetHttpRequest gets a reference to the given EventDataHttpRequestInfo and assigns it to the HttpRequest field.
func (o *EventDataInfo) SetHttpRequest(v EventDataHttpRequestInfo) {
	o.HttpRequest = &v
}

// GetLevel returns the Level field value if set, zero value otherwise.
func (o *EventDataInfo) GetLevel() MonitorEventLevel {
	if o == nil || IsNil(o.Level) {
		var ret MonitorEventLevel
		return ret
	}
	return *o.Level
}

// GetLevelOk returns a tuple with the Level field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventDataInfo) GetLevelOk() (*MonitorEventLevel, bool) {
	if o == nil || IsNil(o.Level) {
		return nil, false
	}
	return o.Level, true
}

// SetLevel gets a reference to the given MonitorEventLevel and assigns it to the Level field.
func (o *EventDataInfo) SetLevel(v MonitorEventLevel) {
	o.Level = &v
}

// GetResourceGroupName returns the ResourceGroupName field value if set, zero value otherwise.
func (o *EventDataInfo) GetResourceGroupName() string {
	if o == nil || IsNil(o.ResourceGroupName) {
		var ret string
		return ret
	}
	return *o.ResourceGroupName
}

// GetResourceGroupNameOk returns a tuple with the ResourceGroupName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventDataInfo) GetResourceGroupNameOk() (*string, bool) {
	if o == nil || IsNil(o.ResourceGroupName) {
		return nil, false
	}
	return o.ResourceGroupName, true
}

// SetResourceGroupName gets a reference to the given string and assigns it to the ResourceGroupName field.
func (o *EventDataInfo) SetResourceGroupName(v string) {
	o.ResourceGroupName = &v
}

// GetResourceProviderName returns the ResourceProviderName field value if set, zero value otherwise.
func (o *EventDataInfo) GetResourceProviderName() MonitorLocalizableString {
	if o == nil || IsNil(o.ResourceProviderName) {
		var ret MonitorLocalizableString
		return ret
	}
	return *o.ResourceProviderName
}

// GetResourceProviderNameOk returns a tuple with the ResourceProviderName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventDataInfo) GetResourceProviderNameOk() (*MonitorLocalizableString, bool) {
	if o == nil || IsNil(o.ResourceProviderName) {
		return nil, false
	}
	return o.ResourceProviderName, true
}

// SetResourceProviderName gets a reference to the given MonitorLocalizableString and assigns it to the ResourceProviderName field.
func (o *EventDataInfo) SetResourceProviderName(v MonitorLocalizableString) {
	o.ResourceProviderName = &v
}

// GetResourceId returns the ResourceId field value if set, zero value otherwise.
func (o *EventDataInfo) GetResourceId() ResourceIdentifier {
	if o == nil || IsNil(o.ResourceId) {
		var ret ResourceIdentifier
		return ret
	}
	return *o.ResourceId
}

// GetResourceIdOk returns a tuple with the ResourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventDataInfo) GetResourceIdOk() (*ResourceIdentifier, bool) {
	if o == nil || IsNil(o.ResourceId) {
		return nil, false
	}
	return o.ResourceId, true
}

// SetResourceId gets a reference to the given ResourceIdentifier and assigns it to the ResourceId field.
func (o *EventDataInfo) SetResourceId(v ResourceIdentifier) {
	o.ResourceId = &v
}

// GetResourceType returns the ResourceType field value if set, zero value otherwise.
func (o *EventDataInfo) GetResourceType() MonitorLocalizableString {
	if o == nil || IsNil(o.ResourceType) {
		var ret MonitorLocalizableString
		return ret
	}
	return *o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventDataInfo) GetResourceTypeOk() (*MonitorLocalizableString, bool) {
	if o == nil || IsNil(o.ResourceType) {
		return nil, false
	}
	return o.ResourceType, true
}

// SetResourceType gets a reference to the given MonitorLocalizableString and assigns it to the ResourceType field.
func (o *EventDataInfo) SetResourceType(v MonitorLocalizableString) {
	o.ResourceType = &v
}

// GetOperationId returns the OperationId field value if set, zero value otherwise.
func (o *EventDataInfo) GetOperationId() string {
	if o == nil || IsNil(o.OperationId) {
		var ret string
		return ret
	}
	return *o.OperationId
}

// GetOperationIdOk returns a tuple with the OperationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventDataInfo) GetOperationIdOk() (*string, bool) {
	if o == nil || IsNil(o.OperationId) {
		return nil, false
	}
	return o.OperationId, true
}

// SetOperationId gets a reference to the given string and assigns it to the OperationId field.
func (o *EventDataInfo) SetOperationId(v string) {
	o.OperationId = &v
}

// GetOperationName returns the OperationName field value if set, zero value otherwise.
func (o *EventDataInfo) GetOperationName() MonitorLocalizableString {
	if o == nil || IsNil(o.OperationName) {
		var ret MonitorLocalizableString
		return ret
	}
	return *o.OperationName
}

// GetOperationNameOk returns a tuple with the OperationName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventDataInfo) GetOperationNameOk() (*MonitorLocalizableString, bool) {
	if o == nil || IsNil(o.OperationName) {
		return nil, false
	}
	return o.OperationName, true
}

// SetOperationName gets a reference to the given MonitorLocalizableString and assigns it to the OperationName field.
func (o *EventDataInfo) SetOperationName(v MonitorLocalizableString) {
	o.OperationName = &v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *EventDataInfo) GetProperties() map[string]string {
	if o == nil || IsNil(o.Properties) {
		var ret map[string]string
		return ret
	}
	return *o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventDataInfo) GetPropertiesOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Properties) {
		return nil, false
	}
	return o.Properties, true
}

// SetProperties gets a reference to the given map[string]string and assigns it to the Properties field.
func (o *EventDataInfo) SetProperties(v map[string]string) {
	o.Properties = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *EventDataInfo) GetStatus() MonitorLocalizableString {
	if o == nil || IsNil(o.Status) {
		var ret MonitorLocalizableString
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventDataInfo) GetStatusOk() (*MonitorLocalizableString, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// SetStatus gets a reference to the given MonitorLocalizableString and assigns it to the Status field.
func (o *EventDataInfo) SetStatus(v MonitorLocalizableString) {
	o.Status = &v
}

// GetSubStatus returns the SubStatus field value if set, zero value otherwise.
func (o *EventDataInfo) GetSubStatus() MonitorLocalizableString {
	if o == nil || IsNil(o.SubStatus) {
		var ret MonitorLocalizableString
		return ret
	}
	return *o.SubStatus
}

// GetSubStatusOk returns a tuple with the SubStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventDataInfo) GetSubStatusOk() (*MonitorLocalizableString, bool) {
	if o == nil || IsNil(o.SubStatus) {
		return nil, false
	}
	return o.SubStatus, true
}

// SetSubStatus gets a reference to the given MonitorLocalizableString and assigns it to the SubStatus field.
func (o *EventDataInfo) SetSubStatus(v MonitorLocalizableString) {
	o.SubStatus = &v
}

// GetEventTimestamp returns the EventTimestamp field value if set, zero value otherwise.
func (o *EventDataInfo) GetEventTimestamp() time.Time {
	if o == nil || IsNil(o.EventTimestamp) {
		var ret time.Time
		return ret
	}
	return *o.EventTimestamp
}

// GetEventTimestampOk returns a tuple with the EventTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventDataInfo) GetEventTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EventTimestamp) {
		return nil, false
	}
	return o.EventTimestamp, true
}

// SetEventTimestamp gets a reference to the given time.Time and assigns it to the EventTimestamp field.
func (o *EventDataInfo) SetEventTimestamp(v time.Time) {
	o.EventTimestamp = &v
}

// GetSubmissionTimestamp returns the SubmissionTimestamp field value if set, zero value otherwise.
func (o *EventDataInfo) GetSubmissionTimestamp() time.Time {
	if o == nil || IsNil(o.SubmissionTimestamp) {
		var ret time.Time
		return ret
	}
	return *o.SubmissionTimestamp
}

// GetSubmissionTimestampOk returns a tuple with the SubmissionTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventDataInfo) GetSubmissionTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.SubmissionTimestamp) {
		return nil, false
	}
	return o.SubmissionTimestamp, true
}

// SetSubmissionTimestamp gets a reference to the given time.Time and assigns it to the SubmissionTimestamp field.
func (o *EventDataInfo) SetSubmissionTimestamp(v time.Time) {
	o.SubmissionTimestamp = &v
}

// GetSubscriptionId returns the SubscriptionId field value if set, zero value otherwise.
func (o *EventDataInfo) GetSubscriptionId() string {
	if o == nil || IsNil(o.SubscriptionId) {
		var ret string
		return ret
	}
	return *o.SubscriptionId
}

// GetSubscriptionIdOk returns a tuple with the SubscriptionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventDataInfo) GetSubscriptionIdOk() (*string, bool) {
	if o == nil || IsNil(o.SubscriptionId) {
		return nil, false
	}
	return o.SubscriptionId, true
}

// SetSubscriptionId gets a reference to the given string and assigns it to the SubscriptionId field.
func (o *EventDataInfo) SetSubscriptionId(v string) {
	o.SubscriptionId = &v
}

// GetTenantId returns the TenantId field value if set, zero value otherwise.
func (o *EventDataInfo) GetTenantId() string {
	if o == nil || IsNil(o.TenantId) {
		var ret string
		return ret
	}
	return *o.TenantId
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventDataInfo) GetTenantIdOk() (*string, bool) {
	if o == nil || IsNil(o.TenantId) {
		return nil, false
	}
	return o.TenantId, true
}

// SetTenantId gets a reference to the given string and assigns it to the TenantId field.
func (o *EventDataInfo) SetTenantId(v string) {
	o.TenantId = &v
}

func (o EventDataInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventDataInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Authorization) {
		toSerialize["authorization"] = o.Authorization
	}
	if !IsNil(o.Claims) {
		toSerialize["claims"] = o.Claims
	}
	if !IsNil(o.Caller) {
		toSerialize["caller"] = o.Caller
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.EventDataId) {
		toSerialize["eventDataId"] = o.EventDataId
	}
	if !IsNil(o.CorrelationId) {
		toSerialize["correlationId"] = o.CorrelationId
	}
	if !IsNil(o.EventName) {
		toSerialize["eventName"] = o.EventName
	}
	if !IsNil(o.Category) {
		toSerialize["category"] = o.Category
	}
	if !IsNil(o.HttpRequest) {
		toSerialize["httpRequest"] = o.HttpRequest
	}
	if !IsNil(o.Level) {
		toSerialize["level"] = o.Level
	}
	if !IsNil(o.ResourceGroupName) {
		toSerialize["resourceGroupName"] = o.ResourceGroupName
	}
	if !IsNil(o.ResourceProviderName) {
		toSerialize["resourceProviderName"] = o.ResourceProviderName
	}
	if !IsNil(o.ResourceId) {
		toSerialize["resourceId"] = o.ResourceId
	}
	if !IsNil(o.ResourceType) {
		toSerialize["resourceType"] = o.ResourceType
	}
	if !IsNil(o.OperationId) {
		toSerialize["operationId"] = o.OperationId
	}
	if !IsNil(o.OperationName) {
		toSerialize["operationName"] = o.OperationName
	}
	if !IsNil(o.Properties) {
		toSerialize["properties"] = o.Properties
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.SubStatus) {
		toSerialize["subStatus"] = o.SubStatus
	}
	if !IsNil(o.EventTimestamp) {
		toSerialize["eventTimestamp"] = o.EventTimestamp
	}
	if !IsNil(o.SubmissionTimestamp) {
		toSerialize["submissionTimestamp"] = o.SubmissionTimestamp
	}
	if !IsNil(o.SubscriptionId) {
		toSerialize["subscriptionId"] = o.SubscriptionId
	}
	if !IsNil(o.TenantId) {
		toSerialize["tenantId"] = o.TenantId
	}
	return toSerialize, nil
}

type NullableEventDataInfo struct {
	value *EventDataInfo
	isSet bool
}

func (v NullableEventDataInfo) Get() *EventDataInfo {
	return v.value
}

func (v *NullableEventDataInfo) Set(val *EventDataInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableEventDataInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableEventDataInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventDataInfo(val *EventDataInfo) *NullableEventDataInfo {
	return &NullableEventDataInfo{value: val, isSet: true}
}

func (v NullableEventDataInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventDataInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
