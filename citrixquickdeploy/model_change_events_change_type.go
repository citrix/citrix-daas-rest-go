/*
Citrix Virtual App & Desktop Catalog Service 147.0.26651.57932

Catalog Service

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickdeploy

import (
	"encoding/json"
	"fmt"
)

// ChangeEventsChangeType the model 'ChangeEventsChangeType'
type ChangeEventsChangeType string

// List of ChangeEventsChangeType
const (
	CHANGEEVENTSCHANGETYPE_UNKNOWN                    ChangeEventsChangeType = "Unknown"
	CHANGEEVENTSCHANGETYPE_CREATE                     ChangeEventsChangeType = "Create"
	CHANGEEVENTSCHANGETYPE_UPDATE                     ChangeEventsChangeType = "Update"
	CHANGEEVENTSCHANGETYPE_DELETE                     ChangeEventsChangeType = "Delete"
	CHANGEEVENTSCHANGETYPE_HEALTH_DATA_REQUEST        ChangeEventsChangeType = "HealthDataRequest"
	CHANGEEVENTSCHANGETYPE_HEALTH_DATA_RESPONSE       ChangeEventsChangeType = "HealthDataResponse"
	CHANGEEVENTSCHANGETYPE_HEARTBEAT                  ChangeEventsChangeType = "Heartbeat"
	CHANGEEVENTSCHANGETYPE_FULFILLED_ENTITLEMENT      ChangeEventsChangeType = "FulfilledEntitlement"
	CHANGEEVENTSCHANGETYPE_PENDING_ENTITLEMENT        ChangeEventsChangeType = "PendingEntitlement"
	CHANGEEVENTSCHANGETYPE_EXPIRED_ENTITLEMENT        ChangeEventsChangeType = "ExpiredEntitlement"
	CHANGEEVENTSCHANGETYPE_UPDATE_ENTITLEMENT         ChangeEventsChangeType = "UpdateEntitlement"
	CHANGEEVENTSCHANGETYPE_COUNT                      ChangeEventsChangeType = "Count"
	CHANGEEVENTSCHANGETYPE_LOGIN                      ChangeEventsChangeType = "Login"
	CHANGEEVENTSCHANGETYPE_CONNECTOR_ROLLOUT          ChangeEventsChangeType = "ConnectorRollout"
	CHANGEEVENTSCHANGETYPE_START_CREATE               ChangeEventsChangeType = "StartCreate"
	CHANGEEVENTSCHANGETYPE_START_UPDATE               ChangeEventsChangeType = "StartUpdate"
	CHANGEEVENTSCHANGETYPE_START_DELETE               ChangeEventsChangeType = "StartDelete"
	CHANGEEVENTSCHANGETYPE_START_CREATE_FROM_RECOVERY ChangeEventsChangeType = "StartCreateFromRecovery"
	CHANGEEVENTSCHANGETYPE_CREATE_FROM_RECOVERY       ChangeEventsChangeType = "CreateFromRecovery"
	CHANGEEVENTSCHANGETYPE_UNDEFINED                  ChangeEventsChangeType = "Undefined"
)

// All allowed values of ChangeEventsChangeType enum
var AllowedChangeEventsChangeTypeEnumValues = []ChangeEventsChangeType{
	"Unknown",
	"Create",
	"Update",
	"Delete",
	"HealthDataRequest",
	"HealthDataResponse",
	"Heartbeat",
	"FulfilledEntitlement",
	"PendingEntitlement",
	"ExpiredEntitlement",
	"UpdateEntitlement",
	"Count",
	"Login",
	"ConnectorRollout",
	"StartCreate",
	"StartUpdate",
	"StartDelete",
	"StartCreateFromRecovery",
	"CreateFromRecovery",
	"Undefined",
}

func (v *ChangeEventsChangeType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	*v = ChangeEventsChangeType(value)
	return nil
}

// NewChangeEventsChangeTypeFromValue returns a pointer to a valid ChangeEventsChangeType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewChangeEventsChangeTypeFromValue(v string) (*ChangeEventsChangeType, error) {
	ev := ChangeEventsChangeType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ChangeEventsChangeType: valid values are %v", v, AllowedChangeEventsChangeTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ChangeEventsChangeType) IsValid() bool {
	for _, existing := range AllowedChangeEventsChangeTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ChangeEventsChangeType value
func (v ChangeEventsChangeType) Ptr() *ChangeEventsChangeType {
	return &v
}

type NullableChangeEventsChangeType struct {
	value *ChangeEventsChangeType
	isSet bool
}

func (v NullableChangeEventsChangeType) Get() *ChangeEventsChangeType {
	return v.value
}

func (v *NullableChangeEventsChangeType) Set(val *ChangeEventsChangeType) {
	v.value = val
	v.isSet = true
}

func (v NullableChangeEventsChangeType) IsSet() bool {
	return v.isSet
}

func (v *NullableChangeEventsChangeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChangeEventsChangeType(val *ChangeEventsChangeType) *NullableChangeEventsChangeType {
	return &NullableChangeEventsChangeType{value: val, isSet: true}
}

func (v NullableChangeEventsChangeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChangeEventsChangeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
