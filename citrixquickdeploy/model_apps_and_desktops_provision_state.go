/*
Citrix Virtual App & Desktop Catalog Service 147.0.26651.57932

Catalog Service

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickdeploy

import (
	"encoding/json"
	"fmt"
)

// AppsAndDesktopsProvisionState the model 'AppsAndDesktopsProvisionState'
type AppsAndDesktopsProvisionState string

// List of AppsAndDesktopsProvisionState
const (
	APPSANDDESKTOPSPROVISIONSTATE_PUBLISHED   AppsAndDesktopsProvisionState = "Published"
	APPSANDDESKTOPSPROVISIONSTATE_PUBLISHING  AppsAndDesktopsProvisionState = "Publishing"
	APPSANDDESKTOPSPROVISIONSTATE_UNKNOWN     AppsAndDesktopsProvisionState = "Unknown"
	APPSANDDESKTOPSPROVISIONSTATE_FAILED      AppsAndDesktopsProvisionState = "Failed"
	APPSANDDESKTOPSPROVISIONSTATE_UNPUBLISHED AppsAndDesktopsProvisionState = "Unpublished"
)

// All allowed values of AppsAndDesktopsProvisionState enum
var AllowedAppsAndDesktopsProvisionStateEnumValues = []AppsAndDesktopsProvisionState{
	"Published",
	"Publishing",
	"Unknown",
	"Failed",
	"Unpublished",
}

func (v *AppsAndDesktopsProvisionState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	*v = AppsAndDesktopsProvisionState(value)
	return nil
}

// NewAppsAndDesktopsProvisionStateFromValue returns a pointer to a valid AppsAndDesktopsProvisionState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAppsAndDesktopsProvisionStateFromValue(v string) (*AppsAndDesktopsProvisionState, error) {
	ev := AppsAndDesktopsProvisionState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AppsAndDesktopsProvisionState: valid values are %v", v, AllowedAppsAndDesktopsProvisionStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AppsAndDesktopsProvisionState) IsValid() bool {
	for _, existing := range AllowedAppsAndDesktopsProvisionStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AppsAndDesktopsProvisionState value
func (v AppsAndDesktopsProvisionState) Ptr() *AppsAndDesktopsProvisionState {
	return &v
}

type NullableAppsAndDesktopsProvisionState struct {
	value *AppsAndDesktopsProvisionState
	isSet bool
}

func (v NullableAppsAndDesktopsProvisionState) Get() *AppsAndDesktopsProvisionState {
	return v.value
}

func (v *NullableAppsAndDesktopsProvisionState) Set(val *AppsAndDesktopsProvisionState) {
	v.value = val
	v.isSet = true
}

func (v NullableAppsAndDesktopsProvisionState) IsSet() bool {
	return v.isSet
}

func (v *NullableAppsAndDesktopsProvisionState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppsAndDesktopsProvisionState(val *AppsAndDesktopsProvisionState) *NullableAppsAndDesktopsProvisionState {
	return &NullableAppsAndDesktopsProvisionState{value: val, isSet: true}
}

func (v NullableAppsAndDesktopsProvisionState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppsAndDesktopsProvisionState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
