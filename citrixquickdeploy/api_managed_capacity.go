/*
Citrix Virtual App & Desktop Catalog Service 147.0.26651.57932

Catalog Service

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickdeploy

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// ManagedCapacityCMDService ManagedCapacityCMD service
type ManagedCapacityCMDService service

type ApiDeletePortForNetworkSecurityGroupRequest struct {
	ctx                 context.Context
	ApiService          *ManagedCapacityCMDService
	customerId          string
	siteId              string
	resourceLocationId  string
	port                string
	citrixTransactionId *string
}

// The Transaction Id.
func (r ApiDeletePortForNetworkSecurityGroupRequest) CitrixTransactionId(citrixTransactionId string) ApiDeletePortForNetworkSecurityGroupRequest {
	r.citrixTransactionId = &citrixTransactionId
	return r
}

func (r ApiDeletePortForNetworkSecurityGroupRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeletePortForNetworkSecurityGroupExecute(r)
}

/*
DeletePortForNetworkSecurityGroup Perform operation to Delete Port For CMA Vnet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param customerId
	@param siteId
	@param resourceLocationId
	@param port
	@return ApiDeletePortForNetworkSecurityGroupRequest
*/
func (a *ManagedCapacityCMDService) DeletePortForNetworkSecurityGroup(ctx context.Context, customerId string, siteId string, resourceLocationId string, port string) ApiDeletePortForNetworkSecurityGroupRequest {
	return ApiDeletePortForNetworkSecurityGroupRequest{
		ApiService:         a,
		ctx:                ctx,
		customerId:         customerId,
		siteId:             siteId,
		resourceLocationId: resourceLocationId,
		port:               port,
	}
}

// Execute executes the request
func (a *ManagedCapacityCMDService) DeletePortForNetworkSecurityGroupExecute(r ApiDeletePortForNetworkSecurityGroupRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagedCapacityCMDService.DeletePortForNetworkSecurityGroup")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{customerId}/{siteId}/managedCapacity/resourcelocations/{resourceLocationId}/port/{port}"
	localVarPath = strings.Replace(localVarPath, "{"+"customerId"+"}", url.PathEscape(parameterValueToString(r.customerId, "customerId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"siteId"+"}", url.PathEscape(parameterValueToString(r.siteId, "siteId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resourceLocationId"+"}", url.PathEscape(parameterValueToString(r.resourceLocationId, "resourceLocationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"port"+"}", url.PathEscape(parameterValueToString(r.port, "port")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.citrixTransactionId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-TransactionId", r.citrixTransactionId, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CWSAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetAllPortsForNetworkSecurityGroupRequest struct {
	ctx                 context.Context
	ApiService          *ManagedCapacityCMDService
	customerId          string
	siteId              string
	citrixTransactionId *string
}

// The Transaction Id.
func (r ApiGetAllPortsForNetworkSecurityGroupRequest) CitrixTransactionId(citrixTransactionId string) ApiGetAllPortsForNetworkSecurityGroupRequest {
	r.citrixTransactionId = &citrixTransactionId
	return r
}

func (r ApiGetAllPortsForNetworkSecurityGroupRequest) Execute() (*VNetResourceDetails, *http.Response, error) {
	return r.ApiService.GetAllPortsForNetworkSecurityGroupExecute(r)
}

/*
GetAllPortsForNetworkSecurityGroup Get details of all ports in CMA VNet

<b>Authorization</b> (Policy: RouteBasedMultiTenantKeyOnly)

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param customerId
	@param siteId
	@return ApiGetAllPortsForNetworkSecurityGroupRequest
*/
func (a *ManagedCapacityCMDService) GetAllPortsForNetworkSecurityGroup(ctx context.Context, customerId string, siteId string) ApiGetAllPortsForNetworkSecurityGroupRequest {
	return ApiGetAllPortsForNetworkSecurityGroupRequest{
		ApiService: a,
		ctx:        ctx,
		customerId: customerId,
		siteId:     siteId,
	}
}

// Execute executes the request
//
//	@return VNetResourceDetails
func (a *ManagedCapacityCMDService) GetAllPortsForNetworkSecurityGroupExecute(r ApiGetAllPortsForNetworkSecurityGroupRequest) (*VNetResourceDetails, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *VNetResourceDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagedCapacityCMDService.GetAllPortsForNetworkSecurityGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{customerId}/{siteId}/managedCapacity/ports"
	localVarPath = strings.Replace(localVarPath, "{"+"customerId"+"}", url.PathEscape(parameterValueToString(r.customerId, "customerId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"siteId"+"}", url.PathEscape(parameterValueToString(r.siteId, "siteId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.citrixTransactionId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-TransactionId", r.citrixTransactionId, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CWSAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetDeploymentRegionsRequest struct {
	ctx                 context.Context
	ApiService          *ManagedCapacityCMDService
	customerId          string
	siteId              string
	includeHidden       *bool
	citrixTransactionId *string
}

// Should hidden regions be returned?
func (r ApiGetDeploymentRegionsRequest) IncludeHidden(includeHidden bool) ApiGetDeploymentRegionsRequest {
	r.includeHidden = &includeHidden
	return r
}

// The Transaction Id.
func (r ApiGetDeploymentRegionsRequest) CitrixTransactionId(citrixTransactionId string) ApiGetDeploymentRegionsRequest {
	r.citrixTransactionId = &citrixTransactionId
	return r
}

func (r ApiGetDeploymentRegionsRequest) Execute() (*DeploymentRegionsModel, *http.Response, error) {
	return r.ApiService.GetDeploymentRegionsExecute(r)
}

/*
GetDeploymentRegions Get the regions that are available for deployment by the customer

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param customerId ID of the user
	@param siteId ID of the customer's site
	@return ApiGetDeploymentRegionsRequest
*/
func (a *ManagedCapacityCMDService) GetDeploymentRegions(ctx context.Context, customerId string, siteId string) ApiGetDeploymentRegionsRequest {
	return ApiGetDeploymentRegionsRequest{
		ApiService: a,
		ctx:        ctx,
		customerId: customerId,
		siteId:     siteId,
	}
}

// Execute executes the request
//
//	@return DeploymentRegionsModel
func (a *ManagedCapacityCMDService) GetDeploymentRegionsExecute(r ApiGetDeploymentRegionsRequest) (*DeploymentRegionsModel, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeploymentRegionsModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagedCapacityCMDService.GetDeploymentRegions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{customerId}/{siteId}/managedCapacity/regions"
	localVarPath = strings.Replace(localVarPath, "{"+"customerId"+"}", url.PathEscape(parameterValueToString(r.customerId, "customerId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"siteId"+"}", url.PathEscape(parameterValueToString(r.siteId, "siteId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.includeHidden != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeHidden", r.includeHidden, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.citrixTransactionId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-TransactionId", r.citrixTransactionId, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CWSAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetOnPremConnectionsRequest struct {
	ctx                 context.Context
	ApiService          *ManagedCapacityCMDService
	customerId          string
	siteId              string
	cspCustomerId       *string
	cspSiteId           *string
	regionId            *string
	citrixTransactionId *string
}

// Name of tenant customer ID if partner-tenant relationship exists otherwise null
func (r ApiGetOnPremConnectionsRequest) CspCustomerId(cspCustomerId string) ApiGetOnPremConnectionsRequest {
	r.cspCustomerId = &cspCustomerId
	return r
}

// Name of tenant site ID if partner-tenant relationship exists otherwise null
func (r ApiGetOnPremConnectionsRequest) CspSiteId(cspSiteId string) ApiGetOnPremConnectionsRequest {
	r.cspSiteId = &cspSiteId
	return r
}

// Return only connections for specified region. Returns all if null.
func (r ApiGetOnPremConnectionsRequest) RegionId(regionId string) ApiGetOnPremConnectionsRequest {
	r.regionId = &regionId
	return r
}

// The Transaction Id.
func (r ApiGetOnPremConnectionsRequest) CitrixTransactionId(citrixTransactionId string) ApiGetOnPremConnectionsRequest {
	r.citrixTransactionId = &citrixTransactionId
	return r
}

func (r ApiGetOnPremConnectionsRequest) Execute() (*OnPremConnectionsModel, *http.Response, error) {
	return r.ApiService.GetOnPremConnectionsExecute(r)
}

/*
GetOnPremConnections Get the On-Prem connections configured for the customer

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param customerId ID of the user
	@param siteId ID of the customer's site
	@return ApiGetOnPremConnectionsRequest
*/
func (a *ManagedCapacityCMDService) GetOnPremConnections(ctx context.Context, customerId string, siteId string) ApiGetOnPremConnectionsRequest {
	return ApiGetOnPremConnectionsRequest{
		ApiService: a,
		ctx:        ctx,
		customerId: customerId,
		siteId:     siteId,
	}
}

// Execute executes the request
//
//	@return OnPremConnectionsModel
func (a *ManagedCapacityCMDService) GetOnPremConnectionsExecute(r ApiGetOnPremConnectionsRequest) (*OnPremConnectionsModel, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *OnPremConnectionsModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagedCapacityCMDService.GetOnPremConnections")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{customerId}/{siteId}/managedCapacity/onPremConnections"
	localVarPath = strings.Replace(localVarPath, "{"+"customerId"+"}", url.PathEscape(parameterValueToString(r.customerId, "customerId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"siteId"+"}", url.PathEscape(parameterValueToString(r.siteId, "siteId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.cspCustomerId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cspCustomerId", r.cspCustomerId, "")
	}
	if r.cspSiteId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cspSiteId", r.cspSiteId, "")
	}
	if r.regionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "regionId", r.regionId, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.citrixTransactionId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-TransactionId", r.citrixTransactionId, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CWSAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetOpenPortsForNetworkSecurityGroupRequest struct {
	ctx                 context.Context
	ApiService          *ManagedCapacityCMDService
	customerId          string
	siteId              string
	resourceLocationId  string
	citrixTransactionId *string
}

// The Transaction Id.
func (r ApiGetOpenPortsForNetworkSecurityGroupRequest) CitrixTransactionId(citrixTransactionId string) ApiGetOpenPortsForNetworkSecurityGroupRequest {
	r.citrixTransactionId = &citrixTransactionId
	return r
}

func (r ApiGetOpenPortsForNetworkSecurityGroupRequest) Execute() (*VNetResourceLocation, *http.Response, error) {
	return r.ApiService.GetOpenPortsForNetworkSecurityGroupExecute(r)
}

/*
GetOpenPortsForNetworkSecurityGroup Get list of open ports in CMA Vnet for provided resource location

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param customerId
	@param siteId
	@param resourceLocationId
	@return ApiGetOpenPortsForNetworkSecurityGroupRequest
*/
func (a *ManagedCapacityCMDService) GetOpenPortsForNetworkSecurityGroup(ctx context.Context, customerId string, siteId string, resourceLocationId string) ApiGetOpenPortsForNetworkSecurityGroupRequest {
	return ApiGetOpenPortsForNetworkSecurityGroupRequest{
		ApiService:         a,
		ctx:                ctx,
		customerId:         customerId,
		siteId:             siteId,
		resourceLocationId: resourceLocationId,
	}
}

// Execute executes the request
//
//	@return VNetResourceLocation
func (a *ManagedCapacityCMDService) GetOpenPortsForNetworkSecurityGroupExecute(r ApiGetOpenPortsForNetworkSecurityGroupRequest) (*VNetResourceLocation, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *VNetResourceLocation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagedCapacityCMDService.GetOpenPortsForNetworkSecurityGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{customerId}/{siteId}/managedCapacity/resourcelocations/{resourceLocationId}/openPorts"
	localVarPath = strings.Replace(localVarPath, "{"+"customerId"+"}", url.PathEscape(parameterValueToString(r.customerId, "customerId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"siteId"+"}", url.PathEscape(parameterValueToString(r.siteId, "siteId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resourceLocationId"+"}", url.PathEscape(parameterValueToString(r.resourceLocationId, "resourceLocationId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.citrixTransactionId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-TransactionId", r.citrixTransactionId, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CWSAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOpenPortForNetworkSecurityGroupRequest struct {
	ctx                 context.Context
	ApiService          *ManagedCapacityCMDService
	customerId          string
	siteId              string
	resourceLocationId  string
	port                string
	citrixTransactionId *string
}

// The Transaction Id.
func (r ApiOpenPortForNetworkSecurityGroupRequest) CitrixTransactionId(citrixTransactionId string) ApiOpenPortForNetworkSecurityGroupRequest {
	r.citrixTransactionId = &citrixTransactionId
	return r
}

func (r ApiOpenPortForNetworkSecurityGroupRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.OpenPortForNetworkSecurityGroupExecute(r)
}

/*
OpenPortForNetworkSecurityGroup Perform operation to Open Port For CMA Vnet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param customerId
	@param siteId
	@param resourceLocationId
	@param port
	@return ApiOpenPortForNetworkSecurityGroupRequest
*/
func (a *ManagedCapacityCMDService) OpenPortForNetworkSecurityGroup(ctx context.Context, customerId string, siteId string, resourceLocationId string, port string) ApiOpenPortForNetworkSecurityGroupRequest {
	return ApiOpenPortForNetworkSecurityGroupRequest{
		ApiService:         a,
		ctx:                ctx,
		customerId:         customerId,
		siteId:             siteId,
		resourceLocationId: resourceLocationId,
		port:               port,
	}
}

// Execute executes the request
//
//	@return string
func (a *ManagedCapacityCMDService) OpenPortForNetworkSecurityGroupExecute(r ApiOpenPortForNetworkSecurityGroupRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagedCapacityCMDService.OpenPortForNetworkSecurityGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{customerId}/{siteId}/managedCapacity/resourcelocations/{resourceLocationId}/port/{port}/openPort"
	localVarPath = strings.Replace(localVarPath, "{"+"customerId"+"}", url.PathEscape(parameterValueToString(r.customerId, "customerId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"siteId"+"}", url.PathEscape(parameterValueToString(r.siteId, "siteId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resourceLocationId"+"}", url.PathEscape(parameterValueToString(r.resourceLocationId, "resourceLocationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"port"+"}", url.PathEscape(parameterValueToString(r.port, "port")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.citrixTransactionId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-TransactionId", r.citrixTransactionId, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CWSAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
