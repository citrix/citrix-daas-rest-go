/*
Citrix Virtual App & Desktop Catalog Service 147.0.26651.57932

Catalog Service

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickdeploy

import (
	"encoding/json"
	"fmt"
)

// MonitorEventLevel the model 'MonitorEventLevel'
type MonitorEventLevel string

// List of MonitorEventLevel
const (
	MONITOREVENTLEVEL_CRITICAL      MonitorEventLevel = "Critical"
	MONITOREVENTLEVEL_ERROR         MonitorEventLevel = "Error"
	MONITOREVENTLEVEL_WARNING       MonitorEventLevel = "Warning"
	MONITOREVENTLEVEL_INFORMATIONAL MonitorEventLevel = "Informational"
	MONITOREVENTLEVEL_VERBOSE       MonitorEventLevel = "Verbose"
)

// All allowed values of MonitorEventLevel enum
var AllowedMonitorEventLevelEnumValues = []MonitorEventLevel{
	"Critical",
	"Error",
	"Warning",
	"Informational",
	"Verbose",
}

func (v *MonitorEventLevel) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	*v = MonitorEventLevel(value)
	return nil
}

// NewMonitorEventLevelFromValue returns a pointer to a valid MonitorEventLevel
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMonitorEventLevelFromValue(v string) (*MonitorEventLevel, error) {
	ev := MonitorEventLevel(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MonitorEventLevel: valid values are %v", v, AllowedMonitorEventLevelEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MonitorEventLevel) IsValid() bool {
	for _, existing := range AllowedMonitorEventLevelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MonitorEventLevel value
func (v MonitorEventLevel) Ptr() *MonitorEventLevel {
	return &v
}

type NullableMonitorEventLevel struct {
	value *MonitorEventLevel
	isSet bool
}

func (v NullableMonitorEventLevel) Get() *MonitorEventLevel {
	return v.value
}

func (v *NullableMonitorEventLevel) Set(val *MonitorEventLevel) {
	v.value = val
	v.isSet = true
}

func (v NullableMonitorEventLevel) IsSet() bool {
	return v.isSet
}

func (v *NullableMonitorEventLevel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMonitorEventLevel(val *MonitorEventLevel) *NullableMonitorEventLevel {
	return &NullableMonitorEventLevel{value: val, isSet: true}
}

func (v NullableMonitorEventLevel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMonitorEventLevel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
