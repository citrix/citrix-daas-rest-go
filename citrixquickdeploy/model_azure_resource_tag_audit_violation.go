/*
Citrix Virtual App & Desktop Catalog Service 148.0.26750.34636

Catalog Service

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickdeploy

import (
	"encoding/json"
	"fmt"
)

// AzureResourceTagAuditViolation the model 'AzureResourceTagAuditViolation'
type AzureResourceTagAuditViolation string

// List of AzureResourceTagAuditViolation
const (
	AZURERESOURCETAGAUDITVIOLATION_MISSING   AzureResourceTagAuditViolation = "Missing"
	AZURERESOURCETAGAUDITVIOLATION_INCORRECT AzureResourceTagAuditViolation = "Incorrect"
	AZURERESOURCETAGAUDITVIOLATION_UNWANTED  AzureResourceTagAuditViolation = "Unwanted"
)

// All allowed values of AzureResourceTagAuditViolation enum
var AllowedAzureResourceTagAuditViolationEnumValues = []AzureResourceTagAuditViolation{
	"Missing",
	"Incorrect",
	"Unwanted",
}

func (v *AzureResourceTagAuditViolation) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	*v = AzureResourceTagAuditViolation(value)
	return nil
}

// NewAzureResourceTagAuditViolationFromValue returns a pointer to a valid AzureResourceTagAuditViolation
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAzureResourceTagAuditViolationFromValue(v string) (*AzureResourceTagAuditViolation, error) {
	ev := AzureResourceTagAuditViolation(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AzureResourceTagAuditViolation: valid values are %v", v, AllowedAzureResourceTagAuditViolationEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AzureResourceTagAuditViolation) IsValid() bool {
	for _, existing := range AllowedAzureResourceTagAuditViolationEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AzureResourceTagAuditViolation value
func (v AzureResourceTagAuditViolation) Ptr() *AzureResourceTagAuditViolation {
	return &v
}

type NullableAzureResourceTagAuditViolation struct {
	value *AzureResourceTagAuditViolation
	isSet bool
}

func (v NullableAzureResourceTagAuditViolation) Get() *AzureResourceTagAuditViolation {
	return v.value
}

func (v *NullableAzureResourceTagAuditViolation) Set(val *AzureResourceTagAuditViolation) {
	v.value = val
	v.isSet = true
}

func (v NullableAzureResourceTagAuditViolation) IsSet() bool {
	return v.isSet
}

func (v *NullableAzureResourceTagAuditViolation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAzureResourceTagAuditViolation(val *AzureResourceTagAuditViolation) *NullableAzureResourceTagAuditViolation {
	return &NullableAzureResourceTagAuditViolation{value: val, isSet: true}
}

func (v NullableAzureResourceTagAuditViolation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAzureResourceTagAuditViolation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
