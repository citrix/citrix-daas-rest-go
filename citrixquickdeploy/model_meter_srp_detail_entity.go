/*
Citrix Virtual App & Desktop Catalog Service 148.0.26750.34636

Catalog Service

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickdeploy

import (
	"encoding/json"
	"time"
)

// checks if the MeterSrpDetailEntity type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MeterSrpDetailEntity{}

// MeterSrpDetailEntity struct for MeterSrpDetailEntity
type MeterSrpDetailEntity struct {
	// The Meter Id
	MeterId *string `json:"meterId,omitempty"`
	// Meter Name
	Name *string `json:"name,omitempty"`
	// The Meter Price
	SrpPrice *float64 `json:"srpPrice,omitempty"`
	// Meter Category
	Category *string `json:"category,omitempty"`
	// Cloud Provider Name
	CloudProviderName *string `json:"cloudProviderName,omitempty"`
	// Unit of measure
	UnitOfMeasure *string `json:"unitOfMeasure,omitempty"`
	// Include units
	IncludedUnits *float64 `json:"includedUnits,omitempty"`
	// Region
	Region *string `json:"region,omitempty"`
	// The effective date of the price.
	EffectiveDate *time.Time `json:"effectiveDate,omitempty"`
	// The expiration date of the price.
	ExpiredDate *time.Time `json:"expiredDate,omitempty"`
	// The Time when this meter price inputted.
	CreateTime *time.Time `json:"createTime,omitempty"`
}

// NewMeterSrpDetailEntityWithDefaults instantiates a new MeterSrpDetailEntity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMeterSrpDetailEntityWithDefaults() *MeterSrpDetailEntity {
	this := MeterSrpDetailEntity{}
	return &this
}

// GetMeterId returns the MeterId field value if set, zero value otherwise.
func (o *MeterSrpDetailEntity) GetMeterId() string {
	if o == nil || IsNil(o.MeterId) {
		var ret string
		return ret
	}
	return *o.MeterId
}

// GetMeterIdOk returns a tuple with the MeterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeterSrpDetailEntity) GetMeterIdOk() (*string, bool) {
	if o == nil || IsNil(o.MeterId) {
		return nil, false
	}
	return o.MeterId, true
}

// SetMeterId gets a reference to the given string and assigns it to the MeterId field.
func (o *MeterSrpDetailEntity) SetMeterId(v string) {
	o.MeterId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *MeterSrpDetailEntity) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeterSrpDetailEntity) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *MeterSrpDetailEntity) SetName(v string) {
	o.Name = &v
}

// GetSrpPrice returns the SrpPrice field value if set, zero value otherwise.
func (o *MeterSrpDetailEntity) GetSrpPrice() float64 {
	if o == nil || IsNil(o.SrpPrice) {
		var ret float64
		return ret
	}
	return *o.SrpPrice
}

// GetSrpPriceOk returns a tuple with the SrpPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeterSrpDetailEntity) GetSrpPriceOk() (*float64, bool) {
	if o == nil || IsNil(o.SrpPrice) {
		return nil, false
	}
	return o.SrpPrice, true
}

// SetSrpPrice gets a reference to the given float64 and assigns it to the SrpPrice field.
func (o *MeterSrpDetailEntity) SetSrpPrice(v float64) {
	o.SrpPrice = &v
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *MeterSrpDetailEntity) GetCategory() string {
	if o == nil || IsNil(o.Category) {
		var ret string
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeterSrpDetailEntity) GetCategoryOk() (*string, bool) {
	if o == nil || IsNil(o.Category) {
		return nil, false
	}
	return o.Category, true
}

// SetCategory gets a reference to the given string and assigns it to the Category field.
func (o *MeterSrpDetailEntity) SetCategory(v string) {
	o.Category = &v
}

// GetCloudProviderName returns the CloudProviderName field value if set, zero value otherwise.
func (o *MeterSrpDetailEntity) GetCloudProviderName() string {
	if o == nil || IsNil(o.CloudProviderName) {
		var ret string
		return ret
	}
	return *o.CloudProviderName
}

// GetCloudProviderNameOk returns a tuple with the CloudProviderName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeterSrpDetailEntity) GetCloudProviderNameOk() (*string, bool) {
	if o == nil || IsNil(o.CloudProviderName) {
		return nil, false
	}
	return o.CloudProviderName, true
}

// SetCloudProviderName gets a reference to the given string and assigns it to the CloudProviderName field.
func (o *MeterSrpDetailEntity) SetCloudProviderName(v string) {
	o.CloudProviderName = &v
}

// GetUnitOfMeasure returns the UnitOfMeasure field value if set, zero value otherwise.
func (o *MeterSrpDetailEntity) GetUnitOfMeasure() string {
	if o == nil || IsNil(o.UnitOfMeasure) {
		var ret string
		return ret
	}
	return *o.UnitOfMeasure
}

// GetUnitOfMeasureOk returns a tuple with the UnitOfMeasure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeterSrpDetailEntity) GetUnitOfMeasureOk() (*string, bool) {
	if o == nil || IsNil(o.UnitOfMeasure) {
		return nil, false
	}
	return o.UnitOfMeasure, true
}

// SetUnitOfMeasure gets a reference to the given string and assigns it to the UnitOfMeasure field.
func (o *MeterSrpDetailEntity) SetUnitOfMeasure(v string) {
	o.UnitOfMeasure = &v
}

// GetIncludedUnits returns the IncludedUnits field value if set, zero value otherwise.
func (o *MeterSrpDetailEntity) GetIncludedUnits() float64 {
	if o == nil || IsNil(o.IncludedUnits) {
		var ret float64
		return ret
	}
	return *o.IncludedUnits
}

// GetIncludedUnitsOk returns a tuple with the IncludedUnits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeterSrpDetailEntity) GetIncludedUnitsOk() (*float64, bool) {
	if o == nil || IsNil(o.IncludedUnits) {
		return nil, false
	}
	return o.IncludedUnits, true
}

// SetIncludedUnits gets a reference to the given float64 and assigns it to the IncludedUnits field.
func (o *MeterSrpDetailEntity) SetIncludedUnits(v float64) {
	o.IncludedUnits = &v
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *MeterSrpDetailEntity) GetRegion() string {
	if o == nil || IsNil(o.Region) {
		var ret string
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeterSrpDetailEntity) GetRegionOk() (*string, bool) {
	if o == nil || IsNil(o.Region) {
		return nil, false
	}
	return o.Region, true
}

// SetRegion gets a reference to the given string and assigns it to the Region field.
func (o *MeterSrpDetailEntity) SetRegion(v string) {
	o.Region = &v
}

// GetEffectiveDate returns the EffectiveDate field value if set, zero value otherwise.
func (o *MeterSrpDetailEntity) GetEffectiveDate() time.Time {
	if o == nil || IsNil(o.EffectiveDate) {
		var ret time.Time
		return ret
	}
	return *o.EffectiveDate
}

// GetEffectiveDateOk returns a tuple with the EffectiveDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeterSrpDetailEntity) GetEffectiveDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EffectiveDate) {
		return nil, false
	}
	return o.EffectiveDate, true
}

// SetEffectiveDate gets a reference to the given time.Time and assigns it to the EffectiveDate field.
func (o *MeterSrpDetailEntity) SetEffectiveDate(v time.Time) {
	o.EffectiveDate = &v
}

// GetExpiredDate returns the ExpiredDate field value if set, zero value otherwise.
func (o *MeterSrpDetailEntity) GetExpiredDate() time.Time {
	if o == nil || IsNil(o.ExpiredDate) {
		var ret time.Time
		return ret
	}
	return *o.ExpiredDate
}

// GetExpiredDateOk returns a tuple with the ExpiredDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeterSrpDetailEntity) GetExpiredDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ExpiredDate) {
		return nil, false
	}
	return o.ExpiredDate, true
}

// SetExpiredDate gets a reference to the given time.Time and assigns it to the ExpiredDate field.
func (o *MeterSrpDetailEntity) SetExpiredDate(v time.Time) {
	o.ExpiredDate = &v
}

// GetCreateTime returns the CreateTime field value if set, zero value otherwise.
func (o *MeterSrpDetailEntity) GetCreateTime() time.Time {
	if o == nil || IsNil(o.CreateTime) {
		var ret time.Time
		return ret
	}
	return *o.CreateTime
}

// GetCreateTimeOk returns a tuple with the CreateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MeterSrpDetailEntity) GetCreateTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreateTime) {
		return nil, false
	}
	return o.CreateTime, true
}

// SetCreateTime gets a reference to the given time.Time and assigns it to the CreateTime field.
func (o *MeterSrpDetailEntity) SetCreateTime(v time.Time) {
	o.CreateTime = &v
}

func (o MeterSrpDetailEntity) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MeterSrpDetailEntity) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MeterId) {
		toSerialize["meterId"] = o.MeterId
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.SrpPrice) {
		toSerialize["srpPrice"] = o.SrpPrice
	}
	if !IsNil(o.Category) {
		toSerialize["category"] = o.Category
	}
	if !IsNil(o.CloudProviderName) {
		toSerialize["cloudProviderName"] = o.CloudProviderName
	}
	if !IsNil(o.UnitOfMeasure) {
		toSerialize["unitOfMeasure"] = o.UnitOfMeasure
	}
	if !IsNil(o.IncludedUnits) {
		toSerialize["includedUnits"] = o.IncludedUnits
	}
	if !IsNil(o.Region) {
		toSerialize["region"] = o.Region
	}
	if !IsNil(o.EffectiveDate) {
		toSerialize["effectiveDate"] = o.EffectiveDate
	}
	if !IsNil(o.ExpiredDate) {
		toSerialize["expiredDate"] = o.ExpiredDate
	}
	if !IsNil(o.CreateTime) {
		toSerialize["createTime"] = o.CreateTime
	}
	return toSerialize, nil
}

type NullableMeterSrpDetailEntity struct {
	value *MeterSrpDetailEntity
	isSet bool
}

func (v NullableMeterSrpDetailEntity) Get() *MeterSrpDetailEntity {
	return v.value
}

func (v *NullableMeterSrpDetailEntity) Set(val *MeterSrpDetailEntity) {
	v.value = val
	v.isSet = true
}

func (v NullableMeterSrpDetailEntity) IsSet() bool {
	return v.isSet
}

func (v *NullableMeterSrpDetailEntity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMeterSrpDetailEntity(val *MeterSrpDetailEntity) *NullableMeterSrpDetailEntity {
	return &NullableMeterSrpDetailEntity{value: val, isSet: true}
}

func (v NullableMeterSrpDetailEntity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMeterSrpDetailEntity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
