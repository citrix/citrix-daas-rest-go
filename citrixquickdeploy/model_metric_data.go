/*
Citrix Virtual App & Desktop Catalog Service 148.0.26750.34636

Catalog Service

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickdeploy

import (
	"encoding/json"
	"time"
)

// checks if the MetricData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MetricData{}

// MetricData struct for MetricData
type MetricData struct {
	TimeStamp *time.Time `json:"timeStamp,omitempty"`
	Average   *float64   `json:"average,omitempty"`
	Minimum   *float64   `json:"minimum,omitempty"`
	Maximum   *float64   `json:"maximum,omitempty"`
	Total     *float64   `json:"total,omitempty"`
	Count     *int64     `json:"count,omitempty"`
}

// NewMetricDataWithDefaults instantiates a new MetricData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetricDataWithDefaults() *MetricData {
	this := MetricData{}
	return &this
}

// GetTimeStamp returns the TimeStamp field value if set, zero value otherwise.
func (o *MetricData) GetTimeStamp() time.Time {
	if o == nil || IsNil(o.TimeStamp) {
		var ret time.Time
		return ret
	}
	return *o.TimeStamp
}

// GetTimeStampOk returns a tuple with the TimeStamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricData) GetTimeStampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.TimeStamp) {
		return nil, false
	}
	return o.TimeStamp, true
}

// SetTimeStamp gets a reference to the given time.Time and assigns it to the TimeStamp field.
func (o *MetricData) SetTimeStamp(v time.Time) {
	o.TimeStamp = &v
}

// GetAverage returns the Average field value if set, zero value otherwise.
func (o *MetricData) GetAverage() float64 {
	if o == nil || IsNil(o.Average) {
		var ret float64
		return ret
	}
	return *o.Average
}

// GetAverageOk returns a tuple with the Average field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricData) GetAverageOk() (*float64, bool) {
	if o == nil || IsNil(o.Average) {
		return nil, false
	}
	return o.Average, true
}

// SetAverage gets a reference to the given float64 and assigns it to the Average field.
func (o *MetricData) SetAverage(v float64) {
	o.Average = &v
}

// GetMinimum returns the Minimum field value if set, zero value otherwise.
func (o *MetricData) GetMinimum() float64 {
	if o == nil || IsNil(o.Minimum) {
		var ret float64
		return ret
	}
	return *o.Minimum
}

// GetMinimumOk returns a tuple with the Minimum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricData) GetMinimumOk() (*float64, bool) {
	if o == nil || IsNil(o.Minimum) {
		return nil, false
	}
	return o.Minimum, true
}

// SetMinimum gets a reference to the given float64 and assigns it to the Minimum field.
func (o *MetricData) SetMinimum(v float64) {
	o.Minimum = &v
}

// GetMaximum returns the Maximum field value if set, zero value otherwise.
func (o *MetricData) GetMaximum() float64 {
	if o == nil || IsNil(o.Maximum) {
		var ret float64
		return ret
	}
	return *o.Maximum
}

// GetMaximumOk returns a tuple with the Maximum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricData) GetMaximumOk() (*float64, bool) {
	if o == nil || IsNil(o.Maximum) {
		return nil, false
	}
	return o.Maximum, true
}

// SetMaximum gets a reference to the given float64 and assigns it to the Maximum field.
func (o *MetricData) SetMaximum(v float64) {
	o.Maximum = &v
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *MetricData) GetTotal() float64 {
	if o == nil || IsNil(o.Total) {
		var ret float64
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricData) GetTotalOk() (*float64, bool) {
	if o == nil || IsNil(o.Total) {
		return nil, false
	}
	return o.Total, true
}

// SetTotal gets a reference to the given float64 and assigns it to the Total field.
func (o *MetricData) SetTotal(v float64) {
	o.Total = &v
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *MetricData) GetCount() int64 {
	if o == nil || IsNil(o.Count) {
		var ret int64
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricData) GetCountOk() (*int64, bool) {
	if o == nil || IsNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// SetCount gets a reference to the given int64 and assigns it to the Count field.
func (o *MetricData) SetCount(v int64) {
	o.Count = &v
}

func (o MetricData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MetricData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TimeStamp) {
		toSerialize["timeStamp"] = o.TimeStamp
	}
	if !IsNil(o.Average) {
		toSerialize["average"] = o.Average
	}
	if !IsNil(o.Minimum) {
		toSerialize["minimum"] = o.Minimum
	}
	if !IsNil(o.Maximum) {
		toSerialize["maximum"] = o.Maximum
	}
	if !IsNil(o.Total) {
		toSerialize["total"] = o.Total
	}
	if !IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	return toSerialize, nil
}

type NullableMetricData struct {
	value *MetricData
	isSet bool
}

func (v NullableMetricData) Get() *MetricData {
	return v.value
}

func (v *NullableMetricData) Set(val *MetricData) {
	v.value = val
	v.isSet = true
}

func (v NullableMetricData) IsSet() bool {
	return v.isSet
}

func (v *NullableMetricData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetricData(val *MetricData) *NullableMetricData {
	return &NullableMetricData{value: val, isSet: true}
}

func (v NullableMetricData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetricData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
