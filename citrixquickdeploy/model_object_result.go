/*
Citrix Virtual App & Desktop Catalog Service 147.0.26651.57932

Catalog Service

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickdeploy

import (
	"encoding/json"
)

// checks if the ObjectResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ObjectResult{}

// ObjectResult struct for ObjectResult
type ObjectResult struct {
	Value        map[string]interface{}   `json:"value,omitempty"`
	Formatters   []map[string]interface{} `json:"formatters,omitempty"`
	ContentTypes []string                 `json:"contentTypes,omitempty"`
	DeclaredType *string                  `json:"declaredType,omitempty"`
	StatusCode   *int32                   `json:"statusCode,omitempty"`
}

// NewObjectResultWithDefaults instantiates a new ObjectResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObjectResultWithDefaults() *ObjectResult {
	this := ObjectResult{}
	return &this
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *ObjectResult) GetValue() map[string]interface{} {
	if o == nil || IsNil(o.Value) {
		var ret map[string]interface{}
		return ret
	}
	return o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectResult) GetValueOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Value) {
		return map[string]interface{}{}, false
	}
	return o.Value, true
}

// SetValue gets a reference to the given map[string]interface{} and assigns it to the Value field.
func (o *ObjectResult) SetValue(v map[string]interface{}) {
	o.Value = v
}

// GetFormatters returns the Formatters field value if set, zero value otherwise.
func (o *ObjectResult) GetFormatters() []map[string]interface{} {
	if o == nil || IsNil(o.Formatters) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Formatters
}

// GetFormattersOk returns a tuple with the Formatters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectResult) GetFormattersOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Formatters) {
		return nil, false
	}
	return o.Formatters, true
}

// SetFormatters gets a reference to the given []map[string]interface{} and assigns it to the Formatters field.
func (o *ObjectResult) SetFormatters(v []map[string]interface{}) {
	o.Formatters = v
}

// GetContentTypes returns the ContentTypes field value if set, zero value otherwise.
func (o *ObjectResult) GetContentTypes() []string {
	if o == nil || IsNil(o.ContentTypes) {
		var ret []string
		return ret
	}
	return o.ContentTypes
}

// GetContentTypesOk returns a tuple with the ContentTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectResult) GetContentTypesOk() ([]string, bool) {
	if o == nil || IsNil(o.ContentTypes) {
		return nil, false
	}
	return o.ContentTypes, true
}

// SetContentTypes gets a reference to the given []string and assigns it to the ContentTypes field.
func (o *ObjectResult) SetContentTypes(v []string) {
	o.ContentTypes = v
}

// GetDeclaredType returns the DeclaredType field value if set, zero value otherwise.
func (o *ObjectResult) GetDeclaredType() string {
	if o == nil || IsNil(o.DeclaredType) {
		var ret string
		return ret
	}
	return *o.DeclaredType
}

// GetDeclaredTypeOk returns a tuple with the DeclaredType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectResult) GetDeclaredTypeOk() (*string, bool) {
	if o == nil || IsNil(o.DeclaredType) {
		return nil, false
	}
	return o.DeclaredType, true
}

// SetDeclaredType gets a reference to the given string and assigns it to the DeclaredType field.
func (o *ObjectResult) SetDeclaredType(v string) {
	o.DeclaredType = &v
}

// GetStatusCode returns the StatusCode field value if set, zero value otherwise.
func (o *ObjectResult) GetStatusCode() int32 {
	if o == nil || IsNil(o.StatusCode) {
		var ret int32
		return ret
	}
	return *o.StatusCode
}

// GetStatusCodeOk returns a tuple with the StatusCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectResult) GetStatusCodeOk() (*int32, bool) {
	if o == nil || IsNil(o.StatusCode) {
		return nil, false
	}
	return o.StatusCode, true
}

// SetStatusCode gets a reference to the given int32 and assigns it to the StatusCode field.
func (o *ObjectResult) SetStatusCode(v int32) {
	o.StatusCode = &v
}

func (o ObjectResult) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ObjectResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.Formatters) {
		toSerialize["formatters"] = o.Formatters
	}
	if !IsNil(o.ContentTypes) {
		toSerialize["contentTypes"] = o.ContentTypes
	}
	if !IsNil(o.DeclaredType) {
		toSerialize["declaredType"] = o.DeclaredType
	}
	if !IsNil(o.StatusCode) {
		toSerialize["statusCode"] = o.StatusCode
	}
	return toSerialize, nil
}

type NullableObjectResult struct {
	value *ObjectResult
	isSet bool
}

func (v NullableObjectResult) Get() *ObjectResult {
	return v.value
}

func (v *NullableObjectResult) Set(val *ObjectResult) {
	v.value = val
	v.isSet = true
}

func (v NullableObjectResult) IsSet() bool {
	return v.isSet
}

func (v *NullableObjectResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjectResult(val *ObjectResult) *NullableObjectResult {
	return &NullableObjectResult{value: val, isSet: true}
}

func (v NullableObjectResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjectResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
