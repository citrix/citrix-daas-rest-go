/*
Citrix Virtual App & Desktop Catalog Service 147.0.26651.57932

Catalog Service

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickdeploy

import (
	"encoding/json"
)

// checks if the CatalogsForBackup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CatalogsForBackup{}

// CatalogsForBackup struct for CatalogsForBackup
type CatalogsForBackup struct {
	CatalogId           string             `json:"catalogId"`
	AzureSubscriptionId string             `json:"azureSubscriptionId"`
	Machines            []MachineForBackup `json:"machines"`
	BackupType          SnapshotType       `json:"backupType"`
}

// NewCatalogsForBackupWithDefaults instantiates a new CatalogsForBackup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCatalogsForBackupWithDefaults() *CatalogsForBackup {
	this := CatalogsForBackup{}
	return &this
}

// GetCatalogId returns the CatalogId field value
func (o *CatalogsForBackup) GetCatalogId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CatalogId
}

// GetCatalogIdOk returns a tuple with the CatalogId field value
// and a boolean to check if the value has been set.
func (o *CatalogsForBackup) GetCatalogIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CatalogId, true
}

// SetCatalogId sets field value
func (o *CatalogsForBackup) SetCatalogId(v string) {
	o.CatalogId = v
}

// GetAzureSubscriptionId returns the AzureSubscriptionId field value
func (o *CatalogsForBackup) GetAzureSubscriptionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AzureSubscriptionId
}

// GetAzureSubscriptionIdOk returns a tuple with the AzureSubscriptionId field value
// and a boolean to check if the value has been set.
func (o *CatalogsForBackup) GetAzureSubscriptionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AzureSubscriptionId, true
}

// SetAzureSubscriptionId sets field value
func (o *CatalogsForBackup) SetAzureSubscriptionId(v string) {
	o.AzureSubscriptionId = v
}

// GetMachines returns the Machines field value
func (o *CatalogsForBackup) GetMachines() []MachineForBackup {
	if o == nil {
		var ret []MachineForBackup
		return ret
	}

	return o.Machines
}

// GetMachinesOk returns a tuple with the Machines field value
// and a boolean to check if the value has been set.
func (o *CatalogsForBackup) GetMachinesOk() ([]MachineForBackup, bool) {
	if o == nil {
		return nil, false
	}
	return o.Machines, true
}

// SetMachines sets field value
func (o *CatalogsForBackup) SetMachines(v []MachineForBackup) {
	o.Machines = v
}

// GetBackupType returns the BackupType field value
func (o *CatalogsForBackup) GetBackupType() SnapshotType {
	if o == nil {
		var ret SnapshotType
		return ret
	}

	return o.BackupType
}

// GetBackupTypeOk returns a tuple with the BackupType field value
// and a boolean to check if the value has been set.
func (o *CatalogsForBackup) GetBackupTypeOk() (*SnapshotType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BackupType, true
}

// SetBackupType sets field value
func (o *CatalogsForBackup) SetBackupType(v SnapshotType) {
	o.BackupType = v
}

func (o CatalogsForBackup) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CatalogsForBackup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["catalogId"] = o.CatalogId
	toSerialize["azureSubscriptionId"] = o.AzureSubscriptionId
	toSerialize["machines"] = o.Machines
	toSerialize["backupType"] = o.BackupType
	return toSerialize, nil
}

type NullableCatalogsForBackup struct {
	value *CatalogsForBackup
	isSet bool
}

func (v NullableCatalogsForBackup) Get() *CatalogsForBackup {
	return v.value
}

func (v *NullableCatalogsForBackup) Set(val *CatalogsForBackup) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogsForBackup) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogsForBackup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogsForBackup(val *CatalogsForBackup) *NullableCatalogsForBackup {
	return &NullableCatalogsForBackup{value: val, isSet: true}
}

func (v NullableCatalogsForBackup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogsForBackup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
