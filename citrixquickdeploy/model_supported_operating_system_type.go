/*
Citrix Virtual App & Desktop Catalog Service 147.0.26651.57932

Catalog Service

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickdeploy

import (
	"encoding/json"
	"fmt"
)

// SupportedOperatingSystemType the model 'SupportedOperatingSystemType'
type SupportedOperatingSystemType string

// List of SupportedOperatingSystemType
const (
	SUPPORTEDOPERATINGSYSTEMTYPE_WINDOWS SupportedOperatingSystemType = "Windows"
	SUPPORTEDOPERATINGSYSTEMTYPE_LINUX   SupportedOperatingSystemType = "Linux"
)

// All allowed values of SupportedOperatingSystemType enum
var AllowedSupportedOperatingSystemTypeEnumValues = []SupportedOperatingSystemType{
	"Windows",
	"Linux",
}

func (v *SupportedOperatingSystemType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	*v = SupportedOperatingSystemType(value)
	return nil
}

// NewSupportedOperatingSystemTypeFromValue returns a pointer to a valid SupportedOperatingSystemType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSupportedOperatingSystemTypeFromValue(v string) (*SupportedOperatingSystemType, error) {
	ev := SupportedOperatingSystemType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SupportedOperatingSystemType: valid values are %v", v, AllowedSupportedOperatingSystemTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SupportedOperatingSystemType) IsValid() bool {
	for _, existing := range AllowedSupportedOperatingSystemTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SupportedOperatingSystemType value
func (v SupportedOperatingSystemType) Ptr() *SupportedOperatingSystemType {
	return &v
}

type NullableSupportedOperatingSystemType struct {
	value *SupportedOperatingSystemType
	isSet bool
}

func (v NullableSupportedOperatingSystemType) Get() *SupportedOperatingSystemType {
	return v.value
}

func (v *NullableSupportedOperatingSystemType) Set(val *SupportedOperatingSystemType) {
	v.value = val
	v.isSet = true
}

func (v NullableSupportedOperatingSystemType) IsSet() bool {
	return v.isSet
}

func (v *NullableSupportedOperatingSystemType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSupportedOperatingSystemType(val *SupportedOperatingSystemType) *NullableSupportedOperatingSystemType {
	return &NullableSupportedOperatingSystemType{value: val, isSet: true}
}

func (v NullableSupportedOperatingSystemType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSupportedOperatingSystemType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
