/*
Citrix Virtual App & Desktop Catalog Service 147.0.26651.57932

Catalog Service

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickdeploy

import (
	"encoding/json"
	"fmt"
)

// TemplateImageSubState Sub State of the template image
type TemplateImageSubState string

// List of TemplateImageSubState
const (
	TEMPLATEIMAGESUBSTATE_PROCESSING_PROVISIONING_MASTER_IMAGE                TemplateImageSubState = "ProcessingProvisioningMasterImage"
	TEMPLATEIMAGESUBSTATE_PROCESSING_VERIFYING_MASTER_IMAGE                   TemplateImageSubState = "ProcessingVerifyingMasterImage"
	TEMPLATEIMAGESUBSTATE_PROCESSING_REMOVING_MASTER_IMAGE_AZURE_RESOURCES    TemplateImageSubState = "ProcessingRemovingMasterImageAzureResources"
	TEMPLATEIMAGESUBSTATE_PROCESSING_CREATING_BUILDER_VM                      TemplateImageSubState = "ProcessingCreatingBuilderVm"
	TEMPLATEIMAGESUBSTATE_PROCESSING_POWERING_BUILDER_VM                      TemplateImageSubState = "ProcessingPoweringBuilderVm"
	TEMPLATEIMAGESUBSTATE_PROCESSING_IMPORTING_IMAGE_VHD_FILE                 TemplateImageSubState = "ProcessingImportingImageVhdFile"
	TEMPLATEIMAGESUBSTATE_ERROR_MASTER_IMAGE_PROVISIONING_FAILED              TemplateImageSubState = "ErrorMasterImageProvisioningFailed"
	TEMPLATEIMAGESUBSTATE_ERROR_MASTER_IMAGE_VERIFICATION_FAILED              TemplateImageSubState = "ErrorMasterImageVerificationFailed"
	TEMPLATEIMAGESUBSTATE_ERROR_MASTER_IMAGE_NOT_FOUND                        TemplateImageSubState = "ErrorMasterImageNotFound"
	TEMPLATEIMAGESUBSTATE_ERROR_MASTER_IMAGE_INVALID_OS                       TemplateImageSubState = "ErrorMasterImageInvalidOs"
	TEMPLATEIMAGESUBSTATE_ERROR_MASTER_IMAGE_MCS_NOT_CONFIGURED               TemplateImageSubState = "ErrorMasterImageMcsNotConfigured"
	TEMPLATEIMAGESUBSTATE_ERROR_MASTER_IMAGE_NO_SUPPORTED_VDA_FOUND           TemplateImageSubState = "ErrorMasterImageNoSupportedVdaFound"
	TEMPLATEIMAGESUBSTATE_ERROR_MASTER_IMAGE_SCANNING_START_MENU_APPS_FAILED  TemplateImageSubState = "ErrorMasterImageScanningStartMenuAppsFailed"
	TEMPLATEIMAGESUBSTATE_ERROR_MASTER_IMAGE_AZURE_RESOURCE_REMOVAL_FAILED    TemplateImageSubState = "ErrorMasterImageAzureResourceRemovalFailed"
	TEMPLATEIMAGESUBSTATE_ERROR_MASTER_IMAGE_VHD_NOT_FOUND                    TemplateImageSubState = "ErrorMasterImageVhdNotFound"
	TEMPLATEIMAGESUBSTATE_ERROR_BUILDER_VM_NOT_FOUND                          TemplateImageSubState = "ErrorBuilderVmNotFound"
	TEMPLATEIMAGESUBSTATE_ERROR_BUILDER_VM_SIZE_UNSUPPORTED                   TemplateImageSubState = "ErrorBuilderVmSizeUnsupported"
	TEMPLATEIMAGESUBSTATE_ERROR_IMPORT_IMAGE_URL_NOT_VALID                    TemplateImageSubState = "ErrorImportImageUrlNotValid"
	TEMPLATEIMAGESUBSTATE_ERROR_BUILDER_SERVICE_ACCOUNT_INVALID               TemplateImageSubState = "ErrorBuilderServiceAccountInvalid"
	TEMPLATEIMAGESUBSTATE_ERROR_BUILDER_NO_QUOTA                              TemplateImageSubState = "ErrorBuilderNoQuota"
	TEMPLATEIMAGESUBSTATE_ERROR_MASTER_IMAGE_INVALID_MULTI_SESSION_VDA        TemplateImageSubState = "ErrorMasterImageInvalidMultiSessionVda"
	TEMPLATEIMAGESUBSTATE_ERROR_MASTER_IMAGE_INVALID_SINGLE_SESSION_VDA       TemplateImageSubState = "ErrorMasterImageInvalidSingleSessionVda"
	TEMPLATEIMAGESUBSTATE_ERROR_CITRIX_MANAGED_SUBSCRIPTION_ASSIGNMENT_FAILED TemplateImageSubState = "ErrorCitrixManagedSubscriptionAssignmentFailed"
)

// All allowed values of TemplateImageSubState enum
var AllowedTemplateImageSubStateEnumValues = []TemplateImageSubState{
	"ProcessingProvisioningMasterImage",
	"ProcessingVerifyingMasterImage",
	"ProcessingRemovingMasterImageAzureResources",
	"ProcessingCreatingBuilderVm",
	"ProcessingPoweringBuilderVm",
	"ProcessingImportingImageVhdFile",
	"ErrorMasterImageProvisioningFailed",
	"ErrorMasterImageVerificationFailed",
	"ErrorMasterImageNotFound",
	"ErrorMasterImageInvalidOs",
	"ErrorMasterImageMcsNotConfigured",
	"ErrorMasterImageNoSupportedVdaFound",
	"ErrorMasterImageScanningStartMenuAppsFailed",
	"ErrorMasterImageAzureResourceRemovalFailed",
	"ErrorMasterImageVhdNotFound",
	"ErrorBuilderVmNotFound",
	"ErrorBuilderVmSizeUnsupported",
	"ErrorImportImageUrlNotValid",
	"ErrorBuilderServiceAccountInvalid",
	"ErrorBuilderNoQuota",
	"ErrorMasterImageInvalidMultiSessionVda",
	"ErrorMasterImageInvalidSingleSessionVda",
	"ErrorCitrixManagedSubscriptionAssignmentFailed",
}

func (v *TemplateImageSubState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	*v = TemplateImageSubState(value)
	return nil
}

// NewTemplateImageSubStateFromValue returns a pointer to a valid TemplateImageSubState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTemplateImageSubStateFromValue(v string) (*TemplateImageSubState, error) {
	ev := TemplateImageSubState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TemplateImageSubState: valid values are %v", v, AllowedTemplateImageSubStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TemplateImageSubState) IsValid() bool {
	for _, existing := range AllowedTemplateImageSubStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TemplateImageSubState value
func (v TemplateImageSubState) Ptr() *TemplateImageSubState {
	return &v
}

type NullableTemplateImageSubState struct {
	value *TemplateImageSubState
	isSet bool
}

func (v NullableTemplateImageSubState) Get() *TemplateImageSubState {
	return v.value
}

func (v *NullableTemplateImageSubState) Set(val *TemplateImageSubState) {
	v.value = val
	v.isSet = true
}

func (v NullableTemplateImageSubState) IsSet() bool {
	return v.isSet
}

func (v *NullableTemplateImageSubState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTemplateImageSubState(val *TemplateImageSubState) *NullableTemplateImageSubState {
	return &NullableTemplateImageSubState{value: val, isSet: true}
}

func (v NullableTemplateImageSubState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTemplateImageSubState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
