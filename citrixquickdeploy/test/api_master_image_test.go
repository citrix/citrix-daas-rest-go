/*
Citrix Virtual App & Desktop Catalog Service 148.0.26750.34636

Testing MasterImageCMDService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package citrixquickdeploy

import (
	"context"
	"testing"

	openapiclient "github.com/citrix/citrix-daas-rest-go/citrixquickdeploy"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_citrixquickdeploy_MasterImageCMDService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test MasterImageCMDService AddTemplateImage", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var customerId string
		var siteId string

		resp, httpRes, err := apiClient.MasterImageCMD.AddTemplateImage(context.Background(), customerId, siteId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MasterImageCMDService CancelCustomerImageUrl", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var customerId string
		var siteId string
		var imageId string

		httpRes, err := apiClient.MasterImageCMD.CancelCustomerImageUrl(context.Background(), customerId, siteId, imageId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MasterImageCMDService CreateCustomerImageUrl", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var customerId string
		var siteId string
		var imageId string

		resp, httpRes, err := apiClient.MasterImageCMD.CreateCustomerImageUrl(context.Background(), customerId, siteId, imageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MasterImageCMDService DeleteTemplateImage", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var customerId string
		var siteId string
		var imageId string

		httpRes, err := apiClient.MasterImageCMD.DeleteTemplateImage(context.Background(), customerId, siteId, imageId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MasterImageCMDService GetAzureSasUrlExpiryTime", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var customerId string
		var siteId string
		var imageId string

		resp, httpRes, err := apiClient.MasterImageCMD.GetAzureSasUrlExpiryTime(context.Background(), customerId, siteId, imageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MasterImageCMDService GetImages", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var customerId string
		var siteId string

		resp, httpRes, err := apiClient.MasterImageCMD.GetImages(context.Background(), customerId, siteId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MasterImageCMDService GetTemplateImage", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var customerId string
		var siteId string
		var imageId string

		resp, httpRes, err := apiClient.MasterImageCMD.GetTemplateImage(context.Background(), customerId, siteId, imageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MasterImageCMDService ImportTemplateImage", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var customerId string
		var siteId string

		resp, httpRes, err := apiClient.MasterImageCMD.ImportTemplateImage(context.Background(), customerId, siteId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MasterImageCMDService UpdateTemplateImage", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var customerId string
		var siteId string
		var imageId string

		httpRes, err := apiClient.MasterImageCMD.UpdateTemplateImage(context.Background(), customerId, siteId, imageId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
