/*
Citrix Virtual App & Desktop Catalog Service 147.0.26651.57932

Testing CatalogApplicationsCMDService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package citrixquickdeploy

import (
	"context"
	"testing"

	openapiclient "github.com/citrix/citrix-daas-rest-go/citrixquickdeploy"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_citrixquickdeploy_CatalogApplicationsCMDService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test CatalogApplicationsCMDService GetCatalogApps", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var customerId string
		var siteId string
		var catalogId string

		resp, httpRes, err := apiClient.CatalogApplicationsCMD.GetCatalogApps(context.Background(), customerId, siteId, catalogId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogApplicationsCMDService PublishApplications", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var customerId string
		var siteId string
		var catalogId string

		resp, httpRes, err := apiClient.CatalogApplicationsCMD.PublishApplications(context.Background(), customerId, siteId, catalogId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogApplicationsCMDService UnpublishApplication", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var customerId string
		var siteId string
		var catalogId string
		var appId string

		httpRes, err := apiClient.CatalogApplicationsCMD.UnpublishApplication(context.Background(), customerId, siteId, catalogId, appId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogApplicationsCMDService UnpublishApplications", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var customerId string
		var siteId string
		var catalogId string

		httpRes, err := apiClient.CatalogApplicationsCMD.UnpublishApplications(context.Background(), customerId, siteId, catalogId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogApplicationsCMDService UpdateApplication", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var customerId string
		var siteId string
		var catalogId string
		var appId string

		httpRes, err := apiClient.CatalogApplicationsCMD.UpdateApplication(context.Background(), customerId, siteId, catalogId, appId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
