/*
Citrix Virtual App & Desktop Catalog Service 147.0.26651.57932

Testing CatalogCMDService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package citrixquickdeploy

import (
	"context"
	"testing"

	openapiclient "github.com/citrix/citrix-daas-rest-go/citrixquickdeploy"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_citrixquickdeploy_CatalogCMDService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test CatalogCMDService AddRemotePcCatalogMachineAssignments", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var customerId string
		var siteId string
		var catalogId string

		resp, httpRes, err := apiClient.CatalogCMD.AddRemotePcCatalogMachineAssignments(context.Background(), customerId, siteId, catalogId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogCMDService ConfigureAndDeployCitrixManagedCatalogApi", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var customerId string
		var siteId string

		resp, httpRes, err := apiClient.CatalogCMD.ConfigureAndDeployCitrixManagedCatalogApi(context.Background(), customerId, siteId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogCMDService CreateRemotePcCatalog", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var customerId string
		var siteId string

		resp, httpRes, err := apiClient.CatalogCMD.CreateRemotePcCatalog(context.Background(), customerId, siteId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogCMDService DeleteCustomerCatalog", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var customerId string
		var siteId string
		var catalogId string

		httpRes, err := apiClient.CatalogCMD.DeleteCustomerCatalog(context.Background(), customerId, siteId, catalogId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogCMDService GetCustomerCatalog", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var customerId string
		var siteId string
		var catalogId string

		resp, httpRes, err := apiClient.CatalogCMD.GetCustomerCatalog(context.Background(), customerId, siteId, catalogId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogCMDService GetCustomerCatalogs", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var customerId string
		var siteId string

		resp, httpRes, err := apiClient.CatalogCMD.GetCustomerCatalogs(context.Background(), customerId, siteId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogCMDService GetCustomerManagedCatalogs", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var customerId string
		var siteId string

		resp, httpRes, err := apiClient.CatalogCMD.GetCustomerManagedCatalogs(context.Background(), customerId, siteId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogCMDService GetCustomerManagedCatalogsById", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var customerId string
		var siteId string
		var catalogId string

		resp, httpRes, err := apiClient.CatalogCMD.GetCustomerManagedCatalogsById(context.Background(), customerId, siteId, catalogId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogCMDService UpdateCatalogImage", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var customerId string
		var siteId string
		var catalogId string

		resp, httpRes, err := apiClient.CatalogCMD.UpdateCatalogImage(context.Background(), customerId, siteId, catalogId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogCMDService UpdateCatalogImageApi", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var customerId string
		var siteId string
		var catalogId string

		resp, httpRes, err := apiClient.CatalogCMD.UpdateCatalogImageApi(context.Background(), customerId, siteId, catalogId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CatalogCMDService UpdateRemotePcCatalogScopes", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var customerId string
		var siteId string
		var catalogId string

		resp, httpRes, err := apiClient.CatalogCMD.UpdateRemotePcCatalogScopes(context.Background(), customerId, siteId, catalogId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
