/*
Citrix Virtual App & Desktop Catalog Service 148.0.26750.34636

Catalog Service

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickdeploy

import (
	"encoding/json"
	"fmt"
)

// RemoteBrowserIsolationStatusModelJobState the model 'RemoteBrowserIsolationStatusModelJobState'
type RemoteBrowserIsolationStatusModelJobState string

// List of RemoteBrowserIsolationStatusModelJobState
const (
	REMOTEBROWSERISOLATIONSTATUSMODELJOBSTATE_ACTIVE   RemoteBrowserIsolationStatusModelJobState = "Active"
	REMOTEBROWSERISOLATIONSTATUSMODELJOBSTATE_DELETING RemoteBrowserIsolationStatusModelJobState = "Deleting"
	REMOTEBROWSERISOLATIONSTATUSMODELJOBSTATE_DELETED  RemoteBrowserIsolationStatusModelJobState = "Deleted"
	REMOTEBROWSERISOLATIONSTATUSMODELJOBSTATE_FAILED   RemoteBrowserIsolationStatusModelJobState = "Failed"
)

// All allowed values of RemoteBrowserIsolationStatusModelJobState enum
var AllowedRemoteBrowserIsolationStatusModelJobStateEnumValues = []RemoteBrowserIsolationStatusModelJobState{
	"Active",
	"Deleting",
	"Deleted",
	"Failed",
}

func (v *RemoteBrowserIsolationStatusModelJobState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	*v = RemoteBrowserIsolationStatusModelJobState(value)
	return nil
}

// NewRemoteBrowserIsolationStatusModelJobStateFromValue returns a pointer to a valid RemoteBrowserIsolationStatusModelJobState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRemoteBrowserIsolationStatusModelJobStateFromValue(v string) (*RemoteBrowserIsolationStatusModelJobState, error) {
	ev := RemoteBrowserIsolationStatusModelJobState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RemoteBrowserIsolationStatusModelJobState: valid values are %v", v, AllowedRemoteBrowserIsolationStatusModelJobStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RemoteBrowserIsolationStatusModelJobState) IsValid() bool {
	for _, existing := range AllowedRemoteBrowserIsolationStatusModelJobStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RemoteBrowserIsolationStatusModelJobState value
func (v RemoteBrowserIsolationStatusModelJobState) Ptr() *RemoteBrowserIsolationStatusModelJobState {
	return &v
}

type NullableRemoteBrowserIsolationStatusModelJobState struct {
	value *RemoteBrowserIsolationStatusModelJobState
	isSet bool
}

func (v NullableRemoteBrowserIsolationStatusModelJobState) Get() *RemoteBrowserIsolationStatusModelJobState {
	return v.value
}

func (v *NullableRemoteBrowserIsolationStatusModelJobState) Set(val *RemoteBrowserIsolationStatusModelJobState) {
	v.value = val
	v.isSet = true
}

func (v NullableRemoteBrowserIsolationStatusModelJobState) IsSet() bool {
	return v.isSet
}

func (v *NullableRemoteBrowserIsolationStatusModelJobState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRemoteBrowserIsolationStatusModelJobState(val *RemoteBrowserIsolationStatusModelJobState) *NullableRemoteBrowserIsolationStatusModelJobState {
	return &NullableRemoteBrowserIsolationStatusModelJobState{value: val, isSet: true}
}

func (v NullableRemoteBrowserIsolationStatusModelJobState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRemoteBrowserIsolationStatusModelJobState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
