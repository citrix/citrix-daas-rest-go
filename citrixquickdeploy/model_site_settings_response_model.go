/*
Citrix Virtual App & Desktop Catalog Service 147.0.26651.57932

Catalog Service

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickdeploy

import (
	"encoding/json"
)

// checks if the SiteSettingsResponseModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SiteSettingsResponseModel{}

// SiteSettingsResponseModel The site settings response model.
type SiteSettingsResponseModel struct {
	UseVerticalScalingForRdsLaunches            *bool `json:"useVerticalScalingForRdsLaunches,omitempty"`
	DnsResolutionEnabled                        *bool `json:"dnsResolutionEnabled,omitempty"`
	TrustRequestsSentToTheXmlServicePortEnabled *bool `json:"trustRequestsSentToTheXmlServicePortEnabled,omitempty"`
	// The policy set in web UI is enabled or not
	WebUiPolicySetEnabled *bool `json:"webUiPolicySetEnabled,omitempty"`
	// The max number of minutes that console can be inactive.
	ConsoleInactivityTimeoutMinutes *int32 `json:"consoleInactivityTimeoutMinutes,omitempty"`
	// Applicable only for On-Premise.    Determine the supported authentication methods.
	SupportedAuthenticators *Authenticator `json:"supportedAuthenticators,omitempty"`
	// Applicable only for On-Premise.    Indicate whether to display security banner on the login page.
	ShowSecurityBannerOnLoginPage *bool `json:"showSecurityBannerOnLoginPage,omitempty"`
	// Applicable only for On-Premise.    The custom security banner on the login page, max length is 5000.
	SecurityBannerOnLoginPage *string `json:"securityBannerOnLoginPage,omitempty"`
	// Applicable only for On-Premise.    Indicate whether to display the DDC used for the current Studio session on the login page.
	ShowConnectedControllerOnLoginPage *bool `json:"showConnectedControllerOnLoginPage,omitempty"`
	// Application only for On-Premise.    List of origins allowed to make cross-origin requests for Integrated Windows Authentication.
	AllowedCorsOriginsForIwa []string `json:"allowedCorsOriginsForIwa,omitempty"`
	// Applicable only for On-Premise    Multiple sites configuration
	MultiSites []MultiSiteModel `json:"multiSites,omitempty"`
	// The default domain to be used in the login page.
	DefaultDomain *string `json:"defaultDomain,omitempty"`
	// XML service configurations of enabling listening for https/http requests. Only applicable for On-Premise deployments.
	XmlServicesSslConfigurations []NameValueStringPairModel `json:"xmlServicesSslConfigurations,omitempty"`
	// Indicate whether Citrix Cloud Services are allowed to access the DaaS.
	MultiTenantServicesAccess *MultiTenantServicesAccessModel `json:"multiTenantServicesAccess,omitempty"`
}

// NewSiteSettingsResponseModelWithDefaults instantiates a new SiteSettingsResponseModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSiteSettingsResponseModelWithDefaults() *SiteSettingsResponseModel {
	this := SiteSettingsResponseModel{}
	return &this
}

// GetUseVerticalScalingForRdsLaunches returns the UseVerticalScalingForRdsLaunches field value if set, zero value otherwise.
func (o *SiteSettingsResponseModel) GetUseVerticalScalingForRdsLaunches() bool {
	if o == nil || IsNil(o.UseVerticalScalingForRdsLaunches) {
		var ret bool
		return ret
	}
	return *o.UseVerticalScalingForRdsLaunches
}

// GetUseVerticalScalingForRdsLaunchesOk returns a tuple with the UseVerticalScalingForRdsLaunches field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteSettingsResponseModel) GetUseVerticalScalingForRdsLaunchesOk() (*bool, bool) {
	if o == nil || IsNil(o.UseVerticalScalingForRdsLaunches) {
		return nil, false
	}
	return o.UseVerticalScalingForRdsLaunches, true
}

// SetUseVerticalScalingForRdsLaunches gets a reference to the given bool and assigns it to the UseVerticalScalingForRdsLaunches field.
func (o *SiteSettingsResponseModel) SetUseVerticalScalingForRdsLaunches(v bool) {
	o.UseVerticalScalingForRdsLaunches = &v
}

// GetDnsResolutionEnabled returns the DnsResolutionEnabled field value if set, zero value otherwise.
func (o *SiteSettingsResponseModel) GetDnsResolutionEnabled() bool {
	if o == nil || IsNil(o.DnsResolutionEnabled) {
		var ret bool
		return ret
	}
	return *o.DnsResolutionEnabled
}

// GetDnsResolutionEnabledOk returns a tuple with the DnsResolutionEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteSettingsResponseModel) GetDnsResolutionEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.DnsResolutionEnabled) {
		return nil, false
	}
	return o.DnsResolutionEnabled, true
}

// SetDnsResolutionEnabled gets a reference to the given bool and assigns it to the DnsResolutionEnabled field.
func (o *SiteSettingsResponseModel) SetDnsResolutionEnabled(v bool) {
	o.DnsResolutionEnabled = &v
}

// GetTrustRequestsSentToTheXmlServicePortEnabled returns the TrustRequestsSentToTheXmlServicePortEnabled field value if set, zero value otherwise.
func (o *SiteSettingsResponseModel) GetTrustRequestsSentToTheXmlServicePortEnabled() bool {
	if o == nil || IsNil(o.TrustRequestsSentToTheXmlServicePortEnabled) {
		var ret bool
		return ret
	}
	return *o.TrustRequestsSentToTheXmlServicePortEnabled
}

// GetTrustRequestsSentToTheXmlServicePortEnabledOk returns a tuple with the TrustRequestsSentToTheXmlServicePortEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteSettingsResponseModel) GetTrustRequestsSentToTheXmlServicePortEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.TrustRequestsSentToTheXmlServicePortEnabled) {
		return nil, false
	}
	return o.TrustRequestsSentToTheXmlServicePortEnabled, true
}

// SetTrustRequestsSentToTheXmlServicePortEnabled gets a reference to the given bool and assigns it to the TrustRequestsSentToTheXmlServicePortEnabled field.
func (o *SiteSettingsResponseModel) SetTrustRequestsSentToTheXmlServicePortEnabled(v bool) {
	o.TrustRequestsSentToTheXmlServicePortEnabled = &v
}

// GetWebUiPolicySetEnabled returns the WebUiPolicySetEnabled field value if set, zero value otherwise.
func (o *SiteSettingsResponseModel) GetWebUiPolicySetEnabled() bool {
	if o == nil || IsNil(o.WebUiPolicySetEnabled) {
		var ret bool
		return ret
	}
	return *o.WebUiPolicySetEnabled
}

// GetWebUiPolicySetEnabledOk returns a tuple with the WebUiPolicySetEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteSettingsResponseModel) GetWebUiPolicySetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.WebUiPolicySetEnabled) {
		return nil, false
	}
	return o.WebUiPolicySetEnabled, true
}

// SetWebUiPolicySetEnabled gets a reference to the given bool and assigns it to the WebUiPolicySetEnabled field.
func (o *SiteSettingsResponseModel) SetWebUiPolicySetEnabled(v bool) {
	o.WebUiPolicySetEnabled = &v
}

// GetConsoleInactivityTimeoutMinutes returns the ConsoleInactivityTimeoutMinutes field value if set, zero value otherwise.
func (o *SiteSettingsResponseModel) GetConsoleInactivityTimeoutMinutes() int32 {
	if o == nil || IsNil(o.ConsoleInactivityTimeoutMinutes) {
		var ret int32
		return ret
	}
	return *o.ConsoleInactivityTimeoutMinutes
}

// GetConsoleInactivityTimeoutMinutesOk returns a tuple with the ConsoleInactivityTimeoutMinutes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteSettingsResponseModel) GetConsoleInactivityTimeoutMinutesOk() (*int32, bool) {
	if o == nil || IsNil(o.ConsoleInactivityTimeoutMinutes) {
		return nil, false
	}
	return o.ConsoleInactivityTimeoutMinutes, true
}

// SetConsoleInactivityTimeoutMinutes gets a reference to the given int32 and assigns it to the ConsoleInactivityTimeoutMinutes field.
func (o *SiteSettingsResponseModel) SetConsoleInactivityTimeoutMinutes(v int32) {
	o.ConsoleInactivityTimeoutMinutes = &v
}

// GetSupportedAuthenticators returns the SupportedAuthenticators field value if set, zero value otherwise.
func (o *SiteSettingsResponseModel) GetSupportedAuthenticators() Authenticator {
	if o == nil || IsNil(o.SupportedAuthenticators) {
		var ret Authenticator
		return ret
	}
	return *o.SupportedAuthenticators
}

// GetSupportedAuthenticatorsOk returns a tuple with the SupportedAuthenticators field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteSettingsResponseModel) GetSupportedAuthenticatorsOk() (*Authenticator, bool) {
	if o == nil || IsNil(o.SupportedAuthenticators) {
		return nil, false
	}
	return o.SupportedAuthenticators, true
}

// SetSupportedAuthenticators gets a reference to the given Authenticator and assigns it to the SupportedAuthenticators field.
func (o *SiteSettingsResponseModel) SetSupportedAuthenticators(v Authenticator) {
	o.SupportedAuthenticators = &v
}

// GetShowSecurityBannerOnLoginPage returns the ShowSecurityBannerOnLoginPage field value if set, zero value otherwise.
func (o *SiteSettingsResponseModel) GetShowSecurityBannerOnLoginPage() bool {
	if o == nil || IsNil(o.ShowSecurityBannerOnLoginPage) {
		var ret bool
		return ret
	}
	return *o.ShowSecurityBannerOnLoginPage
}

// GetShowSecurityBannerOnLoginPageOk returns a tuple with the ShowSecurityBannerOnLoginPage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteSettingsResponseModel) GetShowSecurityBannerOnLoginPageOk() (*bool, bool) {
	if o == nil || IsNil(o.ShowSecurityBannerOnLoginPage) {
		return nil, false
	}
	return o.ShowSecurityBannerOnLoginPage, true
}

// SetShowSecurityBannerOnLoginPage gets a reference to the given bool and assigns it to the ShowSecurityBannerOnLoginPage field.
func (o *SiteSettingsResponseModel) SetShowSecurityBannerOnLoginPage(v bool) {
	o.ShowSecurityBannerOnLoginPage = &v
}

// GetSecurityBannerOnLoginPage returns the SecurityBannerOnLoginPage field value if set, zero value otherwise.
func (o *SiteSettingsResponseModel) GetSecurityBannerOnLoginPage() string {
	if o == nil || IsNil(o.SecurityBannerOnLoginPage) {
		var ret string
		return ret
	}
	return *o.SecurityBannerOnLoginPage
}

// GetSecurityBannerOnLoginPageOk returns a tuple with the SecurityBannerOnLoginPage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteSettingsResponseModel) GetSecurityBannerOnLoginPageOk() (*string, bool) {
	if o == nil || IsNil(o.SecurityBannerOnLoginPage) {
		return nil, false
	}
	return o.SecurityBannerOnLoginPage, true
}

// SetSecurityBannerOnLoginPage gets a reference to the given string and assigns it to the SecurityBannerOnLoginPage field.
func (o *SiteSettingsResponseModel) SetSecurityBannerOnLoginPage(v string) {
	o.SecurityBannerOnLoginPage = &v
}

// GetShowConnectedControllerOnLoginPage returns the ShowConnectedControllerOnLoginPage field value if set, zero value otherwise.
func (o *SiteSettingsResponseModel) GetShowConnectedControllerOnLoginPage() bool {
	if o == nil || IsNil(o.ShowConnectedControllerOnLoginPage) {
		var ret bool
		return ret
	}
	return *o.ShowConnectedControllerOnLoginPage
}

// GetShowConnectedControllerOnLoginPageOk returns a tuple with the ShowConnectedControllerOnLoginPage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteSettingsResponseModel) GetShowConnectedControllerOnLoginPageOk() (*bool, bool) {
	if o == nil || IsNil(o.ShowConnectedControllerOnLoginPage) {
		return nil, false
	}
	return o.ShowConnectedControllerOnLoginPage, true
}

// SetShowConnectedControllerOnLoginPage gets a reference to the given bool and assigns it to the ShowConnectedControllerOnLoginPage field.
func (o *SiteSettingsResponseModel) SetShowConnectedControllerOnLoginPage(v bool) {
	o.ShowConnectedControllerOnLoginPage = &v
}

// GetAllowedCorsOriginsForIwa returns the AllowedCorsOriginsForIwa field value if set, zero value otherwise.
func (o *SiteSettingsResponseModel) GetAllowedCorsOriginsForIwa() []string {
	if o == nil || IsNil(o.AllowedCorsOriginsForIwa) {
		var ret []string
		return ret
	}
	return o.AllowedCorsOriginsForIwa
}

// GetAllowedCorsOriginsForIwaOk returns a tuple with the AllowedCorsOriginsForIwa field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteSettingsResponseModel) GetAllowedCorsOriginsForIwaOk() ([]string, bool) {
	if o == nil || IsNil(o.AllowedCorsOriginsForIwa) {
		return nil, false
	}
	return o.AllowedCorsOriginsForIwa, true
}

// SetAllowedCorsOriginsForIwa gets a reference to the given []string and assigns it to the AllowedCorsOriginsForIwa field.
func (o *SiteSettingsResponseModel) SetAllowedCorsOriginsForIwa(v []string) {
	o.AllowedCorsOriginsForIwa = v
}

// GetMultiSites returns the MultiSites field value if set, zero value otherwise.
func (o *SiteSettingsResponseModel) GetMultiSites() []MultiSiteModel {
	if o == nil || IsNil(o.MultiSites) {
		var ret []MultiSiteModel
		return ret
	}
	return o.MultiSites
}

// GetMultiSitesOk returns a tuple with the MultiSites field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteSettingsResponseModel) GetMultiSitesOk() ([]MultiSiteModel, bool) {
	if o == nil || IsNil(o.MultiSites) {
		return nil, false
	}
	return o.MultiSites, true
}

// SetMultiSites gets a reference to the given []MultiSiteModel and assigns it to the MultiSites field.
func (o *SiteSettingsResponseModel) SetMultiSites(v []MultiSiteModel) {
	o.MultiSites = v
}

// GetDefaultDomain returns the DefaultDomain field value if set, zero value otherwise.
func (o *SiteSettingsResponseModel) GetDefaultDomain() string {
	if o == nil || IsNil(o.DefaultDomain) {
		var ret string
		return ret
	}
	return *o.DefaultDomain
}

// GetDefaultDomainOk returns a tuple with the DefaultDomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteSettingsResponseModel) GetDefaultDomainOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultDomain) {
		return nil, false
	}
	return o.DefaultDomain, true
}

// SetDefaultDomain gets a reference to the given string and assigns it to the DefaultDomain field.
func (o *SiteSettingsResponseModel) SetDefaultDomain(v string) {
	o.DefaultDomain = &v
}

// GetXmlServicesSslConfigurations returns the XmlServicesSslConfigurations field value if set, zero value otherwise.
func (o *SiteSettingsResponseModel) GetXmlServicesSslConfigurations() []NameValueStringPairModel {
	if o == nil || IsNil(o.XmlServicesSslConfigurations) {
		var ret []NameValueStringPairModel
		return ret
	}
	return o.XmlServicesSslConfigurations
}

// GetXmlServicesSslConfigurationsOk returns a tuple with the XmlServicesSslConfigurations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteSettingsResponseModel) GetXmlServicesSslConfigurationsOk() ([]NameValueStringPairModel, bool) {
	if o == nil || IsNil(o.XmlServicesSslConfigurations) {
		return nil, false
	}
	return o.XmlServicesSslConfigurations, true
}

// SetXmlServicesSslConfigurations gets a reference to the given []NameValueStringPairModel and assigns it to the XmlServicesSslConfigurations field.
func (o *SiteSettingsResponseModel) SetXmlServicesSslConfigurations(v []NameValueStringPairModel) {
	o.XmlServicesSslConfigurations = v
}

// GetMultiTenantServicesAccess returns the MultiTenantServicesAccess field value if set, zero value otherwise.
func (o *SiteSettingsResponseModel) GetMultiTenantServicesAccess() MultiTenantServicesAccessModel {
	if o == nil || IsNil(o.MultiTenantServicesAccess) {
		var ret MultiTenantServicesAccessModel
		return ret
	}
	return *o.MultiTenantServicesAccess
}

// GetMultiTenantServicesAccessOk returns a tuple with the MultiTenantServicesAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteSettingsResponseModel) GetMultiTenantServicesAccessOk() (*MultiTenantServicesAccessModel, bool) {
	if o == nil || IsNil(o.MultiTenantServicesAccess) {
		return nil, false
	}
	return o.MultiTenantServicesAccess, true
}

// SetMultiTenantServicesAccess gets a reference to the given MultiTenantServicesAccessModel and assigns it to the MultiTenantServicesAccess field.
func (o *SiteSettingsResponseModel) SetMultiTenantServicesAccess(v MultiTenantServicesAccessModel) {
	o.MultiTenantServicesAccess = &v
}

func (o SiteSettingsResponseModel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SiteSettingsResponseModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UseVerticalScalingForRdsLaunches) {
		toSerialize["useVerticalScalingForRdsLaunches"] = o.UseVerticalScalingForRdsLaunches
	}
	if !IsNil(o.DnsResolutionEnabled) {
		toSerialize["dnsResolutionEnabled"] = o.DnsResolutionEnabled
	}
	if !IsNil(o.TrustRequestsSentToTheXmlServicePortEnabled) {
		toSerialize["trustRequestsSentToTheXmlServicePortEnabled"] = o.TrustRequestsSentToTheXmlServicePortEnabled
	}
	if !IsNil(o.WebUiPolicySetEnabled) {
		toSerialize["webUiPolicySetEnabled"] = o.WebUiPolicySetEnabled
	}
	if !IsNil(o.ConsoleInactivityTimeoutMinutes) {
		toSerialize["consoleInactivityTimeoutMinutes"] = o.ConsoleInactivityTimeoutMinutes
	}
	if !IsNil(o.SupportedAuthenticators) {
		toSerialize["supportedAuthenticators"] = o.SupportedAuthenticators
	}
	if !IsNil(o.ShowSecurityBannerOnLoginPage) {
		toSerialize["showSecurityBannerOnLoginPage"] = o.ShowSecurityBannerOnLoginPage
	}
	if !IsNil(o.SecurityBannerOnLoginPage) {
		toSerialize["securityBannerOnLoginPage"] = o.SecurityBannerOnLoginPage
	}
	if !IsNil(o.ShowConnectedControllerOnLoginPage) {
		toSerialize["showConnectedControllerOnLoginPage"] = o.ShowConnectedControllerOnLoginPage
	}
	if !IsNil(o.AllowedCorsOriginsForIwa) {
		toSerialize["allowedCorsOriginsForIwa"] = o.AllowedCorsOriginsForIwa
	}
	if !IsNil(o.MultiSites) {
		toSerialize["multiSites"] = o.MultiSites
	}
	if !IsNil(o.DefaultDomain) {
		toSerialize["defaultDomain"] = o.DefaultDomain
	}
	if !IsNil(o.XmlServicesSslConfigurations) {
		toSerialize["xmlServicesSslConfigurations"] = o.XmlServicesSslConfigurations
	}
	if !IsNil(o.MultiTenantServicesAccess) {
		toSerialize["multiTenantServicesAccess"] = o.MultiTenantServicesAccess
	}
	return toSerialize, nil
}

type NullableSiteSettingsResponseModel struct {
	value *SiteSettingsResponseModel
	isSet bool
}

func (v NullableSiteSettingsResponseModel) Get() *SiteSettingsResponseModel {
	return v.value
}

func (v *NullableSiteSettingsResponseModel) Set(val *SiteSettingsResponseModel) {
	v.value = val
	v.isSet = true
}

func (v NullableSiteSettingsResponseModel) IsSet() bool {
	return v.isSet
}

func (v *NullableSiteSettingsResponseModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSiteSettingsResponseModel(val *SiteSettingsResponseModel) *NullableSiteSettingsResponseModel {
	return &NullableSiteSettingsResponseModel{value: val, isSet: true}
}

func (v NullableSiteSettingsResponseModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSiteSettingsResponseModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
