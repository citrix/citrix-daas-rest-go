/*
Citrix Virtual App & Desktop Catalog Service 147.0.26651.57932

Catalog Service

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickdeploy

import (
	"encoding/json"
	"fmt"
)

// RestoreState the model 'RestoreState'
type RestoreState string

// List of RestoreState
const (
	RESTORESTATE_INACTIVE  RestoreState = "Inactive"
	RESTORESTATE_RUNNING   RestoreState = "Running"
	RESTORESTATE_COMPLETED RestoreState = "Completed"
	RESTORESTATE_FAILED    RestoreState = "Failed"
)

// All allowed values of RestoreState enum
var AllowedRestoreStateEnumValues = []RestoreState{
	"Inactive",
	"Running",
	"Completed",
	"Failed",
}

func (v *RestoreState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	*v = RestoreState(value)
	return nil
}

// NewRestoreStateFromValue returns a pointer to a valid RestoreState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRestoreStateFromValue(v string) (*RestoreState, error) {
	ev := RestoreState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RestoreState: valid values are %v", v, AllowedRestoreStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RestoreState) IsValid() bool {
	for _, existing := range AllowedRestoreStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RestoreState value
func (v RestoreState) Ptr() *RestoreState {
	return &v
}

type NullableRestoreState struct {
	value *RestoreState
	isSet bool
}

func (v NullableRestoreState) Get() *RestoreState {
	return v.value
}

func (v *NullableRestoreState) Set(val *RestoreState) {
	v.value = val
	v.isSet = true
}

func (v NullableRestoreState) IsSet() bool {
	return v.isSet
}

func (v *NullableRestoreState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestoreState(val *RestoreState) *NullableRestoreState {
	return &NullableRestoreState{value: val, isSet: true}
}

func (v NullableRestoreState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestoreState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
