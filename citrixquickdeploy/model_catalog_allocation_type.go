/*
Citrix Virtual App & Desktop Catalog Service 148.0.26750.34636

Catalog Service

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickdeploy

import (
	"encoding/json"
	"fmt"
)

// CatalogAllocationType the model 'CatalogAllocationType'
type CatalogAllocationType string

// List of CatalogAllocationType
const (
	CATALOGALLOCATIONTYPE_PERMANENT CatalogAllocationType = "Permanent"
	CATALOGALLOCATIONTYPE_RANDOM    CatalogAllocationType = "Random"
)

// All allowed values of CatalogAllocationType enum
var AllowedCatalogAllocationTypeEnumValues = []CatalogAllocationType{
	"Permanent",
	"Random",
}

func (v *CatalogAllocationType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	*v = CatalogAllocationType(value)
	return nil
}

// NewCatalogAllocationTypeFromValue returns a pointer to a valid CatalogAllocationType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCatalogAllocationTypeFromValue(v string) (*CatalogAllocationType, error) {
	ev := CatalogAllocationType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CatalogAllocationType: valid values are %v", v, AllowedCatalogAllocationTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CatalogAllocationType) IsValid() bool {
	for _, existing := range AllowedCatalogAllocationTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CatalogAllocationType value
func (v CatalogAllocationType) Ptr() *CatalogAllocationType {
	return &v
}

type NullableCatalogAllocationType struct {
	value *CatalogAllocationType
	isSet bool
}

func (v NullableCatalogAllocationType) Get() *CatalogAllocationType {
	return v.value
}

func (v *NullableCatalogAllocationType) Set(val *CatalogAllocationType) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogAllocationType) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogAllocationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogAllocationType(val *CatalogAllocationType) *NullableCatalogAllocationType {
	return &NullableCatalogAllocationType{value: val, isSet: true}
}

func (v NullableCatalogAllocationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogAllocationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
