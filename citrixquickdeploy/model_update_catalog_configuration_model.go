/*
Citrix Virtual App & Desktop Catalog Service 148.0.26750.34636

Catalog Service

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickdeploy

import (
	"encoding/json"
)

// checks if the UpdateCatalogConfigurationModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateCatalogConfigurationModel{}

// UpdateCatalogConfigurationModel This model is considered as a whitelist for patchable properties in a DataStore catalog model.  All the properties in this model are nullable.
type UpdateCatalogConfigurationModel struct {
	// Flag that indicates whether user has been assigned to the catalog
	AreUsersConfigured *bool `json:"areUsersConfigured,omitempty"`
	// Indicates if apps or desktops have been configured for the catalog
	AreAppsConfigured *bool `json:"areAppsConfigured,omitempty"`
	// Region where the catalog is being deployed
	Region *string `json:"region,omitempty"`
}

// NewUpdateCatalogConfigurationModelWithDefaults instantiates a new UpdateCatalogConfigurationModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateCatalogConfigurationModelWithDefaults() *UpdateCatalogConfigurationModel {
	this := UpdateCatalogConfigurationModel{}
	return &this
}

// GetAreUsersConfigured returns the AreUsersConfigured field value if set, zero value otherwise.
func (o *UpdateCatalogConfigurationModel) GetAreUsersConfigured() bool {
	if o == nil || IsNil(o.AreUsersConfigured) {
		var ret bool
		return ret
	}
	return *o.AreUsersConfigured
}

// GetAreUsersConfiguredOk returns a tuple with the AreUsersConfigured field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateCatalogConfigurationModel) GetAreUsersConfiguredOk() (*bool, bool) {
	if o == nil || IsNil(o.AreUsersConfigured) {
		return nil, false
	}
	return o.AreUsersConfigured, true
}

// SetAreUsersConfigured gets a reference to the given bool and assigns it to the AreUsersConfigured field.
func (o *UpdateCatalogConfigurationModel) SetAreUsersConfigured(v bool) {
	o.AreUsersConfigured = &v
}

// GetAreAppsConfigured returns the AreAppsConfigured field value if set, zero value otherwise.
func (o *UpdateCatalogConfigurationModel) GetAreAppsConfigured() bool {
	if o == nil || IsNil(o.AreAppsConfigured) {
		var ret bool
		return ret
	}
	return *o.AreAppsConfigured
}

// GetAreAppsConfiguredOk returns a tuple with the AreAppsConfigured field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateCatalogConfigurationModel) GetAreAppsConfiguredOk() (*bool, bool) {
	if o == nil || IsNil(o.AreAppsConfigured) {
		return nil, false
	}
	return o.AreAppsConfigured, true
}

// SetAreAppsConfigured gets a reference to the given bool and assigns it to the AreAppsConfigured field.
func (o *UpdateCatalogConfigurationModel) SetAreAppsConfigured(v bool) {
	o.AreAppsConfigured = &v
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *UpdateCatalogConfigurationModel) GetRegion() string {
	if o == nil || IsNil(o.Region) {
		var ret string
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateCatalogConfigurationModel) GetRegionOk() (*string, bool) {
	if o == nil || IsNil(o.Region) {
		return nil, false
	}
	return o.Region, true
}

// SetRegion gets a reference to the given string and assigns it to the Region field.
func (o *UpdateCatalogConfigurationModel) SetRegion(v string) {
	o.Region = &v
}

func (o UpdateCatalogConfigurationModel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateCatalogConfigurationModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AreUsersConfigured) {
		toSerialize["areUsersConfigured"] = o.AreUsersConfigured
	}
	if !IsNil(o.AreAppsConfigured) {
		toSerialize["areAppsConfigured"] = o.AreAppsConfigured
	}
	if !IsNil(o.Region) {
		toSerialize["region"] = o.Region
	}
	return toSerialize, nil
}

type NullableUpdateCatalogConfigurationModel struct {
	value *UpdateCatalogConfigurationModel
	isSet bool
}

func (v NullableUpdateCatalogConfigurationModel) Get() *UpdateCatalogConfigurationModel {
	return v.value
}

func (v *NullableUpdateCatalogConfigurationModel) Set(val *UpdateCatalogConfigurationModel) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateCatalogConfigurationModel) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateCatalogConfigurationModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateCatalogConfigurationModel(val *UpdateCatalogConfigurationModel) *NullableUpdateCatalogConfigurationModel {
	return &NullableUpdateCatalogConfigurationModel{value: val, isSet: true}
}

func (v NullableUpdateCatalogConfigurationModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateCatalogConfigurationModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
