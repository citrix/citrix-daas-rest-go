/*
Citrix Virtual App & Desktop Catalog Service 148.0.26750.34636

Catalog Service

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickdeploy

import (
	"encoding/json"
	"fmt"
)

// ResourceLocationState the model 'ResourceLocationState'
type ResourceLocationState string

// List of ResourceLocationState
const (
	RESOURCELOCATIONSTATE_ACTIVE        ResourceLocationState = "Active"
	RESOURCELOCATIONSTATE_DELETING      ResourceLocationState = "Deleting"
	RESOURCELOCATIONSTATE_DELETE_FAILED ResourceLocationState = "DeleteFailed"
)

// All allowed values of ResourceLocationState enum
var AllowedResourceLocationStateEnumValues = []ResourceLocationState{
	"Active",
	"Deleting",
	"DeleteFailed",
}

func (v *ResourceLocationState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	*v = ResourceLocationState(value)
	return nil
}

// NewResourceLocationStateFromValue returns a pointer to a valid ResourceLocationState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewResourceLocationStateFromValue(v string) (*ResourceLocationState, error) {
	ev := ResourceLocationState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ResourceLocationState: valid values are %v", v, AllowedResourceLocationStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ResourceLocationState) IsValid() bool {
	for _, existing := range AllowedResourceLocationStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ResourceLocationState value
func (v ResourceLocationState) Ptr() *ResourceLocationState {
	return &v
}

type NullableResourceLocationState struct {
	value *ResourceLocationState
	isSet bool
}

func (v NullableResourceLocationState) Get() *ResourceLocationState {
	return v.value
}

func (v *NullableResourceLocationState) Set(val *ResourceLocationState) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceLocationState) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceLocationState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceLocationState(val *ResourceLocationState) *NullableResourceLocationState {
	return &NullableResourceLocationState{value: val, isSet: true}
}

func (v NullableResourceLocationState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceLocationState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
