/*
Citrix Virtual App & Desktop Catalog Service 148.0.26750.34636

Catalog Service

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickdeploy

import (
	"encoding/json"
)

// checks if the DirectoryVerificationState type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DirectoryVerificationState{}

// DirectoryVerificationState struct for DirectoryVerificationState
type DirectoryVerificationState struct {
	// ID of the directory
	DirectoryId *string `json:"directoryId,omitempty"`
	// Name of the directory
	DirectoryName *string `json:"directoryName,omitempty"`
	// Indicates if the directory is assigned to the pool or a customer
	DirectoryAssignment *DirectoryAssignmentType `json:"directoryAssignment,omitempty"`
	// ID of the assigned customer
	AssignedCustomerId *string `json:"assignedCustomerId,omitempty"`
	// ID of the assigned customer's site
	AssignedCustomerSiteId *string `json:"assignedCustomerSiteId,omitempty"`
	// Indicates if the Directory is invalid because it does not have any associated subscriptions
	HasAssociatedSubscriptions *bool `json:"hasAssociatedSubscriptions,omitempty"`
	// List of subscriptions that have unexpected users
	Subscriptions []SubscriptionVerificationState `json:"subscriptions,omitempty"`
	// List of assignments in the directory that are not expected
	UnexpectedAssignments    []AzureAssignment `json:"unexpectedAssignments,omitempty"`
	HasUnexpectedAssignments *bool             `json:"hasUnexpectedAssignments,omitempty"`
}

// NewDirectoryVerificationStateWithDefaults instantiates a new DirectoryVerificationState object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDirectoryVerificationStateWithDefaults() *DirectoryVerificationState {
	this := DirectoryVerificationState{}
	return &this
}

// GetDirectoryId returns the DirectoryId field value if set, zero value otherwise.
func (o *DirectoryVerificationState) GetDirectoryId() string {
	if o == nil || IsNil(o.DirectoryId) {
		var ret string
		return ret
	}
	return *o.DirectoryId
}

// GetDirectoryIdOk returns a tuple with the DirectoryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DirectoryVerificationState) GetDirectoryIdOk() (*string, bool) {
	if o == nil || IsNil(o.DirectoryId) {
		return nil, false
	}
	return o.DirectoryId, true
}

// SetDirectoryId gets a reference to the given string and assigns it to the DirectoryId field.
func (o *DirectoryVerificationState) SetDirectoryId(v string) {
	o.DirectoryId = &v
}

// GetDirectoryName returns the DirectoryName field value if set, zero value otherwise.
func (o *DirectoryVerificationState) GetDirectoryName() string {
	if o == nil || IsNil(o.DirectoryName) {
		var ret string
		return ret
	}
	return *o.DirectoryName
}

// GetDirectoryNameOk returns a tuple with the DirectoryName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DirectoryVerificationState) GetDirectoryNameOk() (*string, bool) {
	if o == nil || IsNil(o.DirectoryName) {
		return nil, false
	}
	return o.DirectoryName, true
}

// SetDirectoryName gets a reference to the given string and assigns it to the DirectoryName field.
func (o *DirectoryVerificationState) SetDirectoryName(v string) {
	o.DirectoryName = &v
}

// GetDirectoryAssignment returns the DirectoryAssignment field value if set, zero value otherwise.
func (o *DirectoryVerificationState) GetDirectoryAssignment() DirectoryAssignmentType {
	if o == nil || IsNil(o.DirectoryAssignment) {
		var ret DirectoryAssignmentType
		return ret
	}
	return *o.DirectoryAssignment
}

// GetDirectoryAssignmentOk returns a tuple with the DirectoryAssignment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DirectoryVerificationState) GetDirectoryAssignmentOk() (*DirectoryAssignmentType, bool) {
	if o == nil || IsNil(o.DirectoryAssignment) {
		return nil, false
	}
	return o.DirectoryAssignment, true
}

// SetDirectoryAssignment gets a reference to the given DirectoryAssignmentType and assigns it to the DirectoryAssignment field.
func (o *DirectoryVerificationState) SetDirectoryAssignment(v DirectoryAssignmentType) {
	o.DirectoryAssignment = &v
}

// GetAssignedCustomerId returns the AssignedCustomerId field value if set, zero value otherwise.
func (o *DirectoryVerificationState) GetAssignedCustomerId() string {
	if o == nil || IsNil(o.AssignedCustomerId) {
		var ret string
		return ret
	}
	return *o.AssignedCustomerId
}

// GetAssignedCustomerIdOk returns a tuple with the AssignedCustomerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DirectoryVerificationState) GetAssignedCustomerIdOk() (*string, bool) {
	if o == nil || IsNil(o.AssignedCustomerId) {
		return nil, false
	}
	return o.AssignedCustomerId, true
}

// SetAssignedCustomerId gets a reference to the given string and assigns it to the AssignedCustomerId field.
func (o *DirectoryVerificationState) SetAssignedCustomerId(v string) {
	o.AssignedCustomerId = &v
}

// GetAssignedCustomerSiteId returns the AssignedCustomerSiteId field value if set, zero value otherwise.
func (o *DirectoryVerificationState) GetAssignedCustomerSiteId() string {
	if o == nil || IsNil(o.AssignedCustomerSiteId) {
		var ret string
		return ret
	}
	return *o.AssignedCustomerSiteId
}

// GetAssignedCustomerSiteIdOk returns a tuple with the AssignedCustomerSiteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DirectoryVerificationState) GetAssignedCustomerSiteIdOk() (*string, bool) {
	if o == nil || IsNil(o.AssignedCustomerSiteId) {
		return nil, false
	}
	return o.AssignedCustomerSiteId, true
}

// SetAssignedCustomerSiteId gets a reference to the given string and assigns it to the AssignedCustomerSiteId field.
func (o *DirectoryVerificationState) SetAssignedCustomerSiteId(v string) {
	o.AssignedCustomerSiteId = &v
}

// GetHasAssociatedSubscriptions returns the HasAssociatedSubscriptions field value if set, zero value otherwise.
func (o *DirectoryVerificationState) GetHasAssociatedSubscriptions() bool {
	if o == nil || IsNil(o.HasAssociatedSubscriptions) {
		var ret bool
		return ret
	}
	return *o.HasAssociatedSubscriptions
}

// GetHasAssociatedSubscriptionsOk returns a tuple with the HasAssociatedSubscriptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DirectoryVerificationState) GetHasAssociatedSubscriptionsOk() (*bool, bool) {
	if o == nil || IsNil(o.HasAssociatedSubscriptions) {
		return nil, false
	}
	return o.HasAssociatedSubscriptions, true
}

// SetHasAssociatedSubscriptions gets a reference to the given bool and assigns it to the HasAssociatedSubscriptions field.
func (o *DirectoryVerificationState) SetHasAssociatedSubscriptions(v bool) {
	o.HasAssociatedSubscriptions = &v
}

// GetSubscriptions returns the Subscriptions field value if set, zero value otherwise.
func (o *DirectoryVerificationState) GetSubscriptions() []SubscriptionVerificationState {
	if o == nil || IsNil(o.Subscriptions) {
		var ret []SubscriptionVerificationState
		return ret
	}
	return o.Subscriptions
}

// GetSubscriptionsOk returns a tuple with the Subscriptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DirectoryVerificationState) GetSubscriptionsOk() ([]SubscriptionVerificationState, bool) {
	if o == nil || IsNil(o.Subscriptions) {
		return nil, false
	}
	return o.Subscriptions, true
}

// SetSubscriptions gets a reference to the given []SubscriptionVerificationState and assigns it to the Subscriptions field.
func (o *DirectoryVerificationState) SetSubscriptions(v []SubscriptionVerificationState) {
	o.Subscriptions = v
}

// GetUnexpectedAssignments returns the UnexpectedAssignments field value if set, zero value otherwise.
func (o *DirectoryVerificationState) GetUnexpectedAssignments() []AzureAssignment {
	if o == nil || IsNil(o.UnexpectedAssignments) {
		var ret []AzureAssignment
		return ret
	}
	return o.UnexpectedAssignments
}

// GetUnexpectedAssignmentsOk returns a tuple with the UnexpectedAssignments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DirectoryVerificationState) GetUnexpectedAssignmentsOk() ([]AzureAssignment, bool) {
	if o == nil || IsNil(o.UnexpectedAssignments) {
		return nil, false
	}
	return o.UnexpectedAssignments, true
}

// SetUnexpectedAssignments gets a reference to the given []AzureAssignment and assigns it to the UnexpectedAssignments field.
func (o *DirectoryVerificationState) SetUnexpectedAssignments(v []AzureAssignment) {
	o.UnexpectedAssignments = v
}

// GetHasUnexpectedAssignments returns the HasUnexpectedAssignments field value if set, zero value otherwise.
func (o *DirectoryVerificationState) GetHasUnexpectedAssignments() bool {
	if o == nil || IsNil(o.HasUnexpectedAssignments) {
		var ret bool
		return ret
	}
	return *o.HasUnexpectedAssignments
}

// GetHasUnexpectedAssignmentsOk returns a tuple with the HasUnexpectedAssignments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DirectoryVerificationState) GetHasUnexpectedAssignmentsOk() (*bool, bool) {
	if o == nil || IsNil(o.HasUnexpectedAssignments) {
		return nil, false
	}
	return o.HasUnexpectedAssignments, true
}

// SetHasUnexpectedAssignments gets a reference to the given bool and assigns it to the HasUnexpectedAssignments field.
func (o *DirectoryVerificationState) SetHasUnexpectedAssignments(v bool) {
	o.HasUnexpectedAssignments = &v
}

func (o DirectoryVerificationState) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DirectoryVerificationState) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DirectoryId) {
		toSerialize["directoryId"] = o.DirectoryId
	}
	if !IsNil(o.DirectoryName) {
		toSerialize["directoryName"] = o.DirectoryName
	}
	if !IsNil(o.DirectoryAssignment) {
		toSerialize["directoryAssignment"] = o.DirectoryAssignment
	}
	if !IsNil(o.AssignedCustomerId) {
		toSerialize["assignedCustomerId"] = o.AssignedCustomerId
	}
	if !IsNil(o.AssignedCustomerSiteId) {
		toSerialize["assignedCustomerSiteId"] = o.AssignedCustomerSiteId
	}
	if !IsNil(o.HasAssociatedSubscriptions) {
		toSerialize["hasAssociatedSubscriptions"] = o.HasAssociatedSubscriptions
	}
	if !IsNil(o.Subscriptions) {
		toSerialize["subscriptions"] = o.Subscriptions
	}
	if !IsNil(o.UnexpectedAssignments) {
		toSerialize["unexpectedAssignments"] = o.UnexpectedAssignments
	}
	if !IsNil(o.HasUnexpectedAssignments) {
		toSerialize["hasUnexpectedAssignments"] = o.HasUnexpectedAssignments
	}
	return toSerialize, nil
}

type NullableDirectoryVerificationState struct {
	value *DirectoryVerificationState
	isSet bool
}

func (v NullableDirectoryVerificationState) Get() *DirectoryVerificationState {
	return v.value
}

func (v *NullableDirectoryVerificationState) Set(val *DirectoryVerificationState) {
	v.value = val
	v.isSet = true
}

func (v NullableDirectoryVerificationState) IsSet() bool {
	return v.isSet
}

func (v *NullableDirectoryVerificationState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDirectoryVerificationState(val *DirectoryVerificationState) *NullableDirectoryVerificationState {
	return &NullableDirectoryVerificationState{value: val, isSet: true}
}

func (v NullableDirectoryVerificationState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDirectoryVerificationState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
