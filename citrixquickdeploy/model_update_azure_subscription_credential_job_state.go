/*
Citrix Virtual App & Desktop Catalog Service 147.0.26651.57932

Catalog Service

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickdeploy

import (
	"encoding/json"
	"fmt"
)

// UpdateAzureSubscriptionCredentialJobState the model 'UpdateAzureSubscriptionCredentialJobState'
type UpdateAzureSubscriptionCredentialJobState string

// List of UpdateAzureSubscriptionCredentialJobState
const (
	UPDATEAZURESUBSCRIPTIONCREDENTIALJOBSTATE_INACTIVE            UpdateAzureSubscriptionCredentialJobState = "Inactive"
	UPDATEAZURESUBSCRIPTIONCREDENTIALJOBSTATE_IN_PROGRESS         UpdateAzureSubscriptionCredentialJobState = "InProgress"
	UPDATEAZURESUBSCRIPTIONCREDENTIALJOBSTATE_COMPLETE            UpdateAzureSubscriptionCredentialJobState = "Complete"
	UPDATEAZURESUBSCRIPTIONCREDENTIALJOBSTATE_COMPLETE_WITH_ERROR UpdateAzureSubscriptionCredentialJobState = "CompleteWithError"
	UPDATEAZURESUBSCRIPTIONCREDENTIALJOBSTATE_FAILED_UNKNOWN      UpdateAzureSubscriptionCredentialJobState = "FailedUnknown"
)

// All allowed values of UpdateAzureSubscriptionCredentialJobState enum
var AllowedUpdateAzureSubscriptionCredentialJobStateEnumValues = []UpdateAzureSubscriptionCredentialJobState{
	"Inactive",
	"InProgress",
	"Complete",
	"CompleteWithError",
	"FailedUnknown",
}

func (v *UpdateAzureSubscriptionCredentialJobState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	*v = UpdateAzureSubscriptionCredentialJobState(value)
	return nil
}

// NewUpdateAzureSubscriptionCredentialJobStateFromValue returns a pointer to a valid UpdateAzureSubscriptionCredentialJobState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewUpdateAzureSubscriptionCredentialJobStateFromValue(v string) (*UpdateAzureSubscriptionCredentialJobState, error) {
	ev := UpdateAzureSubscriptionCredentialJobState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for UpdateAzureSubscriptionCredentialJobState: valid values are %v", v, AllowedUpdateAzureSubscriptionCredentialJobStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v UpdateAzureSubscriptionCredentialJobState) IsValid() bool {
	for _, existing := range AllowedUpdateAzureSubscriptionCredentialJobStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to UpdateAzureSubscriptionCredentialJobState value
func (v UpdateAzureSubscriptionCredentialJobState) Ptr() *UpdateAzureSubscriptionCredentialJobState {
	return &v
}

type NullableUpdateAzureSubscriptionCredentialJobState struct {
	value *UpdateAzureSubscriptionCredentialJobState
	isSet bool
}

func (v NullableUpdateAzureSubscriptionCredentialJobState) Get() *UpdateAzureSubscriptionCredentialJobState {
	return v.value
}

func (v *NullableUpdateAzureSubscriptionCredentialJobState) Set(val *UpdateAzureSubscriptionCredentialJobState) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateAzureSubscriptionCredentialJobState) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateAzureSubscriptionCredentialJobState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateAzureSubscriptionCredentialJobState(val *UpdateAzureSubscriptionCredentialJobState) *NullableUpdateAzureSubscriptionCredentialJobState {
	return &NullableUpdateAzureSubscriptionCredentialJobState{value: val, isSet: true}
}

func (v NullableUpdateAzureSubscriptionCredentialJobState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateAzureSubscriptionCredentialJobState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
