/*
Citrix Virtual App & Desktop Catalog Service 147.0.26651.57932

Catalog Service

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickdeploy

import (
	"encoding/json"
	"time"
)

// checks if the DataStoreManagedSubscriptionConsentModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataStoreManagedSubscriptionConsentModel{}

// DataStoreManagedSubscriptionConsentModel struct for DataStoreManagedSubscriptionConsentModel
type DataStoreManagedSubscriptionConsentModel struct {
	// The name of the user that consented
	ConsentedBy *string `json:"consentedBy,omitempty"`
	// The date time when the consent was given
	ConsentedAt *time.Time `json:"consentedAt,omitempty"`
}

// NewDataStoreManagedSubscriptionConsentModelWithDefaults instantiates a new DataStoreManagedSubscriptionConsentModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataStoreManagedSubscriptionConsentModelWithDefaults() *DataStoreManagedSubscriptionConsentModel {
	this := DataStoreManagedSubscriptionConsentModel{}
	return &this
}

// GetConsentedBy returns the ConsentedBy field value if set, zero value otherwise.
func (o *DataStoreManagedSubscriptionConsentModel) GetConsentedBy() string {
	if o == nil || IsNil(o.ConsentedBy) {
		var ret string
		return ret
	}
	return *o.ConsentedBy
}

// GetConsentedByOk returns a tuple with the ConsentedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataStoreManagedSubscriptionConsentModel) GetConsentedByOk() (*string, bool) {
	if o == nil || IsNil(o.ConsentedBy) {
		return nil, false
	}
	return o.ConsentedBy, true
}

// SetConsentedBy gets a reference to the given string and assigns it to the ConsentedBy field.
func (o *DataStoreManagedSubscriptionConsentModel) SetConsentedBy(v string) {
	o.ConsentedBy = &v
}

// GetConsentedAt returns the ConsentedAt field value if set, zero value otherwise.
func (o *DataStoreManagedSubscriptionConsentModel) GetConsentedAt() time.Time {
	if o == nil || IsNil(o.ConsentedAt) {
		var ret time.Time
		return ret
	}
	return *o.ConsentedAt
}

// GetConsentedAtOk returns a tuple with the ConsentedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataStoreManagedSubscriptionConsentModel) GetConsentedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ConsentedAt) {
		return nil, false
	}
	return o.ConsentedAt, true
}

// SetConsentedAt gets a reference to the given time.Time and assigns it to the ConsentedAt field.
func (o *DataStoreManagedSubscriptionConsentModel) SetConsentedAt(v time.Time) {
	o.ConsentedAt = &v
}

func (o DataStoreManagedSubscriptionConsentModel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataStoreManagedSubscriptionConsentModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ConsentedBy) {
		toSerialize["consentedBy"] = o.ConsentedBy
	}
	if !IsNil(o.ConsentedAt) {
		toSerialize["consentedAt"] = o.ConsentedAt
	}
	return toSerialize, nil
}

type NullableDataStoreManagedSubscriptionConsentModel struct {
	value *DataStoreManagedSubscriptionConsentModel
	isSet bool
}

func (v NullableDataStoreManagedSubscriptionConsentModel) Get() *DataStoreManagedSubscriptionConsentModel {
	return v.value
}

func (v *NullableDataStoreManagedSubscriptionConsentModel) Set(val *DataStoreManagedSubscriptionConsentModel) {
	v.value = val
	v.isSet = true
}

func (v NullableDataStoreManagedSubscriptionConsentModel) IsSet() bool {
	return v.isSet
}

func (v *NullableDataStoreManagedSubscriptionConsentModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataStoreManagedSubscriptionConsentModel(val *DataStoreManagedSubscriptionConsentModel) *NullableDataStoreManagedSubscriptionConsentModel {
	return &NullableDataStoreManagedSubscriptionConsentModel{value: val, isSet: true}
}

func (v NullableDataStoreManagedSubscriptionConsentModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataStoreManagedSubscriptionConsentModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
