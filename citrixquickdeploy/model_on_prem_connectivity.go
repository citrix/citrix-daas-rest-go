/*
Citrix Virtual App & Desktop Catalog Service 148.0.26750.34636

Catalog Service

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickdeploy

import (
	"encoding/json"
	"fmt"
)

// OnPremConnectivity the model 'OnPremConnectivity'
type OnPremConnectivity string

// List of OnPremConnectivity
const (
	ONPREMCONNECTIVITY_UNKNOWN      OnPremConnectivity = "Unknown"
	ONPREMCONNECTIVITY_NONE         OnPremConnectivity = "None"
	ONPREMCONNECTIVITY_VNET_PEERING OnPremConnectivity = "VnetPeering"
)

// All allowed values of OnPremConnectivity enum
var AllowedOnPremConnectivityEnumValues = []OnPremConnectivity{
	"Unknown",
	"None",
	"VnetPeering",
}

func (v *OnPremConnectivity) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	*v = OnPremConnectivity(value)
	return nil
}

// NewOnPremConnectivityFromValue returns a pointer to a valid OnPremConnectivity
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOnPremConnectivityFromValue(v string) (*OnPremConnectivity, error) {
	ev := OnPremConnectivity(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OnPremConnectivity: valid values are %v", v, AllowedOnPremConnectivityEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OnPremConnectivity) IsValid() bool {
	for _, existing := range AllowedOnPremConnectivityEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OnPremConnectivity value
func (v OnPremConnectivity) Ptr() *OnPremConnectivity {
	return &v
}

type NullableOnPremConnectivity struct {
	value *OnPremConnectivity
	isSet bool
}

func (v NullableOnPremConnectivity) Get() *OnPremConnectivity {
	return v.value
}

func (v *NullableOnPremConnectivity) Set(val *OnPremConnectivity) {
	v.value = val
	v.isSet = true
}

func (v NullableOnPremConnectivity) IsSet() bool {
	return v.isSet
}

func (v *NullableOnPremConnectivity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOnPremConnectivity(val *OnPremConnectivity) *NullableOnPremConnectivity {
	return &NullableOnPremConnectivity{value: val, isSet: true}
}

func (v NullableOnPremConnectivity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOnPremConnectivity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
