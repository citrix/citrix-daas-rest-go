/*
Citrix Virtual App & Desktop Catalog Service 148.0.26750.34636

Catalog Service

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickdeploy

import (
	"encoding/json"
	"fmt"
)

// RouteTableState the model 'RouteTableState'
type RouteTableState string

// List of RouteTableState
const (
	ROUTETABLESTATE_FAILED    RouteTableState = "Failed"
	ROUTETABLESTATE_SUCCEEDED RouteTableState = "Succeeded"
	ROUTETABLESTATE_CREATING  RouteTableState = "Creating"
	ROUTETABLESTATE_UPDATING  RouteTableState = "Updating"
)

// All allowed values of RouteTableState enum
var AllowedRouteTableStateEnumValues = []RouteTableState{
	"Failed",
	"Succeeded",
	"Creating",
	"Updating",
}

func (v *RouteTableState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	*v = RouteTableState(value)
	return nil
}

// NewRouteTableStateFromValue returns a pointer to a valid RouteTableState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRouteTableStateFromValue(v string) (*RouteTableState, error) {
	ev := RouteTableState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RouteTableState: valid values are %v", v, AllowedRouteTableStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RouteTableState) IsValid() bool {
	for _, existing := range AllowedRouteTableStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RouteTableState value
func (v RouteTableState) Ptr() *RouteTableState {
	return &v
}

type NullableRouteTableState struct {
	value *RouteTableState
	isSet bool
}

func (v NullableRouteTableState) Get() *RouteTableState {
	return v.value
}

func (v *NullableRouteTableState) Set(val *RouteTableState) {
	v.value = val
	v.isSet = true
}

func (v NullableRouteTableState) IsSet() bool {
	return v.isSet
}

func (v *NullableRouteTableState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRouteTableState(val *RouteTableState) *NullableRouteTableState {
	return &NullableRouteTableState{value: val, isSet: true}
}

func (v NullableRouteTableState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRouteTableState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
