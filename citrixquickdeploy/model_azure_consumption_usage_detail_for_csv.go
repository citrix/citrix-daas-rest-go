/*
Citrix Virtual App & Desktop Catalog Service 148.0.26750.34636

Catalog Service

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickdeploy

import (
	"encoding/json"
	"time"
)

// checks if the AzureConsumptionUsageDetailForCsv type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AzureConsumptionUsageDetailForCsv{}

// AzureConsumptionUsageDetailForCsv struct for AzureConsumptionUsageDetailForCsv
type AzureConsumptionUsageDetailForCsv struct {
	// ID of the catalog
	CatalogId *string `json:"catalogId,omitempty"`
	// Subscription guid.
	SubscriptionId *string `json:"subscriptionId,omitempty"`
	// The amount of cost before tax.
	Cost *float64 `json:"cost,omitempty"`
	// Unique identifier of the Azure Resource Manager usage detail resource.
	ResourceId *string `json:"resourceId,omitempty"`
	// Name of the resource's resource group.
	ResourceGroup *string `json:"resourceGroup,omitempty"`
	// Location of the resource.
	ResourceLocation *string `json:"resourceLocation,omitempty"`
	// The billing period start date.
	BillingPeriodStartDate *time.Time `json:"billingPeriodStartDate,omitempty"`
	// The billing period end date.
	BillingPeriodEndDate *time.Time `json:"billingPeriodEndDate,omitempty"`
	// The meter id (GUID). Not available for marketplace. For reserved instance this represents the primary meter for which the reservation was purchased. For the actual VM Size for which the reservation is purchased see productOrderName.
	MeterId *string `json:"meterId,omitempty"`
	// The usage quantity.
	Quantity *float64 `json:"quantity,omitempty"`
	// The unit price of the meter.
	UnitPrice *float64 `json:"unitPrice,omitempty"`
	// The currency of the meter.
	BillingCurrency *string `json:"billingCurrency,omitempty"`
	// The details about the meter. By default this is not populated, unless it's specified in $expand.
	MeterDetails *AzureConsumptionMeterDetails `json:"meterDetails,omitempty"`
	Tags         *string                       `json:"tags,omitempty"`
}

// NewAzureConsumptionUsageDetailForCsvWithDefaults instantiates a new AzureConsumptionUsageDetailForCsv object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAzureConsumptionUsageDetailForCsvWithDefaults() *AzureConsumptionUsageDetailForCsv {
	this := AzureConsumptionUsageDetailForCsv{}
	return &this
}

// GetCatalogId returns the CatalogId field value if set, zero value otherwise.
func (o *AzureConsumptionUsageDetailForCsv) GetCatalogId() string {
	if o == nil || IsNil(o.CatalogId) {
		var ret string
		return ret
	}
	return *o.CatalogId
}

// GetCatalogIdOk returns a tuple with the CatalogId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureConsumptionUsageDetailForCsv) GetCatalogIdOk() (*string, bool) {
	if o == nil || IsNil(o.CatalogId) {
		return nil, false
	}
	return o.CatalogId, true
}

// SetCatalogId gets a reference to the given string and assigns it to the CatalogId field.
func (o *AzureConsumptionUsageDetailForCsv) SetCatalogId(v string) {
	o.CatalogId = &v
}

// GetSubscriptionId returns the SubscriptionId field value if set, zero value otherwise.
func (o *AzureConsumptionUsageDetailForCsv) GetSubscriptionId() string {
	if o == nil || IsNil(o.SubscriptionId) {
		var ret string
		return ret
	}
	return *o.SubscriptionId
}

// GetSubscriptionIdOk returns a tuple with the SubscriptionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureConsumptionUsageDetailForCsv) GetSubscriptionIdOk() (*string, bool) {
	if o == nil || IsNil(o.SubscriptionId) {
		return nil, false
	}
	return o.SubscriptionId, true
}

// SetSubscriptionId gets a reference to the given string and assigns it to the SubscriptionId field.
func (o *AzureConsumptionUsageDetailForCsv) SetSubscriptionId(v string) {
	o.SubscriptionId = &v
}

// GetCost returns the Cost field value if set, zero value otherwise.
func (o *AzureConsumptionUsageDetailForCsv) GetCost() float64 {
	if o == nil || IsNil(o.Cost) {
		var ret float64
		return ret
	}
	return *o.Cost
}

// GetCostOk returns a tuple with the Cost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureConsumptionUsageDetailForCsv) GetCostOk() (*float64, bool) {
	if o == nil || IsNil(o.Cost) {
		return nil, false
	}
	return o.Cost, true
}

// SetCost gets a reference to the given float64 and assigns it to the Cost field.
func (o *AzureConsumptionUsageDetailForCsv) SetCost(v float64) {
	o.Cost = &v
}

// GetResourceId returns the ResourceId field value if set, zero value otherwise.
func (o *AzureConsumptionUsageDetailForCsv) GetResourceId() string {
	if o == nil || IsNil(o.ResourceId) {
		var ret string
		return ret
	}
	return *o.ResourceId
}

// GetResourceIdOk returns a tuple with the ResourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureConsumptionUsageDetailForCsv) GetResourceIdOk() (*string, bool) {
	if o == nil || IsNil(o.ResourceId) {
		return nil, false
	}
	return o.ResourceId, true
}

// SetResourceId gets a reference to the given string and assigns it to the ResourceId field.
func (o *AzureConsumptionUsageDetailForCsv) SetResourceId(v string) {
	o.ResourceId = &v
}

// GetResourceGroup returns the ResourceGroup field value if set, zero value otherwise.
func (o *AzureConsumptionUsageDetailForCsv) GetResourceGroup() string {
	if o == nil || IsNil(o.ResourceGroup) {
		var ret string
		return ret
	}
	return *o.ResourceGroup
}

// GetResourceGroupOk returns a tuple with the ResourceGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureConsumptionUsageDetailForCsv) GetResourceGroupOk() (*string, bool) {
	if o == nil || IsNil(o.ResourceGroup) {
		return nil, false
	}
	return o.ResourceGroup, true
}

// SetResourceGroup gets a reference to the given string and assigns it to the ResourceGroup field.
func (o *AzureConsumptionUsageDetailForCsv) SetResourceGroup(v string) {
	o.ResourceGroup = &v
}

// GetResourceLocation returns the ResourceLocation field value if set, zero value otherwise.
func (o *AzureConsumptionUsageDetailForCsv) GetResourceLocation() string {
	if o == nil || IsNil(o.ResourceLocation) {
		var ret string
		return ret
	}
	return *o.ResourceLocation
}

// GetResourceLocationOk returns a tuple with the ResourceLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureConsumptionUsageDetailForCsv) GetResourceLocationOk() (*string, bool) {
	if o == nil || IsNil(o.ResourceLocation) {
		return nil, false
	}
	return o.ResourceLocation, true
}

// SetResourceLocation gets a reference to the given string and assigns it to the ResourceLocation field.
func (o *AzureConsumptionUsageDetailForCsv) SetResourceLocation(v string) {
	o.ResourceLocation = &v
}

// GetBillingPeriodStartDate returns the BillingPeriodStartDate field value if set, zero value otherwise.
func (o *AzureConsumptionUsageDetailForCsv) GetBillingPeriodStartDate() time.Time {
	if o == nil || IsNil(o.BillingPeriodStartDate) {
		var ret time.Time
		return ret
	}
	return *o.BillingPeriodStartDate
}

// GetBillingPeriodStartDateOk returns a tuple with the BillingPeriodStartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureConsumptionUsageDetailForCsv) GetBillingPeriodStartDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.BillingPeriodStartDate) {
		return nil, false
	}
	return o.BillingPeriodStartDate, true
}

// SetBillingPeriodStartDate gets a reference to the given time.Time and assigns it to the BillingPeriodStartDate field.
func (o *AzureConsumptionUsageDetailForCsv) SetBillingPeriodStartDate(v time.Time) {
	o.BillingPeriodStartDate = &v
}

// GetBillingPeriodEndDate returns the BillingPeriodEndDate field value if set, zero value otherwise.
func (o *AzureConsumptionUsageDetailForCsv) GetBillingPeriodEndDate() time.Time {
	if o == nil || IsNil(o.BillingPeriodEndDate) {
		var ret time.Time
		return ret
	}
	return *o.BillingPeriodEndDate
}

// GetBillingPeriodEndDateOk returns a tuple with the BillingPeriodEndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureConsumptionUsageDetailForCsv) GetBillingPeriodEndDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.BillingPeriodEndDate) {
		return nil, false
	}
	return o.BillingPeriodEndDate, true
}

// SetBillingPeriodEndDate gets a reference to the given time.Time and assigns it to the BillingPeriodEndDate field.
func (o *AzureConsumptionUsageDetailForCsv) SetBillingPeriodEndDate(v time.Time) {
	o.BillingPeriodEndDate = &v
}

// GetMeterId returns the MeterId field value if set, zero value otherwise.
func (o *AzureConsumptionUsageDetailForCsv) GetMeterId() string {
	if o == nil || IsNil(o.MeterId) {
		var ret string
		return ret
	}
	return *o.MeterId
}

// GetMeterIdOk returns a tuple with the MeterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureConsumptionUsageDetailForCsv) GetMeterIdOk() (*string, bool) {
	if o == nil || IsNil(o.MeterId) {
		return nil, false
	}
	return o.MeterId, true
}

// SetMeterId gets a reference to the given string and assigns it to the MeterId field.
func (o *AzureConsumptionUsageDetailForCsv) SetMeterId(v string) {
	o.MeterId = &v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *AzureConsumptionUsageDetailForCsv) GetQuantity() float64 {
	if o == nil || IsNil(o.Quantity) {
		var ret float64
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureConsumptionUsageDetailForCsv) GetQuantityOk() (*float64, bool) {
	if o == nil || IsNil(o.Quantity) {
		return nil, false
	}
	return o.Quantity, true
}

// SetQuantity gets a reference to the given float64 and assigns it to the Quantity field.
func (o *AzureConsumptionUsageDetailForCsv) SetQuantity(v float64) {
	o.Quantity = &v
}

// GetUnitPrice returns the UnitPrice field value if set, zero value otherwise.
func (o *AzureConsumptionUsageDetailForCsv) GetUnitPrice() float64 {
	if o == nil || IsNil(o.UnitPrice) {
		var ret float64
		return ret
	}
	return *o.UnitPrice
}

// GetUnitPriceOk returns a tuple with the UnitPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureConsumptionUsageDetailForCsv) GetUnitPriceOk() (*float64, bool) {
	if o == nil || IsNil(o.UnitPrice) {
		return nil, false
	}
	return o.UnitPrice, true
}

// SetUnitPrice gets a reference to the given float64 and assigns it to the UnitPrice field.
func (o *AzureConsumptionUsageDetailForCsv) SetUnitPrice(v float64) {
	o.UnitPrice = &v
}

// GetBillingCurrency returns the BillingCurrency field value if set, zero value otherwise.
func (o *AzureConsumptionUsageDetailForCsv) GetBillingCurrency() string {
	if o == nil || IsNil(o.BillingCurrency) {
		var ret string
		return ret
	}
	return *o.BillingCurrency
}

// GetBillingCurrencyOk returns a tuple with the BillingCurrency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureConsumptionUsageDetailForCsv) GetBillingCurrencyOk() (*string, bool) {
	if o == nil || IsNil(o.BillingCurrency) {
		return nil, false
	}
	return o.BillingCurrency, true
}

// SetBillingCurrency gets a reference to the given string and assigns it to the BillingCurrency field.
func (o *AzureConsumptionUsageDetailForCsv) SetBillingCurrency(v string) {
	o.BillingCurrency = &v
}

// GetMeterDetails returns the MeterDetails field value if set, zero value otherwise.
func (o *AzureConsumptionUsageDetailForCsv) GetMeterDetails() AzureConsumptionMeterDetails {
	if o == nil || IsNil(o.MeterDetails) {
		var ret AzureConsumptionMeterDetails
		return ret
	}
	return *o.MeterDetails
}

// GetMeterDetailsOk returns a tuple with the MeterDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureConsumptionUsageDetailForCsv) GetMeterDetailsOk() (*AzureConsumptionMeterDetails, bool) {
	if o == nil || IsNil(o.MeterDetails) {
		return nil, false
	}
	return o.MeterDetails, true
}

// SetMeterDetails gets a reference to the given AzureConsumptionMeterDetails and assigns it to the MeterDetails field.
func (o *AzureConsumptionUsageDetailForCsv) SetMeterDetails(v AzureConsumptionMeterDetails) {
	o.MeterDetails = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *AzureConsumptionUsageDetailForCsv) GetTags() string {
	if o == nil || IsNil(o.Tags) {
		var ret string
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureConsumptionUsageDetailForCsv) GetTagsOk() (*string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// SetTags gets a reference to the given string and assigns it to the Tags field.
func (o *AzureConsumptionUsageDetailForCsv) SetTags(v string) {
	o.Tags = &v
}

func (o AzureConsumptionUsageDetailForCsv) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AzureConsumptionUsageDetailForCsv) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CatalogId) {
		toSerialize["catalogId"] = o.CatalogId
	}
	if !IsNil(o.SubscriptionId) {
		toSerialize["subscriptionId"] = o.SubscriptionId
	}
	if !IsNil(o.Cost) {
		toSerialize["cost"] = o.Cost
	}
	if !IsNil(o.ResourceId) {
		toSerialize["resourceId"] = o.ResourceId
	}
	if !IsNil(o.ResourceGroup) {
		toSerialize["resourceGroup"] = o.ResourceGroup
	}
	if !IsNil(o.ResourceLocation) {
		toSerialize["resourceLocation"] = o.ResourceLocation
	}
	if !IsNil(o.BillingPeriodStartDate) {
		toSerialize["billingPeriodStartDate"] = o.BillingPeriodStartDate
	}
	if !IsNil(o.BillingPeriodEndDate) {
		toSerialize["billingPeriodEndDate"] = o.BillingPeriodEndDate
	}
	if !IsNil(o.MeterId) {
		toSerialize["meterId"] = o.MeterId
	}
	if !IsNil(o.Quantity) {
		toSerialize["quantity"] = o.Quantity
	}
	if !IsNil(o.UnitPrice) {
		toSerialize["unitPrice"] = o.UnitPrice
	}
	if !IsNil(o.BillingCurrency) {
		toSerialize["billingCurrency"] = o.BillingCurrency
	}
	if !IsNil(o.MeterDetails) {
		toSerialize["meterDetails"] = o.MeterDetails
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	return toSerialize, nil
}

type NullableAzureConsumptionUsageDetailForCsv struct {
	value *AzureConsumptionUsageDetailForCsv
	isSet bool
}

func (v NullableAzureConsumptionUsageDetailForCsv) Get() *AzureConsumptionUsageDetailForCsv {
	return v.value
}

func (v *NullableAzureConsumptionUsageDetailForCsv) Set(val *AzureConsumptionUsageDetailForCsv) {
	v.value = val
	v.isSet = true
}

func (v NullableAzureConsumptionUsageDetailForCsv) IsSet() bool {
	return v.isSet
}

func (v *NullableAzureConsumptionUsageDetailForCsv) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAzureConsumptionUsageDetailForCsv(val *AzureConsumptionUsageDetailForCsv) *NullableAzureConsumptionUsageDetailForCsv {
	return &NullableAzureConsumptionUsageDetailForCsv{value: val, isSet: true}
}

func (v NullableAzureConsumptionUsageDetailForCsv) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAzureConsumptionUsageDetailForCsv) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
