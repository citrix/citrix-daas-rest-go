/*
Citrix Virtual App & Desktop Catalog Service 148.0.26750.34636

Catalog Service

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickdeploy

import (
	"encoding/json"
	"fmt"
)

// DirectoryState State of the directory
type DirectoryState string

// List of DirectoryState
const (
	DIRECTORYSTATE_PRE_DEPLOYMENT DirectoryState = "PreDeployment"
	DIRECTORYSTATE_PENDING        DirectoryState = "Pending"
	DIRECTORYSTATE_READY          DirectoryState = "Ready"
	DIRECTORYSTATE_PROVISIONING   DirectoryState = "Provisioning"
	DIRECTORYSTATE_FAILED         DirectoryState = "Failed"
	DIRECTORYSTATE_DELETING       DirectoryState = "Deleting"
	DIRECTORYSTATE_ASSIGNING      DirectoryState = "Assigning"
)

// All allowed values of DirectoryState enum
var AllowedDirectoryStateEnumValues = []DirectoryState{
	"PreDeployment",
	"Pending",
	"Ready",
	"Provisioning",
	"Failed",
	"Deleting",
	"Assigning",
}

func (v *DirectoryState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	*v = DirectoryState(value)
	return nil
}

// NewDirectoryStateFromValue returns a pointer to a valid DirectoryState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDirectoryStateFromValue(v string) (*DirectoryState, error) {
	ev := DirectoryState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DirectoryState: valid values are %v", v, AllowedDirectoryStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DirectoryState) IsValid() bool {
	for _, existing := range AllowedDirectoryStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DirectoryState value
func (v DirectoryState) Ptr() *DirectoryState {
	return &v
}

type NullableDirectoryState struct {
	value *DirectoryState
	isSet bool
}

func (v NullableDirectoryState) Get() *DirectoryState {
	return v.value
}

func (v *NullableDirectoryState) Set(val *DirectoryState) {
	v.value = val
	v.isSet = true
}

func (v NullableDirectoryState) IsSet() bool {
	return v.isSet
}

func (v *NullableDirectoryState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDirectoryState(val *DirectoryState) *NullableDirectoryState {
	return &NullableDirectoryState{value: val, isSet: true}
}

func (v NullableDirectoryState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDirectoryState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
