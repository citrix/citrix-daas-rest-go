/*
Citrix Virtual App & Desktop Catalog Service 148.0.26750.34636

Catalog Service

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickdeploy

import (
	"encoding/json"
	"fmt"
)

// CatalogJobState the model 'CatalogJobState'
type CatalogJobState string

// List of CatalogJobState
const (
	CATALOGJOBSTATE_INACTIVE       CatalogJobState = "Inactive"
	CATALOGJOBSTATE_PENDING        CatalogJobState = "Pending"
	CATALOGJOBSTATE_RUNNING        CatalogJobState = "Running"
	CATALOGJOBSTATE_FAILED         CatalogJobState = "Failed"
	CATALOGJOBSTATE_ACTIVE         CatalogJobState = "Active"
	CATALOGJOBSTATE_DELETING       CatalogJobState = "Deleting"
	CATALOGJOBSTATE_DELETED        CatalogJobState = "Deleted"
	CATALOGJOBSTATE_DELETING_VDA   CatalogJobState = "DeletingVda"
	CATALOGJOBSTATE_ACTIVE_WARNING CatalogJobState = "ActiveWarning"
)

// All allowed values of CatalogJobState enum
var AllowedCatalogJobStateEnumValues = []CatalogJobState{
	"Inactive",
	"Pending",
	"Running",
	"Failed",
	"Active",
	"Deleting",
	"Deleted",
	"DeletingVda",
	"ActiveWarning",
}

func (v *CatalogJobState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	*v = CatalogJobState(value)
	return nil
}

// NewCatalogJobStateFromValue returns a pointer to a valid CatalogJobState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCatalogJobStateFromValue(v string) (*CatalogJobState, error) {
	ev := CatalogJobState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CatalogJobState: valid values are %v", v, AllowedCatalogJobStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CatalogJobState) IsValid() bool {
	for _, existing := range AllowedCatalogJobStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CatalogJobState value
func (v CatalogJobState) Ptr() *CatalogJobState {
	return &v
}

type NullableCatalogJobState struct {
	value *CatalogJobState
	isSet bool
}

func (v NullableCatalogJobState) Get() *CatalogJobState {
	return v.value
}

func (v *NullableCatalogJobState) Set(val *CatalogJobState) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogJobState) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogJobState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogJobState(val *CatalogJobState) *NullableCatalogJobState {
	return &NullableCatalogJobState{value: val, isSet: true}
}

func (v NullableCatalogJobState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogJobState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
