/*
Citrix Virtual App & Desktop Catalog Service 148.0.26750.34636

Catalog Service

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickdeploy

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// AzureSubscriptionsCMDService AzureSubscriptionsCMD service
type AzureSubscriptionsCMDService service

type ApiGetSubscriptionsRequest struct {
	ctx                    context.Context
	ApiService             *AzureSubscriptionsCMDService
	customerId             string
	siteId                 string
	citrixTransactionId    *string
	xAZUREACCESSTOKEN      *string
	xAZUREGRAPHACCESSTOKEN *string
	xAZURETENANTID         *string
	xAZUREAPPCLIENTID      *string
	xAZUREAPPCLIENTSECRET  *string
}

// The Transaction Id.
func (r ApiGetSubscriptionsRequest) CitrixTransactionId(citrixTransactionId string) ApiGetSubscriptionsRequest {
	r.citrixTransactionId = &citrixTransactionId
	return r
}

// Azure Access Token.
func (r ApiGetSubscriptionsRequest) XAZUREACCESSTOKEN(xAZUREACCESSTOKEN string) ApiGetSubscriptionsRequest {
	r.xAZUREACCESSTOKEN = &xAZUREACCESSTOKEN
	return r
}

// Azure Graph Access Token.
func (r ApiGetSubscriptionsRequest) XAZUREGRAPHACCESSTOKEN(xAZUREGRAPHACCESSTOKEN string) ApiGetSubscriptionsRequest {
	r.xAZUREGRAPHACCESSTOKEN = &xAZUREGRAPHACCESSTOKEN
	return r
}

// Azure Tenant Id.
func (r ApiGetSubscriptionsRequest) XAZURETENANTID(xAZURETENANTID string) ApiGetSubscriptionsRequest {
	r.xAZURETENANTID = &xAZURETENANTID
	return r
}

// Azure Application Key.
func (r ApiGetSubscriptionsRequest) XAZUREAPPCLIENTID(xAZUREAPPCLIENTID string) ApiGetSubscriptionsRequest {
	r.xAZUREAPPCLIENTID = &xAZUREAPPCLIENTID
	return r
}

// Azure Application Secret.
func (r ApiGetSubscriptionsRequest) XAZUREAPPCLIENTSECRET(xAZUREAPPCLIENTSECRET string) ApiGetSubscriptionsRequest {
	r.xAZUREAPPCLIENTSECRET = &xAZUREAPPCLIENTSECRET
	return r
}

func (r ApiGetSubscriptionsRequest) Execute() (*AzureSubscriptionsModel, *http.Response, error) {
	return r.ApiService.GetSubscriptionsExecute(r)
}

/*
GetSubscriptions Returns the subscriptions that we have a known association with

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param customerId Specific customer id
	@param siteId
	@return ApiGetSubscriptionsRequest
*/
func (a *AzureSubscriptionsCMDService) GetSubscriptions(ctx context.Context, customerId string, siteId string) ApiGetSubscriptionsRequest {
	return ApiGetSubscriptionsRequest{
		ApiService: a,
		ctx:        ctx,
		customerId: customerId,
		siteId:     siteId,
	}
}

// Execute executes the request
//
//	@return AzureSubscriptionsModel
func (a *AzureSubscriptionsCMDService) GetSubscriptionsExecute(r ApiGetSubscriptionsRequest) (*AzureSubscriptionsModel, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AzureSubscriptionsModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AzureSubscriptionsCMDService.GetSubscriptions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{customerId}/{siteId}/subscriptions"
	localVarPath = strings.Replace(localVarPath, "{"+"customerId"+"}", url.PathEscape(parameterValueToString(r.customerId, "customerId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"siteId"+"}", url.PathEscape(parameterValueToString(r.siteId, "siteId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.citrixTransactionId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-TransactionId", r.citrixTransactionId, "")
	}
	if r.xAZUREACCESSTOKEN != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-AZURE-ACCESS-TOKEN", r.xAZUREACCESSTOKEN, "")
	}
	if r.xAZUREGRAPHACCESSTOKEN != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-AZURE-GRAPH-ACCESS-TOKEN", r.xAZUREGRAPHACCESSTOKEN, "")
	}
	if r.xAZURETENANTID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-AZURE-TENANT-ID", r.xAZURETENANTID, "")
	}
	if r.xAZUREAPPCLIENTID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-AZURE-APP-CLIENT-ID", r.xAZUREAPPCLIENTID, "")
	}
	if r.xAZUREAPPCLIENTSECRET != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-AZURE-APP-CLIENT-SECRET", r.xAZUREAPPCLIENTSECRET, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CWSAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
