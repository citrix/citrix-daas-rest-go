/*
Citrix Virtual App & Desktop Catalog Service 148.0.26750.34636

Catalog Service

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickdeploy

import (
	"encoding/json"
)

// checks if the SitesOverview type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SitesOverview{}

// SitesOverview struct for SitesOverview
type SitesOverview struct {
	// The list of virtual sites for the customer
	Items []SiteModel `json:"items"`
	// Alias of Items property for backward compatibility
	Sites []SiteModel `json:"sites,omitempty"`
}

// NewSitesOverviewWithDefaults instantiates a new SitesOverview object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSitesOverviewWithDefaults() *SitesOverview {
	this := SitesOverview{}
	return &this
}

// GetItems returns the Items field value
func (o *SitesOverview) GetItems() []SiteModel {
	if o == nil {
		var ret []SiteModel
		return ret
	}

	return o.Items
}

// GetItemsOk returns a tuple with the Items field value
// and a boolean to check if the value has been set.
func (o *SitesOverview) GetItemsOk() ([]SiteModel, bool) {
	if o == nil {
		return nil, false
	}
	return o.Items, true
}

// SetItems sets field value
func (o *SitesOverview) SetItems(v []SiteModel) {
	o.Items = v
}

// GetSites returns the Sites field value if set, zero value otherwise.
func (o *SitesOverview) GetSites() []SiteModel {
	if o == nil || IsNil(o.Sites) {
		var ret []SiteModel
		return ret
	}
	return o.Sites
}

// GetSitesOk returns a tuple with the Sites field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SitesOverview) GetSitesOk() ([]SiteModel, bool) {
	if o == nil || IsNil(o.Sites) {
		return nil, false
	}
	return o.Sites, true
}

// SetSites gets a reference to the given []SiteModel and assigns it to the Sites field.
func (o *SitesOverview) SetSites(v []SiteModel) {
	o.Sites = v
}

func (o SitesOverview) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SitesOverview) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["items"] = o.Items
	if !IsNil(o.Sites) {
		toSerialize["sites"] = o.Sites
	}
	return toSerialize, nil
}

type NullableSitesOverview struct {
	value *SitesOverview
	isSet bool
}

func (v NullableSitesOverview) Get() *SitesOverview {
	return v.value
}

func (v *NullableSitesOverview) Set(val *SitesOverview) {
	v.value = val
	v.isSet = true
}

func (v NullableSitesOverview) IsSet() bool {
	return v.isSet
}

func (v *NullableSitesOverview) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSitesOverview(val *SitesOverview) *NullableSitesOverview {
	return &NullableSitesOverview{value: val, isSet: true}
}

func (v NullableSitesOverview) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSitesOverview) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
