/*
Citrix Virtual App & Desktop Catalog Service 148.0.26750.34636

Catalog Service

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickdeploy

import (
	"encoding/json"
	"fmt"
)

// ConnectionLogConnectionFailureReason the model 'ConnectionLogConnectionFailureReason'
type ConnectionLogConnectionFailureReason string

// List of ConnectionLogConnectionFailureReason
const (
	CONNECTIONLOGCONNECTIONFAILUREREASON_NONE                  ConnectionLogConnectionFailureReason = "None"
	CONNECTIONLOGCONNECTIONFAILUREREASON_SESSION_PREPARATION   ConnectionLogConnectionFailureReason = "SessionPreparation"
	CONNECTIONLOGCONNECTIONFAILUREREASON_REGISTRATION_TIMEOUT  ConnectionLogConnectionFailureReason = "RegistrationTimeout"
	CONNECTIONLOGCONNECTIONFAILUREREASON_CONNECTION_TIMEOUT    ConnectionLogConnectionFailureReason = "ConnectionTimeout"
	CONNECTIONLOGCONNECTIONFAILUREREASON_LICENSING             ConnectionLogConnectionFailureReason = "Licensing"
	CONNECTIONLOGCONNECTIONFAILUREREASON_TICKETING             ConnectionLogConnectionFailureReason = "Ticketing"
	CONNECTIONLOGCONNECTIONFAILUREREASON_SESSION_LIMIT_REACHED ConnectionLogConnectionFailureReason = "SessionLimitReached"
	CONNECTIONLOGCONNECTIONFAILUREREASON_OTHER                 ConnectionLogConnectionFailureReason = "Other"
)

// All allowed values of ConnectionLogConnectionFailureReason enum
var AllowedConnectionLogConnectionFailureReasonEnumValues = []ConnectionLogConnectionFailureReason{
	"None",
	"SessionPreparation",
	"RegistrationTimeout",
	"ConnectionTimeout",
	"Licensing",
	"Ticketing",
	"SessionLimitReached",
	"Other",
}

func (v *ConnectionLogConnectionFailureReason) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	*v = ConnectionLogConnectionFailureReason(value)
	return nil
}

// NewConnectionLogConnectionFailureReasonFromValue returns a pointer to a valid ConnectionLogConnectionFailureReason
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewConnectionLogConnectionFailureReasonFromValue(v string) (*ConnectionLogConnectionFailureReason, error) {
	ev := ConnectionLogConnectionFailureReason(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ConnectionLogConnectionFailureReason: valid values are %v", v, AllowedConnectionLogConnectionFailureReasonEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ConnectionLogConnectionFailureReason) IsValid() bool {
	for _, existing := range AllowedConnectionLogConnectionFailureReasonEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ConnectionLogConnectionFailureReason value
func (v ConnectionLogConnectionFailureReason) Ptr() *ConnectionLogConnectionFailureReason {
	return &v
}

type NullableConnectionLogConnectionFailureReason struct {
	value *ConnectionLogConnectionFailureReason
	isSet bool
}

func (v NullableConnectionLogConnectionFailureReason) Get() *ConnectionLogConnectionFailureReason {
	return v.value
}

func (v *NullableConnectionLogConnectionFailureReason) Set(val *ConnectionLogConnectionFailureReason) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectionLogConnectionFailureReason) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectionLogConnectionFailureReason) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectionLogConnectionFailureReason(val *ConnectionLogConnectionFailureReason) *NullableConnectionLogConnectionFailureReason {
	return &NullableConnectionLogConnectionFailureReason{value: val, isSet: true}
}

func (v NullableConnectionLogConnectionFailureReason) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectionLogConnectionFailureReason) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
