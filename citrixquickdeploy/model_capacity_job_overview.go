/*
Citrix Virtual App & Desktop Catalog Service 147.0.26651.57932

Catalog Service

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickdeploy

import (
	"encoding/json"
)

// checks if the CapacityJobOverview type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CapacityJobOverview{}

// CapacityJobOverview struct for CapacityJobOverview
type CapacityJobOverview struct {
	// Current state of the Capacity job
	State *CatalogJobState `json:"state,omitempty"`
	// Current sub state of the Capacity job
	SubState *CatalogJobSubState `json:"subState,omitempty"`
	// Status message related to the job
	Status *string `json:"status,omitempty"`
	// Error that occured in job processing
	Error *string `json:"error,omitempty"`
	// Transaction Id for the CapacityUpdate
	TransactionId *string `json:"transactionId,omitempty"`
}

// NewCapacityJobOverviewWithDefaults instantiates a new CapacityJobOverview object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCapacityJobOverviewWithDefaults() *CapacityJobOverview {
	this := CapacityJobOverview{}
	return &this
}

// GetState returns the State field value if set, zero value otherwise.
func (o *CapacityJobOverview) GetState() CatalogJobState {
	if o == nil || IsNil(o.State) {
		var ret CatalogJobState
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapacityJobOverview) GetStateOk() (*CatalogJobState, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// SetState gets a reference to the given CatalogJobState and assigns it to the State field.
func (o *CapacityJobOverview) SetState(v CatalogJobState) {
	o.State = &v
}

// GetSubState returns the SubState field value if set, zero value otherwise.
func (o *CapacityJobOverview) GetSubState() CatalogJobSubState {
	if o == nil || IsNil(o.SubState) {
		var ret CatalogJobSubState
		return ret
	}
	return *o.SubState
}

// GetSubStateOk returns a tuple with the SubState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapacityJobOverview) GetSubStateOk() (*CatalogJobSubState, bool) {
	if o == nil || IsNil(o.SubState) {
		return nil, false
	}
	return o.SubState, true
}

// SetSubState gets a reference to the given CatalogJobSubState and assigns it to the SubState field.
func (o *CapacityJobOverview) SetSubState(v CatalogJobSubState) {
	o.SubState = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *CapacityJobOverview) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapacityJobOverview) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *CapacityJobOverview) SetStatus(v string) {
	o.Status = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *CapacityJobOverview) GetError() string {
	if o == nil || IsNil(o.Error) {
		var ret string
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapacityJobOverview) GetErrorOk() (*string, bool) {
	if o == nil || IsNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// SetError gets a reference to the given string and assigns it to the Error field.
func (o *CapacityJobOverview) SetError(v string) {
	o.Error = &v
}

// GetTransactionId returns the TransactionId field value if set, zero value otherwise.
func (o *CapacityJobOverview) GetTransactionId() string {
	if o == nil || IsNil(o.TransactionId) {
		var ret string
		return ret
	}
	return *o.TransactionId
}

// GetTransactionIdOk returns a tuple with the TransactionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapacityJobOverview) GetTransactionIdOk() (*string, bool) {
	if o == nil || IsNil(o.TransactionId) {
		return nil, false
	}
	return o.TransactionId, true
}

// SetTransactionId gets a reference to the given string and assigns it to the TransactionId field.
func (o *CapacityJobOverview) SetTransactionId(v string) {
	o.TransactionId = &v
}

func (o CapacityJobOverview) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CapacityJobOverview) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.SubState) {
		toSerialize["subState"] = o.SubState
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	if !IsNil(o.TransactionId) {
		toSerialize["transactionId"] = o.TransactionId
	}
	return toSerialize, nil
}

type NullableCapacityJobOverview struct {
	value *CapacityJobOverview
	isSet bool
}

func (v NullableCapacityJobOverview) Get() *CapacityJobOverview {
	return v.value
}

func (v *NullableCapacityJobOverview) Set(val *CapacityJobOverview) {
	v.value = val
	v.isSet = true
}

func (v NullableCapacityJobOverview) IsSet() bool {
	return v.isSet
}

func (v *NullableCapacityJobOverview) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCapacityJobOverview(val *CapacityJobOverview) *NullableCapacityJobOverview {
	return &NullableCapacityJobOverview{value: val, isSet: true}
}

func (v NullableCapacityJobOverview) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCapacityJobOverview) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
