/*
Citrix Virtual App & Desktop Catalog Service 148.0.26750.34636

Catalog Service

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickdeploy

import (
	"encoding/json"
)

// checks if the AzureVMSize type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AzureVMSize{}

// AzureVMSize struct for AzureVMSize
type AzureVMSize struct {
	// Instance type ID used when provisioning a VM
	Id          *string `json:"id,omitempty"`
	DisplayName *string `json:"displayName,omitempty"`
	// Name of the VM SKU to display to the user
	Sku       *string `json:"sku,omitempty"`
	IsBasicVM *bool   `json:"isBasicVM,omitempty"`
	// True if a virtual machine size supports premium storage. False otherwise.
	SupportsPremiumStorage *bool `json:"supportsPremiumStorage,omitempty"`
	// True if a virtual machine size supports hibernation. False otherwise.
	SupportsHibernation *bool `json:"supportsHibernation,omitempty"`
	// the Number of cores supported by a VM size.
	NumberOfCores *int32 `json:"numberOfCores,omitempty"`
	// the OS disk size allowed by a VM size.
	OsDiskSizeInMB *int32 `json:"osDiskSizeInMB,omitempty"`
	// the Resource disk size allowed by a VM size.
	ResourceDiskSizeInMB *int32 `json:"resourceDiskSizeInMB,omitempty"`
	// the Memory size supported by a VM size.
	MemoryInMB *float64 `json:"memoryInMB,omitempty"`
	// the Maximum number of data disks allowed by a VM size.
	MaxDataDiskCount *int32 `json:"maxDataDiskCount,omitempty"`
	// Is compatible with HyperVGeneration V1
	HyperVGen1 *bool `json:"hyperVGen1,omitempty"`
	// Is compatible with HyperVGeneration V2
	HyperVGen2 *bool `json:"hyperVGen2,omitempty"`
	// Specifies the number of GPUs in the VM SKU
	NumberofGPUs *int32 `json:"numberofGPUs,omitempty"`
	// The Usage Type that this VM size's Quota is associated with
	UsageType *string `json:"usageType,omitempty"`
}

// NewAzureVMSizeWithDefaults instantiates a new AzureVMSize object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAzureVMSizeWithDefaults() *AzureVMSize {
	this := AzureVMSize{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AzureVMSize) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureVMSize) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *AzureVMSize) SetId(v string) {
	o.Id = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *AzureVMSize) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureVMSize) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *AzureVMSize) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetSku returns the Sku field value if set, zero value otherwise.
func (o *AzureVMSize) GetSku() string {
	if o == nil || IsNil(o.Sku) {
		var ret string
		return ret
	}
	return *o.Sku
}

// GetSkuOk returns a tuple with the Sku field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureVMSize) GetSkuOk() (*string, bool) {
	if o == nil || IsNil(o.Sku) {
		return nil, false
	}
	return o.Sku, true
}

// SetSku gets a reference to the given string and assigns it to the Sku field.
func (o *AzureVMSize) SetSku(v string) {
	o.Sku = &v
}

// GetIsBasicVM returns the IsBasicVM field value if set, zero value otherwise.
func (o *AzureVMSize) GetIsBasicVM() bool {
	if o == nil || IsNil(o.IsBasicVM) {
		var ret bool
		return ret
	}
	return *o.IsBasicVM
}

// GetIsBasicVMOk returns a tuple with the IsBasicVM field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureVMSize) GetIsBasicVMOk() (*bool, bool) {
	if o == nil || IsNil(o.IsBasicVM) {
		return nil, false
	}
	return o.IsBasicVM, true
}

// SetIsBasicVM gets a reference to the given bool and assigns it to the IsBasicVM field.
func (o *AzureVMSize) SetIsBasicVM(v bool) {
	o.IsBasicVM = &v
}

// GetSupportsPremiumStorage returns the SupportsPremiumStorage field value if set, zero value otherwise.
func (o *AzureVMSize) GetSupportsPremiumStorage() bool {
	if o == nil || IsNil(o.SupportsPremiumStorage) {
		var ret bool
		return ret
	}
	return *o.SupportsPremiumStorage
}

// GetSupportsPremiumStorageOk returns a tuple with the SupportsPremiumStorage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureVMSize) GetSupportsPremiumStorageOk() (*bool, bool) {
	if o == nil || IsNil(o.SupportsPremiumStorage) {
		return nil, false
	}
	return o.SupportsPremiumStorage, true
}

// SetSupportsPremiumStorage gets a reference to the given bool and assigns it to the SupportsPremiumStorage field.
func (o *AzureVMSize) SetSupportsPremiumStorage(v bool) {
	o.SupportsPremiumStorage = &v
}

// GetSupportsHibernation returns the SupportsHibernation field value if set, zero value otherwise.
func (o *AzureVMSize) GetSupportsHibernation() bool {
	if o == nil || IsNil(o.SupportsHibernation) {
		var ret bool
		return ret
	}
	return *o.SupportsHibernation
}

// GetSupportsHibernationOk returns a tuple with the SupportsHibernation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureVMSize) GetSupportsHibernationOk() (*bool, bool) {
	if o == nil || IsNil(o.SupportsHibernation) {
		return nil, false
	}
	return o.SupportsHibernation, true
}

// SetSupportsHibernation gets a reference to the given bool and assigns it to the SupportsHibernation field.
func (o *AzureVMSize) SetSupportsHibernation(v bool) {
	o.SupportsHibernation = &v
}

// GetNumberOfCores returns the NumberOfCores field value if set, zero value otherwise.
func (o *AzureVMSize) GetNumberOfCores() int32 {
	if o == nil || IsNil(o.NumberOfCores) {
		var ret int32
		return ret
	}
	return *o.NumberOfCores
}

// GetNumberOfCoresOk returns a tuple with the NumberOfCores field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureVMSize) GetNumberOfCoresOk() (*int32, bool) {
	if o == nil || IsNil(o.NumberOfCores) {
		return nil, false
	}
	return o.NumberOfCores, true
}

// SetNumberOfCores gets a reference to the given int32 and assigns it to the NumberOfCores field.
func (o *AzureVMSize) SetNumberOfCores(v int32) {
	o.NumberOfCores = &v
}

// GetOsDiskSizeInMB returns the OsDiskSizeInMB field value if set, zero value otherwise.
func (o *AzureVMSize) GetOsDiskSizeInMB() int32 {
	if o == nil || IsNil(o.OsDiskSizeInMB) {
		var ret int32
		return ret
	}
	return *o.OsDiskSizeInMB
}

// GetOsDiskSizeInMBOk returns a tuple with the OsDiskSizeInMB field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureVMSize) GetOsDiskSizeInMBOk() (*int32, bool) {
	if o == nil || IsNil(o.OsDiskSizeInMB) {
		return nil, false
	}
	return o.OsDiskSizeInMB, true
}

// SetOsDiskSizeInMB gets a reference to the given int32 and assigns it to the OsDiskSizeInMB field.
func (o *AzureVMSize) SetOsDiskSizeInMB(v int32) {
	o.OsDiskSizeInMB = &v
}

// GetResourceDiskSizeInMB returns the ResourceDiskSizeInMB field value if set, zero value otherwise.
func (o *AzureVMSize) GetResourceDiskSizeInMB() int32 {
	if o == nil || IsNil(o.ResourceDiskSizeInMB) {
		var ret int32
		return ret
	}
	return *o.ResourceDiskSizeInMB
}

// GetResourceDiskSizeInMBOk returns a tuple with the ResourceDiskSizeInMB field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureVMSize) GetResourceDiskSizeInMBOk() (*int32, bool) {
	if o == nil || IsNil(o.ResourceDiskSizeInMB) {
		return nil, false
	}
	return o.ResourceDiskSizeInMB, true
}

// SetResourceDiskSizeInMB gets a reference to the given int32 and assigns it to the ResourceDiskSizeInMB field.
func (o *AzureVMSize) SetResourceDiskSizeInMB(v int32) {
	o.ResourceDiskSizeInMB = &v
}

// GetMemoryInMB returns the MemoryInMB field value if set, zero value otherwise.
func (o *AzureVMSize) GetMemoryInMB() float64 {
	if o == nil || IsNil(o.MemoryInMB) {
		var ret float64
		return ret
	}
	return *o.MemoryInMB
}

// GetMemoryInMBOk returns a tuple with the MemoryInMB field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureVMSize) GetMemoryInMBOk() (*float64, bool) {
	if o == nil || IsNil(o.MemoryInMB) {
		return nil, false
	}
	return o.MemoryInMB, true
}

// SetMemoryInMB gets a reference to the given float64 and assigns it to the MemoryInMB field.
func (o *AzureVMSize) SetMemoryInMB(v float64) {
	o.MemoryInMB = &v
}

// GetMaxDataDiskCount returns the MaxDataDiskCount field value if set, zero value otherwise.
func (o *AzureVMSize) GetMaxDataDiskCount() int32 {
	if o == nil || IsNil(o.MaxDataDiskCount) {
		var ret int32
		return ret
	}
	return *o.MaxDataDiskCount
}

// GetMaxDataDiskCountOk returns a tuple with the MaxDataDiskCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureVMSize) GetMaxDataDiskCountOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxDataDiskCount) {
		return nil, false
	}
	return o.MaxDataDiskCount, true
}

// SetMaxDataDiskCount gets a reference to the given int32 and assigns it to the MaxDataDiskCount field.
func (o *AzureVMSize) SetMaxDataDiskCount(v int32) {
	o.MaxDataDiskCount = &v
}

// GetHyperVGen1 returns the HyperVGen1 field value if set, zero value otherwise.
func (o *AzureVMSize) GetHyperVGen1() bool {
	if o == nil || IsNil(o.HyperVGen1) {
		var ret bool
		return ret
	}
	return *o.HyperVGen1
}

// GetHyperVGen1Ok returns a tuple with the HyperVGen1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureVMSize) GetHyperVGen1Ok() (*bool, bool) {
	if o == nil || IsNil(o.HyperVGen1) {
		return nil, false
	}
	return o.HyperVGen1, true
}

// SetHyperVGen1 gets a reference to the given bool and assigns it to the HyperVGen1 field.
func (o *AzureVMSize) SetHyperVGen1(v bool) {
	o.HyperVGen1 = &v
}

// GetHyperVGen2 returns the HyperVGen2 field value if set, zero value otherwise.
func (o *AzureVMSize) GetHyperVGen2() bool {
	if o == nil || IsNil(o.HyperVGen2) {
		var ret bool
		return ret
	}
	return *o.HyperVGen2
}

// GetHyperVGen2Ok returns a tuple with the HyperVGen2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureVMSize) GetHyperVGen2Ok() (*bool, bool) {
	if o == nil || IsNil(o.HyperVGen2) {
		return nil, false
	}
	return o.HyperVGen2, true
}

// SetHyperVGen2 gets a reference to the given bool and assigns it to the HyperVGen2 field.
func (o *AzureVMSize) SetHyperVGen2(v bool) {
	o.HyperVGen2 = &v
}

// GetNumberofGPUs returns the NumberofGPUs field value if set, zero value otherwise.
func (o *AzureVMSize) GetNumberofGPUs() int32 {
	if o == nil || IsNil(o.NumberofGPUs) {
		var ret int32
		return ret
	}
	return *o.NumberofGPUs
}

// GetNumberofGPUsOk returns a tuple with the NumberofGPUs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureVMSize) GetNumberofGPUsOk() (*int32, bool) {
	if o == nil || IsNil(o.NumberofGPUs) {
		return nil, false
	}
	return o.NumberofGPUs, true
}

// SetNumberofGPUs gets a reference to the given int32 and assigns it to the NumberofGPUs field.
func (o *AzureVMSize) SetNumberofGPUs(v int32) {
	o.NumberofGPUs = &v
}

// GetUsageType returns the UsageType field value if set, zero value otherwise.
func (o *AzureVMSize) GetUsageType() string {
	if o == nil || IsNil(o.UsageType) {
		var ret string
		return ret
	}
	return *o.UsageType
}

// GetUsageTypeOk returns a tuple with the UsageType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureVMSize) GetUsageTypeOk() (*string, bool) {
	if o == nil || IsNil(o.UsageType) {
		return nil, false
	}
	return o.UsageType, true
}

// SetUsageType gets a reference to the given string and assigns it to the UsageType field.
func (o *AzureVMSize) SetUsageType(v string) {
	o.UsageType = &v
}

func (o AzureVMSize) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AzureVMSize) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.Sku) {
		toSerialize["sku"] = o.Sku
	}
	if !IsNil(o.IsBasicVM) {
		toSerialize["isBasicVM"] = o.IsBasicVM
	}
	if !IsNil(o.SupportsPremiumStorage) {
		toSerialize["supportsPremiumStorage"] = o.SupportsPremiumStorage
	}
	if !IsNil(o.SupportsHibernation) {
		toSerialize["supportsHibernation"] = o.SupportsHibernation
	}
	if !IsNil(o.NumberOfCores) {
		toSerialize["numberOfCores"] = o.NumberOfCores
	}
	if !IsNil(o.OsDiskSizeInMB) {
		toSerialize["osDiskSizeInMB"] = o.OsDiskSizeInMB
	}
	if !IsNil(o.ResourceDiskSizeInMB) {
		toSerialize["resourceDiskSizeInMB"] = o.ResourceDiskSizeInMB
	}
	if !IsNil(o.MemoryInMB) {
		toSerialize["memoryInMB"] = o.MemoryInMB
	}
	if !IsNil(o.MaxDataDiskCount) {
		toSerialize["maxDataDiskCount"] = o.MaxDataDiskCount
	}
	if !IsNil(o.HyperVGen1) {
		toSerialize["hyperVGen1"] = o.HyperVGen1
	}
	if !IsNil(o.HyperVGen2) {
		toSerialize["hyperVGen2"] = o.HyperVGen2
	}
	if !IsNil(o.NumberofGPUs) {
		toSerialize["numberofGPUs"] = o.NumberofGPUs
	}
	if !IsNil(o.UsageType) {
		toSerialize["usageType"] = o.UsageType
	}
	return toSerialize, nil
}

type NullableAzureVMSize struct {
	value *AzureVMSize
	isSet bool
}

func (v NullableAzureVMSize) Get() *AzureVMSize {
	return v.value
}

func (v *NullableAzureVMSize) Set(val *AzureVMSize) {
	v.value = val
	v.isSet = true
}

func (v NullableAzureVMSize) IsSet() bool {
	return v.isSet
}

func (v *NullableAzureVMSize) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAzureVMSize(val *AzureVMSize) *NullableAzureVMSize {
	return &NullableAzureVMSize{value: val, isSet: true}
}

func (v NullableAzureVMSize) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAzureVMSize) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
