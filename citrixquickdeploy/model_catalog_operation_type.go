/*
Citrix Virtual App & Desktop Catalog Service 148.0.26750.34636

Catalog Service

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickdeploy

import (
	"encoding/json"
	"fmt"
)

// CatalogOperationType the model 'CatalogOperationType'
type CatalogOperationType string

// List of CatalogOperationType
const (
	CATALOGOPERATIONTYPE_SET_CATALOG_LIMITS                  CatalogOperationType = "SetCatalogLimits"
	CATALOGOPERATIONTYPE_SET_IMAGE_FAILED                    CatalogOperationType = "SetImageFailed"
	CATALOGOPERATIONTYPE_SET_CATALOG_FAILED                  CatalogOperationType = "SetCatalogFailed"
	CATALOGOPERATIONTYPE_DELETE_CATALOG                      CatalogOperationType = "DeleteCatalog"
	CATALOGOPERATIONTYPE_DELETE_COMMISSION_DATA              CatalogOperationType = "DeleteCommissionData"
	CATALOGOPERATIONTYPE_ADD_CITRIX_MANAGED_SUBSCRIPTION     CatalogOperationType = "AddCitrixManagedSubscription"
	CATALOGOPERATIONTYPE_GRANT_CITRIX_MANAGED_SUBSCRIPTION   CatalogOperationType = "GrantCitrixManagedSubscription"
	CATALOGOPERATIONTYPE_REVOKE_CITRIX_MANAGED_SUBSCRIPTION  CatalogOperationType = "RevokeCitrixManagedSubscription"
	CATALOGOPERATIONTYPE_RENEW_CITRIX_MANAGED_SUBSCRIPTION   CatalogOperationType = "RenewCitrixManagedSubscription"
	CATALOGOPERATIONTYPE_SUSPEND_CITRIX_MANAGED_SUBSCRIPTION CatalogOperationType = "SuspendCitrixManagedSubscription"
	CATALOGOPERATIONTYPE_SET_CITRIX_MANAGED_VDA_LIMIT        CatalogOperationType = "SetCitrixManagedVdaLimit"
	CATALOGOPERATIONTYPE_SET_BYOA_VDA_LIMIT                  CatalogOperationType = "SetByoaVdaLimit"
	CATALOGOPERATIONTYPE_OPEN_VNET_PORT                      CatalogOperationType = "OpenVnetPort"
	CATALOGOPERATIONTYPE_CLEAN_UP_MANAGED_SUBSCRIPTION       CatalogOperationType = "CleanUpManagedSubscription"
)

// All allowed values of CatalogOperationType enum
var AllowedCatalogOperationTypeEnumValues = []CatalogOperationType{
	"SetCatalogLimits",
	"SetImageFailed",
	"SetCatalogFailed",
	"DeleteCatalog",
	"DeleteCommissionData",
	"AddCitrixManagedSubscription",
	"GrantCitrixManagedSubscription",
	"RevokeCitrixManagedSubscription",
	"RenewCitrixManagedSubscription",
	"SuspendCitrixManagedSubscription",
	"SetCitrixManagedVdaLimit",
	"SetByoaVdaLimit",
	"OpenVnetPort",
	"CleanUpManagedSubscription",
}

func (v *CatalogOperationType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	*v = CatalogOperationType(value)
	return nil
}

// NewCatalogOperationTypeFromValue returns a pointer to a valid CatalogOperationType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCatalogOperationTypeFromValue(v string) (*CatalogOperationType, error) {
	ev := CatalogOperationType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CatalogOperationType: valid values are %v", v, AllowedCatalogOperationTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CatalogOperationType) IsValid() bool {
	for _, existing := range AllowedCatalogOperationTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CatalogOperationType value
func (v CatalogOperationType) Ptr() *CatalogOperationType {
	return &v
}

type NullableCatalogOperationType struct {
	value *CatalogOperationType
	isSet bool
}

func (v NullableCatalogOperationType) Get() *CatalogOperationType {
	return v.value
}

func (v *NullableCatalogOperationType) Set(val *CatalogOperationType) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogOperationType) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogOperationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogOperationType(val *CatalogOperationType) *NullableCatalogOperationType {
	return &NullableCatalogOperationType{value: val, isSet: true}
}

func (v NullableCatalogOperationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogOperationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
