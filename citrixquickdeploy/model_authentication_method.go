/*
Citrix Virtual App & Desktop Catalog Service 147.0.26651.57932

Catalog Service

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickdeploy

import (
	"encoding/json"
	"fmt"
)

// AuthenticationMethod the model 'AuthenticationMethod'
type AuthenticationMethod string

// List of AuthenticationMethod
const (
	AUTHENTICATIONMETHOD_UNKNOWN         AuthenticationMethod = "Unknown"
	AUTHENTICATIONMETHOD_AZURE_AD        AuthenticationMethod = "AzureAD"
	AUTHENTICATIONMETHOD_AD              AuthenticationMethod = "AD"
	AUTHENTICATIONMETHOD_CITRIX_IDENTITY AuthenticationMethod = "CitrixIdentity"
)

// All allowed values of AuthenticationMethod enum
var AllowedAuthenticationMethodEnumValues = []AuthenticationMethod{
	"Unknown",
	"AzureAD",
	"AD",
	"CitrixIdentity",
}

func (v *AuthenticationMethod) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	*v = AuthenticationMethod(value)
	return nil
}

// NewAuthenticationMethodFromValue returns a pointer to a valid AuthenticationMethod
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAuthenticationMethodFromValue(v string) (*AuthenticationMethod, error) {
	ev := AuthenticationMethod(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AuthenticationMethod: valid values are %v", v, AllowedAuthenticationMethodEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AuthenticationMethod) IsValid() bool {
	for _, existing := range AllowedAuthenticationMethodEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AuthenticationMethod value
func (v AuthenticationMethod) Ptr() *AuthenticationMethod {
	return &v
}

type NullableAuthenticationMethod struct {
	value *AuthenticationMethod
	isSet bool
}

func (v NullableAuthenticationMethod) Get() *AuthenticationMethod {
	return v.value
}

func (v *NullableAuthenticationMethod) Set(val *AuthenticationMethod) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthenticationMethod) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthenticationMethod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthenticationMethod(val *AuthenticationMethod) *NullableAuthenticationMethod {
	return &NullableAuthenticationMethod{value: val, isSet: true}
}

func (v NullableAuthenticationMethod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthenticationMethod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
