/*
Citrix Virtual App & Desktop Catalog Service 148.0.26750.34636

Catalog Service

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickdeploy

import (
	"encoding/json"
	"fmt"
)

// CommissionState the model 'CommissionState'
type CommissionState string

// List of CommissionState
const (
	COMMISSIONSTATE_ACTIVE                   CommissionState = "Active"
	COMMISSIONSTATE_DECOMMISSION_IN_PROGRESS CommissionState = "DecommissionInProgress"
	COMMISSIONSTATE_DECOMMISSION_ERROR       CommissionState = "DecommissionError"
	COMMISSIONSTATE_DECOMMISSIONED           CommissionState = "Decommissioned"
	COMMISSIONSTATE_DELETE_IN_PROGRESS       CommissionState = "DeleteInProgress"
	COMMISSIONSTATE_DELETE_ERROR             CommissionState = "DeleteError"
	COMMISSIONSTATE_DELETED                  CommissionState = "Deleted"
	COMMISSIONSTATE_RECOMMISSION_IN_PROGRESS CommissionState = "RecommissionInProgress"
	COMMISSIONSTATE_RECOMMISSION_ERROR       CommissionState = "RecommissionError"
	COMMISSIONSTATE_NOT_ONBOARDED            CommissionState = "NotOnboarded"
	COMMISSIONSTATE_UNKNOWN                  CommissionState = "Unknown"
)

// All allowed values of CommissionState enum
var AllowedCommissionStateEnumValues = []CommissionState{
	"Active",
	"DecommissionInProgress",
	"DecommissionError",
	"Decommissioned",
	"DeleteInProgress",
	"DeleteError",
	"Deleted",
	"RecommissionInProgress",
	"RecommissionError",
	"NotOnboarded",
	"Unknown",
}

func (v *CommissionState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	*v = CommissionState(value)
	return nil
}

// NewCommissionStateFromValue returns a pointer to a valid CommissionState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCommissionStateFromValue(v string) (*CommissionState, error) {
	ev := CommissionState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CommissionState: valid values are %v", v, AllowedCommissionStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CommissionState) IsValid() bool {
	for _, existing := range AllowedCommissionStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CommissionState value
func (v CommissionState) Ptr() *CommissionState {
	return &v
}

type NullableCommissionState struct {
	value *CommissionState
	isSet bool
}

func (v NullableCommissionState) Get() *CommissionState {
	return v.value
}

func (v *NullableCommissionState) Set(val *CommissionState) {
	v.value = val
	v.isSet = true
}

func (v NullableCommissionState) IsSet() bool {
	return v.isSet
}

func (v *NullableCommissionState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommissionState(val *CommissionState) *NullableCommissionState {
	return &NullableCommissionState{value: val, isSet: true}
}

func (v NullableCommissionState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommissionState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
