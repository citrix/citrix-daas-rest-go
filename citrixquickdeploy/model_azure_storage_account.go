/*
Citrix Virtual App & Desktop Catalog Service 147.0.26651.57932

Catalog Service

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickdeploy

import (
	"encoding/json"
)

// checks if the AzureStorageAccount type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AzureStorageAccount{}

// AzureStorageAccount struct for AzureStorageAccount
type AzureStorageAccount struct {
	// Azure subscription the storage account is associated with
	SubscriptionId *string `json:"subscriptionId,omitempty"`
	// Name of the Resource Group the Storage Account is associated with
	ResourceGroup string `json:"resourceGroup"`
	// The location of the storage account
	Location string `json:"location"`
	// Name of the storage account
	Name string `json:"name"`
	// Indicates if the storage account is using premium storage
	IsPremiumStorage *bool   `json:"isPremiumStorage,omitempty"`
	AccountKey       *string `json:"accountKey,omitempty"`
}

// NewAzureStorageAccountWithDefaults instantiates a new AzureStorageAccount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAzureStorageAccountWithDefaults() *AzureStorageAccount {
	this := AzureStorageAccount{}
	return &this
}

// GetSubscriptionId returns the SubscriptionId field value if set, zero value otherwise.
func (o *AzureStorageAccount) GetSubscriptionId() string {
	if o == nil || IsNil(o.SubscriptionId) {
		var ret string
		return ret
	}
	return *o.SubscriptionId
}

// GetSubscriptionIdOk returns a tuple with the SubscriptionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureStorageAccount) GetSubscriptionIdOk() (*string, bool) {
	if o == nil || IsNil(o.SubscriptionId) {
		return nil, false
	}
	return o.SubscriptionId, true
}

// SetSubscriptionId gets a reference to the given string and assigns it to the SubscriptionId field.
func (o *AzureStorageAccount) SetSubscriptionId(v string) {
	o.SubscriptionId = &v
}

// GetResourceGroup returns the ResourceGroup field value
func (o *AzureStorageAccount) GetResourceGroup() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceGroup
}

// GetResourceGroupOk returns a tuple with the ResourceGroup field value
// and a boolean to check if the value has been set.
func (o *AzureStorageAccount) GetResourceGroupOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceGroup, true
}

// SetResourceGroup sets field value
func (o *AzureStorageAccount) SetResourceGroup(v string) {
	o.ResourceGroup = v
}

// GetLocation returns the Location field value
func (o *AzureStorageAccount) GetLocation() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Location
}

// GetLocationOk returns a tuple with the Location field value
// and a boolean to check if the value has been set.
func (o *AzureStorageAccount) GetLocationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Location, true
}

// SetLocation sets field value
func (o *AzureStorageAccount) SetLocation(v string) {
	o.Location = v
}

// GetName returns the Name field value
func (o *AzureStorageAccount) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AzureStorageAccount) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AzureStorageAccount) SetName(v string) {
	o.Name = v
}

// GetIsPremiumStorage returns the IsPremiumStorage field value if set, zero value otherwise.
func (o *AzureStorageAccount) GetIsPremiumStorage() bool {
	if o == nil || IsNil(o.IsPremiumStorage) {
		var ret bool
		return ret
	}
	return *o.IsPremiumStorage
}

// GetIsPremiumStorageOk returns a tuple with the IsPremiumStorage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureStorageAccount) GetIsPremiumStorageOk() (*bool, bool) {
	if o == nil || IsNil(o.IsPremiumStorage) {
		return nil, false
	}
	return o.IsPremiumStorage, true
}

// SetIsPremiumStorage gets a reference to the given bool and assigns it to the IsPremiumStorage field.
func (o *AzureStorageAccount) SetIsPremiumStorage(v bool) {
	o.IsPremiumStorage = &v
}

// GetAccountKey returns the AccountKey field value if set, zero value otherwise.
func (o *AzureStorageAccount) GetAccountKey() string {
	if o == nil || IsNil(o.AccountKey) {
		var ret string
		return ret
	}
	return *o.AccountKey
}

// GetAccountKeyOk returns a tuple with the AccountKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureStorageAccount) GetAccountKeyOk() (*string, bool) {
	if o == nil || IsNil(o.AccountKey) {
		return nil, false
	}
	return o.AccountKey, true
}

// SetAccountKey gets a reference to the given string and assigns it to the AccountKey field.
func (o *AzureStorageAccount) SetAccountKey(v string) {
	o.AccountKey = &v
}

func (o AzureStorageAccount) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AzureStorageAccount) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SubscriptionId) {
		toSerialize["subscriptionId"] = o.SubscriptionId
	}
	toSerialize["resourceGroup"] = o.ResourceGroup
	toSerialize["location"] = o.Location
	toSerialize["name"] = o.Name
	if !IsNil(o.IsPremiumStorage) {
		toSerialize["isPremiumStorage"] = o.IsPremiumStorage
	}
	if !IsNil(o.AccountKey) {
		toSerialize["accountKey"] = o.AccountKey
	}
	return toSerialize, nil
}

type NullableAzureStorageAccount struct {
	value *AzureStorageAccount
	isSet bool
}

func (v NullableAzureStorageAccount) Get() *AzureStorageAccount {
	return v.value
}

func (v *NullableAzureStorageAccount) Set(val *AzureStorageAccount) {
	v.value = val
	v.isSet = true
}

func (v NullableAzureStorageAccount) IsSet() bool {
	return v.isSet
}

func (v *NullableAzureStorageAccount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAzureStorageAccount(val *AzureStorageAccount) *NullableAzureStorageAccount {
	return &NullableAzureStorageAccount{value: val, isSet: true}
}

func (v NullableAzureStorageAccount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAzureStorageAccount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
