/*
Citrix Virtual App & Desktop Catalog Service 147.0.26651.57932

Catalog Service

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickdeploy

import (
	"encoding/json"
	"fmt"
)

// CatalogWarningType the model 'CatalogWarningType'
type CatalogWarningType string

// List of CatalogWarningType
const (
	CATALOGWARNINGTYPE_PENDING_TEMPLATE_IMAGE_INVALID       CatalogWarningType = "PendingTemplateImageInvalid"
	CATALOGWARNINGTYPE_USERS_REQUIRED                       CatalogWarningType = "UsersRequired"
	CATALOGWARNINGTYPE_APPS_REQUIRED                        CatalogWarningType = "AppsRequired"
	CATALOGWARNINGTYPE_CITRIX_IMAGE_DEPRECATED              CatalogWarningType = "CitrixImageDeprecated"
	CATALOGWARNINGTYPE_CAPACITY_UPDATE_FAILED               CatalogWarningType = "CapacityUpdateFailed"
	CATALOGWARNINGTYPE_ADD_MACHINES_FAILURE                 CatalogWarningType = "AddMachinesFailure"
	CATALOGWARNINGTYPE_IMAGE_ROLLBACK                       CatalogWarningType = "ImageRollback"
	CATALOGWARNINGTYPE_DELETE_MACHINE_FAILURE               CatalogWarningType = "DeleteMachineFailure"
	CATALOGWARNINGTYPE_UPDATE_CATALOG_HOSTING_UNIT_FAILURE  CatalogWarningType = "UpdateCatalogHostingUnitFailure"
	CATALOGWARNINGTYPE_REMOTE_PC_MACHINE_ASSIGNMENT_FAILURE CatalogWarningType = "RemotePcMachineAssignmentFailure"
	CATALOGWARNINGTYPE_REMOTE_PC_ENROLLMENT_SCOPE_FAILURE   CatalogWarningType = "RemotePcEnrollmentScopeFailure"
	CATALOGWARNINGTYPE_PUBLISH_SECURE_BROWSER_FAILURE       CatalogWarningType = "PublishSecureBrowserFailure"
	CATALOGWARNINGTYPE_VDA_REGISTER_FAILURE                 CatalogWarningType = "VdaRegisterFailure"
	CATALOGWARNINGTYPE_PENDING_VDA_UPDATE                   CatalogWarningType = "PendingVdaUpdate"
)

// All allowed values of CatalogWarningType enum
var AllowedCatalogWarningTypeEnumValues = []CatalogWarningType{
	"PendingTemplateImageInvalid",
	"UsersRequired",
	"AppsRequired",
	"CitrixImageDeprecated",
	"CapacityUpdateFailed",
	"AddMachinesFailure",
	"ImageRollback",
	"DeleteMachineFailure",
	"UpdateCatalogHostingUnitFailure",
	"RemotePcMachineAssignmentFailure",
	"RemotePcEnrollmentScopeFailure",
	"PublishSecureBrowserFailure",
	"VdaRegisterFailure",
	"PendingVdaUpdate",
}

func (v *CatalogWarningType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	*v = CatalogWarningType(value)
	return nil
}

// NewCatalogWarningTypeFromValue returns a pointer to a valid CatalogWarningType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCatalogWarningTypeFromValue(v string) (*CatalogWarningType, error) {
	ev := CatalogWarningType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CatalogWarningType: valid values are %v", v, AllowedCatalogWarningTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CatalogWarningType) IsValid() bool {
	for _, existing := range AllowedCatalogWarningTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CatalogWarningType value
func (v CatalogWarningType) Ptr() *CatalogWarningType {
	return &v
}

type NullableCatalogWarningType struct {
	value *CatalogWarningType
	isSet bool
}

func (v NullableCatalogWarningType) Get() *CatalogWarningType {
	return v.value
}

func (v *NullableCatalogWarningType) Set(val *CatalogWarningType) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogWarningType) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogWarningType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogWarningType(val *CatalogWarningType) *NullableCatalogWarningType {
	return &NullableCatalogWarningType{value: val, isSet: true}
}

func (v NullableCatalogWarningType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogWarningType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
