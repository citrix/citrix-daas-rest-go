/*
Citrix Virtual App & Desktop Catalog Service 148.0.26750.34636

Catalog Service

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickdeploy

import (
	"encoding/json"
	"fmt"
)

// AddressFamily the model 'AddressFamily'
type AddressFamily string

// List of AddressFamily
const (
	ADDRESSFAMILY_UNSPECIFIED             AddressFamily = "Unspecified"
	ADDRESSFAMILY_UNIX                    AddressFamily = "Unix"
	ADDRESSFAMILY_INTER_NETWORK           AddressFamily = "InterNetwork"
	ADDRESSFAMILY_IMP_LINK                AddressFamily = "ImpLink"
	ADDRESSFAMILY_PUP                     AddressFamily = "Pup"
	ADDRESSFAMILY_CHAOS                   AddressFamily = "Chaos"
	ADDRESSFAMILY_IPX                     AddressFamily = "Ipx"
	ADDRESSFAMILY_OSI                     AddressFamily = "Osi"
	ADDRESSFAMILY_ECMA                    AddressFamily = "Ecma"
	ADDRESSFAMILY_DATA_KIT                AddressFamily = "DataKit"
	ADDRESSFAMILY_CCITT                   AddressFamily = "Ccitt"
	ADDRESSFAMILY_SNA                     AddressFamily = "Sna"
	ADDRESSFAMILY_DEC_NET                 AddressFamily = "DecNet"
	ADDRESSFAMILY_DATA_LINK               AddressFamily = "DataLink"
	ADDRESSFAMILY_LAT                     AddressFamily = "Lat"
	ADDRESSFAMILY_HYPER_CHANNEL           AddressFamily = "HyperChannel"
	ADDRESSFAMILY_APPLE_TALK              AddressFamily = "AppleTalk"
	ADDRESSFAMILY_NET_BIOS                AddressFamily = "NetBios"
	ADDRESSFAMILY_VOICE_VIEW              AddressFamily = "VoiceView"
	ADDRESSFAMILY_FIRE_FOX                AddressFamily = "FireFox"
	ADDRESSFAMILY_BANYAN                  AddressFamily = "Banyan"
	ADDRESSFAMILY_ATM                     AddressFamily = "Atm"
	ADDRESSFAMILY_INTER_NETWORK_V6        AddressFamily = "InterNetworkV6"
	ADDRESSFAMILY_CLUSTER                 AddressFamily = "Cluster"
	ADDRESSFAMILY_IEEE12844               AddressFamily = "Ieee12844"
	ADDRESSFAMILY_IRDA                    AddressFamily = "Irda"
	ADDRESSFAMILY_NETWORK_DESIGNERS       AddressFamily = "NetworkDesigners"
	ADDRESSFAMILY_MAX                     AddressFamily = "Max"
	ADDRESSFAMILY_PACKET                  AddressFamily = "Packet"
	ADDRESSFAMILY_CONTROLLER_AREA_NETWORK AddressFamily = "ControllerAreaNetwork"
	ADDRESSFAMILY_UNKNOWN                 AddressFamily = "Unknown"
)

// All allowed values of AddressFamily enum
var AllowedAddressFamilyEnumValues = []AddressFamily{
	"Unspecified",
	"Unix",
	"InterNetwork",
	"ImpLink",
	"Pup",
	"Chaos",
	"Ipx",
	"Osi",
	"Ecma",
	"DataKit",
	"Ccitt",
	"Sna",
	"DecNet",
	"DataLink",
	"Lat",
	"HyperChannel",
	"AppleTalk",
	"NetBios",
	"VoiceView",
	"FireFox",
	"Banyan",
	"Atm",
	"InterNetworkV6",
	"Cluster",
	"Ieee12844",
	"Irda",
	"NetworkDesigners",
	"Max",
	"Packet",
	"ControllerAreaNetwork",
	"Unknown",
}

func (v *AddressFamily) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	*v = AddressFamily(value)
	return nil
}

// NewAddressFamilyFromValue returns a pointer to a valid AddressFamily
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAddressFamilyFromValue(v string) (*AddressFamily, error) {
	ev := AddressFamily(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AddressFamily: valid values are %v", v, AllowedAddressFamilyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AddressFamily) IsValid() bool {
	for _, existing := range AllowedAddressFamilyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AddressFamily value
func (v AddressFamily) Ptr() *AddressFamily {
	return &v
}

type NullableAddressFamily struct {
	value *AddressFamily
	isSet bool
}

func (v NullableAddressFamily) Get() *AddressFamily {
	return v.value
}

func (v *NullableAddressFamily) Set(val *AddressFamily) {
	v.value = val
	v.isSet = true
}

func (v NullableAddressFamily) IsSet() bool {
	return v.isSet
}

func (v *NullableAddressFamily) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddressFamily(val *AddressFamily) *NullableAddressFamily {
	return &NullableAddressFamily{value: val, isSet: true}
}

func (v NullableAddressFamily) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddressFamily) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
