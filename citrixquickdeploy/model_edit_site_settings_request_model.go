/*
Citrix Virtual App & Desktop Catalog Service 148.0.26750.34636

Catalog Service

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickdeploy

import (
	"encoding/json"
)

// checks if the EditSiteSettingsRequestModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EditSiteSettingsRequestModel{}

// EditSiteSettingsRequestModel struct for EditSiteSettingsRequestModel
type EditSiteSettingsRequestModel struct {
	// Determines whether to use vertical scaling when considering RDS machines for launches.    Vertical scaling would saturate machines in the current pool rather than    send sessions to the least loaded machines.    This would be a trade in performance vs. cost, where vertical scaling would be less costly.
	UseVerticalScalingForRdsLaunches *bool `json:"useVerticalScalingForRdsLaunches,omitempty"`
	// Changes whether ICA files returned by a broker service to    a user device contain the numeric IP address or the DNS name    of the desktop machine to which a session should be established.
	DnsResolutionEnabled *bool `json:"dnsResolutionEnabled,omitempty"`
	// Changes whether the XML Service (as used by Storefront)    implicitly trusts the originator of requests it receives,    or whether it fully authenticates them.
	TrustRequestsSentToTheXmlServicePortEnabled *bool `json:"trustRequestsSentToTheXmlServicePortEnabled,omitempty"`
	// Determine whether the policy set in web UI is enabled or not
	WebUiPolicySetEnabled *bool `json:"webUiPolicySetEnabled,omitempty"`
	// The max number of minutes that console can be inactive.
	ConsoleInactivityTimeoutMinutes *int32 `json:"consoleInactivityTimeoutMinutes,omitempty"`
	// Applicable only for On-Premise.    Determine the supported authentication methods.
	SupportedAuthenticators *Authenticator `json:"supportedAuthenticators,omitempty"`
	// Applicable only for On-Premise.    Indicate whether to display security banner on the login page.
	ShowSecurityBannerOnLoginPage *bool `json:"showSecurityBannerOnLoginPage,omitempty"`
	// Applicable only for On-Premise.    The custom security banner on the login page, max length is 5000.
	SecurityBannerOnLoginPage *string `json:"securityBannerOnLoginPage,omitempty"`
	// Applicable only for On-Premise.    Indicate whether to display the DDC used for the current Studio session on the login page.
	ShowConnectedControllerOnLoginPage *bool `json:"showConnectedControllerOnLoginPage,omitempty"`
	// Applicable only for On-Premise.    List of origins allowed to make cross-origin requests for Integrated Windows Authentication.
	AllowedCorsOriginsForIwa []string `json:"allowedCorsOriginsForIwa,omitempty"`
	// Applicable only for On-Premise.    Multiple sites configuration.
	MultiSites []MultiSiteModel `json:"multiSites,omitempty"`
	// The default domain to be used in the login page.
	DefaultDomain *string `json:"defaultDomain,omitempty"`
	// Cloud Services access to DaaS.
	MultiTenantServicesAccess *MultiTenantServicesAccessModel `json:"multiTenantServicesAccess,omitempty"`
}

// NewEditSiteSettingsRequestModelWithDefaults instantiates a new EditSiteSettingsRequestModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEditSiteSettingsRequestModelWithDefaults() *EditSiteSettingsRequestModel {
	this := EditSiteSettingsRequestModel{}
	return &this
}

// GetUseVerticalScalingForRdsLaunches returns the UseVerticalScalingForRdsLaunches field value if set, zero value otherwise.
func (o *EditSiteSettingsRequestModel) GetUseVerticalScalingForRdsLaunches() bool {
	if o == nil || IsNil(o.UseVerticalScalingForRdsLaunches) {
		var ret bool
		return ret
	}
	return *o.UseVerticalScalingForRdsLaunches
}

// GetUseVerticalScalingForRdsLaunchesOk returns a tuple with the UseVerticalScalingForRdsLaunches field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditSiteSettingsRequestModel) GetUseVerticalScalingForRdsLaunchesOk() (*bool, bool) {
	if o == nil || IsNil(o.UseVerticalScalingForRdsLaunches) {
		return nil, false
	}
	return o.UseVerticalScalingForRdsLaunches, true
}

// SetUseVerticalScalingForRdsLaunches gets a reference to the given bool and assigns it to the UseVerticalScalingForRdsLaunches field.
func (o *EditSiteSettingsRequestModel) SetUseVerticalScalingForRdsLaunches(v bool) {
	o.UseVerticalScalingForRdsLaunches = &v
}

// GetDnsResolutionEnabled returns the DnsResolutionEnabled field value if set, zero value otherwise.
func (o *EditSiteSettingsRequestModel) GetDnsResolutionEnabled() bool {
	if o == nil || IsNil(o.DnsResolutionEnabled) {
		var ret bool
		return ret
	}
	return *o.DnsResolutionEnabled
}

// GetDnsResolutionEnabledOk returns a tuple with the DnsResolutionEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditSiteSettingsRequestModel) GetDnsResolutionEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.DnsResolutionEnabled) {
		return nil, false
	}
	return o.DnsResolutionEnabled, true
}

// SetDnsResolutionEnabled gets a reference to the given bool and assigns it to the DnsResolutionEnabled field.
func (o *EditSiteSettingsRequestModel) SetDnsResolutionEnabled(v bool) {
	o.DnsResolutionEnabled = &v
}

// GetTrustRequestsSentToTheXmlServicePortEnabled returns the TrustRequestsSentToTheXmlServicePortEnabled field value if set, zero value otherwise.
func (o *EditSiteSettingsRequestModel) GetTrustRequestsSentToTheXmlServicePortEnabled() bool {
	if o == nil || IsNil(o.TrustRequestsSentToTheXmlServicePortEnabled) {
		var ret bool
		return ret
	}
	return *o.TrustRequestsSentToTheXmlServicePortEnabled
}

// GetTrustRequestsSentToTheXmlServicePortEnabledOk returns a tuple with the TrustRequestsSentToTheXmlServicePortEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditSiteSettingsRequestModel) GetTrustRequestsSentToTheXmlServicePortEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.TrustRequestsSentToTheXmlServicePortEnabled) {
		return nil, false
	}
	return o.TrustRequestsSentToTheXmlServicePortEnabled, true
}

// SetTrustRequestsSentToTheXmlServicePortEnabled gets a reference to the given bool and assigns it to the TrustRequestsSentToTheXmlServicePortEnabled field.
func (o *EditSiteSettingsRequestModel) SetTrustRequestsSentToTheXmlServicePortEnabled(v bool) {
	o.TrustRequestsSentToTheXmlServicePortEnabled = &v
}

// GetWebUiPolicySetEnabled returns the WebUiPolicySetEnabled field value if set, zero value otherwise.
func (o *EditSiteSettingsRequestModel) GetWebUiPolicySetEnabled() bool {
	if o == nil || IsNil(o.WebUiPolicySetEnabled) {
		var ret bool
		return ret
	}
	return *o.WebUiPolicySetEnabled
}

// GetWebUiPolicySetEnabledOk returns a tuple with the WebUiPolicySetEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditSiteSettingsRequestModel) GetWebUiPolicySetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.WebUiPolicySetEnabled) {
		return nil, false
	}
	return o.WebUiPolicySetEnabled, true
}

// SetWebUiPolicySetEnabled gets a reference to the given bool and assigns it to the WebUiPolicySetEnabled field.
func (o *EditSiteSettingsRequestModel) SetWebUiPolicySetEnabled(v bool) {
	o.WebUiPolicySetEnabled = &v
}

// GetConsoleInactivityTimeoutMinutes returns the ConsoleInactivityTimeoutMinutes field value if set, zero value otherwise.
func (o *EditSiteSettingsRequestModel) GetConsoleInactivityTimeoutMinutes() int32 {
	if o == nil || IsNil(o.ConsoleInactivityTimeoutMinutes) {
		var ret int32
		return ret
	}
	return *o.ConsoleInactivityTimeoutMinutes
}

// GetConsoleInactivityTimeoutMinutesOk returns a tuple with the ConsoleInactivityTimeoutMinutes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditSiteSettingsRequestModel) GetConsoleInactivityTimeoutMinutesOk() (*int32, bool) {
	if o == nil || IsNil(o.ConsoleInactivityTimeoutMinutes) {
		return nil, false
	}
	return o.ConsoleInactivityTimeoutMinutes, true
}

// SetConsoleInactivityTimeoutMinutes gets a reference to the given int32 and assigns it to the ConsoleInactivityTimeoutMinutes field.
func (o *EditSiteSettingsRequestModel) SetConsoleInactivityTimeoutMinutes(v int32) {
	o.ConsoleInactivityTimeoutMinutes = &v
}

// GetSupportedAuthenticators returns the SupportedAuthenticators field value if set, zero value otherwise.
func (o *EditSiteSettingsRequestModel) GetSupportedAuthenticators() Authenticator {
	if o == nil || IsNil(o.SupportedAuthenticators) {
		var ret Authenticator
		return ret
	}
	return *o.SupportedAuthenticators
}

// GetSupportedAuthenticatorsOk returns a tuple with the SupportedAuthenticators field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditSiteSettingsRequestModel) GetSupportedAuthenticatorsOk() (*Authenticator, bool) {
	if o == nil || IsNil(o.SupportedAuthenticators) {
		return nil, false
	}
	return o.SupportedAuthenticators, true
}

// SetSupportedAuthenticators gets a reference to the given Authenticator and assigns it to the SupportedAuthenticators field.
func (o *EditSiteSettingsRequestModel) SetSupportedAuthenticators(v Authenticator) {
	o.SupportedAuthenticators = &v
}

// GetShowSecurityBannerOnLoginPage returns the ShowSecurityBannerOnLoginPage field value if set, zero value otherwise.
func (o *EditSiteSettingsRequestModel) GetShowSecurityBannerOnLoginPage() bool {
	if o == nil || IsNil(o.ShowSecurityBannerOnLoginPage) {
		var ret bool
		return ret
	}
	return *o.ShowSecurityBannerOnLoginPage
}

// GetShowSecurityBannerOnLoginPageOk returns a tuple with the ShowSecurityBannerOnLoginPage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditSiteSettingsRequestModel) GetShowSecurityBannerOnLoginPageOk() (*bool, bool) {
	if o == nil || IsNil(o.ShowSecurityBannerOnLoginPage) {
		return nil, false
	}
	return o.ShowSecurityBannerOnLoginPage, true
}

// SetShowSecurityBannerOnLoginPage gets a reference to the given bool and assigns it to the ShowSecurityBannerOnLoginPage field.
func (o *EditSiteSettingsRequestModel) SetShowSecurityBannerOnLoginPage(v bool) {
	o.ShowSecurityBannerOnLoginPage = &v
}

// GetSecurityBannerOnLoginPage returns the SecurityBannerOnLoginPage field value if set, zero value otherwise.
func (o *EditSiteSettingsRequestModel) GetSecurityBannerOnLoginPage() string {
	if o == nil || IsNil(o.SecurityBannerOnLoginPage) {
		var ret string
		return ret
	}
	return *o.SecurityBannerOnLoginPage
}

// GetSecurityBannerOnLoginPageOk returns a tuple with the SecurityBannerOnLoginPage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditSiteSettingsRequestModel) GetSecurityBannerOnLoginPageOk() (*string, bool) {
	if o == nil || IsNil(o.SecurityBannerOnLoginPage) {
		return nil, false
	}
	return o.SecurityBannerOnLoginPage, true
}

// SetSecurityBannerOnLoginPage gets a reference to the given string and assigns it to the SecurityBannerOnLoginPage field.
func (o *EditSiteSettingsRequestModel) SetSecurityBannerOnLoginPage(v string) {
	o.SecurityBannerOnLoginPage = &v
}

// GetShowConnectedControllerOnLoginPage returns the ShowConnectedControllerOnLoginPage field value if set, zero value otherwise.
func (o *EditSiteSettingsRequestModel) GetShowConnectedControllerOnLoginPage() bool {
	if o == nil || IsNil(o.ShowConnectedControllerOnLoginPage) {
		var ret bool
		return ret
	}
	return *o.ShowConnectedControllerOnLoginPage
}

// GetShowConnectedControllerOnLoginPageOk returns a tuple with the ShowConnectedControllerOnLoginPage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditSiteSettingsRequestModel) GetShowConnectedControllerOnLoginPageOk() (*bool, bool) {
	if o == nil || IsNil(o.ShowConnectedControllerOnLoginPage) {
		return nil, false
	}
	return o.ShowConnectedControllerOnLoginPage, true
}

// SetShowConnectedControllerOnLoginPage gets a reference to the given bool and assigns it to the ShowConnectedControllerOnLoginPage field.
func (o *EditSiteSettingsRequestModel) SetShowConnectedControllerOnLoginPage(v bool) {
	o.ShowConnectedControllerOnLoginPage = &v
}

// GetAllowedCorsOriginsForIwa returns the AllowedCorsOriginsForIwa field value if set, zero value otherwise.
func (o *EditSiteSettingsRequestModel) GetAllowedCorsOriginsForIwa() []string {
	if o == nil || IsNil(o.AllowedCorsOriginsForIwa) {
		var ret []string
		return ret
	}
	return o.AllowedCorsOriginsForIwa
}

// GetAllowedCorsOriginsForIwaOk returns a tuple with the AllowedCorsOriginsForIwa field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditSiteSettingsRequestModel) GetAllowedCorsOriginsForIwaOk() ([]string, bool) {
	if o == nil || IsNil(o.AllowedCorsOriginsForIwa) {
		return nil, false
	}
	return o.AllowedCorsOriginsForIwa, true
}

// SetAllowedCorsOriginsForIwa gets a reference to the given []string and assigns it to the AllowedCorsOriginsForIwa field.
func (o *EditSiteSettingsRequestModel) SetAllowedCorsOriginsForIwa(v []string) {
	o.AllowedCorsOriginsForIwa = v
}

// GetMultiSites returns the MultiSites field value if set, zero value otherwise.
func (o *EditSiteSettingsRequestModel) GetMultiSites() []MultiSiteModel {
	if o == nil || IsNil(o.MultiSites) {
		var ret []MultiSiteModel
		return ret
	}
	return o.MultiSites
}

// GetMultiSitesOk returns a tuple with the MultiSites field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditSiteSettingsRequestModel) GetMultiSitesOk() ([]MultiSiteModel, bool) {
	if o == nil || IsNil(o.MultiSites) {
		return nil, false
	}
	return o.MultiSites, true
}

// SetMultiSites gets a reference to the given []MultiSiteModel and assigns it to the MultiSites field.
func (o *EditSiteSettingsRequestModel) SetMultiSites(v []MultiSiteModel) {
	o.MultiSites = v
}

// GetDefaultDomain returns the DefaultDomain field value if set, zero value otherwise.
func (o *EditSiteSettingsRequestModel) GetDefaultDomain() string {
	if o == nil || IsNil(o.DefaultDomain) {
		var ret string
		return ret
	}
	return *o.DefaultDomain
}

// GetDefaultDomainOk returns a tuple with the DefaultDomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditSiteSettingsRequestModel) GetDefaultDomainOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultDomain) {
		return nil, false
	}
	return o.DefaultDomain, true
}

// SetDefaultDomain gets a reference to the given string and assigns it to the DefaultDomain field.
func (o *EditSiteSettingsRequestModel) SetDefaultDomain(v string) {
	o.DefaultDomain = &v
}

// GetMultiTenantServicesAccess returns the MultiTenantServicesAccess field value if set, zero value otherwise.
func (o *EditSiteSettingsRequestModel) GetMultiTenantServicesAccess() MultiTenantServicesAccessModel {
	if o == nil || IsNil(o.MultiTenantServicesAccess) {
		var ret MultiTenantServicesAccessModel
		return ret
	}
	return *o.MultiTenantServicesAccess
}

// GetMultiTenantServicesAccessOk returns a tuple with the MultiTenantServicesAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditSiteSettingsRequestModel) GetMultiTenantServicesAccessOk() (*MultiTenantServicesAccessModel, bool) {
	if o == nil || IsNil(o.MultiTenantServicesAccess) {
		return nil, false
	}
	return o.MultiTenantServicesAccess, true
}

// SetMultiTenantServicesAccess gets a reference to the given MultiTenantServicesAccessModel and assigns it to the MultiTenantServicesAccess field.
func (o *EditSiteSettingsRequestModel) SetMultiTenantServicesAccess(v MultiTenantServicesAccessModel) {
	o.MultiTenantServicesAccess = &v
}

func (o EditSiteSettingsRequestModel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EditSiteSettingsRequestModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UseVerticalScalingForRdsLaunches) {
		toSerialize["useVerticalScalingForRdsLaunches"] = o.UseVerticalScalingForRdsLaunches
	}
	if !IsNil(o.DnsResolutionEnabled) {
		toSerialize["dnsResolutionEnabled"] = o.DnsResolutionEnabled
	}
	if !IsNil(o.TrustRequestsSentToTheXmlServicePortEnabled) {
		toSerialize["trustRequestsSentToTheXmlServicePortEnabled"] = o.TrustRequestsSentToTheXmlServicePortEnabled
	}
	if !IsNil(o.WebUiPolicySetEnabled) {
		toSerialize["webUiPolicySetEnabled"] = o.WebUiPolicySetEnabled
	}
	if !IsNil(o.ConsoleInactivityTimeoutMinutes) {
		toSerialize["consoleInactivityTimeoutMinutes"] = o.ConsoleInactivityTimeoutMinutes
	}
	if !IsNil(o.SupportedAuthenticators) {
		toSerialize["supportedAuthenticators"] = o.SupportedAuthenticators
	}
	if !IsNil(o.ShowSecurityBannerOnLoginPage) {
		toSerialize["showSecurityBannerOnLoginPage"] = o.ShowSecurityBannerOnLoginPage
	}
	if !IsNil(o.SecurityBannerOnLoginPage) {
		toSerialize["securityBannerOnLoginPage"] = o.SecurityBannerOnLoginPage
	}
	if !IsNil(o.ShowConnectedControllerOnLoginPage) {
		toSerialize["showConnectedControllerOnLoginPage"] = o.ShowConnectedControllerOnLoginPage
	}
	if !IsNil(o.AllowedCorsOriginsForIwa) {
		toSerialize["allowedCorsOriginsForIwa"] = o.AllowedCorsOriginsForIwa
	}
	if !IsNil(o.MultiSites) {
		toSerialize["multiSites"] = o.MultiSites
	}
	if !IsNil(o.DefaultDomain) {
		toSerialize["defaultDomain"] = o.DefaultDomain
	}
	if !IsNil(o.MultiTenantServicesAccess) {
		toSerialize["multiTenantServicesAccess"] = o.MultiTenantServicesAccess
	}
	return toSerialize, nil
}

type NullableEditSiteSettingsRequestModel struct {
	value *EditSiteSettingsRequestModel
	isSet bool
}

func (v NullableEditSiteSettingsRequestModel) Get() *EditSiteSettingsRequestModel {
	return v.value
}

func (v *NullableEditSiteSettingsRequestModel) Set(val *EditSiteSettingsRequestModel) {
	v.value = val
	v.isSet = true
}

func (v NullableEditSiteSettingsRequestModel) IsSet() bool {
	return v.isSet
}

func (v *NullableEditSiteSettingsRequestModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEditSiteSettingsRequestModel(val *EditSiteSettingsRequestModel) *NullableEditSiteSettingsRequestModel {
	return &NullableEditSiteSettingsRequestModel{value: val, isSet: true}
}

func (v NullableEditSiteSettingsRequestModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEditSiteSettingsRequestModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
