/*
Citrix Virtual App & Desktop Catalog Service 147.0.26651.57932

Catalog Service

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickdeploy

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// CatalogCMDService CatalogCMD service
type CatalogCMDService service

type ApiAddRemotePcCatalogMachineAssignmentsRequest struct {
	ctx                 context.Context
	ApiService          *CatalogCMDService
	customerId          string
	siteId              string
	catalogId           string
	citrixTransactionId *string
	body                *AddCatalogMachineAssignments
}

// The Transaction Id.
func (r ApiAddRemotePcCatalogMachineAssignmentsRequest) CitrixTransactionId(citrixTransactionId string) ApiAddRemotePcCatalogMachineAssignmentsRequest {
	r.citrixTransactionId = &citrixTransactionId
	return r
}

// The configuration of the machines to add.
func (r ApiAddRemotePcCatalogMachineAssignmentsRequest) Body(body AddCatalogMachineAssignments) ApiAddRemotePcCatalogMachineAssignmentsRequest {
	r.body = &body
	return r
}

func (r ApiAddRemotePcCatalogMachineAssignmentsRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.AddRemotePcCatalogMachineAssignmentsExecute(r)
}

/*
AddRemotePcCatalogMachineAssignments Add machine assignments to a remote pc catalog.  New machines will be added to the catalog with the specified users  Existing machines will be updated with the included assignments

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param customerId ID of the customer
	@param siteId The site ID of the customer
	@param catalogId Id of the catalog to add machines to.
	@return ApiAddRemotePcCatalogMachineAssignmentsRequest
*/
func (a *CatalogCMDService) AddRemotePcCatalogMachineAssignments(ctx context.Context, customerId string, siteId string, catalogId string) ApiAddRemotePcCatalogMachineAssignmentsRequest {
	return ApiAddRemotePcCatalogMachineAssignmentsRequest{
		ApiService: a,
		ctx:        ctx,
		customerId: customerId,
		siteId:     siteId,
		catalogId:  catalogId,
	}
}

// Execute executes the request
//
//	@return string
func (a *CatalogCMDService) AddRemotePcCatalogMachineAssignmentsExecute(r ApiAddRemotePcCatalogMachineAssignmentsRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CatalogCMDService.AddRemotePcCatalogMachineAssignments")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{customerId}/{siteId}/catalogs/{catalogId}/machinesassignments"
	localVarPath = strings.Replace(localVarPath, "{"+"customerId"+"}", url.PathEscape(parameterValueToString(r.customerId, "customerId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"siteId"+"}", url.PathEscape(parameterValueToString(r.siteId, "siteId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"catalogId"+"}", url.PathEscape(parameterValueToString(r.catalogId, "catalogId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.citrixTransactionId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-TransactionId", r.citrixTransactionId, "")
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CWSAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiConfigureAndDeployCitrixManagedCatalogApiRequest struct {
	ctx                 context.Context
	ApiService          *CatalogCMDService
	customerId          string
	siteId              string
	citrixTransactionId *string
	body                *CitrixManagedCatalogConfigDeployModel
}

// The Transaction Id.
func (r ApiConfigureAndDeployCitrixManagedCatalogApiRequest) CitrixTransactionId(citrixTransactionId string) ApiConfigureAndDeployCitrixManagedCatalogApiRequest {
	r.citrixTransactionId = &citrixTransactionId
	return r
}

// The configuration of the catalog
func (r ApiConfigureAndDeployCitrixManagedCatalogApiRequest) Body(body CitrixManagedCatalogConfigDeployModel) ApiConfigureAndDeployCitrixManagedCatalogApiRequest {
	r.body = &body
	return r
}

func (r ApiConfigureAndDeployCitrixManagedCatalogApiRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.ConfigureAndDeployCitrixManagedCatalogApiExecute(r)
}

/*
ConfigureAndDeployCitrixManagedCatalogApi Configure all the Citrix managed catalog deployment steps and initiate the catalog deployment

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param customerId ID of the customer
	@param siteId The site ID of the customer
	@return ApiConfigureAndDeployCitrixManagedCatalogApiRequest
*/
func (a *CatalogCMDService) ConfigureAndDeployCitrixManagedCatalogApi(ctx context.Context, customerId string, siteId string) ApiConfigureAndDeployCitrixManagedCatalogApiRequest {
	return ApiConfigureAndDeployCitrixManagedCatalogApiRequest{
		ApiService: a,
		ctx:        ctx,
		customerId: customerId,
		siteId:     siteId,
	}
}

// Execute executes the request
//
//	@return string
func (a *CatalogCMDService) ConfigureAndDeployCitrixManagedCatalogApiExecute(r ApiConfigureAndDeployCitrixManagedCatalogApiRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CatalogCMDService.ConfigureAndDeployCitrixManagedCatalogApi")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{customerId}/{siteId}/catalogs/$manageddeploy"
	localVarPath = strings.Replace(localVarPath, "{"+"customerId"+"}", url.PathEscape(parameterValueToString(r.customerId, "customerId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"siteId"+"}", url.PathEscape(parameterValueToString(r.siteId, "siteId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.citrixTransactionId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-TransactionId", r.citrixTransactionId, "")
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CWSAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateRemotePcCatalogRequest struct {
	ctx                 context.Context
	ApiService          *CatalogCMDService
	customerId          string
	siteId              string
	citrixTransactionId *string
	body                *AddRemotePcCatalog
}

// The Transaction Id.
func (r ApiCreateRemotePcCatalogRequest) CitrixTransactionId(citrixTransactionId string) ApiCreateRemotePcCatalogRequest {
	r.citrixTransactionId = &citrixTransactionId
	return r
}

// The configuration of the catalog
func (r ApiCreateRemotePcCatalogRequest) Body(body AddRemotePcCatalog) ApiCreateRemotePcCatalogRequest {
	r.body = &body
	return r
}

func (r ApiCreateRemotePcCatalogRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.CreateRemotePcCatalogExecute(r)
}

/*
CreateRemotePcCatalog Create a Remote PC catalog.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param customerId ID of the customer
	@param siteId The site ID of the customer
	@return ApiCreateRemotePcCatalogRequest
*/
func (a *CatalogCMDService) CreateRemotePcCatalog(ctx context.Context, customerId string, siteId string) ApiCreateRemotePcCatalogRequest {
	return ApiCreateRemotePcCatalogRequest{
		ApiService: a,
		ctx:        ctx,
		customerId: customerId,
		siteId:     siteId,
	}
}

// Execute executes the request
//
//	@return string
func (a *CatalogCMDService) CreateRemotePcCatalogExecute(r ApiCreateRemotePcCatalogRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CatalogCMDService.CreateRemotePcCatalog")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{customerId}/{siteId}/catalogs/remotePc"
	localVarPath = strings.Replace(localVarPath, "{"+"customerId"+"}", url.PathEscape(parameterValueToString(r.customerId, "customerId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"siteId"+"}", url.PathEscape(parameterValueToString(r.siteId, "siteId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.citrixTransactionId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-TransactionId", r.citrixTransactionId, "")
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CWSAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteCustomerCatalogRequest struct {
	ctx                 context.Context
	ApiService          *CatalogCMDService
	customerId          string
	siteId              string
	catalogId           string
	citrixTransactionId *string
	body                *DeleteCatalogModel
}

// The Transaction Id.
func (r ApiDeleteCustomerCatalogRequest) CitrixTransactionId(citrixTransactionId string) ApiDeleteCustomerCatalogRequest {
	r.citrixTransactionId = &citrixTransactionId
	return r
}

// Configuration for deleting the catalog
func (r ApiDeleteCustomerCatalogRequest) Body(body DeleteCatalogModel) ApiDeleteCustomerCatalogRequest {
	r.body = &body
	return r
}

func (r ApiDeleteCustomerCatalogRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteCustomerCatalogExecute(r)
}

/*
DeleteCustomerCatalog Delete a catalog along with all the pubhishd apps for the catalog

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param customerId ID of the customer
	@param siteId
	@param catalogId ID of the catalog to be deleted
	@return ApiDeleteCustomerCatalogRequest
*/
func (a *CatalogCMDService) DeleteCustomerCatalog(ctx context.Context, customerId string, siteId string, catalogId string) ApiDeleteCustomerCatalogRequest {
	return ApiDeleteCustomerCatalogRequest{
		ApiService: a,
		ctx:        ctx,
		customerId: customerId,
		siteId:     siteId,
		catalogId:  catalogId,
	}
}

// Execute executes the request
func (a *CatalogCMDService) DeleteCustomerCatalogExecute(r ApiDeleteCustomerCatalogRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CatalogCMDService.DeleteCustomerCatalog")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{customerId}/{siteId}/catalogs/{catalogId}"
	localVarPath = strings.Replace(localVarPath, "{"+"customerId"+"}", url.PathEscape(parameterValueToString(r.customerId, "customerId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"siteId"+"}", url.PathEscape(parameterValueToString(r.siteId, "siteId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"catalogId"+"}", url.PathEscape(parameterValueToString(r.catalogId, "catalogId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.citrixTransactionId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-TransactionId", r.citrixTransactionId, "")
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CWSAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetCustomerCatalogRequest struct {
	ctx                 context.Context
	ApiService          *CatalogCMDService
	customerId          string
	siteId              string
	catalogId           string
	citrixTransactionId *string
}

// The Transaction Id.
func (r ApiGetCustomerCatalogRequest) CitrixTransactionId(citrixTransactionId string) ApiGetCustomerCatalogRequest {
	r.citrixTransactionId = &citrixTransactionId
	return r
}

func (r ApiGetCustomerCatalogRequest) Execute() (*CatalogOverview, *http.Response, error) {
	return r.ApiService.GetCustomerCatalogExecute(r)
}

/*
GetCustomerCatalog Returns a specific catalog for a specific customer

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param customerId Specific customerId to retrieve catalog for
	@param siteId
	@param catalogId ID of the catalog to retrieve
	@return ApiGetCustomerCatalogRequest
*/
func (a *CatalogCMDService) GetCustomerCatalog(ctx context.Context, customerId string, siteId string, catalogId string) ApiGetCustomerCatalogRequest {
	return ApiGetCustomerCatalogRequest{
		ApiService: a,
		ctx:        ctx,
		customerId: customerId,
		siteId:     siteId,
		catalogId:  catalogId,
	}
}

// Execute executes the request
//
//	@return CatalogOverview
func (a *CatalogCMDService) GetCustomerCatalogExecute(r ApiGetCustomerCatalogRequest) (*CatalogOverview, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CatalogOverview
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CatalogCMDService.GetCustomerCatalog")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{customerId}/{siteId}/catalogs/{catalogId}"
	localVarPath = strings.Replace(localVarPath, "{"+"customerId"+"}", url.PathEscape(parameterValueToString(r.customerId, "customerId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"siteId"+"}", url.PathEscape(parameterValueToString(r.siteId, "siteId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"catalogId"+"}", url.PathEscape(parameterValueToString(r.catalogId, "catalogId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.citrixTransactionId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-TransactionId", r.citrixTransactionId, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CWSAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCustomerCatalogsRequest struct {
	ctx                 context.Context
	ApiService          *CatalogCMDService
	customerId          string
	siteId              string
	catalogIdsOnly      *bool
	citrixTransactionId *string
}

// Indicates if we should only return a list of the catalog ids
func (r ApiGetCustomerCatalogsRequest) CatalogIdsOnly(catalogIdsOnly bool) ApiGetCustomerCatalogsRequest {
	r.catalogIdsOnly = &catalogIdsOnly
	return r
}

// The Transaction Id.
func (r ApiGetCustomerCatalogsRequest) CitrixTransactionId(citrixTransactionId string) ApiGetCustomerCatalogsRequest {
	r.citrixTransactionId = &citrixTransactionId
	return r
}

func (r ApiGetCustomerCatalogsRequest) Execute() (*CustomerCatalogOverviewsModel, *http.Response, error) {
	return r.ApiService.GetCustomerCatalogsExecute(r)
}

/*
GetCustomerCatalogs Returns all the catalogs that the specified customer has created

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param customerId Specific customerId to retrieve catalogs for
	@param siteId The site ID of the customer
	@return ApiGetCustomerCatalogsRequest
*/
func (a *CatalogCMDService) GetCustomerCatalogs(ctx context.Context, customerId string, siteId string) ApiGetCustomerCatalogsRequest {
	return ApiGetCustomerCatalogsRequest{
		ApiService: a,
		ctx:        ctx,
		customerId: customerId,
		siteId:     siteId,
	}
}

// Execute executes the request
//
//	@return CustomerCatalogOverviewsModel
func (a *CatalogCMDService) GetCustomerCatalogsExecute(r ApiGetCustomerCatalogsRequest) (*CustomerCatalogOverviewsModel, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CustomerCatalogOverviewsModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CatalogCMDService.GetCustomerCatalogs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{customerId}/{siteId}/catalogs"
	localVarPath = strings.Replace(localVarPath, "{"+"customerId"+"}", url.PathEscape(parameterValueToString(r.customerId, "customerId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"siteId"+"}", url.PathEscape(parameterValueToString(r.siteId, "siteId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.catalogIdsOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "catalogIdsOnly", r.catalogIdsOnly, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.citrixTransactionId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-TransactionId", r.citrixTransactionId, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CWSAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCustomerManagedCatalogsRequest struct {
	ctx                 context.Context
	ApiService          *CatalogCMDService
	customerId          string
	siteId              string
	cspCustomerId       *string
	cspSiteId           *string
	citrixTransactionId *string
}

// Name of tenant customer ID if partner-tenant relationship exists otherwise null
func (r ApiGetCustomerManagedCatalogsRequest) CspCustomerId(cspCustomerId string) ApiGetCustomerManagedCatalogsRequest {
	r.cspCustomerId = &cspCustomerId
	return r
}

// Name of tenant site ID if partner-tenant relationship exists otherwise null
func (r ApiGetCustomerManagedCatalogsRequest) CspSiteId(cspSiteId string) ApiGetCustomerManagedCatalogsRequest {
	r.cspSiteId = &cspSiteId
	return r
}

// The Transaction Id.
func (r ApiGetCustomerManagedCatalogsRequest) CitrixTransactionId(citrixTransactionId string) ApiGetCustomerManagedCatalogsRequest {
	r.citrixTransactionId = &citrixTransactionId
	return r
}

func (r ApiGetCustomerManagedCatalogsRequest) Execute() (*CustomerManagedCatalogOverviewsModel, *http.Response, error) {
	return r.ApiService.GetCustomerManagedCatalogsExecute(r)
}

/*
GetCustomerManagedCatalogs Returns all the catalogs that the specified Citrix managed customer has created

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param customerId Specific customerId to retrieve catalogs for
	@param siteId The site ID of the customer
	@return ApiGetCustomerManagedCatalogsRequest
*/
func (a *CatalogCMDService) GetCustomerManagedCatalogs(ctx context.Context, customerId string, siteId string) ApiGetCustomerManagedCatalogsRequest {
	return ApiGetCustomerManagedCatalogsRequest{
		ApiService: a,
		ctx:        ctx,
		customerId: customerId,
		siteId:     siteId,
	}
}

// Execute executes the request
//
//	@return CustomerManagedCatalogOverviewsModel
func (a *CatalogCMDService) GetCustomerManagedCatalogsExecute(r ApiGetCustomerManagedCatalogsRequest) (*CustomerManagedCatalogOverviewsModel, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CustomerManagedCatalogOverviewsModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CatalogCMDService.GetCustomerManagedCatalogs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{customerId}/{siteId}/managedcatalogs"
	localVarPath = strings.Replace(localVarPath, "{"+"customerId"+"}", url.PathEscape(parameterValueToString(r.customerId, "customerId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"siteId"+"}", url.PathEscape(parameterValueToString(r.siteId, "siteId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.cspCustomerId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cspCustomerId", r.cspCustomerId, "")
	}
	if r.cspSiteId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cspSiteId", r.cspSiteId, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.citrixTransactionId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-TransactionId", r.citrixTransactionId, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CWSAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCustomerManagedCatalogsByIdRequest struct {
	ctx                 context.Context
	ApiService          *CatalogCMDService
	customerId          string
	siteId              string
	catalogId           string
	citrixTransactionId *string
}

// The Transaction Id.
func (r ApiGetCustomerManagedCatalogsByIdRequest) CitrixTransactionId(citrixTransactionId string) ApiGetCustomerManagedCatalogsByIdRequest {
	r.citrixTransactionId = &citrixTransactionId
	return r
}

func (r ApiGetCustomerManagedCatalogsByIdRequest) Execute() (*CatalogOverview, *http.Response, error) {
	return r.ApiService.GetCustomerManagedCatalogsByIdExecute(r)
}

/*
GetCustomerManagedCatalogsById Returns all the catalogs that the specified Citrix managed customer has created

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param customerId Specific customerId to retrieve catalogs for
	@param siteId The site ID of the customer
	@param catalogId The catalog ids for which to get the status
	@return ApiGetCustomerManagedCatalogsByIdRequest
*/
func (a *CatalogCMDService) GetCustomerManagedCatalogsById(ctx context.Context, customerId string, siteId string, catalogId string) ApiGetCustomerManagedCatalogsByIdRequest {
	return ApiGetCustomerManagedCatalogsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		customerId: customerId,
		siteId:     siteId,
		catalogId:  catalogId,
	}
}

// Execute executes the request
//
//	@return CatalogOverview
func (a *CatalogCMDService) GetCustomerManagedCatalogsByIdExecute(r ApiGetCustomerManagedCatalogsByIdRequest) (*CatalogOverview, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CatalogOverview
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CatalogCMDService.GetCustomerManagedCatalogsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{customerId}/{siteId}/managedcatalogs/{catalogId}"
	localVarPath = strings.Replace(localVarPath, "{"+"customerId"+"}", url.PathEscape(parameterValueToString(r.customerId, "customerId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"siteId"+"}", url.PathEscape(parameterValueToString(r.siteId, "siteId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"catalogId"+"}", url.PathEscape(parameterValueToString(r.catalogId, "catalogId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.citrixTransactionId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-TransactionId", r.citrixTransactionId, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CWSAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateCatalogImageRequest struct {
	ctx                 context.Context
	ApiService          *CatalogCMDService
	customerId          string
	siteId              string
	catalogId           string
	citrixTransactionId *string
	body                *UpdateCatalogTemplateImageModel
}

// The Transaction Id.
func (r ApiUpdateCatalogImageRequest) CitrixTransactionId(citrixTransactionId string) ApiUpdateCatalogImageRequest {
	r.citrixTransactionId = &citrixTransactionId
	return r
}

// Details of the image to update
func (r ApiUpdateCatalogImageRequest) Body(body UpdateCatalogTemplateImageModel) ApiUpdateCatalogImageRequest {
	r.body = &body
	return r
}

func (r ApiUpdateCatalogImageRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.UpdateCatalogImageExecute(r)
}

/*
UpdateCatalogImage Update the catalog's master image.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param customerId Specific customerId to update image for
	@param siteId The site ID of the customer
	@param catalogId ID of the catalog to update
	@return ApiUpdateCatalogImageRequest
*/
func (a *CatalogCMDService) UpdateCatalogImage(ctx context.Context, customerId string, siteId string, catalogId string) ApiUpdateCatalogImageRequest {
	return ApiUpdateCatalogImageRequest{
		ApiService: a,
		ctx:        ctx,
		customerId: customerId,
		siteId:     siteId,
		catalogId:  catalogId,
	}
}

// Execute executes the request
//
//	@return string
func (a *CatalogCMDService) UpdateCatalogImageExecute(r ApiUpdateCatalogImageRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CatalogCMDService.UpdateCatalogImage")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{customerId}/{siteId}/catalogs/{catalogId}/updateImage"
	localVarPath = strings.Replace(localVarPath, "{"+"customerId"+"}", url.PathEscape(parameterValueToString(r.customerId, "customerId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"siteId"+"}", url.PathEscape(parameterValueToString(r.siteId, "siteId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"catalogId"+"}", url.PathEscape(parameterValueToString(r.catalogId, "catalogId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.citrixTransactionId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-TransactionId", r.citrixTransactionId, "")
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CWSAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateCatalogImageApiRequest struct {
	ctx                 context.Context
	ApiService          *CatalogCMDService
	customerId          string
	siteId              string
	catalogId           string
	citrixTransactionId *string
	body                *UpdateCatalogTemplateImageModel
}

// The Transaction Id.
func (r ApiUpdateCatalogImageApiRequest) CitrixTransactionId(citrixTransactionId string) ApiUpdateCatalogImageApiRequest {
	r.citrixTransactionId = &citrixTransactionId
	return r
}

// Details of the image to update to
func (r ApiUpdateCatalogImageApiRequest) Body(body UpdateCatalogTemplateImageModel) ApiUpdateCatalogImageApiRequest {
	r.body = &body
	return r
}

func (r ApiUpdateCatalogImageApiRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.UpdateCatalogImageApiExecute(r)
}

/*
UpdateCatalogImageApi Update the catalog's master image.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param customerId ID of the customer
	@param siteId The site ID of the customer
	@param catalogId ID of the catalog to deploy
	@return ApiUpdateCatalogImageApiRequest
*/
func (a *CatalogCMDService) UpdateCatalogImageApi(ctx context.Context, customerId string, siteId string, catalogId string) ApiUpdateCatalogImageApiRequest {
	return ApiUpdateCatalogImageApiRequest{
		ApiService: a,
		ctx:        ctx,
		customerId: customerId,
		siteId:     siteId,
		catalogId:  catalogId,
	}
}

// Execute executes the request
//
//	@return string
func (a *CatalogCMDService) UpdateCatalogImageApiExecute(r ApiUpdateCatalogImageApiRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CatalogCMDService.UpdateCatalogImageApi")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{customerId}/{siteId}/catalogs/{catalogId}/$updateImage"
	localVarPath = strings.Replace(localVarPath, "{"+"customerId"+"}", url.PathEscape(parameterValueToString(r.customerId, "customerId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"siteId"+"}", url.PathEscape(parameterValueToString(r.siteId, "siteId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"catalogId"+"}", url.PathEscape(parameterValueToString(r.catalogId, "catalogId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.citrixTransactionId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-TransactionId", r.citrixTransactionId, "")
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CWSAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateRemotePcCatalogScopesRequest struct {
	ctx                 context.Context
	ApiService          *CatalogCMDService
	customerId          string
	siteId              string
	catalogId           string
	citrixTransactionId *string
	body                *UpdateRemotePcCatalogScopesModel
}

// The Transaction Id.
func (r ApiUpdateRemotePcCatalogScopesRequest) CitrixTransactionId(citrixTransactionId string) ApiUpdateRemotePcCatalogScopesRequest {
	r.citrixTransactionId = &citrixTransactionId
	return r
}

func (r ApiUpdateRemotePcCatalogScopesRequest) Body(body UpdateRemotePcCatalogScopesModel) ApiUpdateRemotePcCatalogScopesRequest {
	r.body = &body
	return r
}

func (r ApiUpdateRemotePcCatalogScopesRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.UpdateRemotePcCatalogScopesExecute(r)
}

/*
UpdateRemotePcCatalogScopes Configure all the Citrix managed catalog deployment steps and initiate the catalog deployment

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param customerId ID of the customer
	@param siteId The site ID of the customer
	@param catalogId
	@return ApiUpdateRemotePcCatalogScopesRequest
*/
func (a *CatalogCMDService) UpdateRemotePcCatalogScopes(ctx context.Context, customerId string, siteId string, catalogId string) ApiUpdateRemotePcCatalogScopesRequest {
	return ApiUpdateRemotePcCatalogScopesRequest{
		ApiService: a,
		ctx:        ctx,
		customerId: customerId,
		siteId:     siteId,
		catalogId:  catalogId,
	}
}

// Execute executes the request
//
//	@return string
func (a *CatalogCMDService) UpdateRemotePcCatalogScopesExecute(r ApiUpdateRemotePcCatalogScopesRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CatalogCMDService.UpdateRemotePcCatalogScopes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{customerId}/{siteId}/catalogs/{catalogId}/scopes"
	localVarPath = strings.Replace(localVarPath, "{"+"customerId"+"}", url.PathEscape(parameterValueToString(r.customerId, "customerId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"siteId"+"}", url.PathEscape(parameterValueToString(r.siteId, "siteId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"catalogId"+"}", url.PathEscape(parameterValueToString(r.catalogId, "catalogId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.citrixTransactionId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-TransactionId", r.citrixTransactionId, "")
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CWSAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
