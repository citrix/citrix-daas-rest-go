/*
Citrix Virtual App & Desktop Catalog Service 147.0.26651.57932

Catalog Service

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickdeploy

import (
	"encoding/json"
	"fmt"
)

// ResourceLocationJobState the model 'ResourceLocationJobState'
type ResourceLocationJobState string

// List of ResourceLocationJobState
const (
	RESOURCELOCATIONJOBSTATE_NOT_STARTED    ResourceLocationJobState = "NotStarted"
	RESOURCELOCATIONJOBSTATE_RUNNING        ResourceLocationJobState = "Running"
	RESOURCELOCATIONJOBSTATE_COMPLETE       ResourceLocationJobState = "Complete"
	RESOURCELOCATIONJOBSTATE_FAILED         ResourceLocationJobState = "Failed"
	RESOURCELOCATIONJOBSTATE_FAILED_PARTIAL ResourceLocationJobState = "FailedPartial"
)

// All allowed values of ResourceLocationJobState enum
var AllowedResourceLocationJobStateEnumValues = []ResourceLocationJobState{
	"NotStarted",
	"Running",
	"Complete",
	"Failed",
	"FailedPartial",
}

func (v *ResourceLocationJobState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	*v = ResourceLocationJobState(value)
	return nil
}

// NewResourceLocationJobStateFromValue returns a pointer to a valid ResourceLocationJobState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewResourceLocationJobStateFromValue(v string) (*ResourceLocationJobState, error) {
	ev := ResourceLocationJobState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ResourceLocationJobState: valid values are %v", v, AllowedResourceLocationJobStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ResourceLocationJobState) IsValid() bool {
	for _, existing := range AllowedResourceLocationJobStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ResourceLocationJobState value
func (v ResourceLocationJobState) Ptr() *ResourceLocationJobState {
	return &v
}

type NullableResourceLocationJobState struct {
	value *ResourceLocationJobState
	isSet bool
}

func (v NullableResourceLocationJobState) Get() *ResourceLocationJobState {
	return v.value
}

func (v *NullableResourceLocationJobState) Set(val *ResourceLocationJobState) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceLocationJobState) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceLocationJobState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceLocationJobState(val *ResourceLocationJobState) *NullableResourceLocationJobState {
	return &NullableResourceLocationJobState{value: val, isSet: true}
}

func (v NullableResourceLocationJobState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceLocationJobState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
