/*
Citrix Virtual App & Desktop Catalog Service 148.0.26750.34636

Catalog Service

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickdeploy

import (
	"encoding/json"
	"fmt"
)

// TemplateImageState State of the template image
type TemplateImageState string

// List of TemplateImageState
const (
	TEMPLATEIMAGESTATE_PENDING                   TemplateImageState = "Pending"
	TEMPLATEIMAGESTATE_READY                     TemplateImageState = "Ready"
	TEMPLATEIMAGESTATE_ENUMERATING               TemplateImageState = "Enumerating"
	TEMPLATEIMAGESTATE_FAILED                    TemplateImageState = "Failed"
	TEMPLATEIMAGESTATE_NOT_STARTED               TemplateImageState = "NotStarted"
	TEMPLATEIMAGESTATE_AZURE_RESOURCES_NOT_FOUND TemplateImageState = "AzureResourcesNotFound"
	TEMPLATEIMAGESTATE_BUILDER_PROVISIONING      TemplateImageState = "BuilderProvisioning"
	TEMPLATEIMAGESTATE_BUILDER_ACTIVE            TemplateImageState = "BuilderActive"
	TEMPLATEIMAGESTATE_BUILDER_STOPPED           TemplateImageState = "BuilderStopped"
	TEMPLATEIMAGESTATE_BUILDER_VERIFYING         TemplateImageState = "BuilderVerifying"
	TEMPLATEIMAGESTATE_BUILDER_RESTARTING        TemplateImageState = "BuilderRestarting"
	TEMPLATEIMAGESTATE_IMPORTING                 TemplateImageState = "Importing"
)

// All allowed values of TemplateImageState enum
var AllowedTemplateImageStateEnumValues = []TemplateImageState{
	"Pending",
	"Ready",
	"Enumerating",
	"Failed",
	"NotStarted",
	"AzureResourcesNotFound",
	"BuilderProvisioning",
	"BuilderActive",
	"BuilderStopped",
	"BuilderVerifying",
	"BuilderRestarting",
	"Importing",
}

func (v *TemplateImageState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	*v = TemplateImageState(value)
	return nil
}

// NewTemplateImageStateFromValue returns a pointer to a valid TemplateImageState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTemplateImageStateFromValue(v string) (*TemplateImageState, error) {
	ev := TemplateImageState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TemplateImageState: valid values are %v", v, AllowedTemplateImageStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TemplateImageState) IsValid() bool {
	for _, existing := range AllowedTemplateImageStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TemplateImageState value
func (v TemplateImageState) Ptr() *TemplateImageState {
	return &v
}

type NullableTemplateImageState struct {
	value *TemplateImageState
	isSet bool
}

func (v NullableTemplateImageState) Get() *TemplateImageState {
	return v.value
}

func (v *NullableTemplateImageState) Set(val *TemplateImageState) {
	v.value = val
	v.isSet = true
}

func (v NullableTemplateImageState) IsSet() bool {
	return v.isSet
}

func (v *NullableTemplateImageState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTemplateImageState(val *TemplateImageState) *NullableTemplateImageState {
	return &NullableTemplateImageState{value: val, isSet: true}
}

func (v NullableTemplateImageState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTemplateImageState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
