/*
Citrix Virtual App & Desktop Catalog Service 148.0.26750.34636

Catalog Service

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickdeploy

import (
	"encoding/json"
	"time"
)

// checks if the SnapshotModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SnapshotModel{}

// SnapshotModel struct for SnapshotModel
type SnapshotModel struct {
	TimeStamp    *time.Time    `json:"timeStamp,omitempty"`
	Type         *SnapshotType `json:"type,omitempty"`
	DisplayName  *string       `json:"displayName,omitempty"`
	SnapshotName *string       `json:"snapshotName,omitempty" validate:"regexp=^[a-zA-Z0-9_]*$"`
}

// NewSnapshotModelWithDefaults instantiates a new SnapshotModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSnapshotModelWithDefaults() *SnapshotModel {
	this := SnapshotModel{}
	return &this
}

// GetTimeStamp returns the TimeStamp field value if set, zero value otherwise.
func (o *SnapshotModel) GetTimeStamp() time.Time {
	if o == nil || IsNil(o.TimeStamp) {
		var ret time.Time
		return ret
	}
	return *o.TimeStamp
}

// GetTimeStampOk returns a tuple with the TimeStamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnapshotModel) GetTimeStampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.TimeStamp) {
		return nil, false
	}
	return o.TimeStamp, true
}

// SetTimeStamp gets a reference to the given time.Time and assigns it to the TimeStamp field.
func (o *SnapshotModel) SetTimeStamp(v time.Time) {
	o.TimeStamp = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SnapshotModel) GetType() SnapshotType {
	if o == nil || IsNil(o.Type) {
		var ret SnapshotType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnapshotModel) GetTypeOk() (*SnapshotType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// SetType gets a reference to the given SnapshotType and assigns it to the Type field.
func (o *SnapshotModel) SetType(v SnapshotType) {
	o.Type = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *SnapshotModel) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnapshotModel) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *SnapshotModel) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetSnapshotName returns the SnapshotName field value if set, zero value otherwise.
func (o *SnapshotModel) GetSnapshotName() string {
	if o == nil || IsNil(o.SnapshotName) {
		var ret string
		return ret
	}
	return *o.SnapshotName
}

// GetSnapshotNameOk returns a tuple with the SnapshotName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnapshotModel) GetSnapshotNameOk() (*string, bool) {
	if o == nil || IsNil(o.SnapshotName) {
		return nil, false
	}
	return o.SnapshotName, true
}

// SetSnapshotName gets a reference to the given string and assigns it to the SnapshotName field.
func (o *SnapshotModel) SetSnapshotName(v string) {
	o.SnapshotName = &v
}

func (o SnapshotModel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SnapshotModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TimeStamp) {
		toSerialize["timeStamp"] = o.TimeStamp
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.SnapshotName) {
		toSerialize["snapshotName"] = o.SnapshotName
	}
	return toSerialize, nil
}

type NullableSnapshotModel struct {
	value *SnapshotModel
	isSet bool
}

func (v NullableSnapshotModel) Get() *SnapshotModel {
	return v.value
}

func (v *NullableSnapshotModel) Set(val *SnapshotModel) {
	v.value = val
	v.isSet = true
}

func (v NullableSnapshotModel) IsSet() bool {
	return v.isSet
}

func (v *NullableSnapshotModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSnapshotModel(val *SnapshotModel) *NullableSnapshotModel {
	return &NullableSnapshotModel{value: val, isSet: true}
}

func (v NullableSnapshotModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSnapshotModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
