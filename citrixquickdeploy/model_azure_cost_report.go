/*
Citrix Virtual App & Desktop Catalog Service 148.0.26750.34636

Catalog Service

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickdeploy

import (
	"encoding/json"
)

// checks if the AzureCostReport type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AzureCostReport{}

// AzureCostReport struct for AzureCostReport
type AzureCostReport struct {
	// MeterCategory mapping to MeterCost for Azure Meters with defined Citrix Meters
	AzureCostWithCitrixMeters *map[string]float64 `json:"azureCostWithCitrixMeters,omitempty"`
	// MeterCategory mapping to MeterCost for Azure Meters w/o defined Citrix Meters
	AzureCostWithoutCitrixMeters *map[string]float64 `json:"azureCostWithoutCitrixMeters,omitempty"`
}

// NewAzureCostReportWithDefaults instantiates a new AzureCostReport object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAzureCostReportWithDefaults() *AzureCostReport {
	this := AzureCostReport{}
	return &this
}

// GetAzureCostWithCitrixMeters returns the AzureCostWithCitrixMeters field value if set, zero value otherwise.
func (o *AzureCostReport) GetAzureCostWithCitrixMeters() map[string]float64 {
	if o == nil || IsNil(o.AzureCostWithCitrixMeters) {
		var ret map[string]float64
		return ret
	}
	return *o.AzureCostWithCitrixMeters
}

// GetAzureCostWithCitrixMetersOk returns a tuple with the AzureCostWithCitrixMeters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureCostReport) GetAzureCostWithCitrixMetersOk() (*map[string]float64, bool) {
	if o == nil || IsNil(o.AzureCostWithCitrixMeters) {
		return nil, false
	}
	return o.AzureCostWithCitrixMeters, true
}

// SetAzureCostWithCitrixMeters gets a reference to the given map[string]float64 and assigns it to the AzureCostWithCitrixMeters field.
func (o *AzureCostReport) SetAzureCostWithCitrixMeters(v map[string]float64) {
	o.AzureCostWithCitrixMeters = &v
}

// GetAzureCostWithoutCitrixMeters returns the AzureCostWithoutCitrixMeters field value if set, zero value otherwise.
func (o *AzureCostReport) GetAzureCostWithoutCitrixMeters() map[string]float64 {
	if o == nil || IsNil(o.AzureCostWithoutCitrixMeters) {
		var ret map[string]float64
		return ret
	}
	return *o.AzureCostWithoutCitrixMeters
}

// GetAzureCostWithoutCitrixMetersOk returns a tuple with the AzureCostWithoutCitrixMeters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureCostReport) GetAzureCostWithoutCitrixMetersOk() (*map[string]float64, bool) {
	if o == nil || IsNil(o.AzureCostWithoutCitrixMeters) {
		return nil, false
	}
	return o.AzureCostWithoutCitrixMeters, true
}

// SetAzureCostWithoutCitrixMeters gets a reference to the given map[string]float64 and assigns it to the AzureCostWithoutCitrixMeters field.
func (o *AzureCostReport) SetAzureCostWithoutCitrixMeters(v map[string]float64) {
	o.AzureCostWithoutCitrixMeters = &v
}

func (o AzureCostReport) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AzureCostReport) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AzureCostWithCitrixMeters) {
		toSerialize["azureCostWithCitrixMeters"] = o.AzureCostWithCitrixMeters
	}
	if !IsNil(o.AzureCostWithoutCitrixMeters) {
		toSerialize["azureCostWithoutCitrixMeters"] = o.AzureCostWithoutCitrixMeters
	}
	return toSerialize, nil
}

type NullableAzureCostReport struct {
	value *AzureCostReport
	isSet bool
}

func (v NullableAzureCostReport) Get() *AzureCostReport {
	return v.value
}

func (v *NullableAzureCostReport) Set(val *AzureCostReport) {
	v.value = val
	v.isSet = true
}

func (v NullableAzureCostReport) IsSet() bool {
	return v.isSet
}

func (v *NullableAzureCostReport) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAzureCostReport(val *AzureCostReport) *NullableAzureCostReport {
	return &NullableAzureCostReport{value: val, isSet: true}
}

func (v NullableAzureCostReport) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAzureCostReport) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
