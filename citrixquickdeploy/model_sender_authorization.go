/*
Citrix Virtual App & Desktop Catalog Service 147.0.26651.57932

Catalog Service

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickdeploy

import (
	"encoding/json"
)

// checks if the SenderAuthorization type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SenderAuthorization{}

// SenderAuthorization struct for SenderAuthorization
type SenderAuthorization struct {
	Action *string `json:"action,omitempty"`
	Role   *string `json:"role,omitempty"`
	Scope  *string `json:"scope,omitempty"`
}

// NewSenderAuthorizationWithDefaults instantiates a new SenderAuthorization object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSenderAuthorizationWithDefaults() *SenderAuthorization {
	this := SenderAuthorization{}
	return &this
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *SenderAuthorization) GetAction() string {
	if o == nil || IsNil(o.Action) {
		var ret string
		return ret
	}
	return *o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SenderAuthorization) GetActionOk() (*string, bool) {
	if o == nil || IsNil(o.Action) {
		return nil, false
	}
	return o.Action, true
}

// SetAction gets a reference to the given string and assigns it to the Action field.
func (o *SenderAuthorization) SetAction(v string) {
	o.Action = &v
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *SenderAuthorization) GetRole() string {
	if o == nil || IsNil(o.Role) {
		var ret string
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SenderAuthorization) GetRoleOk() (*string, bool) {
	if o == nil || IsNil(o.Role) {
		return nil, false
	}
	return o.Role, true
}

// SetRole gets a reference to the given string and assigns it to the Role field.
func (o *SenderAuthorization) SetRole(v string) {
	o.Role = &v
}

// GetScope returns the Scope field value if set, zero value otherwise.
func (o *SenderAuthorization) GetScope() string {
	if o == nil || IsNil(o.Scope) {
		var ret string
		return ret
	}
	return *o.Scope
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SenderAuthorization) GetScopeOk() (*string, bool) {
	if o == nil || IsNil(o.Scope) {
		return nil, false
	}
	return o.Scope, true
}

// SetScope gets a reference to the given string and assigns it to the Scope field.
func (o *SenderAuthorization) SetScope(v string) {
	o.Scope = &v
}

func (o SenderAuthorization) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SenderAuthorization) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Action) {
		toSerialize["action"] = o.Action
	}
	if !IsNil(o.Role) {
		toSerialize["role"] = o.Role
	}
	if !IsNil(o.Scope) {
		toSerialize["scope"] = o.Scope
	}
	return toSerialize, nil
}

type NullableSenderAuthorization struct {
	value *SenderAuthorization
	isSet bool
}

func (v NullableSenderAuthorization) Get() *SenderAuthorization {
	return v.value
}

func (v *NullableSenderAuthorization) Set(val *SenderAuthorization) {
	v.value = val
	v.isSet = true
}

func (v NullableSenderAuthorization) IsSet() bool {
	return v.isSet
}

func (v *NullableSenderAuthorization) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSenderAuthorization(val *SenderAuthorization) *NullableSenderAuthorization {
	return &NullableSenderAuthorization{value: val, isSet: true}
}

func (v NullableSenderAuthorization) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSenderAuthorization) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
