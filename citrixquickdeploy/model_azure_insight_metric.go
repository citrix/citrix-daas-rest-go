/*
Citrix Virtual App & Desktop Catalog Service 147.0.26651.57932

Catalog Service

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickdeploy

import (
	"encoding/json"
)

// checks if the AzureInsightMetric type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AzureInsightMetric{}

// AzureInsightMetric struct for AzureInsightMetric
type AzureInsightMetric struct {
	Name *LocalizableString `json:"name,omitempty"`
	Unit *Unit              `json:"unit,omitempty"`
	Data []MetricData       `json:"data,omitempty"`
}

// NewAzureInsightMetricWithDefaults instantiates a new AzureInsightMetric object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAzureInsightMetricWithDefaults() *AzureInsightMetric {
	this := AzureInsightMetric{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AzureInsightMetric) GetName() LocalizableString {
	if o == nil || IsNil(o.Name) {
		var ret LocalizableString
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureInsightMetric) GetNameOk() (*LocalizableString, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// SetName gets a reference to the given LocalizableString and assigns it to the Name field.
func (o *AzureInsightMetric) SetName(v LocalizableString) {
	o.Name = &v
}

// GetUnit returns the Unit field value if set, zero value otherwise.
func (o *AzureInsightMetric) GetUnit() Unit {
	if o == nil || IsNil(o.Unit) {
		var ret Unit
		return ret
	}
	return *o.Unit
}

// GetUnitOk returns a tuple with the Unit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureInsightMetric) GetUnitOk() (*Unit, bool) {
	if o == nil || IsNil(o.Unit) {
		return nil, false
	}
	return o.Unit, true
}

// SetUnit gets a reference to the given Unit and assigns it to the Unit field.
func (o *AzureInsightMetric) SetUnit(v Unit) {
	o.Unit = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *AzureInsightMetric) GetData() []MetricData {
	if o == nil || IsNil(o.Data) {
		var ret []MetricData
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureInsightMetric) GetDataOk() ([]MetricData, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// SetData gets a reference to the given []MetricData and assigns it to the Data field.
func (o *AzureInsightMetric) SetData(v []MetricData) {
	o.Data = v
}

func (o AzureInsightMetric) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AzureInsightMetric) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Unit) {
		toSerialize["unit"] = o.Unit
	}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	return toSerialize, nil
}

type NullableAzureInsightMetric struct {
	value *AzureInsightMetric
	isSet bool
}

func (v NullableAzureInsightMetric) Get() *AzureInsightMetric {
	return v.value
}

func (v *NullableAzureInsightMetric) Set(val *AzureInsightMetric) {
	v.value = val
	v.isSet = true
}

func (v NullableAzureInsightMetric) IsSet() bool {
	return v.isSet
}

func (v *NullableAzureInsightMetric) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAzureInsightMetric(val *AzureInsightMetric) *NullableAzureInsightMetric {
	return &NullableAzureInsightMetric{value: val, isSet: true}
}

func (v NullableAzureInsightMetric) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAzureInsightMetric) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
