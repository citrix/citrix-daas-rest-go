/*
Citrix Virtual App & Desktop Catalog Service 147.0.26651.57932

Catalog Service

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickdeploy

import (
	"encoding/json"
	"fmt"
)

// CatalogJobSubState the model 'CatalogJobSubState'
type CatalogJobSubState string

// List of CatalogJobSubState
const (
	CATALOGJOBSUBSTATE_PROCESSING_VDA_DEPLOYING_CITRIX_SERVERS             CatalogJobSubState = "ProcessingVdaDeployingCitrixServers"
	CATALOGJOBSUBSTATE_PROCESSING_VDA_UPDATING_CITRIX_SERVERS              CatalogJobSubState = "ProcessingVdaUpdatingCitrixServers"
	CATALOGJOBSUBSTATE_PROCESSING_VDA_DELETING_CITRIX_SERVERS              CatalogJobSubState = "ProcessingVdaDeletingCitrixServers"
	CATALOGJOBSUBSTATE_PROCESSING_VDA_COPYING_MASTER_IMAGE                 CatalogJobSubState = "ProcessingVdaCopyingMasterImage"
	CATALOGJOBSUBSTATE_PROCESSING_CAPACITY_SMART_SCALE                     CatalogJobSubState = "ProcessingCapacitySmartScale"
	CATALOGJOBSUBSTATE_PROCESSING_CAPACITY_VDA_POLICY                      CatalogJobSubState = "ProcessingCapacityVdaPolicy"
	CATALOGJOBSUBSTATE_PROCESSING_CREATING_N_FUSE_FEED                     CatalogJobSubState = "ProcessingCreatingNFuseFeed"
	CATALOGJOBSUBSTATE_PROCESSING_DELETING_N_FUSE_FEED                     CatalogJobSubState = "ProcessingDeletingNFuseFeed"
	CATALOGJOBSUBSTATE_PROCESSING_CAPACITY_VM_CAPACITY                     CatalogJobSubState = "ProcessingCapacityVmCapacity"
	CATALOGJOBSUBSTATE_PROCESSING_CAPACITY_BROKER_SETTINGS                 CatalogJobSubState = "ProcessingCapacityBrokerSettings"
	CATALOGJOBSUBSTATE_PROCESSING_DELETE_VDA_MACHINE                       CatalogJobSubState = "ProcessingDeleteVdaMachine"
	CATALOGJOBSUBSTATE_PROCESSING_VDA_RESTORE_STOPPING                     CatalogJobSubState = "ProcessingVdaRestoreStopping"
	CATALOGJOBSUBSTATE_PROCESSING_VDA_RESTORE_ATTACH_DISK                  CatalogJobSubState = "ProcessingVdaRestoreAttachDisk"
	CATALOGJOBSUBSTATE_PROCESSING_VDA_RESTORE_STARTING                     CatalogJobSubState = "ProcessingVdaRestoreStarting"
	CATALOGJOBSUBSTATE_PROCESSING_UPDATING_HOSTING_UNIT                    CatalogJobSubState = "ProcessingUpdatingHostingUnit"
	CATALOGJOBSUBSTATE_ERROR_VDA_DEPLOYING_CITRIX_SERVERS_FAILED           CatalogJobSubState = "ErrorVdaDeployingCitrixServersFailed"
	CATALOGJOBSUBSTATE_ERROR_VDA_DELETING_CITRIX_SERVERS_FAILED            CatalogJobSubState = "ErrorVdaDeletingCitrixServersFailed"
	CATALOGJOBSUBSTATE_ERROR_VDA_UPDATE_CITRIX_SERVERS_FAILED              CatalogJobSubState = "ErrorVdaUpdateCitrixServersFailed"
	CATALOGJOBSUBSTATE_ERROR_CAPACITY_SMART_SCALE_FAILED                   CatalogJobSubState = "ErrorCapacitySmartScaleFailed"
	CATALOGJOBSUBSTATE_ERROR_CAPACITY_VDA_POLICY_FAILED                    CatalogJobSubState = "ErrorCapacityVdaPolicyFailed"
	CATALOGJOBSUBSTATE_ERROR_INVALID_CREDENTIALS                           CatalogJobSubState = "ErrorInvalidCredentials"
	CATALOGJOBSUBSTATE_ERROR_CAPACITY_VM_CAPACITY_FAILED                   CatalogJobSubState = "ErrorCapacityVmCapacityFailed"
	CATALOGJOBSUBSTATE_ERROR_CAPACITY_UPDATE_BROKER_SETTINGS_FAILED        CatalogJobSubState = "ErrorCapacityUpdateBrokerSettingsFailed"
	CATALOGJOBSUBSTATE_ERROR_DELETE_VDA_MACHINE_FAILED                     CatalogJobSubState = "ErrorDeleteVdaMachineFailed"
	CATALOGJOBSUBSTATE_ERROR_DELETE_VDA_INVALID_CREDENTIAL                 CatalogJobSubState = "ErrorDeleteVdaInvalidCredential"
	CATALOGJOBSUBSTATE_ERROR_DELETE_VDA_CLOUD_IDENTITY_SERVICE_UNAVAILABLE CatalogJobSubState = "ErrorDeleteVdaCloudIdentityServiceUnavailable"
	CATALOGJOBSUBSTATE_ERROR_VDA_RESTORE_FAILED_WITH_ROLLBACK              CatalogJobSubState = "ErrorVdaRestoreFailedWithRollback"
	CATALOGJOBSUBSTATE_ERROR_HOSTING_UNIT_UPDATE_NOT_POSSIBLE              CatalogJobSubState = "ErrorHostingUnitUpdateNotPossible"
	CATALOGJOBSUBSTATE_ERROR_HOSTING_UNIT_UPDATE_MCS_APP_FAILED            CatalogJobSubState = "ErrorHostingUnitUpdateMcsAppFailed"
	CATALOGJOBSUBSTATE_ERROR_HOSTING_UINT_UPDATE_PER_SUB_APP_FAILED        CatalogJobSubState = "ErrorHostingUintUpdatePerSubAppFailed"
	CATALOGJOBSUBSTATE_PROCESSING_UPDATING_MACHINE_ASSIGNMENTS             CatalogJobSubState = "ProcessingUpdatingMachineAssignments"
	CATALOGJOBSUBSTATE_PROCESSING_UPDATING_ENROLLMENT_SCOPES               CatalogJobSubState = "ProcessingUpdatingEnrollmentScopes"
	CATALOGJOBSUBSTATE_PROCESSING_CREATING_REMOTE_PC_CATALOG               CatalogJobSubState = "ProcessingCreatingRemotePcCatalog"
	CATALOGJOBSUBSTATE_COMPLETE                                            CatalogJobSubState = "Complete"
	CATALOGJOBSUBSTATE_PROCESSING_AWAITING_SYSTEM_MAINTENANCE              CatalogJobSubState = "ProcessingAwaitingSystemMaintenance"
	CATALOGJOBSUBSTATE_PROCESSING_CREATING_DIRECTOR_USER                   CatalogJobSubState = "ProcessingCreatingDirectorUser"
	CATALOGJOBSUBSTATE_PROCESSING_DELETING_DIRECTOR_USER                   CatalogJobSubState = "ProcessingDeletingDirectorUser"
	CATALOGJOBSUBSTATE_PROCESSING_CREATING_STORE_FRONT_STORE               CatalogJobSubState = "ProcessingCreatingStoreFrontStore"
	CATALOGJOBSUBSTATE_PROCESSING_DELETING_STORE_FRONT_STORE               CatalogJobSubState = "ProcessingDeletingStoreFrontStore"
	CATALOGJOBSUBSTATE_ERROR_CREATING_DIRECTOR_USER                        CatalogJobSubState = "ErrorCreatingDirectorUser"
	CATALOGJOBSUBSTATE_ERROR_DELETING_DIRECTOR_USER                        CatalogJobSubState = "ErrorDeletingDirectorUser"
	CATALOGJOBSUBSTATE_ERROR_CREATING_STORE_FRONT_STORE                    CatalogJobSubState = "ErrorCreatingStoreFrontStore"
	CATALOGJOBSUBSTATE_ERROR_DELETING_STORE_FRONT_STORE                    CatalogJobSubState = "ErrorDeletingStoreFrontStore"
)

// All allowed values of CatalogJobSubState enum
var AllowedCatalogJobSubStateEnumValues = []CatalogJobSubState{
	"ProcessingVdaDeployingCitrixServers",
	"ProcessingVdaUpdatingCitrixServers",
	"ProcessingVdaDeletingCitrixServers",
	"ProcessingVdaCopyingMasterImage",
	"ProcessingCapacitySmartScale",
	"ProcessingCapacityVdaPolicy",
	"ProcessingCreatingNFuseFeed",
	"ProcessingDeletingNFuseFeed",
	"ProcessingCapacityVmCapacity",
	"ProcessingCapacityBrokerSettings",
	"ProcessingDeleteVdaMachine",
	"ProcessingVdaRestoreStopping",
	"ProcessingVdaRestoreAttachDisk",
	"ProcessingVdaRestoreStarting",
	"ProcessingUpdatingHostingUnit",
	"ErrorVdaDeployingCitrixServersFailed",
	"ErrorVdaDeletingCitrixServersFailed",
	"ErrorVdaUpdateCitrixServersFailed",
	"ErrorCapacitySmartScaleFailed",
	"ErrorCapacityVdaPolicyFailed",
	"ErrorInvalidCredentials",
	"ErrorCapacityVmCapacityFailed",
	"ErrorCapacityUpdateBrokerSettingsFailed",
	"ErrorDeleteVdaMachineFailed",
	"ErrorDeleteVdaInvalidCredential",
	"ErrorDeleteVdaCloudIdentityServiceUnavailable",
	"ErrorVdaRestoreFailedWithRollback",
	"ErrorHostingUnitUpdateNotPossible",
	"ErrorHostingUnitUpdateMcsAppFailed",
	"ErrorHostingUintUpdatePerSubAppFailed",
	"ProcessingUpdatingMachineAssignments",
	"ProcessingUpdatingEnrollmentScopes",
	"ProcessingCreatingRemotePcCatalog",
	"Complete",
	"ProcessingAwaitingSystemMaintenance",
	"ProcessingCreatingDirectorUser",
	"ProcessingDeletingDirectorUser",
	"ProcessingCreatingStoreFrontStore",
	"ProcessingDeletingStoreFrontStore",
	"ErrorCreatingDirectorUser",
	"ErrorDeletingDirectorUser",
	"ErrorCreatingStoreFrontStore",
	"ErrorDeletingStoreFrontStore",
}

func (v *CatalogJobSubState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	*v = CatalogJobSubState(value)
	return nil
}

// NewCatalogJobSubStateFromValue returns a pointer to a valid CatalogJobSubState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCatalogJobSubStateFromValue(v string) (*CatalogJobSubState, error) {
	ev := CatalogJobSubState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CatalogJobSubState: valid values are %v", v, AllowedCatalogJobSubStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CatalogJobSubState) IsValid() bool {
	for _, existing := range AllowedCatalogJobSubStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CatalogJobSubState value
func (v CatalogJobSubState) Ptr() *CatalogJobSubState {
	return &v
}

type NullableCatalogJobSubState struct {
	value *CatalogJobSubState
	isSet bool
}

func (v NullableCatalogJobSubState) Get() *CatalogJobSubState {
	return v.value
}

func (v *NullableCatalogJobSubState) Set(val *CatalogJobSubState) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogJobSubState) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogJobSubState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogJobSubState(val *CatalogJobSubState) *NullableCatalogJobSubState {
	return &NullableCatalogJobSubState{value: val, isSet: true}
}

func (v NullableCatalogJobSubState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogJobSubState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
