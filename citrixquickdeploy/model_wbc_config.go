/*
Citrix Virtual App & Desktop Catalog Service 147.0.26651.57932

Catalog Service

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickdeploy

import (
	"encoding/json"
)

// checks if the WbcConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WbcConfig{}

// WbcConfig struct for WbcConfig
type WbcConfig struct {
	// Indicates whether or not write back cache is enabled for the VMs created from this provisioning scheme.  Optional; default is `false`.
	UseWriteBackCache *bool `json:"useWriteBackCache,omitempty"`
	// The size in GB of any temporary storage disk used by the write back cache.  Should be used in conjunction with Citrix.XenDesktop.Cloud.CatalogCommon.Models.Configuration.Catalogs.WbcConfig.WriteBackCacheMemorySizeMB.
	WriteBackCacheDiskSizeGB *int32 `json:"writeBackCacheDiskSizeGB,omitempty"`
	// The size in MB of any write back cache if required.  Should be used in conjunction with Citrix.XenDesktop.Cloud.CatalogCommon.Models.Configuration.Catalogs.WbcConfig.WriteBackCacheDiskSizeGB.
	WriteBackCacheMemorySizeMB *int32 `json:"writeBackCacheMemorySizeMB,omitempty"`
	// Indicates whether to use persistent write-back cache disk
	PersistWBC *bool `json:"persistWBC,omitempty"`
	// Indicates whether to retain system disk during power cycles
	PersistOsDisk *bool `json:"persistOsDisk,omitempty"`
}

// NewWbcConfigWithDefaults instantiates a new WbcConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWbcConfigWithDefaults() *WbcConfig {
	this := WbcConfig{}
	var useWriteBackCache bool = false
	this.UseWriteBackCache = &useWriteBackCache
	return &this
}

// GetUseWriteBackCache returns the UseWriteBackCache field value if set, zero value otherwise.
func (o *WbcConfig) GetUseWriteBackCache() bool {
	if o == nil || IsNil(o.UseWriteBackCache) {
		var ret bool
		return ret
	}
	return *o.UseWriteBackCache
}

// GetUseWriteBackCacheOk returns a tuple with the UseWriteBackCache field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WbcConfig) GetUseWriteBackCacheOk() (*bool, bool) {
	if o == nil || IsNil(o.UseWriteBackCache) {
		return nil, false
	}
	return o.UseWriteBackCache, true
}

// SetUseWriteBackCache gets a reference to the given bool and assigns it to the UseWriteBackCache field.
func (o *WbcConfig) SetUseWriteBackCache(v bool) {
	o.UseWriteBackCache = &v
}

// GetWriteBackCacheDiskSizeGB returns the WriteBackCacheDiskSizeGB field value if set, zero value otherwise.
func (o *WbcConfig) GetWriteBackCacheDiskSizeGB() int32 {
	if o == nil || IsNil(o.WriteBackCacheDiskSizeGB) {
		var ret int32
		return ret
	}
	return *o.WriteBackCacheDiskSizeGB
}

// GetWriteBackCacheDiskSizeGBOk returns a tuple with the WriteBackCacheDiskSizeGB field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WbcConfig) GetWriteBackCacheDiskSizeGBOk() (*int32, bool) {
	if o == nil || IsNil(o.WriteBackCacheDiskSizeGB) {
		return nil, false
	}
	return o.WriteBackCacheDiskSizeGB, true
}

// SetWriteBackCacheDiskSizeGB gets a reference to the given int32 and assigns it to the WriteBackCacheDiskSizeGB field.
func (o *WbcConfig) SetWriteBackCacheDiskSizeGB(v int32) {
	o.WriteBackCacheDiskSizeGB = &v
}

// GetWriteBackCacheMemorySizeMB returns the WriteBackCacheMemorySizeMB field value if set, zero value otherwise.
func (o *WbcConfig) GetWriteBackCacheMemorySizeMB() int32 {
	if o == nil || IsNil(o.WriteBackCacheMemorySizeMB) {
		var ret int32
		return ret
	}
	return *o.WriteBackCacheMemorySizeMB
}

// GetWriteBackCacheMemorySizeMBOk returns a tuple with the WriteBackCacheMemorySizeMB field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WbcConfig) GetWriteBackCacheMemorySizeMBOk() (*int32, bool) {
	if o == nil || IsNil(o.WriteBackCacheMemorySizeMB) {
		return nil, false
	}
	return o.WriteBackCacheMemorySizeMB, true
}

// SetWriteBackCacheMemorySizeMB gets a reference to the given int32 and assigns it to the WriteBackCacheMemorySizeMB field.
func (o *WbcConfig) SetWriteBackCacheMemorySizeMB(v int32) {
	o.WriteBackCacheMemorySizeMB = &v
}

// GetPersistWBC returns the PersistWBC field value if set, zero value otherwise.
func (o *WbcConfig) GetPersistWBC() bool {
	if o == nil || IsNil(o.PersistWBC) {
		var ret bool
		return ret
	}
	return *o.PersistWBC
}

// GetPersistWBCOk returns a tuple with the PersistWBC field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WbcConfig) GetPersistWBCOk() (*bool, bool) {
	if o == nil || IsNil(o.PersistWBC) {
		return nil, false
	}
	return o.PersistWBC, true
}

// SetPersistWBC gets a reference to the given bool and assigns it to the PersistWBC field.
func (o *WbcConfig) SetPersistWBC(v bool) {
	o.PersistWBC = &v
}

// GetPersistOsDisk returns the PersistOsDisk field value if set, zero value otherwise.
func (o *WbcConfig) GetPersistOsDisk() bool {
	if o == nil || IsNil(o.PersistOsDisk) {
		var ret bool
		return ret
	}
	return *o.PersistOsDisk
}

// GetPersistOsDiskOk returns a tuple with the PersistOsDisk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WbcConfig) GetPersistOsDiskOk() (*bool, bool) {
	if o == nil || IsNil(o.PersistOsDisk) {
		return nil, false
	}
	return o.PersistOsDisk, true
}

// SetPersistOsDisk gets a reference to the given bool and assigns it to the PersistOsDisk field.
func (o *WbcConfig) SetPersistOsDisk(v bool) {
	o.PersistOsDisk = &v
}

func (o WbcConfig) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WbcConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UseWriteBackCache) {
		toSerialize["useWriteBackCache"] = o.UseWriteBackCache
	}
	if !IsNil(o.WriteBackCacheDiskSizeGB) {
		toSerialize["writeBackCacheDiskSizeGB"] = o.WriteBackCacheDiskSizeGB
	}
	if !IsNil(o.WriteBackCacheMemorySizeMB) {
		toSerialize["writeBackCacheMemorySizeMB"] = o.WriteBackCacheMemorySizeMB
	}
	if !IsNil(o.PersistWBC) {
		toSerialize["persistWBC"] = o.PersistWBC
	}
	if !IsNil(o.PersistOsDisk) {
		toSerialize["persistOsDisk"] = o.PersistOsDisk
	}
	return toSerialize, nil
}

type NullableWbcConfig struct {
	value *WbcConfig
	isSet bool
}

func (v NullableWbcConfig) Get() *WbcConfig {
	return v.value
}

func (v *NullableWbcConfig) Set(val *WbcConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableWbcConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableWbcConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWbcConfig(val *WbcConfig) *NullableWbcConfig {
	return &NullableWbcConfig{value: val, isSet: true}
}

func (v NullableWbcConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWbcConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
