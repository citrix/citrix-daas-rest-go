/*
Citrix Virtual App & Desktop Catalog Service 147.0.26651.57932

Catalog Service

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickdeploy

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"reflect"
	"strings"
)

// MasterImageCMDService MasterImageCMD service
type MasterImageCMDService service

type ApiAddTemplateImageRequest struct {
	ctx                 context.Context
	ApiService          *MasterImageCMDService
	customerId          string
	siteId              string
	citrixTransactionId *string
	body                *AddTemplateImageModel
}

// The Transaction Id.
func (r ApiAddTemplateImageRequest) CitrixTransactionId(citrixTransactionId string) ApiAddTemplateImageRequest {
	r.citrixTransactionId = &citrixTransactionId
	return r
}

// Configuration of the master image to add
func (r ApiAddTemplateImageRequest) Body(body AddTemplateImageModel) ApiAddTemplateImageRequest {
	r.body = &body
	return r
}

func (r ApiAddTemplateImageRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.AddTemplateImageExecute(r)
}

/*
AddTemplateImage Add a new master image to the XenApp Essential customer's account, which is linked to a VHD image inside the customer's storage account.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param customerId Specific customer id
	@param siteId The site ID of the customer
	@return ApiAddTemplateImageRequest
*/
func (a *MasterImageCMDService) AddTemplateImage(ctx context.Context, customerId string, siteId string) ApiAddTemplateImageRequest {
	return ApiAddTemplateImageRequest{
		ApiService: a,
		ctx:        ctx,
		customerId: customerId,
		siteId:     siteId,
	}
}

// Execute executes the request
//
//	@return string
func (a *MasterImageCMDService) AddTemplateImageExecute(r ApiAddTemplateImageRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MasterImageCMDService.AddTemplateImage")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{customerId}/{siteId}/images"
	localVarPath = strings.Replace(localVarPath, "{"+"customerId"+"}", url.PathEscape(parameterValueToString(r.customerId, "customerId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"siteId"+"}", url.PathEscape(parameterValueToString(r.siteId, "siteId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.citrixTransactionId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-TransactionId", r.citrixTransactionId, "")
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CWSAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCancelCustomerImageUrlRequest struct {
	ctx                 context.Context
	ApiService          *MasterImageCMDService
	customerId          string
	siteId              string
	imageId             string
	citrixTransactionId *string
}

// The Transaction Id.
func (r ApiCancelCustomerImageUrlRequest) CitrixTransactionId(citrixTransactionId string) ApiCancelCustomerImageUrlRequest {
	r.citrixTransactionId = &citrixTransactionId
	return r
}

func (r ApiCancelCustomerImageUrlRequest) Execute() (*http.Response, error) {
	return r.ApiService.CancelCustomerImageUrlExecute(r)
}

/*
CancelCustomerImageUrl Cancel url of customer image

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param customerId Specific customer id
	@param siteId The site ID of the customer
	@param imageId The master image to view details of
	@return ApiCancelCustomerImageUrlRequest
*/
func (a *MasterImageCMDService) CancelCustomerImageUrl(ctx context.Context, customerId string, siteId string, imageId string) ApiCancelCustomerImageUrlRequest {
	return ApiCancelCustomerImageUrlRequest{
		ApiService: a,
		ctx:        ctx,
		customerId: customerId,
		siteId:     siteId,
		imageId:    imageId,
	}
}

// Execute executes the request
func (a *MasterImageCMDService) CancelCustomerImageUrlExecute(r ApiCancelCustomerImageUrlRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MasterImageCMDService.CancelCustomerImageUrl")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{customerId}/{siteId}/images/{imageId}/imgUrl"
	localVarPath = strings.Replace(localVarPath, "{"+"customerId"+"}", url.PathEscape(parameterValueToString(r.customerId, "customerId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"siteId"+"}", url.PathEscape(parameterValueToString(r.siteId, "siteId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"imageId"+"}", url.PathEscape(parameterValueToString(r.imageId, "imageId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.citrixTransactionId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-TransactionId", r.citrixTransactionId, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CWSAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCreateCustomerImageUrlRequest struct {
	ctx                 context.Context
	ApiService          *MasterImageCMDService
	customerId          string
	siteId              string
	imageId             string
	citrixTransactionId *string
	body                *CustomerImgUrlModel
}

// The Transaction Id.
func (r ApiCreateCustomerImageUrlRequest) CitrixTransactionId(citrixTransactionId string) ApiCreateCustomerImageUrlRequest {
	r.citrixTransactionId = &citrixTransactionId
	return r
}

func (r ApiCreateCustomerImageUrlRequest) Body(body CustomerImgUrlModel) ApiCreateCustomerImageUrlRequest {
	r.body = &body
	return r
}

func (r ApiCreateCustomerImageUrlRequest) Execute() (*TemplateImageUrl, *http.Response, error) {
	return r.ApiService.CreateCustomerImageUrlExecute(r)
}

/*
CreateCustomerImageUrl Returns url of customer image

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param customerId Specific customer id
	@param siteId The site ID of the customer
	@param imageId The master image to view details of
	@return ApiCreateCustomerImageUrlRequest
*/
func (a *MasterImageCMDService) CreateCustomerImageUrl(ctx context.Context, customerId string, siteId string, imageId string) ApiCreateCustomerImageUrlRequest {
	return ApiCreateCustomerImageUrlRequest{
		ApiService: a,
		ctx:        ctx,
		customerId: customerId,
		siteId:     siteId,
		imageId:    imageId,
	}
}

// Execute executes the request
//
//	@return TemplateImageUrl
func (a *MasterImageCMDService) CreateCustomerImageUrlExecute(r ApiCreateCustomerImageUrlRequest) (*TemplateImageUrl, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *TemplateImageUrl
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MasterImageCMDService.CreateCustomerImageUrl")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{customerId}/{siteId}/images/{imageId}/imgUrl"
	localVarPath = strings.Replace(localVarPath, "{"+"customerId"+"}", url.PathEscape(parameterValueToString(r.customerId, "customerId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"siteId"+"}", url.PathEscape(parameterValueToString(r.siteId, "siteId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"imageId"+"}", url.PathEscape(parameterValueToString(r.imageId, "imageId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.citrixTransactionId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-TransactionId", r.citrixTransactionId, "")
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CWSAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteTemplateImageRequest struct {
	ctx                 context.Context
	ApiService          *MasterImageCMDService
	customerId          string
	siteId              string
	imageId             string
	citrixTransactionId *string
}

// The Transaction Id.
func (r ApiDeleteTemplateImageRequest) CitrixTransactionId(citrixTransactionId string) ApiDeleteTemplateImageRequest {
	r.citrixTransactionId = &citrixTransactionId
	return r
}

func (r ApiDeleteTemplateImageRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteTemplateImageExecute(r)
}

/*
DeleteTemplateImage Delete the specified master image

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param customerId Specific customer id
	@param siteId The site ID of the customer
	@param imageId The master image to update
	@return ApiDeleteTemplateImageRequest
*/
func (a *MasterImageCMDService) DeleteTemplateImage(ctx context.Context, customerId string, siteId string, imageId string) ApiDeleteTemplateImageRequest {
	return ApiDeleteTemplateImageRequest{
		ApiService: a,
		ctx:        ctx,
		customerId: customerId,
		siteId:     siteId,
		imageId:    imageId,
	}
}

// Execute executes the request
func (a *MasterImageCMDService) DeleteTemplateImageExecute(r ApiDeleteTemplateImageRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MasterImageCMDService.DeleteTemplateImage")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{customerId}/{siteId}/images/{imageId}"
	localVarPath = strings.Replace(localVarPath, "{"+"customerId"+"}", url.PathEscape(parameterValueToString(r.customerId, "customerId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"siteId"+"}", url.PathEscape(parameterValueToString(r.siteId, "siteId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"imageId"+"}", url.PathEscape(parameterValueToString(r.imageId, "imageId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.citrixTransactionId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-TransactionId", r.citrixTransactionId, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CWSAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetAzureSasUrlExpiryTimeRequest struct {
	ctx                 context.Context
	ApiService          *MasterImageCMDService
	customerId          string
	siteId              string
	imageId             string
	citrixTransactionId *string
}

// The Transaction Id.
func (r ApiGetAzureSasUrlExpiryTimeRequest) CitrixTransactionId(citrixTransactionId string) ApiGetAzureSasUrlExpiryTimeRequest {
	r.citrixTransactionId = &citrixTransactionId
	return r
}

func (r ApiGetAzureSasUrlExpiryTimeRequest) Execute() (*TemplateImageUrl, *http.Response, error) {
	return r.ApiService.GetAzureSasUrlExpiryTimeExecute(r)
}

/*
GetAzureSasUrlExpiryTime Returns the expiry time of the Azure SAS URL

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param customerId Specific customer id
	@param siteId The site ID of the customer
	@param imageId The master image to view details of
	@return ApiGetAzureSasUrlExpiryTimeRequest
*/
func (a *MasterImageCMDService) GetAzureSasUrlExpiryTime(ctx context.Context, customerId string, siteId string, imageId string) ApiGetAzureSasUrlExpiryTimeRequest {
	return ApiGetAzureSasUrlExpiryTimeRequest{
		ApiService: a,
		ctx:        ctx,
		customerId: customerId,
		siteId:     siteId,
		imageId:    imageId,
	}
}

// Execute executes the request
//
//	@return TemplateImageUrl
func (a *MasterImageCMDService) GetAzureSasUrlExpiryTimeExecute(r ApiGetAzureSasUrlExpiryTimeRequest) (*TemplateImageUrl, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *TemplateImageUrl
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MasterImageCMDService.GetAzureSasUrlExpiryTime")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{customerId}/{siteId}/images/{imageId}/azureSasUrlExpiryTime"
	localVarPath = strings.Replace(localVarPath, "{"+"customerId"+"}", url.PathEscape(parameterValueToString(r.customerId, "customerId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"siteId"+"}", url.PathEscape(parameterValueToString(r.siteId, "siteId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"imageId"+"}", url.PathEscape(parameterValueToString(r.imageId, "imageId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.citrixTransactionId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-TransactionId", r.citrixTransactionId, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CWSAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetImagesRequest struct {
	ctx                     context.Context
	ApiService              *MasterImageCMDService
	customerId              string
	siteId                  string
	cspCustomerId           *string
	cspSiteId               *string
	azureSubscriptions      *[]string
	includeCitrixPrepared   *bool
	includeCustomerPrepared *bool
	citrixTransactionId     *string
}

// Name of tenant customer ID if partner-tenant relationship exists otherwise null
func (r ApiGetImagesRequest) CspCustomerId(cspCustomerId string) ApiGetImagesRequest {
	r.cspCustomerId = &cspCustomerId
	return r
}

// Name of tenant site ID if partner-tenant relationship exists otherwise null
func (r ApiGetImagesRequest) CspSiteId(cspSiteId string) ApiGetImagesRequest {
	r.cspSiteId = &cspSiteId
	return r
}

// Optional: The IDs of the Azure Subcrption we want customer images from (If not specified we get all)
func (r ApiGetImagesRequest) AzureSubscriptions(azureSubscriptions []string) ApiGetImagesRequest {
	r.azureSubscriptions = &azureSubscriptions
	return r
}

// Indicates if Citrix prepared images should be included
func (r ApiGetImagesRequest) IncludeCitrixPrepared(includeCitrixPrepared bool) ApiGetImagesRequest {
	r.includeCitrixPrepared = &includeCitrixPrepared
	return r
}

// Indicates if customer prepared images should be included
func (r ApiGetImagesRequest) IncludeCustomerPrepared(includeCustomerPrepared bool) ApiGetImagesRequest {
	r.includeCustomerPrepared = &includeCustomerPrepared
	return r
}

// The Transaction Id.
func (r ApiGetImagesRequest) CitrixTransactionId(citrixTransactionId string) ApiGetImagesRequest {
	r.citrixTransactionId = &citrixTransactionId
	return r
}

func (r ApiGetImagesRequest) Execute() (*CustomerTemplateImageOverviewsModel, *http.Response, error) {
	return r.ApiService.GetImagesExecute(r)
}

/*
GetImages Returns all the master images the customer has linked to their account

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param customerId Specific customer id
	@param siteId The site ID of the customer
	@return ApiGetImagesRequest
*/
func (a *MasterImageCMDService) GetImages(ctx context.Context, customerId string, siteId string) ApiGetImagesRequest {
	return ApiGetImagesRequest{
		ApiService: a,
		ctx:        ctx,
		customerId: customerId,
		siteId:     siteId,
	}
}

// Execute executes the request
//
//	@return CustomerTemplateImageOverviewsModel
func (a *MasterImageCMDService) GetImagesExecute(r ApiGetImagesRequest) (*CustomerTemplateImageOverviewsModel, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CustomerTemplateImageOverviewsModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MasterImageCMDService.GetImages")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{customerId}/{siteId}/images"
	localVarPath = strings.Replace(localVarPath, "{"+"customerId"+"}", url.PathEscape(parameterValueToString(r.customerId, "customerId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"siteId"+"}", url.PathEscape(parameterValueToString(r.siteId, "siteId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.cspCustomerId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cspCustomerId", r.cspCustomerId, "")
	}
	if r.cspSiteId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cspSiteId", r.cspSiteId, "")
	}
	if r.azureSubscriptions != nil {
		t := *r.azureSubscriptions
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "azureSubscriptions", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "azureSubscriptions", t, "multi")
		}
	}
	if r.includeCitrixPrepared != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeCitrixPrepared", r.includeCitrixPrepared, "")
	}
	if r.includeCustomerPrepared != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeCustomerPrepared", r.includeCustomerPrepared, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.citrixTransactionId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-TransactionId", r.citrixTransactionId, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CWSAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetTemplateImageRequest struct {
	ctx                 context.Context
	ApiService          *MasterImageCMDService
	customerId          string
	siteId              string
	imageId             string
	citrixTransactionId *string
}

// The Transaction Id.
func (r ApiGetTemplateImageRequest) CitrixTransactionId(citrixTransactionId string) ApiGetTemplateImageRequest {
	r.citrixTransactionId = &citrixTransactionId
	return r
}

func (r ApiGetTemplateImageRequest) Execute() (*TemplateImageDetails, *http.Response, error) {
	return r.ApiService.GetTemplateImageExecute(r)
}

/*
GetTemplateImage Returns details of the specified master image

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param customerId Specific customer id
	@param siteId The site ID of the customer
	@param imageId The master image to view details of
	@return ApiGetTemplateImageRequest
*/
func (a *MasterImageCMDService) GetTemplateImage(ctx context.Context, customerId string, siteId string, imageId string) ApiGetTemplateImageRequest {
	return ApiGetTemplateImageRequest{
		ApiService: a,
		ctx:        ctx,
		customerId: customerId,
		siteId:     siteId,
		imageId:    imageId,
	}
}

// Execute executes the request
//
//	@return TemplateImageDetails
func (a *MasterImageCMDService) GetTemplateImageExecute(r ApiGetTemplateImageRequest) (*TemplateImageDetails, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *TemplateImageDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MasterImageCMDService.GetTemplateImage")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{customerId}/{siteId}/images/{imageId}"
	localVarPath = strings.Replace(localVarPath, "{"+"customerId"+"}", url.PathEscape(parameterValueToString(r.customerId, "customerId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"siteId"+"}", url.PathEscape(parameterValueToString(r.siteId, "siteId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"imageId"+"}", url.PathEscape(parameterValueToString(r.imageId, "imageId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.citrixTransactionId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-TransactionId", r.citrixTransactionId, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CWSAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiImportTemplateImageRequest struct {
	ctx                 context.Context
	ApiService          *MasterImageCMDService
	customerId          string
	siteId              string
	citrixTransactionId *string
	body                *ImportTemplateImageModel
}

// The Transaction Id.
func (r ApiImportTemplateImageRequest) CitrixTransactionId(citrixTransactionId string) ApiImportTemplateImageRequest {
	r.citrixTransactionId = &citrixTransactionId
	return r
}

// Configuration of the master image to add
func (r ApiImportTemplateImageRequest) Body(body ImportTemplateImageModel) ApiImportTemplateImageRequest {
	r.body = &body
	return r
}

func (r ApiImportTemplateImageRequest) Execute() (*TemplateImageOverview, *http.Response, error) {
	return r.ApiService.ImportTemplateImageExecute(r)
}

/*
ImportTemplateImage Add a new master image to the DaaS customer's account, which is linked to a VHD image inside the customer's storage account (Image import feature for DaaS)

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param customerId Specific customer id
	@param siteId The site ID of the customer
	@return ApiImportTemplateImageRequest
*/
func (a *MasterImageCMDService) ImportTemplateImage(ctx context.Context, customerId string, siteId string) ApiImportTemplateImageRequest {
	return ApiImportTemplateImageRequest{
		ApiService: a,
		ctx:        ctx,
		customerId: customerId,
		siteId:     siteId,
	}
}

// Execute executes the request
//
//	@return TemplateImageOverview
func (a *MasterImageCMDService) ImportTemplateImageExecute(r ApiImportTemplateImageRequest) (*TemplateImageOverview, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *TemplateImageOverview
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MasterImageCMDService.ImportTemplateImage")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{customerId}/{siteId}/images/$import"
	localVarPath = strings.Replace(localVarPath, "{"+"customerId"+"}", url.PathEscape(parameterValueToString(r.customerId, "customerId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"siteId"+"}", url.PathEscape(parameterValueToString(r.siteId, "siteId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.citrixTransactionId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-TransactionId", r.citrixTransactionId, "")
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CWSAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateTemplateImageRequest struct {
	ctx                 context.Context
	ApiService          *MasterImageCMDService
	customerId          string
	siteId              string
	imageId             string
	citrixTransactionId *string
	body                *UpdateTemplateImageModel
}

// The Transaction Id.
func (r ApiUpdateTemplateImageRequest) CitrixTransactionId(citrixTransactionId string) ApiUpdateTemplateImageRequest {
	r.citrixTransactionId = &citrixTransactionId
	return r
}

// The updated configuration of image
func (r ApiUpdateTemplateImageRequest) Body(body UpdateTemplateImageModel) ApiUpdateTemplateImageRequest {
	r.body = &body
	return r
}

func (r ApiUpdateTemplateImageRequest) Execute() (*http.Response, error) {
	return r.ApiService.UpdateTemplateImageExecute(r)
}

/*
UpdateTemplateImage Updates template image configuration (name, notes, allowed ips)

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param customerId Specific customer id
	@param siteId
	@param imageId The template image to update
	@return ApiUpdateTemplateImageRequest
*/
func (a *MasterImageCMDService) UpdateTemplateImage(ctx context.Context, customerId string, siteId string, imageId string) ApiUpdateTemplateImageRequest {
	return ApiUpdateTemplateImageRequest{
		ApiService: a,
		ctx:        ctx,
		customerId: customerId,
		siteId:     siteId,
		imageId:    imageId,
	}
}

// Execute executes the request
func (a *MasterImageCMDService) UpdateTemplateImageExecute(r ApiUpdateTemplateImageRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPatch
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MasterImageCMDService.UpdateTemplateImage")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{customerId}/{siteId}/images/{imageId}"
	localVarPath = strings.Replace(localVarPath, "{"+"customerId"+"}", url.PathEscape(parameterValueToString(r.customerId, "customerId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"siteId"+"}", url.PathEscape(parameterValueToString(r.siteId, "siteId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"imageId"+"}", url.PathEscape(parameterValueToString(r.imageId, "imageId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.citrixTransactionId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Citrix-TransactionId", r.citrixTransactionId, "")
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CWSAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
