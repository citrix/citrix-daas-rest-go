/*
Citrix Virtual App & Desktop Catalog Service 148.0.26750.34636

Catalog Service

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickdeploy

import (
	"encoding/json"
	"fmt"
)

// AddCatalogType the model 'AddCatalogType'
type AddCatalogType string

// List of AddCatalogType
const (
	ADDCATALOGTYPE_MULTI_SESSION         AddCatalogType = "MultiSession"
	ADDCATALOGTYPE_SINGLE_SESSION_RANDOM AddCatalogType = "SingleSessionRandom"
	ADDCATALOGTYPE_SINGLE_SESSION_STATIC AddCatalogType = "SingleSessionStatic"
)

// All allowed values of AddCatalogType enum
var AllowedAddCatalogTypeEnumValues = []AddCatalogType{
	"MultiSession",
	"SingleSessionRandom",
	"SingleSessionStatic",
}

func (v *AddCatalogType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	*v = AddCatalogType(value)
	return nil
}

// NewAddCatalogTypeFromValue returns a pointer to a valid AddCatalogType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAddCatalogTypeFromValue(v string) (*AddCatalogType, error) {
	ev := AddCatalogType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AddCatalogType: valid values are %v", v, AllowedAddCatalogTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AddCatalogType) IsValid() bool {
	for _, existing := range AllowedAddCatalogTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AddCatalogType value
func (v AddCatalogType) Ptr() *AddCatalogType {
	return &v
}

type NullableAddCatalogType struct {
	value *AddCatalogType
	isSet bool
}

func (v NullableAddCatalogType) Get() *AddCatalogType {
	return v.value
}

func (v *NullableAddCatalogType) Set(val *AddCatalogType) {
	v.value = val
	v.isSet = true
}

func (v NullableAddCatalogType) IsSet() bool {
	return v.isSet
}

func (v *NullableAddCatalogType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddCatalogType(val *AddCatalogType) *NullableAddCatalogType {
	return &NullableAddCatalogType{value: val, isSet: true}
}

func (v NullableAddCatalogType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddCatalogType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
