/*
Citrix Virtual App & Desktop Catalog Service 147.0.26651.57932

Catalog Service

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickdeploy

import (
	"encoding/json"
	"fmt"
)

// CatalogJobType the model 'CatalogJobType'
type CatalogJobType string

// List of CatalogJobType
const (
	CATALOGJOBTYPE_VDA_DEPLOY                     CatalogJobType = "VdaDeploy"
	CATALOGJOBTYPE_VDA_UPDATE                     CatalogJobType = "VdaUpdate"
	CATALOGJOBTYPE_CAPACITY_UPDATE                CatalogJobType = "CapacityUpdate"
	CATALOGJOBTYPE_ADD_MACHINES                   CatalogJobType = "AddMachines"
	CATALOGJOBTYPE_STOREFRONT                     CatalogJobType = "Storefront"
	CATALOGJOBTYPE_UPDATE_FEEDS                   CatalogJobType = "UpdateFeeds"
	CATALOGJOBTYPE_UNKNOWN                        CatalogJobType = "Unknown"
	CATALOGJOBTYPE_DELETE_VDA_MACHINE             CatalogJobType = "DeleteVdaMachine"
	CATALOGJOBTYPE_CATALOG_DEPLOY                 CatalogJobType = "CatalogDeploy"
	CATALOGJOBTYPE_VDA_RESTORE                    CatalogJobType = "VdaRestore"
	CATALOGJOBTYPE_HOSTING_UNIT_CREDENTIAL_UPDATE CatalogJobType = "HostingUnitCredentialUpdate"
	CATALOGJOBTYPE_REMOTE_PC                      CatalogJobType = "RemotePC"
	CATALOGJOBTYPE_PUBLISH_SECURE_BROWSER         CatalogJobType = "PublishSecureBrowser"
	CATALOGJOBTYPE_VDA_REGISTER                   CatalogJobType = "VdaRegister"
	CATALOGJOBTYPE_DIRECTOR_USER                  CatalogJobType = "DirectorUser"
	CATALOGJOBTYPE_VDA_PENDING_UPDATE             CatalogJobType = "VdaPendingUpdate"
)

// All allowed values of CatalogJobType enum
var AllowedCatalogJobTypeEnumValues = []CatalogJobType{
	"VdaDeploy",
	"VdaUpdate",
	"CapacityUpdate",
	"AddMachines",
	"Storefront",
	"UpdateFeeds",
	"Unknown",
	"DeleteVdaMachine",
	"CatalogDeploy",
	"VdaRestore",
	"HostingUnitCredentialUpdate",
	"RemotePC",
	"PublishSecureBrowser",
	"VdaRegister",
	"DirectorUser",
	"VdaPendingUpdate",
}

func (v *CatalogJobType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	*v = CatalogJobType(value)
	return nil
}

// NewCatalogJobTypeFromValue returns a pointer to a valid CatalogJobType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCatalogJobTypeFromValue(v string) (*CatalogJobType, error) {
	ev := CatalogJobType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CatalogJobType: valid values are %v", v, AllowedCatalogJobTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CatalogJobType) IsValid() bool {
	for _, existing := range AllowedCatalogJobTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CatalogJobType value
func (v CatalogJobType) Ptr() *CatalogJobType {
	return &v
}

type NullableCatalogJobType struct {
	value *CatalogJobType
	isSet bool
}

func (v NullableCatalogJobType) Get() *CatalogJobType {
	return v.value
}

func (v *NullableCatalogJobType) Set(val *CatalogJobType) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogJobType) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogJobType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogJobType(val *CatalogJobType) *NullableCatalogJobType {
	return &NullableCatalogJobType{value: val, isSet: true}
}

func (v NullableCatalogJobType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogJobType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
