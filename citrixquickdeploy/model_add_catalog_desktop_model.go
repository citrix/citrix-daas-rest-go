/*
Citrix Virtual App & Desktop Catalog Service 148.0.26750.34636

Catalog Service

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickdeploy

import (
	"encoding/json"
)

// checks if the AddCatalogDesktopModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddCatalogDesktopModel{}

// AddCatalogDesktopModel struct for AddCatalogDesktopModel
type AddCatalogDesktopModel struct {
	// Name of the desktop
	Name string `json:"name"`
	// Description
	Description *string `json:"description,omitempty"`
	// Users to be assigned as part of desktop publishing
	IncludedUsers []IdentityUserResponseModel `json:"includedUsers,omitempty"`
}

// NewAddCatalogDesktopModelWithDefaults instantiates a new AddCatalogDesktopModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddCatalogDesktopModelWithDefaults() *AddCatalogDesktopModel {
	this := AddCatalogDesktopModel{}
	return &this
}

// GetName returns the Name field value
func (o *AddCatalogDesktopModel) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AddCatalogDesktopModel) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AddCatalogDesktopModel) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *AddCatalogDesktopModel) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddCatalogDesktopModel) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *AddCatalogDesktopModel) SetDescription(v string) {
	o.Description = &v
}

// GetIncludedUsers returns the IncludedUsers field value if set, zero value otherwise.
func (o *AddCatalogDesktopModel) GetIncludedUsers() []IdentityUserResponseModel {
	if o == nil || IsNil(o.IncludedUsers) {
		var ret []IdentityUserResponseModel
		return ret
	}
	return o.IncludedUsers
}

// GetIncludedUsersOk returns a tuple with the IncludedUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddCatalogDesktopModel) GetIncludedUsersOk() ([]IdentityUserResponseModel, bool) {
	if o == nil || IsNil(o.IncludedUsers) {
		return nil, false
	}
	return o.IncludedUsers, true
}

// SetIncludedUsers gets a reference to the given []IdentityUserResponseModel and assigns it to the IncludedUsers field.
func (o *AddCatalogDesktopModel) SetIncludedUsers(v []IdentityUserResponseModel) {
	o.IncludedUsers = v
}

func (o AddCatalogDesktopModel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddCatalogDesktopModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.IncludedUsers) {
		toSerialize["includedUsers"] = o.IncludedUsers
	}
	return toSerialize, nil
}

type NullableAddCatalogDesktopModel struct {
	value *AddCatalogDesktopModel
	isSet bool
}

func (v NullableAddCatalogDesktopModel) Get() *AddCatalogDesktopModel {
	return v.value
}

func (v *NullableAddCatalogDesktopModel) Set(val *AddCatalogDesktopModel) {
	v.value = val
	v.isSet = true
}

func (v NullableAddCatalogDesktopModel) IsSet() bool {
	return v.isSet
}

func (v *NullableAddCatalogDesktopModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddCatalogDesktopModel(val *AddCatalogDesktopModel) *NullableAddCatalogDesktopModel {
	return &NullableAddCatalogDesktopModel{value: val, isSet: true}
}

func (v NullableAddCatalogDesktopModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddCatalogDesktopModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
