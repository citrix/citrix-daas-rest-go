/*
Citrix Virtual App & Desktop Catalog Service 148.0.26750.34636

Catalog Service

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickdeploy

import (
	"encoding/json"
)

// checks if the AddVnetPeeringModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddVnetPeeringModel{}

// AddVnetPeeringModel struct for AddVnetPeeringModel
type AddVnetPeeringModel struct {
	// Name to assign the peering
	Name string `json:"name" validate:"regexp=^[\\\\p{L}0-9-_.\\\\(\\\\)]*$"`
	// ID of the Azure subscription that contains the user's VNet
	SubscriptionId string `json:"subscriptionId"`
	// Name of the resource group that contain's the customer's VNET
	ResourceGroup string `json:"resourceGroup" validate:"regexp=^[\\\\p{L}0-9-_.\\\\(\\\\)]*$"`
	// Name of the vnet to peer
	Vnet string `json:"vnet" validate:"regexp=^[\\\\p{L}0-9-_.]*$"`
	// Subnet to assign to the Vnet that is created
	Subnet string `json:"subnet"`
	// Mask for the created subnet
	SubnetMask int32 `json:"subnetMask"`
	// Indicates if the peered vnet will be using the customers gateway
	UseGateway *bool `json:"useGateway,omitempty"`
	// The region the Citrix managed vnet will be located in.  If unspecified, assume that the customer wants to peer to the region where the vnet is located in
	ManagedVnetRegion *string `json:"managedVnetRegion,omitempty"`
	// Name of tenant customer ID if partner-tenant relationship exists otherwise null
	CspCustomerId *string `json:"cspCustomerId,omitempty"`
	// Name of tenant customer ID if partner-tenant relationship exists otherwise null
	CspSiteId *string `json:"cspSiteId,omitempty"`
	// A list of user defined routes if any
	Routes []AzureRoute `json:"routes,omitempty"`
	// ID of the managed subscription the peering should be added to.
	ManagedSubscriptionId *string `json:"managedSubscriptionId,omitempty"`
	// An array containing the dns servers
	DnsServers []string `json:"dnsServers,omitempty"`
	// Indicates if route propagation in the route table should be disabled (option is valid only if customer is using gateway).
	DisableRoutePropagation *bool `json:"disableRoutePropagation,omitempty"`
	// The NAT config.
	NatGatewayConfig *NatGatewayModel `json:"natGatewayConfig,omitempty"`
}

// NewAddVnetPeeringModelWithDefaults instantiates a new AddVnetPeeringModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddVnetPeeringModelWithDefaults() *AddVnetPeeringModel {
	this := AddVnetPeeringModel{}
	return &this
}

// GetName returns the Name field value
func (o *AddVnetPeeringModel) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AddVnetPeeringModel) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AddVnetPeeringModel) SetName(v string) {
	o.Name = v
}

// GetSubscriptionId returns the SubscriptionId field value
func (o *AddVnetPeeringModel) GetSubscriptionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SubscriptionId
}

// GetSubscriptionIdOk returns a tuple with the SubscriptionId field value
// and a boolean to check if the value has been set.
func (o *AddVnetPeeringModel) GetSubscriptionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubscriptionId, true
}

// SetSubscriptionId sets field value
func (o *AddVnetPeeringModel) SetSubscriptionId(v string) {
	o.SubscriptionId = v
}

// GetResourceGroup returns the ResourceGroup field value
func (o *AddVnetPeeringModel) GetResourceGroup() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceGroup
}

// GetResourceGroupOk returns a tuple with the ResourceGroup field value
// and a boolean to check if the value has been set.
func (o *AddVnetPeeringModel) GetResourceGroupOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceGroup, true
}

// SetResourceGroup sets field value
func (o *AddVnetPeeringModel) SetResourceGroup(v string) {
	o.ResourceGroup = v
}

// GetVnet returns the Vnet field value
func (o *AddVnetPeeringModel) GetVnet() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Vnet
}

// GetVnetOk returns a tuple with the Vnet field value
// and a boolean to check if the value has been set.
func (o *AddVnetPeeringModel) GetVnetOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Vnet, true
}

// SetVnet sets field value
func (o *AddVnetPeeringModel) SetVnet(v string) {
	o.Vnet = v
}

// GetSubnet returns the Subnet field value
func (o *AddVnetPeeringModel) GetSubnet() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Subnet
}

// GetSubnetOk returns a tuple with the Subnet field value
// and a boolean to check if the value has been set.
func (o *AddVnetPeeringModel) GetSubnetOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Subnet, true
}

// SetSubnet sets field value
func (o *AddVnetPeeringModel) SetSubnet(v string) {
	o.Subnet = v
}

// GetSubnetMask returns the SubnetMask field value
func (o *AddVnetPeeringModel) GetSubnetMask() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SubnetMask
}

// GetSubnetMaskOk returns a tuple with the SubnetMask field value
// and a boolean to check if the value has been set.
func (o *AddVnetPeeringModel) GetSubnetMaskOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubnetMask, true
}

// SetSubnetMask sets field value
func (o *AddVnetPeeringModel) SetSubnetMask(v int32) {
	o.SubnetMask = v
}

// GetUseGateway returns the UseGateway field value if set, zero value otherwise.
func (o *AddVnetPeeringModel) GetUseGateway() bool {
	if o == nil || IsNil(o.UseGateway) {
		var ret bool
		return ret
	}
	return *o.UseGateway
}

// GetUseGatewayOk returns a tuple with the UseGateway field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddVnetPeeringModel) GetUseGatewayOk() (*bool, bool) {
	if o == nil || IsNil(o.UseGateway) {
		return nil, false
	}
	return o.UseGateway, true
}

// SetUseGateway gets a reference to the given bool and assigns it to the UseGateway field.
func (o *AddVnetPeeringModel) SetUseGateway(v bool) {
	o.UseGateway = &v
}

// GetManagedVnetRegion returns the ManagedVnetRegion field value if set, zero value otherwise.
func (o *AddVnetPeeringModel) GetManagedVnetRegion() string {
	if o == nil || IsNil(o.ManagedVnetRegion) {
		var ret string
		return ret
	}
	return *o.ManagedVnetRegion
}

// GetManagedVnetRegionOk returns a tuple with the ManagedVnetRegion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddVnetPeeringModel) GetManagedVnetRegionOk() (*string, bool) {
	if o == nil || IsNil(o.ManagedVnetRegion) {
		return nil, false
	}
	return o.ManagedVnetRegion, true
}

// SetManagedVnetRegion gets a reference to the given string and assigns it to the ManagedVnetRegion field.
func (o *AddVnetPeeringModel) SetManagedVnetRegion(v string) {
	o.ManagedVnetRegion = &v
}

// GetCspCustomerId returns the CspCustomerId field value if set, zero value otherwise.
func (o *AddVnetPeeringModel) GetCspCustomerId() string {
	if o == nil || IsNil(o.CspCustomerId) {
		var ret string
		return ret
	}
	return *o.CspCustomerId
}

// GetCspCustomerIdOk returns a tuple with the CspCustomerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddVnetPeeringModel) GetCspCustomerIdOk() (*string, bool) {
	if o == nil || IsNil(o.CspCustomerId) {
		return nil, false
	}
	return o.CspCustomerId, true
}

// SetCspCustomerId gets a reference to the given string and assigns it to the CspCustomerId field.
func (o *AddVnetPeeringModel) SetCspCustomerId(v string) {
	o.CspCustomerId = &v
}

// GetCspSiteId returns the CspSiteId field value if set, zero value otherwise.
func (o *AddVnetPeeringModel) GetCspSiteId() string {
	if o == nil || IsNil(o.CspSiteId) {
		var ret string
		return ret
	}
	return *o.CspSiteId
}

// GetCspSiteIdOk returns a tuple with the CspSiteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddVnetPeeringModel) GetCspSiteIdOk() (*string, bool) {
	if o == nil || IsNil(o.CspSiteId) {
		return nil, false
	}
	return o.CspSiteId, true
}

// SetCspSiteId gets a reference to the given string and assigns it to the CspSiteId field.
func (o *AddVnetPeeringModel) SetCspSiteId(v string) {
	o.CspSiteId = &v
}

// GetRoutes returns the Routes field value if set, zero value otherwise.
func (o *AddVnetPeeringModel) GetRoutes() []AzureRoute {
	if o == nil || IsNil(o.Routes) {
		var ret []AzureRoute
		return ret
	}
	return o.Routes
}

// GetRoutesOk returns a tuple with the Routes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddVnetPeeringModel) GetRoutesOk() ([]AzureRoute, bool) {
	if o == nil || IsNil(o.Routes) {
		return nil, false
	}
	return o.Routes, true
}

// SetRoutes gets a reference to the given []AzureRoute and assigns it to the Routes field.
func (o *AddVnetPeeringModel) SetRoutes(v []AzureRoute) {
	o.Routes = v
}

// GetManagedSubscriptionId returns the ManagedSubscriptionId field value if set, zero value otherwise.
func (o *AddVnetPeeringModel) GetManagedSubscriptionId() string {
	if o == nil || IsNil(o.ManagedSubscriptionId) {
		var ret string
		return ret
	}
	return *o.ManagedSubscriptionId
}

// GetManagedSubscriptionIdOk returns a tuple with the ManagedSubscriptionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddVnetPeeringModel) GetManagedSubscriptionIdOk() (*string, bool) {
	if o == nil || IsNil(o.ManagedSubscriptionId) {
		return nil, false
	}
	return o.ManagedSubscriptionId, true
}

// SetManagedSubscriptionId gets a reference to the given string and assigns it to the ManagedSubscriptionId field.
func (o *AddVnetPeeringModel) SetManagedSubscriptionId(v string) {
	o.ManagedSubscriptionId = &v
}

// GetDnsServers returns the DnsServers field value if set, zero value otherwise.
func (o *AddVnetPeeringModel) GetDnsServers() []string {
	if o == nil || IsNil(o.DnsServers) {
		var ret []string
		return ret
	}
	return o.DnsServers
}

// GetDnsServersOk returns a tuple with the DnsServers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddVnetPeeringModel) GetDnsServersOk() ([]string, bool) {
	if o == nil || IsNil(o.DnsServers) {
		return nil, false
	}
	return o.DnsServers, true
}

// SetDnsServers gets a reference to the given []string and assigns it to the DnsServers field.
func (o *AddVnetPeeringModel) SetDnsServers(v []string) {
	o.DnsServers = v
}

// GetDisableRoutePropagation returns the DisableRoutePropagation field value if set, zero value otherwise.
func (o *AddVnetPeeringModel) GetDisableRoutePropagation() bool {
	if o == nil || IsNil(o.DisableRoutePropagation) {
		var ret bool
		return ret
	}
	return *o.DisableRoutePropagation
}

// GetDisableRoutePropagationOk returns a tuple with the DisableRoutePropagation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddVnetPeeringModel) GetDisableRoutePropagationOk() (*bool, bool) {
	if o == nil || IsNil(o.DisableRoutePropagation) {
		return nil, false
	}
	return o.DisableRoutePropagation, true
}

// SetDisableRoutePropagation gets a reference to the given bool and assigns it to the DisableRoutePropagation field.
func (o *AddVnetPeeringModel) SetDisableRoutePropagation(v bool) {
	o.DisableRoutePropagation = &v
}

// GetNatGatewayConfig returns the NatGatewayConfig field value if set, zero value otherwise.
func (o *AddVnetPeeringModel) GetNatGatewayConfig() NatGatewayModel {
	if o == nil || IsNil(o.NatGatewayConfig) {
		var ret NatGatewayModel
		return ret
	}
	return *o.NatGatewayConfig
}

// GetNatGatewayConfigOk returns a tuple with the NatGatewayConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddVnetPeeringModel) GetNatGatewayConfigOk() (*NatGatewayModel, bool) {
	if o == nil || IsNil(o.NatGatewayConfig) {
		return nil, false
	}
	return o.NatGatewayConfig, true
}

// SetNatGatewayConfig gets a reference to the given NatGatewayModel and assigns it to the NatGatewayConfig field.
func (o *AddVnetPeeringModel) SetNatGatewayConfig(v NatGatewayModel) {
	o.NatGatewayConfig = &v
}

func (o AddVnetPeeringModel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddVnetPeeringModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["subscriptionId"] = o.SubscriptionId
	toSerialize["resourceGroup"] = o.ResourceGroup
	toSerialize["vnet"] = o.Vnet
	toSerialize["subnet"] = o.Subnet
	toSerialize["subnetMask"] = o.SubnetMask
	if !IsNil(o.UseGateway) {
		toSerialize["useGateway"] = o.UseGateway
	}
	if !IsNil(o.ManagedVnetRegion) {
		toSerialize["managedVnetRegion"] = o.ManagedVnetRegion
	}
	if !IsNil(o.CspCustomerId) {
		toSerialize["cspCustomerId"] = o.CspCustomerId
	}
	if !IsNil(o.CspSiteId) {
		toSerialize["cspSiteId"] = o.CspSiteId
	}
	if !IsNil(o.Routes) {
		toSerialize["routes"] = o.Routes
	}
	if !IsNil(o.ManagedSubscriptionId) {
		toSerialize["managedSubscriptionId"] = o.ManagedSubscriptionId
	}
	if !IsNil(o.DnsServers) {
		toSerialize["dnsServers"] = o.DnsServers
	}
	if !IsNil(o.DisableRoutePropagation) {
		toSerialize["disableRoutePropagation"] = o.DisableRoutePropagation
	}
	if !IsNil(o.NatGatewayConfig) {
		toSerialize["natGatewayConfig"] = o.NatGatewayConfig
	}
	return toSerialize, nil
}

type NullableAddVnetPeeringModel struct {
	value *AddVnetPeeringModel
	isSet bool
}

func (v NullableAddVnetPeeringModel) Get() *AddVnetPeeringModel {
	return v.value
}

func (v *NullableAddVnetPeeringModel) Set(val *AddVnetPeeringModel) {
	v.value = val
	v.isSet = true
}

func (v NullableAddVnetPeeringModel) IsSet() bool {
	return v.isSet
}

func (v *NullableAddVnetPeeringModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddVnetPeeringModel(val *AddVnetPeeringModel) *NullableAddVnetPeeringModel {
	return &NullableAddVnetPeeringModel{value: val, isSet: true}
}

func (v NullableAddVnetPeeringModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddVnetPeeringModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
