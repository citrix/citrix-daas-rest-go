/*
Citrix Virtual App & Desktop Catalog Service 147.0.26651.57932

Catalog Service

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickdeploy

import (
	"encoding/json"
	"fmt"
)

// ServiceState the model 'ServiceState'
type ServiceState string

// List of ServiceState
const (
	SERVICESTATE_NOT_ONBOARDED                     ServiceState = "NotOnboarded"
	SERVICESTATE_EXPIRED                           ServiceState = "Expired"
	SERVICESTATE_DEFAULT                           ServiceState = "Default"
	SERVICESTATE_PRODUCTION_TRIAL_DENIED           ServiceState = "ProductionTrialDenied"
	SERVICESTATE_PRODUCTION_TRIAL_PENDING          ServiceState = "ProductionTrialPending"
	SERVICESTATE_PRODUCTION_TRIAL_APPROVED         ServiceState = "ProductionTrialApproved"
	SERVICESTATE_PRODUCTION_TRIAL                  ServiceState = "ProductionTrial"
	SERVICESTATE_PRODUCTION_TRIAL_DELETED          ServiceState = "ProductionTrialDeleted"
	SERVICESTATE_PRODUCTION_PENDING                ServiceState = "ProductionPending"
	SERVICESTATE_PRODUCTION                        ServiceState = "Production"
	SERVICESTATE_PARTNER_PRODUCTION_TRIAL_DENIED   ServiceState = "PartnerProductionTrialDenied"
	SERVICESTATE_PARTNER_PRODUCTION_TRIAL_PENDING  ServiceState = "PartnerProductionTrialPending"
	SERVICESTATE_PARTNER_PRODUCTION_TRIAL_APPROVED ServiceState = "PartnerProductionTrialApproved"
	SERVICESTATE_PARTNER_PRODUCTION_TRIAL          ServiceState = "PartnerProductionTrial"
	SERVICESTATE_PARTNER_PRODUCTION_TRIAL_DELETED  ServiceState = "PartnerProductionTrialDeleted"
	SERVICESTATE_PARTNER_PRODUCTION_PENDING        ServiceState = "PartnerProductionPending"
	SERVICESTATE_PARTNER_PRODUCTION                ServiceState = "PartnerProduction"
	SERVICESTATE_NOT_ONBOARDED_TRIAL_PENDING       ServiceState = "NotOnboardedTrialPending"
	SERVICESTATE_UNDEFINED                         ServiceState = "Undefined"
)

// All allowed values of ServiceState enum
var AllowedServiceStateEnumValues = []ServiceState{
	"NotOnboarded",
	"Expired",
	"Default",
	"ProductionTrialDenied",
	"ProductionTrialPending",
	"ProductionTrialApproved",
	"ProductionTrial",
	"ProductionTrialDeleted",
	"ProductionPending",
	"Production",
	"PartnerProductionTrialDenied",
	"PartnerProductionTrialPending",
	"PartnerProductionTrialApproved",
	"PartnerProductionTrial",
	"PartnerProductionTrialDeleted",
	"PartnerProductionPending",
	"PartnerProduction",
	"NotOnboardedTrialPending",
	"Undefined",
}

func (v *ServiceState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	*v = ServiceState(value)
	return nil
}

// NewServiceStateFromValue returns a pointer to a valid ServiceState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewServiceStateFromValue(v string) (*ServiceState, error) {
	ev := ServiceState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ServiceState: valid values are %v", v, AllowedServiceStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ServiceState) IsValid() bool {
	for _, existing := range AllowedServiceStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ServiceState value
func (v ServiceState) Ptr() *ServiceState {
	return &v
}

type NullableServiceState struct {
	value *ServiceState
	isSet bool
}

func (v NullableServiceState) Get() *ServiceState {
	return v.value
}

func (v *NullableServiceState) Set(val *ServiceState) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceState) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceState(val *ServiceState) *NullableServiceState {
	return &NullableServiceState{value: val, isSet: true}
}

func (v NullableServiceState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
