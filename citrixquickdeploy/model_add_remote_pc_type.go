/*
Citrix Virtual App & Desktop Catalog Service 148.0.26750.34636

Catalog Service

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickdeploy

import (
	"encoding/json"
	"fmt"
)

// AddRemotePcType the model 'AddRemotePcType'
type AddRemotePcType string

// List of AddRemotePcType
const (
	ADDREMOTEPCTYPE_STATIC AddRemotePcType = "Static"
	ADDREMOTEPCTYPE_RANDOM AddRemotePcType = "Random"
)

// All allowed values of AddRemotePcType enum
var AllowedAddRemotePcTypeEnumValues = []AddRemotePcType{
	"Static",
	"Random",
}

func (v *AddRemotePcType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	*v = AddRemotePcType(value)
	return nil
}

// NewAddRemotePcTypeFromValue returns a pointer to a valid AddRemotePcType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAddRemotePcTypeFromValue(v string) (*AddRemotePcType, error) {
	ev := AddRemotePcType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AddRemotePcType: valid values are %v", v, AllowedAddRemotePcTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AddRemotePcType) IsValid() bool {
	for _, existing := range AllowedAddRemotePcTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AddRemotePcType value
func (v AddRemotePcType) Ptr() *AddRemotePcType {
	return &v
}

type NullableAddRemotePcType struct {
	value *AddRemotePcType
	isSet bool
}

func (v NullableAddRemotePcType) Get() *AddRemotePcType {
	return v.value
}

func (v *NullableAddRemotePcType) Set(val *AddRemotePcType) {
	v.value = val
	v.isSet = true
}

func (v NullableAddRemotePcType) IsSet() bool {
	return v.isSet
}

func (v *NullableAddRemotePcType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddRemotePcType(val *AddRemotePcType) *NullableAddRemotePcType {
	return &NullableAddRemotePcType{value: val, isSet: true}
}

func (v NullableAddRemotePcType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddRemotePcType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
