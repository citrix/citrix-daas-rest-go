/*
Citrix Virtual App & Desktop Catalog Service 147.0.26651.57932

Catalog Service

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickdeploy

import (
	"encoding/json"
)

// checks if the AzureRoute type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AzureRoute{}

// AzureRoute struct for AzureRoute
type AzureRoute struct {
	// The destination CIDR to which the route applies.
	AddressPrefix string `json:"addressPrefix"`
	// The type of hop the packet should be sent to.
	NextHopType string `json:"nextHopType"`
	// The IP address packets should be forwarded to
	NextHopIpAddress *string `json:"nextHopIpAddress,omitempty"`
	// Name of the route
	Name string `json:"name"`
	// Specifying if the route should be applied
	Enabled *bool `json:"enabled,omitempty"`
}

// NewAzureRouteWithDefaults instantiates a new AzureRoute object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAzureRouteWithDefaults() *AzureRoute {
	this := AzureRoute{}
	return &this
}

// GetAddressPrefix returns the AddressPrefix field value
func (o *AzureRoute) GetAddressPrefix() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AddressPrefix
}

// GetAddressPrefixOk returns a tuple with the AddressPrefix field value
// and a boolean to check if the value has been set.
func (o *AzureRoute) GetAddressPrefixOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AddressPrefix, true
}

// SetAddressPrefix sets field value
func (o *AzureRoute) SetAddressPrefix(v string) {
	o.AddressPrefix = v
}

// GetNextHopType returns the NextHopType field value
func (o *AzureRoute) GetNextHopType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NextHopType
}

// GetNextHopTypeOk returns a tuple with the NextHopType field value
// and a boolean to check if the value has been set.
func (o *AzureRoute) GetNextHopTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NextHopType, true
}

// SetNextHopType sets field value
func (o *AzureRoute) SetNextHopType(v string) {
	o.NextHopType = v
}

// GetNextHopIpAddress returns the NextHopIpAddress field value if set, zero value otherwise.
func (o *AzureRoute) GetNextHopIpAddress() string {
	if o == nil || IsNil(o.NextHopIpAddress) {
		var ret string
		return ret
	}
	return *o.NextHopIpAddress
}

// GetNextHopIpAddressOk returns a tuple with the NextHopIpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureRoute) GetNextHopIpAddressOk() (*string, bool) {
	if o == nil || IsNil(o.NextHopIpAddress) {
		return nil, false
	}
	return o.NextHopIpAddress, true
}

// SetNextHopIpAddress gets a reference to the given string and assigns it to the NextHopIpAddress field.
func (o *AzureRoute) SetNextHopIpAddress(v string) {
	o.NextHopIpAddress = &v
}

// GetName returns the Name field value
func (o *AzureRoute) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AzureRoute) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AzureRoute) SetName(v string) {
	o.Name = v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *AzureRoute) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureRoute) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *AzureRoute) SetEnabled(v bool) {
	o.Enabled = &v
}

func (o AzureRoute) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AzureRoute) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["addressPrefix"] = o.AddressPrefix
	toSerialize["nextHopType"] = o.NextHopType
	if !IsNil(o.NextHopIpAddress) {
		toSerialize["nextHopIpAddress"] = o.NextHopIpAddress
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	return toSerialize, nil
}

type NullableAzureRoute struct {
	value *AzureRoute
	isSet bool
}

func (v NullableAzureRoute) Get() *AzureRoute {
	return v.value
}

func (v *NullableAzureRoute) Set(val *AzureRoute) {
	v.value = val
	v.isSet = true
}

func (v NullableAzureRoute) IsSet() bool {
	return v.isSet
}

func (v *NullableAzureRoute) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAzureRoute(val *AzureRoute) *NullableAzureRoute {
	return &NullableAzureRoute{value: val, isSet: true}
}

func (v NullableAzureRoute) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAzureRoute) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
