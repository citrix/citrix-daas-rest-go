/*
Citrix Virtual App & Desktop Catalog Service 147.0.26651.57932

Catalog Service

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickdeploy

import (
	"encoding/json"
)

// checks if the RemoteBrowserIsolationImageModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RemoteBrowserIsolationImageModel{}

// RemoteBrowserIsolationImageModel struct for RemoteBrowserIsolationImageModel
type RemoteBrowserIsolationImageModel struct {
	// The ID of the image
	Id *string `json:"id,omitempty"`
	// Shows version of sbsession
	SbSessionVdaVersion *string `json:"sbSessionVdaVersion,omitempty"`
	// The init session path
	CommandLineExecutable *string `json:"commandLineExecutable,omitempty"`
	// The init session arguments
	CommandLineArguments *string `json:"commandLineArguments,omitempty"`
	// The init session working directory
	WorkingDirectory *string `json:"workingDirectory,omitempty"`
	// Shows version of image Virtual Desktop Agent
	LinuxVdaVersion *string `json:"linuxVdaVersion,omitempty"`
	// Shows version of image OS
	OsVersion *string `json:"osVersion,omitempty"`
	// Url of the image which was provided by secure browser
	VhdLocation *string `json:"vhdLocation,omitempty"`
	// Url of the image with Sas token which was provided by secure browser
	VhdSasLink *string `json:"vhdSasLink,omitempty"`
	// Address of secure browser ticket request
	TicketRequestAddress *string `json:"ticketRequestAddress,omitempty"`
	// The Group Policy content in base64 format
	PolicyContent *string `json:"policyContent,omitempty"`
	// Approximate maximum duration over which the reboot cycle runs, in minutes.  Value of 0 causes all machines to reboot immediately.  Defaults to -1: a \"natural reboot\" cycle allowing machines that are in-use to  continue working and be restarted only after they become idle.
	VdaUpdateDelay *int32 `json:"vdaUpdateDelay,omitempty"`
}

// NewRemoteBrowserIsolationImageModelWithDefaults instantiates a new RemoteBrowserIsolationImageModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRemoteBrowserIsolationImageModelWithDefaults() *RemoteBrowserIsolationImageModel {
	this := RemoteBrowserIsolationImageModel{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RemoteBrowserIsolationImageModel) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteBrowserIsolationImageModel) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *RemoteBrowserIsolationImageModel) SetId(v string) {
	o.Id = &v
}

// GetSbSessionVdaVersion returns the SbSessionVdaVersion field value if set, zero value otherwise.
func (o *RemoteBrowserIsolationImageModel) GetSbSessionVdaVersion() string {
	if o == nil || IsNil(o.SbSessionVdaVersion) {
		var ret string
		return ret
	}
	return *o.SbSessionVdaVersion
}

// GetSbSessionVdaVersionOk returns a tuple with the SbSessionVdaVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteBrowserIsolationImageModel) GetSbSessionVdaVersionOk() (*string, bool) {
	if o == nil || IsNil(o.SbSessionVdaVersion) {
		return nil, false
	}
	return o.SbSessionVdaVersion, true
}

// SetSbSessionVdaVersion gets a reference to the given string and assigns it to the SbSessionVdaVersion field.
func (o *RemoteBrowserIsolationImageModel) SetSbSessionVdaVersion(v string) {
	o.SbSessionVdaVersion = &v
}

// GetCommandLineExecutable returns the CommandLineExecutable field value if set, zero value otherwise.
func (o *RemoteBrowserIsolationImageModel) GetCommandLineExecutable() string {
	if o == nil || IsNil(o.CommandLineExecutable) {
		var ret string
		return ret
	}
	return *o.CommandLineExecutable
}

// GetCommandLineExecutableOk returns a tuple with the CommandLineExecutable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteBrowserIsolationImageModel) GetCommandLineExecutableOk() (*string, bool) {
	if o == nil || IsNil(o.CommandLineExecutable) {
		return nil, false
	}
	return o.CommandLineExecutable, true
}

// SetCommandLineExecutable gets a reference to the given string and assigns it to the CommandLineExecutable field.
func (o *RemoteBrowserIsolationImageModel) SetCommandLineExecutable(v string) {
	o.CommandLineExecutable = &v
}

// GetCommandLineArguments returns the CommandLineArguments field value if set, zero value otherwise.
func (o *RemoteBrowserIsolationImageModel) GetCommandLineArguments() string {
	if o == nil || IsNil(o.CommandLineArguments) {
		var ret string
		return ret
	}
	return *o.CommandLineArguments
}

// GetCommandLineArgumentsOk returns a tuple with the CommandLineArguments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteBrowserIsolationImageModel) GetCommandLineArgumentsOk() (*string, bool) {
	if o == nil || IsNil(o.CommandLineArguments) {
		return nil, false
	}
	return o.CommandLineArguments, true
}

// SetCommandLineArguments gets a reference to the given string and assigns it to the CommandLineArguments field.
func (o *RemoteBrowserIsolationImageModel) SetCommandLineArguments(v string) {
	o.CommandLineArguments = &v
}

// GetWorkingDirectory returns the WorkingDirectory field value if set, zero value otherwise.
func (o *RemoteBrowserIsolationImageModel) GetWorkingDirectory() string {
	if o == nil || IsNil(o.WorkingDirectory) {
		var ret string
		return ret
	}
	return *o.WorkingDirectory
}

// GetWorkingDirectoryOk returns a tuple with the WorkingDirectory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteBrowserIsolationImageModel) GetWorkingDirectoryOk() (*string, bool) {
	if o == nil || IsNil(o.WorkingDirectory) {
		return nil, false
	}
	return o.WorkingDirectory, true
}

// SetWorkingDirectory gets a reference to the given string and assigns it to the WorkingDirectory field.
func (o *RemoteBrowserIsolationImageModel) SetWorkingDirectory(v string) {
	o.WorkingDirectory = &v
}

// GetLinuxVdaVersion returns the LinuxVdaVersion field value if set, zero value otherwise.
func (o *RemoteBrowserIsolationImageModel) GetLinuxVdaVersion() string {
	if o == nil || IsNil(o.LinuxVdaVersion) {
		var ret string
		return ret
	}
	return *o.LinuxVdaVersion
}

// GetLinuxVdaVersionOk returns a tuple with the LinuxVdaVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteBrowserIsolationImageModel) GetLinuxVdaVersionOk() (*string, bool) {
	if o == nil || IsNil(o.LinuxVdaVersion) {
		return nil, false
	}
	return o.LinuxVdaVersion, true
}

// SetLinuxVdaVersion gets a reference to the given string and assigns it to the LinuxVdaVersion field.
func (o *RemoteBrowserIsolationImageModel) SetLinuxVdaVersion(v string) {
	o.LinuxVdaVersion = &v
}

// GetOsVersion returns the OsVersion field value if set, zero value otherwise.
func (o *RemoteBrowserIsolationImageModel) GetOsVersion() string {
	if o == nil || IsNil(o.OsVersion) {
		var ret string
		return ret
	}
	return *o.OsVersion
}

// GetOsVersionOk returns a tuple with the OsVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteBrowserIsolationImageModel) GetOsVersionOk() (*string, bool) {
	if o == nil || IsNil(o.OsVersion) {
		return nil, false
	}
	return o.OsVersion, true
}

// SetOsVersion gets a reference to the given string and assigns it to the OsVersion field.
func (o *RemoteBrowserIsolationImageModel) SetOsVersion(v string) {
	o.OsVersion = &v
}

// GetVhdLocation returns the VhdLocation field value if set, zero value otherwise.
func (o *RemoteBrowserIsolationImageModel) GetVhdLocation() string {
	if o == nil || IsNil(o.VhdLocation) {
		var ret string
		return ret
	}
	return *o.VhdLocation
}

// GetVhdLocationOk returns a tuple with the VhdLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteBrowserIsolationImageModel) GetVhdLocationOk() (*string, bool) {
	if o == nil || IsNil(o.VhdLocation) {
		return nil, false
	}
	return o.VhdLocation, true
}

// SetVhdLocation gets a reference to the given string and assigns it to the VhdLocation field.
func (o *RemoteBrowserIsolationImageModel) SetVhdLocation(v string) {
	o.VhdLocation = &v
}

// GetVhdSasLink returns the VhdSasLink field value if set, zero value otherwise.
func (o *RemoteBrowserIsolationImageModel) GetVhdSasLink() string {
	if o == nil || IsNil(o.VhdSasLink) {
		var ret string
		return ret
	}
	return *o.VhdSasLink
}

// GetVhdSasLinkOk returns a tuple with the VhdSasLink field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteBrowserIsolationImageModel) GetVhdSasLinkOk() (*string, bool) {
	if o == nil || IsNil(o.VhdSasLink) {
		return nil, false
	}
	return o.VhdSasLink, true
}

// SetVhdSasLink gets a reference to the given string and assigns it to the VhdSasLink field.
func (o *RemoteBrowserIsolationImageModel) SetVhdSasLink(v string) {
	o.VhdSasLink = &v
}

// GetTicketRequestAddress returns the TicketRequestAddress field value if set, zero value otherwise.
func (o *RemoteBrowserIsolationImageModel) GetTicketRequestAddress() string {
	if o == nil || IsNil(o.TicketRequestAddress) {
		var ret string
		return ret
	}
	return *o.TicketRequestAddress
}

// GetTicketRequestAddressOk returns a tuple with the TicketRequestAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteBrowserIsolationImageModel) GetTicketRequestAddressOk() (*string, bool) {
	if o == nil || IsNil(o.TicketRequestAddress) {
		return nil, false
	}
	return o.TicketRequestAddress, true
}

// SetTicketRequestAddress gets a reference to the given string and assigns it to the TicketRequestAddress field.
func (o *RemoteBrowserIsolationImageModel) SetTicketRequestAddress(v string) {
	o.TicketRequestAddress = &v
}

// GetPolicyContent returns the PolicyContent field value if set, zero value otherwise.
func (o *RemoteBrowserIsolationImageModel) GetPolicyContent() string {
	if o == nil || IsNil(o.PolicyContent) {
		var ret string
		return ret
	}
	return *o.PolicyContent
}

// GetPolicyContentOk returns a tuple with the PolicyContent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteBrowserIsolationImageModel) GetPolicyContentOk() (*string, bool) {
	if o == nil || IsNil(o.PolicyContent) {
		return nil, false
	}
	return o.PolicyContent, true
}

// SetPolicyContent gets a reference to the given string and assigns it to the PolicyContent field.
func (o *RemoteBrowserIsolationImageModel) SetPolicyContent(v string) {
	o.PolicyContent = &v
}

// GetVdaUpdateDelay returns the VdaUpdateDelay field value if set, zero value otherwise.
func (o *RemoteBrowserIsolationImageModel) GetVdaUpdateDelay() int32 {
	if o == nil || IsNil(o.VdaUpdateDelay) {
		var ret int32
		return ret
	}
	return *o.VdaUpdateDelay
}

// GetVdaUpdateDelayOk returns a tuple with the VdaUpdateDelay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteBrowserIsolationImageModel) GetVdaUpdateDelayOk() (*int32, bool) {
	if o == nil || IsNil(o.VdaUpdateDelay) {
		return nil, false
	}
	return o.VdaUpdateDelay, true
}

// SetVdaUpdateDelay gets a reference to the given int32 and assigns it to the VdaUpdateDelay field.
func (o *RemoteBrowserIsolationImageModel) SetVdaUpdateDelay(v int32) {
	o.VdaUpdateDelay = &v
}

func (o RemoteBrowserIsolationImageModel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RemoteBrowserIsolationImageModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.SbSessionVdaVersion) {
		toSerialize["sbSessionVdaVersion"] = o.SbSessionVdaVersion
	}
	if !IsNil(o.CommandLineExecutable) {
		toSerialize["commandLineExecutable"] = o.CommandLineExecutable
	}
	if !IsNil(o.CommandLineArguments) {
		toSerialize["commandLineArguments"] = o.CommandLineArguments
	}
	if !IsNil(o.WorkingDirectory) {
		toSerialize["workingDirectory"] = o.WorkingDirectory
	}
	if !IsNil(o.LinuxVdaVersion) {
		toSerialize["linuxVdaVersion"] = o.LinuxVdaVersion
	}
	if !IsNil(o.OsVersion) {
		toSerialize["osVersion"] = o.OsVersion
	}
	if !IsNil(o.VhdLocation) {
		toSerialize["vhdLocation"] = o.VhdLocation
	}
	if !IsNil(o.VhdSasLink) {
		toSerialize["vhdSasLink"] = o.VhdSasLink
	}
	if !IsNil(o.TicketRequestAddress) {
		toSerialize["ticketRequestAddress"] = o.TicketRequestAddress
	}
	if !IsNil(o.PolicyContent) {
		toSerialize["policyContent"] = o.PolicyContent
	}
	if !IsNil(o.VdaUpdateDelay) {
		toSerialize["vdaUpdateDelay"] = o.VdaUpdateDelay
	}
	return toSerialize, nil
}

type NullableRemoteBrowserIsolationImageModel struct {
	value *RemoteBrowserIsolationImageModel
	isSet bool
}

func (v NullableRemoteBrowserIsolationImageModel) Get() *RemoteBrowserIsolationImageModel {
	return v.value
}

func (v *NullableRemoteBrowserIsolationImageModel) Set(val *RemoteBrowserIsolationImageModel) {
	v.value = val
	v.isSet = true
}

func (v NullableRemoteBrowserIsolationImageModel) IsSet() bool {
	return v.isSet
}

func (v *NullableRemoteBrowserIsolationImageModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRemoteBrowserIsolationImageModel(val *RemoteBrowserIsolationImageModel) *NullableRemoteBrowserIsolationImageModel {
	return &NullableRemoteBrowserIsolationImageModel{value: val, isSet: true}
}

func (v NullableRemoteBrowserIsolationImageModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRemoteBrowserIsolationImageModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
