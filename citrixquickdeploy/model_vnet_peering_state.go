/*
Citrix Virtual App & Desktop Catalog Service 148.0.26750.34636

Catalog Service

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickdeploy

import (
	"encoding/json"
	"fmt"
)

// VnetPeeringState the model 'VnetPeeringState'
type VnetPeeringState string

// List of VnetPeeringState
const (
	VNETPEERINGSTATE_PENDING                            VnetPeeringState = "Pending"
	VNETPEERINGSTATE_PROVISIONING                       VnetPeeringState = "Provisioning"
	VNETPEERINGSTATE_FAILED                             VnetPeeringState = "Failed"
	VNETPEERINGSTATE_COMPLETE                           VnetPeeringState = "Complete"
	VNETPEERINGSTATE_DELETING                           VnetPeeringState = "Deleting"
	VNETPEERINGSTATE_DELETE_FAILED                      VnetPeeringState = "DeleteFailed"
	VNETPEERINGSTATE_CREATING_ROUTE_TABLE               VnetPeeringState = "CreatingRouteTable"
	VNETPEERINGSTATE_UPDATING_ROUTE_TABLE               VnetPeeringState = "UpdatingRouteTable"
	VNETPEERINGSTATE_ROUTE_TABLE_FAILED                 VnetPeeringState = "RouteTableFailed"
	VNETPEERINGSTATE_UPDATING_DNS_SERVERS               VnetPeeringState = "UpdatingDnsServers"
	VNETPEERINGSTATE_UPDATING_DNS_SERVERS_FAILED        VnetPeeringState = "UpdatingDnsServersFailed"
	VNETPEERINGSTATE_CREATING_NAT_GATEWAY               VnetPeeringState = "CreatingNatGateway"
	VNETPEERINGSTATE_UPDATING_NAT_GATEWAY               VnetPeeringState = "UpdatingNatGateway"
	VNETPEERINGSTATE_DISABLING_NAT_GATEWAY              VnetPeeringState = "DisablingNatGateway"
	VNETPEERINGSTATE_NAT_GATEWAY_FAILED                 VnetPeeringState = "NatGatewayFailed"
	VNETPEERINGSTATE_ROUTE_TABLE_AND_NAT_GATEWAY_FAILED VnetPeeringState = "RouteTableAndNatGatewayFailed"
)

// All allowed values of VnetPeeringState enum
var AllowedVnetPeeringStateEnumValues = []VnetPeeringState{
	"Pending",
	"Provisioning",
	"Failed",
	"Complete",
	"Deleting",
	"DeleteFailed",
	"CreatingRouteTable",
	"UpdatingRouteTable",
	"RouteTableFailed",
	"UpdatingDnsServers",
	"UpdatingDnsServersFailed",
	"CreatingNatGateway",
	"UpdatingNatGateway",
	"DisablingNatGateway",
	"NatGatewayFailed",
	"RouteTableAndNatGatewayFailed",
}

func (v *VnetPeeringState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	*v = VnetPeeringState(value)
	return nil
}

// NewVnetPeeringStateFromValue returns a pointer to a valid VnetPeeringState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVnetPeeringStateFromValue(v string) (*VnetPeeringState, error) {
	ev := VnetPeeringState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VnetPeeringState: valid values are %v", v, AllowedVnetPeeringStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VnetPeeringState) IsValid() bool {
	for _, existing := range AllowedVnetPeeringStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VnetPeeringState value
func (v VnetPeeringState) Ptr() *VnetPeeringState {
	return &v
}

type NullableVnetPeeringState struct {
	value *VnetPeeringState
	isSet bool
}

func (v NullableVnetPeeringState) Get() *VnetPeeringState {
	return v.value
}

func (v *NullableVnetPeeringState) Set(val *VnetPeeringState) {
	v.value = val
	v.isSet = true
}

func (v NullableVnetPeeringState) IsSet() bool {
	return v.isSet
}

func (v *NullableVnetPeeringState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVnetPeeringState(val *VnetPeeringState) *NullableVnetPeeringState {
	return &NullableVnetPeeringState{value: val, isSet: true}
}

func (v NullableVnetPeeringState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVnetPeeringState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
