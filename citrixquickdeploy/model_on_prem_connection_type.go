/*
Citrix Virtual App & Desktop Catalog Service 147.0.26651.57932

Catalog Service

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickdeploy

import (
	"encoding/json"
	"fmt"
)

// OnPremConnectionType the model 'OnPremConnectionType'
type OnPremConnectionType string

// List of OnPremConnectionType
const (
	ONPREMCONNECTIONTYPE_VNET_PEERING OnPremConnectionType = "VnetPeering"
	ONPREMCONNECTIONTYPE_AZURE_VPN    OnPremConnectionType = "AzureVpn"
	ONPREMCONNECTIONTYPE_SD_WAN       OnPremConnectionType = "SdWan"
)

// All allowed values of OnPremConnectionType enum
var AllowedOnPremConnectionTypeEnumValues = []OnPremConnectionType{
	"VnetPeering",
	"AzureVpn",
	"SdWan",
}

func (v *OnPremConnectionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	*v = OnPremConnectionType(value)
	return nil
}

// NewOnPremConnectionTypeFromValue returns a pointer to a valid OnPremConnectionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOnPremConnectionTypeFromValue(v string) (*OnPremConnectionType, error) {
	ev := OnPremConnectionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OnPremConnectionType: valid values are %v", v, AllowedOnPremConnectionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OnPremConnectionType) IsValid() bool {
	for _, existing := range AllowedOnPremConnectionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OnPremConnectionType value
func (v OnPremConnectionType) Ptr() *OnPremConnectionType {
	return &v
}

type NullableOnPremConnectionType struct {
	value *OnPremConnectionType
	isSet bool
}

func (v NullableOnPremConnectionType) Get() *OnPremConnectionType {
	return v.value
}

func (v *NullableOnPremConnectionType) Set(val *OnPremConnectionType) {
	v.value = val
	v.isSet = true
}

func (v NullableOnPremConnectionType) IsSet() bool {
	return v.isSet
}

func (v *NullableOnPremConnectionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOnPremConnectionType(val *OnPremConnectionType) *NullableOnPremConnectionType {
	return &NullableOnPremConnectionType{value: val, isSet: true}
}

func (v NullableOnPremConnectionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOnPremConnectionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
