/*
Citrix Virtual App & Desktop Catalog Service 147.0.26651.57932

Catalog Service

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickdeploy

import (
	"encoding/json"
	"fmt"
)

// ConnectorDetailsState State of a connector
type ConnectorDetailsState string

// List of ConnectorDetailsState
const (
	CONNECTORDETAILSSTATE_PROVISIONING ConnectorDetailsState = "Provisioning"
	CONNECTORDETAILSSTATE_DISCONNECTED ConnectorDetailsState = "Disconnected"
	CONNECTORDETAILSSTATE_CONNECTED    ConnectorDetailsState = "Connected"
	CONNECTORDETAILSSTATE_DELETING     ConnectorDetailsState = "Deleting"
	CONNECTORDETAILSSTATE_FAILED       ConnectorDetailsState = "Failed"
	CONNECTORDETAILSSTATE_REBOOTING    ConnectorDetailsState = "Rebooting"
)

// All allowed values of ConnectorDetailsState enum
var AllowedConnectorDetailsStateEnumValues = []ConnectorDetailsState{
	"Provisioning",
	"Disconnected",
	"Connected",
	"Deleting",
	"Failed",
	"Rebooting",
}

func (v *ConnectorDetailsState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	*v = ConnectorDetailsState(value)
	return nil
}

// NewConnectorDetailsStateFromValue returns a pointer to a valid ConnectorDetailsState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewConnectorDetailsStateFromValue(v string) (*ConnectorDetailsState, error) {
	ev := ConnectorDetailsState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ConnectorDetailsState: valid values are %v", v, AllowedConnectorDetailsStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ConnectorDetailsState) IsValid() bool {
	for _, existing := range AllowedConnectorDetailsStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ConnectorDetailsState value
func (v ConnectorDetailsState) Ptr() *ConnectorDetailsState {
	return &v
}

type NullableConnectorDetailsState struct {
	value *ConnectorDetailsState
	isSet bool
}

func (v NullableConnectorDetailsState) Get() *ConnectorDetailsState {
	return v.value
}

func (v *NullableConnectorDetailsState) Set(val *ConnectorDetailsState) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectorDetailsState) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectorDetailsState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectorDetailsState(val *ConnectorDetailsState) *NullableConnectorDetailsState {
	return &NullableConnectorDetailsState{value: val, isSet: true}
}

func (v NullableConnectorDetailsState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectorDetailsState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
