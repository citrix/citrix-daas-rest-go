/*
Citrix Virtual App & Desktop Catalog Service 147.0.26651.57932

Catalog Service

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickdeploy

import (
	"encoding/json"
	"fmt"
)

// DataStoreEntitlementUpdateState the model 'DataStoreEntitlementUpdateState'
type DataStoreEntitlementUpdateState string

// List of DataStoreEntitlementUpdateState
const (
	DATASTOREENTITLEMENTUPDATESTATE_UNKNOWN    DataStoreEntitlementUpdateState = "Unknown"
	DATASTOREENTITLEMENTUPDATESTATE_INITIATED  DataStoreEntitlementUpdateState = "Initiated"
	DATASTOREENTITLEMENTUPDATESTATE_PROCESSING DataStoreEntitlementUpdateState = "Processing"
	DATASTOREENTITLEMENTUPDATESTATE_SUCCEEDED  DataStoreEntitlementUpdateState = "Succeeded"
	DATASTOREENTITLEMENTUPDATESTATE_FAILED     DataStoreEntitlementUpdateState = "Failed"
)

// All allowed values of DataStoreEntitlementUpdateState enum
var AllowedDataStoreEntitlementUpdateStateEnumValues = []DataStoreEntitlementUpdateState{
	"Unknown",
	"Initiated",
	"Processing",
	"Succeeded",
	"Failed",
}

func (v *DataStoreEntitlementUpdateState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	*v = DataStoreEntitlementUpdateState(value)
	return nil
}

// NewDataStoreEntitlementUpdateStateFromValue returns a pointer to a valid DataStoreEntitlementUpdateState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDataStoreEntitlementUpdateStateFromValue(v string) (*DataStoreEntitlementUpdateState, error) {
	ev := DataStoreEntitlementUpdateState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DataStoreEntitlementUpdateState: valid values are %v", v, AllowedDataStoreEntitlementUpdateStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DataStoreEntitlementUpdateState) IsValid() bool {
	for _, existing := range AllowedDataStoreEntitlementUpdateStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DataStoreEntitlementUpdateState value
func (v DataStoreEntitlementUpdateState) Ptr() *DataStoreEntitlementUpdateState {
	return &v
}

type NullableDataStoreEntitlementUpdateState struct {
	value *DataStoreEntitlementUpdateState
	isSet bool
}

func (v NullableDataStoreEntitlementUpdateState) Get() *DataStoreEntitlementUpdateState {
	return v.value
}

func (v *NullableDataStoreEntitlementUpdateState) Set(val *DataStoreEntitlementUpdateState) {
	v.value = val
	v.isSet = true
}

func (v NullableDataStoreEntitlementUpdateState) IsSet() bool {
	return v.isSet
}

func (v *NullableDataStoreEntitlementUpdateState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataStoreEntitlementUpdateState(val *DataStoreEntitlementUpdateState) *NullableDataStoreEntitlementUpdateState {
	return &NullableDataStoreEntitlementUpdateState{value: val, isSet: true}
}

func (v NullableDataStoreEntitlementUpdateState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataStoreEntitlementUpdateState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
