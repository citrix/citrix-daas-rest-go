/*
Citrix Virtual App & Desktop Catalog Service 148.0.26750.34636

Catalog Service

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickdeploy

import (
	"encoding/json"
	"fmt"
)

// ConnectivityType the model 'ConnectivityType'
type ConnectivityType string

// List of ConnectivityType
const (
	CONNECTIVITYTYPE_NONE                      ConnectivityType = "None"
	CONNECTIVITYTYPE_NETSCALER_GATEWAY         ConnectivityType = "NetscalerGateway"
	CONNECTIVITYTYPE_NETSCALER_GATEWAY_SERVICE ConnectivityType = "NetscalerGatewayService"
)

// All allowed values of ConnectivityType enum
var AllowedConnectivityTypeEnumValues = []ConnectivityType{
	"None",
	"NetscalerGateway",
	"NetscalerGatewayService",
}

func (v *ConnectivityType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	*v = ConnectivityType(value)
	return nil
}

// NewConnectivityTypeFromValue returns a pointer to a valid ConnectivityType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewConnectivityTypeFromValue(v string) (*ConnectivityType, error) {
	ev := ConnectivityType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ConnectivityType: valid values are %v", v, AllowedConnectivityTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ConnectivityType) IsValid() bool {
	for _, existing := range AllowedConnectivityTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ConnectivityType value
func (v ConnectivityType) Ptr() *ConnectivityType {
	return &v
}

type NullableConnectivityType struct {
	value *ConnectivityType
	isSet bool
}

func (v NullableConnectivityType) Get() *ConnectivityType {
	return v.value
}

func (v *NullableConnectivityType) Set(val *ConnectivityType) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectivityType) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectivityType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectivityType(val *ConnectivityType) *NullableConnectivityType {
	return &NullableConnectivityType{value: val, isSet: true}
}

func (v NullableConnectivityType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectivityType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
