/*
Citrix Virtual App & Desktop Catalog Service 148.0.26750.34636

Catalog Service

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickdeploy

import (
	"encoding/json"
)

// checks if the ScheduledBackupModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScheduledBackupModel{}

// ScheduledBackupModel struct for ScheduledBackupModel
type ScheduledBackupModel struct {
	CustomerId        string              `json:"customerId"`
	VirtualSiteId     string              `json:"virtualSiteId"`
	CatalogsForBackup []CatalogsForBackup `json:"catalogsForBackup"`
}

// NewScheduledBackupModelWithDefaults instantiates a new ScheduledBackupModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScheduledBackupModelWithDefaults() *ScheduledBackupModel {
	this := ScheduledBackupModel{}
	return &this
}

// GetCustomerId returns the CustomerId field value
func (o *ScheduledBackupModel) GetCustomerId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CustomerId
}

// GetCustomerIdOk returns a tuple with the CustomerId field value
// and a boolean to check if the value has been set.
func (o *ScheduledBackupModel) GetCustomerIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CustomerId, true
}

// SetCustomerId sets field value
func (o *ScheduledBackupModel) SetCustomerId(v string) {
	o.CustomerId = v
}

// GetVirtualSiteId returns the VirtualSiteId field value
func (o *ScheduledBackupModel) GetVirtualSiteId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VirtualSiteId
}

// GetVirtualSiteIdOk returns a tuple with the VirtualSiteId field value
// and a boolean to check if the value has been set.
func (o *ScheduledBackupModel) GetVirtualSiteIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VirtualSiteId, true
}

// SetVirtualSiteId sets field value
func (o *ScheduledBackupModel) SetVirtualSiteId(v string) {
	o.VirtualSiteId = v
}

// GetCatalogsForBackup returns the CatalogsForBackup field value
func (o *ScheduledBackupModel) GetCatalogsForBackup() []CatalogsForBackup {
	if o == nil {
		var ret []CatalogsForBackup
		return ret
	}

	return o.CatalogsForBackup
}

// GetCatalogsForBackupOk returns a tuple with the CatalogsForBackup field value
// and a boolean to check if the value has been set.
func (o *ScheduledBackupModel) GetCatalogsForBackupOk() ([]CatalogsForBackup, bool) {
	if o == nil {
		return nil, false
	}
	return o.CatalogsForBackup, true
}

// SetCatalogsForBackup sets field value
func (o *ScheduledBackupModel) SetCatalogsForBackup(v []CatalogsForBackup) {
	o.CatalogsForBackup = v
}

func (o ScheduledBackupModel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScheduledBackupModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["customerId"] = o.CustomerId
	toSerialize["virtualSiteId"] = o.VirtualSiteId
	toSerialize["catalogsForBackup"] = o.CatalogsForBackup
	return toSerialize, nil
}

type NullableScheduledBackupModel struct {
	value *ScheduledBackupModel
	isSet bool
}

func (v NullableScheduledBackupModel) Get() *ScheduledBackupModel {
	return v.value
}

func (v *NullableScheduledBackupModel) Set(val *ScheduledBackupModel) {
	v.value = val
	v.isSet = true
}

func (v NullableScheduledBackupModel) IsSet() bool {
	return v.isSet
}

func (v *NullableScheduledBackupModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScheduledBackupModel(val *ScheduledBackupModel) *NullableScheduledBackupModel {
	return &NullableScheduledBackupModel{value: val, isSet: true}
}

func (v NullableScheduledBackupModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScheduledBackupModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
