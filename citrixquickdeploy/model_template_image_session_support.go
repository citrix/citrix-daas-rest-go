/*
Citrix Virtual App & Desktop Catalog Service 148.0.26750.34636

Catalog Service

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickdeploy

import (
	"encoding/json"
	"fmt"
)

// TemplateImageSessionSupport the model 'TemplateImageSessionSupport'
type TemplateImageSessionSupport string

// List of TemplateImageSessionSupport
const (
	TEMPLATEIMAGESESSIONSUPPORT_MULTI_SESSION  TemplateImageSessionSupport = "MultiSession"
	TEMPLATEIMAGESESSIONSUPPORT_SINGLE_SESSION TemplateImageSessionSupport = "SingleSession"
	TEMPLATEIMAGESESSIONSUPPORT_BOTH           TemplateImageSessionSupport = "Both"
	TEMPLATEIMAGESESSIONSUPPORT_ANY            TemplateImageSessionSupport = "Any"
	TEMPLATEIMAGESESSIONSUPPORT_UNKNOWN        TemplateImageSessionSupport = "Unknown"
)

// All allowed values of TemplateImageSessionSupport enum
var AllowedTemplateImageSessionSupportEnumValues = []TemplateImageSessionSupport{
	"MultiSession",
	"SingleSession",
	"Both",
	"Any",
	"Unknown",
}

func (v *TemplateImageSessionSupport) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	*v = TemplateImageSessionSupport(value)
	return nil
}

// NewTemplateImageSessionSupportFromValue returns a pointer to a valid TemplateImageSessionSupport
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTemplateImageSessionSupportFromValue(v string) (*TemplateImageSessionSupport, error) {
	ev := TemplateImageSessionSupport(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TemplateImageSessionSupport: valid values are %v", v, AllowedTemplateImageSessionSupportEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TemplateImageSessionSupport) IsValid() bool {
	for _, existing := range AllowedTemplateImageSessionSupportEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TemplateImageSessionSupport value
func (v TemplateImageSessionSupport) Ptr() *TemplateImageSessionSupport {
	return &v
}

type NullableTemplateImageSessionSupport struct {
	value *TemplateImageSessionSupport
	isSet bool
}

func (v NullableTemplateImageSessionSupport) Get() *TemplateImageSessionSupport {
	return v.value
}

func (v *NullableTemplateImageSessionSupport) Set(val *TemplateImageSessionSupport) {
	v.value = val
	v.isSet = true
}

func (v NullableTemplateImageSessionSupport) IsSet() bool {
	return v.isSet
}

func (v *NullableTemplateImageSessionSupport) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTemplateImageSessionSupport(val *TemplateImageSessionSupport) *NullableTemplateImageSessionSupport {
	return &NullableTemplateImageSessionSupport{value: val, isSet: true}
}

func (v NullableTemplateImageSessionSupport) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTemplateImageSessionSupport) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
