/*
Citrix Virtual App & Desktop Catalog Service 147.0.26651.57932

Catalog Service

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickdeploy

import (
	"encoding/json"
)

// checks if the Data type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Data{}

// Data struct for Data
type Data struct {
	Essentials   *Essentials   `json:"essentials,omitempty"`
	AlertContext *AlertContext `json:"alertContext,omitempty"`
}

// NewDataWithDefaults instantiates a new Data object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataWithDefaults() *Data {
	this := Data{}
	return &this
}

// GetEssentials returns the Essentials field value if set, zero value otherwise.
func (o *Data) GetEssentials() Essentials {
	if o == nil || IsNil(o.Essentials) {
		var ret Essentials
		return ret
	}
	return *o.Essentials
}

// GetEssentialsOk returns a tuple with the Essentials field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Data) GetEssentialsOk() (*Essentials, bool) {
	if o == nil || IsNil(o.Essentials) {
		return nil, false
	}
	return o.Essentials, true
}

// SetEssentials gets a reference to the given Essentials and assigns it to the Essentials field.
func (o *Data) SetEssentials(v Essentials) {
	o.Essentials = &v
}

// GetAlertContext returns the AlertContext field value if set, zero value otherwise.
func (o *Data) GetAlertContext() AlertContext {
	if o == nil || IsNil(o.AlertContext) {
		var ret AlertContext
		return ret
	}
	return *o.AlertContext
}

// GetAlertContextOk returns a tuple with the AlertContext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Data) GetAlertContextOk() (*AlertContext, bool) {
	if o == nil || IsNil(o.AlertContext) {
		return nil, false
	}
	return o.AlertContext, true
}

// SetAlertContext gets a reference to the given AlertContext and assigns it to the AlertContext field.
func (o *Data) SetAlertContext(v AlertContext) {
	o.AlertContext = &v
}

func (o Data) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Data) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Essentials) {
		toSerialize["essentials"] = o.Essentials
	}
	if !IsNil(o.AlertContext) {
		toSerialize["alertContext"] = o.AlertContext
	}
	return toSerialize, nil
}

type NullableData struct {
	value *Data
	isSet bool
}

func (v NullableData) Get() *Data {
	return v.value
}

func (v *NullableData) Set(val *Data) {
	v.value = val
	v.isSet = true
}

func (v NullableData) IsSet() bool {
	return v.isSet
}

func (v *NullableData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableData(val *Data) *NullableData {
	return &NullableData{value: val, isSet: true}
}

func (v NullableData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
