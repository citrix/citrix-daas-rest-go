/*
Citrix Virtual App & Desktop Catalog Service 147.0.26651.57932

Catalog Service

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickdeploy

import (
	"encoding/json"
	"fmt"
)

// CatalogCapacityStorageType the model 'CatalogCapacityStorageType'
type CatalogCapacityStorageType string

// List of CatalogCapacityStorageType
const (
	CATALOGCAPACITYSTORAGETYPE_STANDARD_LRS     CatalogCapacityStorageType = "Standard_LRS"
	CATALOGCAPACITYSTORAGETYPE_PREMIUM_LRS      CatalogCapacityStorageType = "Premium_LRS"
	CATALOGCAPACITYSTORAGETYPE_STANDARD_SSD_LRS CatalogCapacityStorageType = "StandardSSD_LRS"
)

// All allowed values of CatalogCapacityStorageType enum
var AllowedCatalogCapacityStorageTypeEnumValues = []CatalogCapacityStorageType{
	"Standard_LRS",
	"Premium_LRS",
	"StandardSSD_LRS",
}

func (v *CatalogCapacityStorageType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	*v = CatalogCapacityStorageType(value)
	return nil
}

// NewCatalogCapacityStorageTypeFromValue returns a pointer to a valid CatalogCapacityStorageType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCatalogCapacityStorageTypeFromValue(v string) (*CatalogCapacityStorageType, error) {
	ev := CatalogCapacityStorageType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CatalogCapacityStorageType: valid values are %v", v, AllowedCatalogCapacityStorageTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CatalogCapacityStorageType) IsValid() bool {
	for _, existing := range AllowedCatalogCapacityStorageTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CatalogCapacityStorageType value
func (v CatalogCapacityStorageType) Ptr() *CatalogCapacityStorageType {
	return &v
}

type NullableCatalogCapacityStorageType struct {
	value *CatalogCapacityStorageType
	isSet bool
}

func (v NullableCatalogCapacityStorageType) Get() *CatalogCapacityStorageType {
	return v.value
}

func (v *NullableCatalogCapacityStorageType) Set(val *CatalogCapacityStorageType) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogCapacityStorageType) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogCapacityStorageType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogCapacityStorageType(val *CatalogCapacityStorageType) *NullableCatalogCapacityStorageType {
	return &NullableCatalogCapacityStorageType{value: val, isSet: true}
}

func (v NullableCatalogCapacityStorageType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogCapacityStorageType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
