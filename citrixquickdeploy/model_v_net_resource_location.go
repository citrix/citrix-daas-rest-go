/*
Citrix Virtual App & Desktop Catalog Service 148.0.26750.34636

Catalog Service

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickdeploy

import (
	"encoding/json"
)

// checks if the VNetResourceLocation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VNetResourceLocation{}

// VNetResourceLocation struct for VNetResourceLocation
type VNetResourceLocation struct {
	// ID for the Resource Location
	ResourceLocationId *string `json:"resourceLocationId,omitempty"`
	// List of ports
	Ports []NetworkSecurityGroupPort `json:"ports,omitempty"`
	// Network Security Group Name
	NetworkSecurityGroup *string `json:"networkSecurityGroup,omitempty"`
	// Domain name tied to the resource location
	DomainJoined *string `json:"domainJoined,omitempty"`
	// The list of connectors configured for the resource location
	Connectors []string `json:"connectors,omitempty"`
	// Vnet Peering associated with the resource location
	VnetPeering *string `json:"vnetPeering,omitempty"`
}

// NewVNetResourceLocationWithDefaults instantiates a new VNetResourceLocation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVNetResourceLocationWithDefaults() *VNetResourceLocation {
	this := VNetResourceLocation{}
	return &this
}

// GetResourceLocationId returns the ResourceLocationId field value if set, zero value otherwise.
func (o *VNetResourceLocation) GetResourceLocationId() string {
	if o == nil || IsNil(o.ResourceLocationId) {
		var ret string
		return ret
	}
	return *o.ResourceLocationId
}

// GetResourceLocationIdOk returns a tuple with the ResourceLocationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VNetResourceLocation) GetResourceLocationIdOk() (*string, bool) {
	if o == nil || IsNil(o.ResourceLocationId) {
		return nil, false
	}
	return o.ResourceLocationId, true
}

// SetResourceLocationId gets a reference to the given string and assigns it to the ResourceLocationId field.
func (o *VNetResourceLocation) SetResourceLocationId(v string) {
	o.ResourceLocationId = &v
}

// GetPorts returns the Ports field value if set, zero value otherwise.
func (o *VNetResourceLocation) GetPorts() []NetworkSecurityGroupPort {
	if o == nil || IsNil(o.Ports) {
		var ret []NetworkSecurityGroupPort
		return ret
	}
	return o.Ports
}

// GetPortsOk returns a tuple with the Ports field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VNetResourceLocation) GetPortsOk() ([]NetworkSecurityGroupPort, bool) {
	if o == nil || IsNil(o.Ports) {
		return nil, false
	}
	return o.Ports, true
}

// SetPorts gets a reference to the given []NetworkSecurityGroupPort and assigns it to the Ports field.
func (o *VNetResourceLocation) SetPorts(v []NetworkSecurityGroupPort) {
	o.Ports = v
}

// GetNetworkSecurityGroup returns the NetworkSecurityGroup field value if set, zero value otherwise.
func (o *VNetResourceLocation) GetNetworkSecurityGroup() string {
	if o == nil || IsNil(o.NetworkSecurityGroup) {
		var ret string
		return ret
	}
	return *o.NetworkSecurityGroup
}

// GetNetworkSecurityGroupOk returns a tuple with the NetworkSecurityGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VNetResourceLocation) GetNetworkSecurityGroupOk() (*string, bool) {
	if o == nil || IsNil(o.NetworkSecurityGroup) {
		return nil, false
	}
	return o.NetworkSecurityGroup, true
}

// SetNetworkSecurityGroup gets a reference to the given string and assigns it to the NetworkSecurityGroup field.
func (o *VNetResourceLocation) SetNetworkSecurityGroup(v string) {
	o.NetworkSecurityGroup = &v
}

// GetDomainJoined returns the DomainJoined field value if set, zero value otherwise.
func (o *VNetResourceLocation) GetDomainJoined() string {
	if o == nil || IsNil(o.DomainJoined) {
		var ret string
		return ret
	}
	return *o.DomainJoined
}

// GetDomainJoinedOk returns a tuple with the DomainJoined field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VNetResourceLocation) GetDomainJoinedOk() (*string, bool) {
	if o == nil || IsNil(o.DomainJoined) {
		return nil, false
	}
	return o.DomainJoined, true
}

// SetDomainJoined gets a reference to the given string and assigns it to the DomainJoined field.
func (o *VNetResourceLocation) SetDomainJoined(v string) {
	o.DomainJoined = &v
}

// GetConnectors returns the Connectors field value if set, zero value otherwise.
func (o *VNetResourceLocation) GetConnectors() []string {
	if o == nil || IsNil(o.Connectors) {
		var ret []string
		return ret
	}
	return o.Connectors
}

// GetConnectorsOk returns a tuple with the Connectors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VNetResourceLocation) GetConnectorsOk() ([]string, bool) {
	if o == nil || IsNil(o.Connectors) {
		return nil, false
	}
	return o.Connectors, true
}

// SetConnectors gets a reference to the given []string and assigns it to the Connectors field.
func (o *VNetResourceLocation) SetConnectors(v []string) {
	o.Connectors = v
}

// GetVnetPeering returns the VnetPeering field value if set, zero value otherwise.
func (o *VNetResourceLocation) GetVnetPeering() string {
	if o == nil || IsNil(o.VnetPeering) {
		var ret string
		return ret
	}
	return *o.VnetPeering
}

// GetVnetPeeringOk returns a tuple with the VnetPeering field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VNetResourceLocation) GetVnetPeeringOk() (*string, bool) {
	if o == nil || IsNil(o.VnetPeering) {
		return nil, false
	}
	return o.VnetPeering, true
}

// SetVnetPeering gets a reference to the given string and assigns it to the VnetPeering field.
func (o *VNetResourceLocation) SetVnetPeering(v string) {
	o.VnetPeering = &v
}

func (o VNetResourceLocation) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VNetResourceLocation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ResourceLocationId) {
		toSerialize["resourceLocationId"] = o.ResourceLocationId
	}
	if !IsNil(o.Ports) {
		toSerialize["ports"] = o.Ports
	}
	if !IsNil(o.NetworkSecurityGroup) {
		toSerialize["networkSecurityGroup"] = o.NetworkSecurityGroup
	}
	if !IsNil(o.DomainJoined) {
		toSerialize["domainJoined"] = o.DomainJoined
	}
	if !IsNil(o.Connectors) {
		toSerialize["connectors"] = o.Connectors
	}
	if !IsNil(o.VnetPeering) {
		toSerialize["vnetPeering"] = o.VnetPeering
	}
	return toSerialize, nil
}

type NullableVNetResourceLocation struct {
	value *VNetResourceLocation
	isSet bool
}

func (v NullableVNetResourceLocation) Get() *VNetResourceLocation {
	return v.value
}

func (v *NullableVNetResourceLocation) Set(val *VNetResourceLocation) {
	v.value = val
	v.isSet = true
}

func (v NullableVNetResourceLocation) IsSet() bool {
	return v.isSet
}

func (v *NullableVNetResourceLocation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVNetResourceLocation(val *VNetResourceLocation) *NullableVNetResourceLocation {
	return &NullableVNetResourceLocation{value: val, isSet: true}
}

func (v NullableVNetResourceLocation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVNetResourceLocation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
