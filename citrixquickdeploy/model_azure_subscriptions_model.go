/*
Citrix Virtual App & Desktop Catalog Service 148.0.26750.34636

Catalog Service

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickdeploy

import (
	"encoding/json"
)

// checks if the AzureSubscriptionsModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AzureSubscriptionsModel{}

// AzureSubscriptionsModel struct for AzureSubscriptionsModel
type AzureSubscriptionsModel struct {
	// List of known subscriptions that have been associated with the customer
	Items []AzureSubscriptionOverview `json:"items"`
	// Alias of Items property for backward compatibility
	Subscriptions []AzureSubscriptionOverview `json:"subscriptions,omitempty"`
	// The maximum allowed Citrix Managed subscriptions for the customer
	MaxCitrixManagedSubscriptions *int32 `json:"maxCitrixManagedSubscriptions,omitempty"`
	// The unique name of the user who provided the auth code to list subscriptions. Will only be present if an Azure Authorization Code was provided
	UniqueName *string `json:"uniqueName,omitempty"`
	StaleData  *bool   `json:"staleData,omitempty"`
}

// NewAzureSubscriptionsModelWithDefaults instantiates a new AzureSubscriptionsModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAzureSubscriptionsModelWithDefaults() *AzureSubscriptionsModel {
	this := AzureSubscriptionsModel{}
	return &this
}

// GetItems returns the Items field value
func (o *AzureSubscriptionsModel) GetItems() []AzureSubscriptionOverview {
	if o == nil {
		var ret []AzureSubscriptionOverview
		return ret
	}

	return o.Items
}

// GetItemsOk returns a tuple with the Items field value
// and a boolean to check if the value has been set.
func (o *AzureSubscriptionsModel) GetItemsOk() ([]AzureSubscriptionOverview, bool) {
	if o == nil {
		return nil, false
	}
	return o.Items, true
}

// SetItems sets field value
func (o *AzureSubscriptionsModel) SetItems(v []AzureSubscriptionOverview) {
	o.Items = v
}

// GetSubscriptions returns the Subscriptions field value if set, zero value otherwise.
func (o *AzureSubscriptionsModel) GetSubscriptions() []AzureSubscriptionOverview {
	if o == nil || IsNil(o.Subscriptions) {
		var ret []AzureSubscriptionOverview
		return ret
	}
	return o.Subscriptions
}

// GetSubscriptionsOk returns a tuple with the Subscriptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureSubscriptionsModel) GetSubscriptionsOk() ([]AzureSubscriptionOverview, bool) {
	if o == nil || IsNil(o.Subscriptions) {
		return nil, false
	}
	return o.Subscriptions, true
}

// SetSubscriptions gets a reference to the given []AzureSubscriptionOverview and assigns it to the Subscriptions field.
func (o *AzureSubscriptionsModel) SetSubscriptions(v []AzureSubscriptionOverview) {
	o.Subscriptions = v
}

// GetMaxCitrixManagedSubscriptions returns the MaxCitrixManagedSubscriptions field value if set, zero value otherwise.
func (o *AzureSubscriptionsModel) GetMaxCitrixManagedSubscriptions() int32 {
	if o == nil || IsNil(o.MaxCitrixManagedSubscriptions) {
		var ret int32
		return ret
	}
	return *o.MaxCitrixManagedSubscriptions
}

// GetMaxCitrixManagedSubscriptionsOk returns a tuple with the MaxCitrixManagedSubscriptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureSubscriptionsModel) GetMaxCitrixManagedSubscriptionsOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxCitrixManagedSubscriptions) {
		return nil, false
	}
	return o.MaxCitrixManagedSubscriptions, true
}

// SetMaxCitrixManagedSubscriptions gets a reference to the given int32 and assigns it to the MaxCitrixManagedSubscriptions field.
func (o *AzureSubscriptionsModel) SetMaxCitrixManagedSubscriptions(v int32) {
	o.MaxCitrixManagedSubscriptions = &v
}

// GetUniqueName returns the UniqueName field value if set, zero value otherwise.
func (o *AzureSubscriptionsModel) GetUniqueName() string {
	if o == nil || IsNil(o.UniqueName) {
		var ret string
		return ret
	}
	return *o.UniqueName
}

// GetUniqueNameOk returns a tuple with the UniqueName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureSubscriptionsModel) GetUniqueNameOk() (*string, bool) {
	if o == nil || IsNil(o.UniqueName) {
		return nil, false
	}
	return o.UniqueName, true
}

// SetUniqueName gets a reference to the given string and assigns it to the UniqueName field.
func (o *AzureSubscriptionsModel) SetUniqueName(v string) {
	o.UniqueName = &v
}

// GetStaleData returns the StaleData field value if set, zero value otherwise.
func (o *AzureSubscriptionsModel) GetStaleData() bool {
	if o == nil || IsNil(o.StaleData) {
		var ret bool
		return ret
	}
	return *o.StaleData
}

// GetStaleDataOk returns a tuple with the StaleData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureSubscriptionsModel) GetStaleDataOk() (*bool, bool) {
	if o == nil || IsNil(o.StaleData) {
		return nil, false
	}
	return o.StaleData, true
}

// SetStaleData gets a reference to the given bool and assigns it to the StaleData field.
func (o *AzureSubscriptionsModel) SetStaleData(v bool) {
	o.StaleData = &v
}

func (o AzureSubscriptionsModel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AzureSubscriptionsModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["items"] = o.Items
	if !IsNil(o.Subscriptions) {
		toSerialize["subscriptions"] = o.Subscriptions
	}
	if !IsNil(o.MaxCitrixManagedSubscriptions) {
		toSerialize["maxCitrixManagedSubscriptions"] = o.MaxCitrixManagedSubscriptions
	}
	if !IsNil(o.UniqueName) {
		toSerialize["uniqueName"] = o.UniqueName
	}
	if !IsNil(o.StaleData) {
		toSerialize["staleData"] = o.StaleData
	}
	return toSerialize, nil
}

type NullableAzureSubscriptionsModel struct {
	value *AzureSubscriptionsModel
	isSet bool
}

func (v NullableAzureSubscriptionsModel) Get() *AzureSubscriptionsModel {
	return v.value
}

func (v *NullableAzureSubscriptionsModel) Set(val *AzureSubscriptionsModel) {
	v.value = val
	v.isSet = true
}

func (v NullableAzureSubscriptionsModel) IsSet() bool {
	return v.isSet
}

func (v *NullableAzureSubscriptionsModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAzureSubscriptionsModel(val *AzureSubscriptionsModel) *NullableAzureSubscriptionsModel {
	return &NullableAzureSubscriptionsModel{value: val, isSet: true}
}

func (v NullableAzureSubscriptionsModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAzureSubscriptionsModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
