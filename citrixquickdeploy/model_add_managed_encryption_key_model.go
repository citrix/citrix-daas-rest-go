/*
Citrix Virtual App & Desktop Catalog Service 148.0.26750.34636

Catalog Service

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickdeploy

import (
	"encoding/json"
)

// checks if the AddManagedEncryptionKeyModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddManagedEncryptionKeyModel{}

// AddManagedEncryptionKeyModel struct for AddManagedEncryptionKeyModel
type AddManagedEncryptionKeyModel struct {
	SubscriptionId string `json:"subscriptionId"`
	Region         string `json:"region"`
	Name           string `json:"name"`
	// Enum to describe option to either generate or upload a key
	KeyOption ManagedEncryptionKeyOption `json:"keyOption"`
	KeyUpload *string                    `json:"keyUpload,omitempty"`
}

// NewAddManagedEncryptionKeyModelWithDefaults instantiates a new AddManagedEncryptionKeyModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddManagedEncryptionKeyModelWithDefaults() *AddManagedEncryptionKeyModel {
	this := AddManagedEncryptionKeyModel{}
	return &this
}

// GetSubscriptionId returns the SubscriptionId field value
func (o *AddManagedEncryptionKeyModel) GetSubscriptionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SubscriptionId
}

// GetSubscriptionIdOk returns a tuple with the SubscriptionId field value
// and a boolean to check if the value has been set.
func (o *AddManagedEncryptionKeyModel) GetSubscriptionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubscriptionId, true
}

// SetSubscriptionId sets field value
func (o *AddManagedEncryptionKeyModel) SetSubscriptionId(v string) {
	o.SubscriptionId = v
}

// GetRegion returns the Region field value
func (o *AddManagedEncryptionKeyModel) GetRegion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Region
}

// GetRegionOk returns a tuple with the Region field value
// and a boolean to check if the value has been set.
func (o *AddManagedEncryptionKeyModel) GetRegionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Region, true
}

// SetRegion sets field value
func (o *AddManagedEncryptionKeyModel) SetRegion(v string) {
	o.Region = v
}

// GetName returns the Name field value
func (o *AddManagedEncryptionKeyModel) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AddManagedEncryptionKeyModel) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AddManagedEncryptionKeyModel) SetName(v string) {
	o.Name = v
}

// GetKeyOption returns the KeyOption field value
func (o *AddManagedEncryptionKeyModel) GetKeyOption() ManagedEncryptionKeyOption {
	if o == nil {
		var ret ManagedEncryptionKeyOption
		return ret
	}

	return o.KeyOption
}

// GetKeyOptionOk returns a tuple with the KeyOption field value
// and a boolean to check if the value has been set.
func (o *AddManagedEncryptionKeyModel) GetKeyOptionOk() (*ManagedEncryptionKeyOption, bool) {
	if o == nil {
		return nil, false
	}
	return &o.KeyOption, true
}

// SetKeyOption sets field value
func (o *AddManagedEncryptionKeyModel) SetKeyOption(v ManagedEncryptionKeyOption) {
	o.KeyOption = v
}

// GetKeyUpload returns the KeyUpload field value if set, zero value otherwise.
func (o *AddManagedEncryptionKeyModel) GetKeyUpload() string {
	if o == nil || IsNil(o.KeyUpload) {
		var ret string
		return ret
	}
	return *o.KeyUpload
}

// GetKeyUploadOk returns a tuple with the KeyUpload field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddManagedEncryptionKeyModel) GetKeyUploadOk() (*string, bool) {
	if o == nil || IsNil(o.KeyUpload) {
		return nil, false
	}
	return o.KeyUpload, true
}

// SetKeyUpload gets a reference to the given string and assigns it to the KeyUpload field.
func (o *AddManagedEncryptionKeyModel) SetKeyUpload(v string) {
	o.KeyUpload = &v
}

func (o AddManagedEncryptionKeyModel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddManagedEncryptionKeyModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["subscriptionId"] = o.SubscriptionId
	toSerialize["region"] = o.Region
	toSerialize["name"] = o.Name
	toSerialize["keyOption"] = o.KeyOption
	if !IsNil(o.KeyUpload) {
		toSerialize["keyUpload"] = o.KeyUpload
	}
	return toSerialize, nil
}

type NullableAddManagedEncryptionKeyModel struct {
	value *AddManagedEncryptionKeyModel
	isSet bool
}

func (v NullableAddManagedEncryptionKeyModel) Get() *AddManagedEncryptionKeyModel {
	return v.value
}

func (v *NullableAddManagedEncryptionKeyModel) Set(val *AddManagedEncryptionKeyModel) {
	v.value = val
	v.isSet = true
}

func (v NullableAddManagedEncryptionKeyModel) IsSet() bool {
	return v.isSet
}

func (v *NullableAddManagedEncryptionKeyModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddManagedEncryptionKeyModel(val *AddManagedEncryptionKeyModel) *NullableAddManagedEncryptionKeyModel {
	return &NullableAddManagedEncryptionKeyModel{value: val, isSet: true}
}

func (v NullableAddManagedEncryptionKeyModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddManagedEncryptionKeyModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
