/*
Citrix Virtual App & Desktop Catalog Service 148.0.26750.34636

Catalog Service

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickdeploy

import (
	"encoding/json"
	"fmt"
)

// IdentityProvider the model 'IdentityProvider'
type IdentityProvider string

// List of IdentityProvider
const (
	IDENTITYPROVIDER_ALL       IdentityProvider = "All"
	IDENTITYPROVIDER_AD        IdentityProvider = "AD"
	IDENTITYPROVIDER_AZURE_AD  IdentityProvider = "AzureAD"
	IDENTITYPROVIDER_GOOGLE    IdentityProvider = "Google"
	IDENTITYPROVIDER_OKTA      IdentityProvider = "Okta"
	IDENTITYPROVIDER_POLICY    IdentityProvider = "Policy"
	IDENTITYPROVIDER_UNDEFINED IdentityProvider = "Undefined"
)

// All allowed values of IdentityProvider enum
var AllowedIdentityProviderEnumValues = []IdentityProvider{
	"All",
	"AD",
	"AzureAD",
	"Google",
	"Okta",
	"Policy",
	"Undefined",
}

func (v *IdentityProvider) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	*v = IdentityProvider(value)
	return nil
}

// NewIdentityProviderFromValue returns a pointer to a valid IdentityProvider
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewIdentityProviderFromValue(v string) (*IdentityProvider, error) {
	ev := IdentityProvider(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for IdentityProvider: valid values are %v", v, AllowedIdentityProviderEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v IdentityProvider) IsValid() bool {
	for _, existing := range AllowedIdentityProviderEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to IdentityProvider value
func (v IdentityProvider) Ptr() *IdentityProvider {
	return &v
}

type NullableIdentityProvider struct {
	value *IdentityProvider
	isSet bool
}

func (v NullableIdentityProvider) Get() *IdentityProvider {
	return v.value
}

func (v *NullableIdentityProvider) Set(val *IdentityProvider) {
	v.value = val
	v.isSet = true
}

func (v NullableIdentityProvider) IsSet() bool {
	return v.isSet
}

func (v *NullableIdentityProvider) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdentityProvider(val *IdentityProvider) *NullableIdentityProvider {
	return &NullableIdentityProvider{value: val, isSet: true}
}

func (v NullableIdentityProvider) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdentityProvider) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
