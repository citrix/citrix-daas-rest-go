/*
Citrix Virtual App & Desktop Catalog Service 147.0.26651.57932

Catalog Service

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickdeploy

import (
	"encoding/json"
)

// checks if the AzureCatalogVdaCostModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AzureCatalogVdaCostModel{}

// AzureCatalogVdaCostModel struct for AzureCatalogVdaCostModel
type AzureCatalogVdaCostModel struct {
	// Name of the VDA VM
	VmName *string `json:"vmName,omitempty"`
	// Name of the Azure resource group which the VDA VM is located
	AzureResourceGroup *string `json:"azureResourceGroup,omitempty"`
	// Total cost on Azure for the VDA
	TotalCost *float64 `json:"totalCost,omitempty"`
	// Cost of the VDA Disk
	DiskCost *float64 `json:"diskCost,omitempty"`
	// Cost of the VDA VM
	VmCost *float64 `json:"vmCost,omitempty"`
	// Unit of usage of the VDA VM
	VmUsage *float64 `json:"vmUsage,omitempty"`
	// A list of users assigned to the VDA, concatenated into a string with comma for csv output
	AssignedUsers *string `json:"assignedUsers,omitempty"`
}

// NewAzureCatalogVdaCostModelWithDefaults instantiates a new AzureCatalogVdaCostModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAzureCatalogVdaCostModelWithDefaults() *AzureCatalogVdaCostModel {
	this := AzureCatalogVdaCostModel{}
	return &this
}

// GetVmName returns the VmName field value if set, zero value otherwise.
func (o *AzureCatalogVdaCostModel) GetVmName() string {
	if o == nil || IsNil(o.VmName) {
		var ret string
		return ret
	}
	return *o.VmName
}

// GetVmNameOk returns a tuple with the VmName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureCatalogVdaCostModel) GetVmNameOk() (*string, bool) {
	if o == nil || IsNil(o.VmName) {
		return nil, false
	}
	return o.VmName, true
}

// SetVmName gets a reference to the given string and assigns it to the VmName field.
func (o *AzureCatalogVdaCostModel) SetVmName(v string) {
	o.VmName = &v
}

// GetAzureResourceGroup returns the AzureResourceGroup field value if set, zero value otherwise.
func (o *AzureCatalogVdaCostModel) GetAzureResourceGroup() string {
	if o == nil || IsNil(o.AzureResourceGroup) {
		var ret string
		return ret
	}
	return *o.AzureResourceGroup
}

// GetAzureResourceGroupOk returns a tuple with the AzureResourceGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureCatalogVdaCostModel) GetAzureResourceGroupOk() (*string, bool) {
	if o == nil || IsNil(o.AzureResourceGroup) {
		return nil, false
	}
	return o.AzureResourceGroup, true
}

// SetAzureResourceGroup gets a reference to the given string and assigns it to the AzureResourceGroup field.
func (o *AzureCatalogVdaCostModel) SetAzureResourceGroup(v string) {
	o.AzureResourceGroup = &v
}

// GetTotalCost returns the TotalCost field value if set, zero value otherwise.
func (o *AzureCatalogVdaCostModel) GetTotalCost() float64 {
	if o == nil || IsNil(o.TotalCost) {
		var ret float64
		return ret
	}
	return *o.TotalCost
}

// GetTotalCostOk returns a tuple with the TotalCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureCatalogVdaCostModel) GetTotalCostOk() (*float64, bool) {
	if o == nil || IsNil(o.TotalCost) {
		return nil, false
	}
	return o.TotalCost, true
}

// SetTotalCost gets a reference to the given float64 and assigns it to the TotalCost field.
func (o *AzureCatalogVdaCostModel) SetTotalCost(v float64) {
	o.TotalCost = &v
}

// GetDiskCost returns the DiskCost field value if set, zero value otherwise.
func (o *AzureCatalogVdaCostModel) GetDiskCost() float64 {
	if o == nil || IsNil(o.DiskCost) {
		var ret float64
		return ret
	}
	return *o.DiskCost
}

// GetDiskCostOk returns a tuple with the DiskCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureCatalogVdaCostModel) GetDiskCostOk() (*float64, bool) {
	if o == nil || IsNil(o.DiskCost) {
		return nil, false
	}
	return o.DiskCost, true
}

// SetDiskCost gets a reference to the given float64 and assigns it to the DiskCost field.
func (o *AzureCatalogVdaCostModel) SetDiskCost(v float64) {
	o.DiskCost = &v
}

// GetVmCost returns the VmCost field value if set, zero value otherwise.
func (o *AzureCatalogVdaCostModel) GetVmCost() float64 {
	if o == nil || IsNil(o.VmCost) {
		var ret float64
		return ret
	}
	return *o.VmCost
}

// GetVmCostOk returns a tuple with the VmCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureCatalogVdaCostModel) GetVmCostOk() (*float64, bool) {
	if o == nil || IsNil(o.VmCost) {
		return nil, false
	}
	return o.VmCost, true
}

// SetVmCost gets a reference to the given float64 and assigns it to the VmCost field.
func (o *AzureCatalogVdaCostModel) SetVmCost(v float64) {
	o.VmCost = &v
}

// GetVmUsage returns the VmUsage field value if set, zero value otherwise.
func (o *AzureCatalogVdaCostModel) GetVmUsage() float64 {
	if o == nil || IsNil(o.VmUsage) {
		var ret float64
		return ret
	}
	return *o.VmUsage
}

// GetVmUsageOk returns a tuple with the VmUsage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureCatalogVdaCostModel) GetVmUsageOk() (*float64, bool) {
	if o == nil || IsNil(o.VmUsage) {
		return nil, false
	}
	return o.VmUsage, true
}

// SetVmUsage gets a reference to the given float64 and assigns it to the VmUsage field.
func (o *AzureCatalogVdaCostModel) SetVmUsage(v float64) {
	o.VmUsage = &v
}

// GetAssignedUsers returns the AssignedUsers field value if set, zero value otherwise.
func (o *AzureCatalogVdaCostModel) GetAssignedUsers() string {
	if o == nil || IsNil(o.AssignedUsers) {
		var ret string
		return ret
	}
	return *o.AssignedUsers
}

// GetAssignedUsersOk returns a tuple with the AssignedUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureCatalogVdaCostModel) GetAssignedUsersOk() (*string, bool) {
	if o == nil || IsNil(o.AssignedUsers) {
		return nil, false
	}
	return o.AssignedUsers, true
}

// SetAssignedUsers gets a reference to the given string and assigns it to the AssignedUsers field.
func (o *AzureCatalogVdaCostModel) SetAssignedUsers(v string) {
	o.AssignedUsers = &v
}

func (o AzureCatalogVdaCostModel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AzureCatalogVdaCostModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.VmName) {
		toSerialize["vmName"] = o.VmName
	}
	if !IsNil(o.AzureResourceGroup) {
		toSerialize["azureResourceGroup"] = o.AzureResourceGroup
	}
	if !IsNil(o.TotalCost) {
		toSerialize["totalCost"] = o.TotalCost
	}
	if !IsNil(o.DiskCost) {
		toSerialize["diskCost"] = o.DiskCost
	}
	if !IsNil(o.VmCost) {
		toSerialize["vmCost"] = o.VmCost
	}
	if !IsNil(o.VmUsage) {
		toSerialize["vmUsage"] = o.VmUsage
	}
	if !IsNil(o.AssignedUsers) {
		toSerialize["assignedUsers"] = o.AssignedUsers
	}
	return toSerialize, nil
}

type NullableAzureCatalogVdaCostModel struct {
	value *AzureCatalogVdaCostModel
	isSet bool
}

func (v NullableAzureCatalogVdaCostModel) Get() *AzureCatalogVdaCostModel {
	return v.value
}

func (v *NullableAzureCatalogVdaCostModel) Set(val *AzureCatalogVdaCostModel) {
	v.value = val
	v.isSet = true
}

func (v NullableAzureCatalogVdaCostModel) IsSet() bool {
	return v.isSet
}

func (v *NullableAzureCatalogVdaCostModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAzureCatalogVdaCostModel(val *AzureCatalogVdaCostModel) *NullableAzureCatalogVdaCostModel {
	return &NullableAzureCatalogVdaCostModel{value: val, isSet: true}
}

func (v NullableAzureCatalogVdaCostModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAzureCatalogVdaCostModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
