/*
Citrix Virtual App & Desktop Catalog Service 147.0.26651.57932

Catalog Service

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickdeploy

import (
	"encoding/json"
	"fmt"
)

// OnboardingState the model 'OnboardingState'
type OnboardingState string

// List of OnboardingState
const (
	ONBOARDINGSTATE_NOT_STARTED OnboardingState = "NotStarted"
	ONBOARDINGSTATE_IN_PROGRESS OnboardingState = "InProgress"
	ONBOARDINGSTATE_COMPLETE    OnboardingState = "Complete"
	ONBOARDINGSTATE_FAILED      OnboardingState = "Failed"
)

// All allowed values of OnboardingState enum
var AllowedOnboardingStateEnumValues = []OnboardingState{
	"NotStarted",
	"InProgress",
	"Complete",
	"Failed",
}

func (v *OnboardingState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	*v = OnboardingState(value)
	return nil
}

// NewOnboardingStateFromValue returns a pointer to a valid OnboardingState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOnboardingStateFromValue(v string) (*OnboardingState, error) {
	ev := OnboardingState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OnboardingState: valid values are %v", v, AllowedOnboardingStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OnboardingState) IsValid() bool {
	for _, existing := range AllowedOnboardingStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OnboardingState value
func (v OnboardingState) Ptr() *OnboardingState {
	return &v
}

type NullableOnboardingState struct {
	value *OnboardingState
	isSet bool
}

func (v NullableOnboardingState) Get() *OnboardingState {
	return v.value
}

func (v *NullableOnboardingState) Set(val *OnboardingState) {
	v.value = val
	v.isSet = true
}

func (v NullableOnboardingState) IsSet() bool {
	return v.isSet
}

func (v *NullableOnboardingState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOnboardingState(val *OnboardingState) *NullableOnboardingState {
	return &NullableOnboardingState{value: val, isSet: true}
}

func (v NullableOnboardingState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOnboardingState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
