/*
Citrix Virtual App & Desktop Catalog Service 147.0.26651.57932

Catalog Service

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickdeploy

import (
	"encoding/json"
	"fmt"
)

// ResourceLocationJobStatus the model 'ResourceLocationJobStatus'
type ResourceLocationJobStatus string

// List of ResourceLocationJobStatus
const (
	RESOURCELOCATIONJOBSTATUS_UNKNOWN                                ResourceLocationJobStatus = "Unknown"
	RESOURCELOCATIONJOBSTATUS_INACTIVE                               ResourceLocationJobStatus = "Inactive"
	RESOURCELOCATIONJOBSTATUS_PROVISIONING_CONNECTOR_VMS             ResourceLocationJobStatus = "ProvisioningConnectorVms"
	RESOURCELOCATIONJOBSTATUS_VERIFYING_CREDENTIALS                  ResourceLocationJobStatus = "VerifyingCredentials"
	RESOURCELOCATIONJOBSTATUS_AWAITING_OUTSTANDING_OPERATIONS        ResourceLocationJobStatus = "AwaitingOutstandingOperations"
	RESOURCELOCATIONJOBSTATUS_RESTARTING_CONNECTOR_VMS               ResourceLocationJobStatus = "RestartingConnectorVms"
	RESOURCELOCATIONJOBSTATUS_DELETING_CUSTOMER_VMS                  ResourceLocationJobStatus = "DeletingCustomerVms"
	RESOURCELOCATIONJOBSTATUS_FAILED_QUOTA_CHECK                     ResourceLocationJobStatus = "FailedQuotaCheck"
	RESOURCELOCATIONJOBSTATUS_FAILED_INCORRECT_DOMAIN_CREDENTIALS    ResourceLocationJobStatus = "FailedIncorrectDomainCredentials"
	RESOURCELOCATIONJOBSTATUS_FAILED_INSUFFICIENT_DOMAIN_PERMISSIONS ResourceLocationJobStatus = "FailedInsufficientDomainPermissions"
	RESOURCELOCATIONJOBSTATUS_FAILED_NO_INTERNET_CONNECTION          ResourceLocationJobStatus = "FailedNoInternetConnection"
	RESOURCELOCATIONJOBSTATUS_FAILED_DOMAIN_NOT_REACHABLE            ResourceLocationJobStatus = "FailedDomainNotReachable"
	RESOURCELOCATIONJOBSTATUS_FAILED_OU_NOT_REACHABLE                ResourceLocationJobStatus = "FailedOUNotReachable"
	RESOURCELOCATIONJOBSTATUS_FAILED_DOMAIN_JOIN                     ResourceLocationJobStatus = "FailedDomainJoin"
	RESOURCELOCATIONJOBSTATUS_FAILED_INSTALL_SOFTWARE                ResourceLocationJobStatus = "FailedInstallSoftware"
	RESOURCELOCATIONJOBSTATUS_FAILED_PROVISION_VM                    ResourceLocationJobStatus = "FailedProvisionVm"
	RESOURCELOCATIONJOBSTATUS_FAILED_VNET_DETAILS_MISSING            ResourceLocationJobStatus = "FailedVnetDetailsMissing"
	RESOURCELOCATIONJOBSTATUS_FAILED_DELETE_CONNECTORS               ResourceLocationJobStatus = "FailedDeleteConnectors"
	RESOURCELOCATIONJOBSTATUS_FAILED_CREATE_NAT_GATEWAY              ResourceLocationJobStatus = "FailedCreateNatGateway"
	RESOURCELOCATIONJOBSTATUS_FAILED_DELETE_NAT_GATEWAY              ResourceLocationJobStatus = "FailedDeleteNatGateway"
	RESOURCELOCATIONJOBSTATUS_FAILED_REMOVE_RESOURCE_LOCATION        ResourceLocationJobStatus = "FailedRemoveResourceLocation"
	RESOURCELOCATIONJOBSTATUS_FAILED_DELETE_VNET                     ResourceLocationJobStatus = "FailedDeleteVnet"
	RESOURCELOCATIONJOBSTATUS_FAILED_GENERIC                         ResourceLocationJobStatus = "FailedGeneric"
)

// All allowed values of ResourceLocationJobStatus enum
var AllowedResourceLocationJobStatusEnumValues = []ResourceLocationJobStatus{
	"Unknown",
	"Inactive",
	"ProvisioningConnectorVms",
	"VerifyingCredentials",
	"AwaitingOutstandingOperations",
	"RestartingConnectorVms",
	"DeletingCustomerVms",
	"FailedQuotaCheck",
	"FailedIncorrectDomainCredentials",
	"FailedInsufficientDomainPermissions",
	"FailedNoInternetConnection",
	"FailedDomainNotReachable",
	"FailedOUNotReachable",
	"FailedDomainJoin",
	"FailedInstallSoftware",
	"FailedProvisionVm",
	"FailedVnetDetailsMissing",
	"FailedDeleteConnectors",
	"FailedCreateNatGateway",
	"FailedDeleteNatGateway",
	"FailedRemoveResourceLocation",
	"FailedDeleteVnet",
	"FailedGeneric",
}

func (v *ResourceLocationJobStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	*v = ResourceLocationJobStatus(value)
	return nil
}

// NewResourceLocationJobStatusFromValue returns a pointer to a valid ResourceLocationJobStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewResourceLocationJobStatusFromValue(v string) (*ResourceLocationJobStatus, error) {
	ev := ResourceLocationJobStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ResourceLocationJobStatus: valid values are %v", v, AllowedResourceLocationJobStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ResourceLocationJobStatus) IsValid() bool {
	for _, existing := range AllowedResourceLocationJobStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ResourceLocationJobStatus value
func (v ResourceLocationJobStatus) Ptr() *ResourceLocationJobStatus {
	return &v
}

type NullableResourceLocationJobStatus struct {
	value *ResourceLocationJobStatus
	isSet bool
}

func (v NullableResourceLocationJobStatus) Get() *ResourceLocationJobStatus {
	return v.value
}

func (v *NullableResourceLocationJobStatus) Set(val *ResourceLocationJobStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceLocationJobStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceLocationJobStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceLocationJobStatus(val *ResourceLocationJobStatus) *NullableResourceLocationJobStatus {
	return &NullableResourceLocationJobStatus{value: val, isSet: true}
}

func (v NullableResourceLocationJobStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceLocationJobStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
