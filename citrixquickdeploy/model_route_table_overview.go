/*
Citrix Virtual App & Desktop Catalog Service 148.0.26750.34636

Catalog Service

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickdeploy

import (
	"encoding/json"
)

// checks if the RouteTableOverview type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RouteTableOverview{}

// RouteTableOverview struct for RouteTableOverview
type RouteTableOverview struct {
	// The id of the route table
	Id string `json:"id"`
	// The current state of the route table
	State *RouteTableState `json:"state,omitempty"`
	// The error message if the route table failed
	ErrorMessage *string `json:"errorMessage,omitempty"`
	// The routes in the route table that are currently active
	ActiveRoutes []RouteOverview `json:"activeRoutes,omitempty"`
	// The routes that have to be applied to the route table
	PendingRoutes []RouteOverview `json:"pendingRoutes,omitempty"`
	// The transaction id
	TransactionId *string `json:"transactionId,omitempty"`
}

// NewRouteTableOverviewWithDefaults instantiates a new RouteTableOverview object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRouteTableOverviewWithDefaults() *RouteTableOverview {
	this := RouteTableOverview{}
	return &this
}

// GetId returns the Id field value
func (o *RouteTableOverview) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *RouteTableOverview) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *RouteTableOverview) SetId(v string) {
	o.Id = v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *RouteTableOverview) GetState() RouteTableState {
	if o == nil || IsNil(o.State) {
		var ret RouteTableState
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteTableOverview) GetStateOk() (*RouteTableState, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// SetState gets a reference to the given RouteTableState and assigns it to the State field.
func (o *RouteTableOverview) SetState(v RouteTableState) {
	o.State = &v
}

// GetErrorMessage returns the ErrorMessage field value if set, zero value otherwise.
func (o *RouteTableOverview) GetErrorMessage() string {
	if o == nil || IsNil(o.ErrorMessage) {
		var ret string
		return ret
	}
	return *o.ErrorMessage
}

// GetErrorMessageOk returns a tuple with the ErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteTableOverview) GetErrorMessageOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorMessage) {
		return nil, false
	}
	return o.ErrorMessage, true
}

// SetErrorMessage gets a reference to the given string and assigns it to the ErrorMessage field.
func (o *RouteTableOverview) SetErrorMessage(v string) {
	o.ErrorMessage = &v
}

// GetActiveRoutes returns the ActiveRoutes field value if set, zero value otherwise.
func (o *RouteTableOverview) GetActiveRoutes() []RouteOverview {
	if o == nil || IsNil(o.ActiveRoutes) {
		var ret []RouteOverview
		return ret
	}
	return o.ActiveRoutes
}

// GetActiveRoutesOk returns a tuple with the ActiveRoutes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteTableOverview) GetActiveRoutesOk() ([]RouteOverview, bool) {
	if o == nil || IsNil(o.ActiveRoutes) {
		return nil, false
	}
	return o.ActiveRoutes, true
}

// SetActiveRoutes gets a reference to the given []RouteOverview and assigns it to the ActiveRoutes field.
func (o *RouteTableOverview) SetActiveRoutes(v []RouteOverview) {
	o.ActiveRoutes = v
}

// GetPendingRoutes returns the PendingRoutes field value if set, zero value otherwise.
func (o *RouteTableOverview) GetPendingRoutes() []RouteOverview {
	if o == nil || IsNil(o.PendingRoutes) {
		var ret []RouteOverview
		return ret
	}
	return o.PendingRoutes
}

// GetPendingRoutesOk returns a tuple with the PendingRoutes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteTableOverview) GetPendingRoutesOk() ([]RouteOverview, bool) {
	if o == nil || IsNil(o.PendingRoutes) {
		return nil, false
	}
	return o.PendingRoutes, true
}

// SetPendingRoutes gets a reference to the given []RouteOverview and assigns it to the PendingRoutes field.
func (o *RouteTableOverview) SetPendingRoutes(v []RouteOverview) {
	o.PendingRoutes = v
}

// GetTransactionId returns the TransactionId field value if set, zero value otherwise.
func (o *RouteTableOverview) GetTransactionId() string {
	if o == nil || IsNil(o.TransactionId) {
		var ret string
		return ret
	}
	return *o.TransactionId
}

// GetTransactionIdOk returns a tuple with the TransactionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteTableOverview) GetTransactionIdOk() (*string, bool) {
	if o == nil || IsNil(o.TransactionId) {
		return nil, false
	}
	return o.TransactionId, true
}

// SetTransactionId gets a reference to the given string and assigns it to the TransactionId field.
func (o *RouteTableOverview) SetTransactionId(v string) {
	o.TransactionId = &v
}

func (o RouteTableOverview) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RouteTableOverview) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.ErrorMessage) {
		toSerialize["errorMessage"] = o.ErrorMessage
	}
	if !IsNil(o.ActiveRoutes) {
		toSerialize["activeRoutes"] = o.ActiveRoutes
	}
	if !IsNil(o.PendingRoutes) {
		toSerialize["pendingRoutes"] = o.PendingRoutes
	}
	if !IsNil(o.TransactionId) {
		toSerialize["transactionId"] = o.TransactionId
	}
	return toSerialize, nil
}

type NullableRouteTableOverview struct {
	value *RouteTableOverview
	isSet bool
}

func (v NullableRouteTableOverview) Get() *RouteTableOverview {
	return v.value
}

func (v *NullableRouteTableOverview) Set(val *RouteTableOverview) {
	v.value = val
	v.isSet = true
}

func (v NullableRouteTableOverview) IsSet() bool {
	return v.isSet
}

func (v *NullableRouteTableOverview) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRouteTableOverview(val *RouteTableOverview) *NullableRouteTableOverview {
	return &NullableRouteTableOverview{value: val, isSet: true}
}

func (v NullableRouteTableOverview) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRouteTableOverview) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
