/*
Citrix Virtual App & Desktop Catalog Service 147.0.26651.57932

Catalog Service

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickdeploy

import (
	"encoding/json"
)

// checks if the UpdateApplicationConfigurationModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateApplicationConfigurationModel{}

// UpdateApplicationConfigurationModel struct for UpdateApplicationConfigurationModel
type UpdateApplicationConfigurationModel struct {
	// Display name of app
	Name string `json:"name"`
	// Path to execute the application
	ApplicationPath string `json:"applicationPath"`
	// Working directory of the app at launch
	WorkingDirectory *string `json:"workingDirectory,omitempty"`
	// Application description that show up in Workspace
	Description *string `json:"description,omitempty"`
	// Extra parameters to provide the application when it is launched
	CommandLineParams *string `json:"commandLineParams,omitempty"`
	// The raw app icon represented as a base64 string
	Base64Icon *string `json:"base64Icon,omitempty"`
}

// NewUpdateApplicationConfigurationModelWithDefaults instantiates a new UpdateApplicationConfigurationModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateApplicationConfigurationModelWithDefaults() *UpdateApplicationConfigurationModel {
	this := UpdateApplicationConfigurationModel{}
	return &this
}

// GetName returns the Name field value
func (o *UpdateApplicationConfigurationModel) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *UpdateApplicationConfigurationModel) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *UpdateApplicationConfigurationModel) SetName(v string) {
	o.Name = v
}

// GetApplicationPath returns the ApplicationPath field value
func (o *UpdateApplicationConfigurationModel) GetApplicationPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ApplicationPath
}

// GetApplicationPathOk returns a tuple with the ApplicationPath field value
// and a boolean to check if the value has been set.
func (o *UpdateApplicationConfigurationModel) GetApplicationPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ApplicationPath, true
}

// SetApplicationPath sets field value
func (o *UpdateApplicationConfigurationModel) SetApplicationPath(v string) {
	o.ApplicationPath = v
}

// GetWorkingDirectory returns the WorkingDirectory field value if set, zero value otherwise.
func (o *UpdateApplicationConfigurationModel) GetWorkingDirectory() string {
	if o == nil || IsNil(o.WorkingDirectory) {
		var ret string
		return ret
	}
	return *o.WorkingDirectory
}

// GetWorkingDirectoryOk returns a tuple with the WorkingDirectory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateApplicationConfigurationModel) GetWorkingDirectoryOk() (*string, bool) {
	if o == nil || IsNil(o.WorkingDirectory) {
		return nil, false
	}
	return o.WorkingDirectory, true
}

// SetWorkingDirectory gets a reference to the given string and assigns it to the WorkingDirectory field.
func (o *UpdateApplicationConfigurationModel) SetWorkingDirectory(v string) {
	o.WorkingDirectory = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *UpdateApplicationConfigurationModel) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateApplicationConfigurationModel) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *UpdateApplicationConfigurationModel) SetDescription(v string) {
	o.Description = &v
}

// GetCommandLineParams returns the CommandLineParams field value if set, zero value otherwise.
func (o *UpdateApplicationConfigurationModel) GetCommandLineParams() string {
	if o == nil || IsNil(o.CommandLineParams) {
		var ret string
		return ret
	}
	return *o.CommandLineParams
}

// GetCommandLineParamsOk returns a tuple with the CommandLineParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateApplicationConfigurationModel) GetCommandLineParamsOk() (*string, bool) {
	if o == nil || IsNil(o.CommandLineParams) {
		return nil, false
	}
	return o.CommandLineParams, true
}

// SetCommandLineParams gets a reference to the given string and assigns it to the CommandLineParams field.
func (o *UpdateApplicationConfigurationModel) SetCommandLineParams(v string) {
	o.CommandLineParams = &v
}

// GetBase64Icon returns the Base64Icon field value if set, zero value otherwise.
func (o *UpdateApplicationConfigurationModel) GetBase64Icon() string {
	if o == nil || IsNil(o.Base64Icon) {
		var ret string
		return ret
	}
	return *o.Base64Icon
}

// GetBase64IconOk returns a tuple with the Base64Icon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateApplicationConfigurationModel) GetBase64IconOk() (*string, bool) {
	if o == nil || IsNil(o.Base64Icon) {
		return nil, false
	}
	return o.Base64Icon, true
}

// SetBase64Icon gets a reference to the given string and assigns it to the Base64Icon field.
func (o *UpdateApplicationConfigurationModel) SetBase64Icon(v string) {
	o.Base64Icon = &v
}

func (o UpdateApplicationConfigurationModel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateApplicationConfigurationModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["applicationPath"] = o.ApplicationPath
	if !IsNil(o.WorkingDirectory) {
		toSerialize["workingDirectory"] = o.WorkingDirectory
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.CommandLineParams) {
		toSerialize["commandLineParams"] = o.CommandLineParams
	}
	if !IsNil(o.Base64Icon) {
		toSerialize["base64Icon"] = o.Base64Icon
	}
	return toSerialize, nil
}

type NullableUpdateApplicationConfigurationModel struct {
	value *UpdateApplicationConfigurationModel
	isSet bool
}

func (v NullableUpdateApplicationConfigurationModel) Get() *UpdateApplicationConfigurationModel {
	return v.value
}

func (v *NullableUpdateApplicationConfigurationModel) Set(val *UpdateApplicationConfigurationModel) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateApplicationConfigurationModel) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateApplicationConfigurationModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateApplicationConfigurationModel(val *UpdateApplicationConfigurationModel) *NullableUpdateApplicationConfigurationModel {
	return &NullableUpdateApplicationConfigurationModel{value: val, isSet: true}
}

func (v NullableUpdateApplicationConfigurationModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateApplicationConfigurationModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
