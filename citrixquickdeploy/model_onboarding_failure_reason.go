/*
Citrix Virtual App & Desktop Catalog Service 147.0.26651.57932

Catalog Service

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickdeploy

import (
	"encoding/json"
	"fmt"
)

// OnboardingFailureReason the model 'OnboardingFailureReason'
type OnboardingFailureReason string

// List of OnboardingFailureReason
const (
	ONBOARDINGFAILUREREASON_NONE                         OnboardingFailureReason = "None"
	ONBOARDINGFAILUREREASON_SUBSCRIPTION_CREATION_FAILED OnboardingFailureReason = "SubscriptionCreationFailed"
	ONBOARDINGFAILUREREASON_ADDRESS_VALIDATION_FAILED    OnboardingFailureReason = "AddressValidationFailed"
	ONBOARDINGFAILUREREASON_UNKNOWN                      OnboardingFailureReason = "Unknown"
)

// All allowed values of OnboardingFailureReason enum
var AllowedOnboardingFailureReasonEnumValues = []OnboardingFailureReason{
	"None",
	"SubscriptionCreationFailed",
	"AddressValidationFailed",
	"Unknown",
}

func (v *OnboardingFailureReason) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	*v = OnboardingFailureReason(value)
	return nil
}

// NewOnboardingFailureReasonFromValue returns a pointer to a valid OnboardingFailureReason
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOnboardingFailureReasonFromValue(v string) (*OnboardingFailureReason, error) {
	ev := OnboardingFailureReason(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OnboardingFailureReason: valid values are %v", v, AllowedOnboardingFailureReasonEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OnboardingFailureReason) IsValid() bool {
	for _, existing := range AllowedOnboardingFailureReasonEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OnboardingFailureReason value
func (v OnboardingFailureReason) Ptr() *OnboardingFailureReason {
	return &v
}

type NullableOnboardingFailureReason struct {
	value *OnboardingFailureReason
	isSet bool
}

func (v NullableOnboardingFailureReason) Get() *OnboardingFailureReason {
	return v.value
}

func (v *NullableOnboardingFailureReason) Set(val *OnboardingFailureReason) {
	v.value = val
	v.isSet = true
}

func (v NullableOnboardingFailureReason) IsSet() bool {
	return v.isSet
}

func (v *NullableOnboardingFailureReason) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOnboardingFailureReason(val *OnboardingFailureReason) *NullableOnboardingFailureReason {
	return &NullableOnboardingFailureReason{value: val, isSet: true}
}

func (v NullableOnboardingFailureReason) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOnboardingFailureReason) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
