/*
Citrix Virtual App & Desktop Catalog Service 148.0.26750.34636

Catalog Service

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickdeploy

import (
	"encoding/json"
	"fmt"
)

// AzureVpnConnectionState the model 'AzureVpnConnectionState'
type AzureVpnConnectionState string

// List of AzureVpnConnectionState
const (
	AZUREVPNCONNECTIONSTATE_PENDING                  AzureVpnConnectionState = "Pending"
	AZUREVPNCONNECTIONSTATE_PROVISIONING             AzureVpnConnectionState = "Provisioning"
	AZUREVPNCONNECTIONSTATE_UPDATING                 AzureVpnConnectionState = "Updating"
	AZUREVPNCONNECTIONSTATE_FAILED                   AzureVpnConnectionState = "Failed"
	AZUREVPNCONNECTIONSTATE_UPDATE_FAILED            AzureVpnConnectionState = "UpdateFailed"
	AZUREVPNCONNECTIONSTATE_COMPLETE                 AzureVpnConnectionState = "Complete"
	AZUREVPNCONNECTIONSTATE_DELETING                 AzureVpnConnectionState = "Deleting"
	AZUREVPNCONNECTIONSTATE_DELETE_FAILED            AzureVpnConnectionState = "DeleteFailed"
	AZUREVPNCONNECTIONSTATE_ROUTE_TABLE_FAILED       AzureVpnConnectionState = "RouteTableFailed"
	AZUREVPNCONNECTIONSTATE_PROVISIONING_ROUTE_TABLE AzureVpnConnectionState = "ProvisioningRouteTable"
)

// All allowed values of AzureVpnConnectionState enum
var AllowedAzureVpnConnectionStateEnumValues = []AzureVpnConnectionState{
	"Pending",
	"Provisioning",
	"Updating",
	"Failed",
	"UpdateFailed",
	"Complete",
	"Deleting",
	"DeleteFailed",
	"RouteTableFailed",
	"ProvisioningRouteTable",
}

func (v *AzureVpnConnectionState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	*v = AzureVpnConnectionState(value)
	return nil
}

// NewAzureVpnConnectionStateFromValue returns a pointer to a valid AzureVpnConnectionState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAzureVpnConnectionStateFromValue(v string) (*AzureVpnConnectionState, error) {
	ev := AzureVpnConnectionState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AzureVpnConnectionState: valid values are %v", v, AllowedAzureVpnConnectionStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AzureVpnConnectionState) IsValid() bool {
	for _, existing := range AllowedAzureVpnConnectionStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AzureVpnConnectionState value
func (v AzureVpnConnectionState) Ptr() *AzureVpnConnectionState {
	return &v
}

type NullableAzureVpnConnectionState struct {
	value *AzureVpnConnectionState
	isSet bool
}

func (v NullableAzureVpnConnectionState) Get() *AzureVpnConnectionState {
	return v.value
}

func (v *NullableAzureVpnConnectionState) Set(val *AzureVpnConnectionState) {
	v.value = val
	v.isSet = true
}

func (v NullableAzureVpnConnectionState) IsSet() bool {
	return v.isSet
}

func (v *NullableAzureVpnConnectionState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAzureVpnConnectionState(val *AzureVpnConnectionState) *NullableAzureVpnConnectionState {
	return &NullableAzureVpnConnectionState{value: val, isSet: true}
}

func (v NullableAzureVpnConnectionState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAzureVpnConnectionState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
