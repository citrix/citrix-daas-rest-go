/*
Citrix Virtual App & Desktop Catalog Service 148.0.26750.34636

Catalog Service

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickdeploy

import (
	"encoding/json"
	"time"
)

// checks if the ConnectionLog type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConnectionLog{}

// ConnectionLog struct for ConnectionLog
type ConnectionLog struct {
	BrokeringTime           *time.Time                            `json:"brokeringTime,omitempty"`
	BrokeringUserName       *string                               `json:"brokeringUserName,omitempty"`
	BrokeringUserUPN        *string                               `json:"brokeringUserUPN,omitempty"`
	ConnectionFailureReason *ConnectionLogConnectionFailureReason `json:"connectionFailureReason,omitempty"`
	Disconnected            *bool                                 `json:"disconnected,omitempty"`
	EndTime                 *time.Time                            `json:"endTime,omitempty"`
	EstablishmentTime       *time.Time                            `json:"establishmentTime,omitempty"`
	MachineDNSName          *string                               `json:"machineDNSName,omitempty"`
	MachineName             *string                               `json:"machineName,omitempty"`
	MachineUid              *int32                                `json:"machineUid,omitempty"`
	Uid                     *int64                                `json:"uid,omitempty"`
}

// NewConnectionLogWithDefaults instantiates a new ConnectionLog object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectionLogWithDefaults() *ConnectionLog {
	this := ConnectionLog{}
	return &this
}

// GetBrokeringTime returns the BrokeringTime field value if set, zero value otherwise.
func (o *ConnectionLog) GetBrokeringTime() time.Time {
	if o == nil || IsNil(o.BrokeringTime) {
		var ret time.Time
		return ret
	}
	return *o.BrokeringTime
}

// GetBrokeringTimeOk returns a tuple with the BrokeringTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionLog) GetBrokeringTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.BrokeringTime) {
		return nil, false
	}
	return o.BrokeringTime, true
}

// SetBrokeringTime gets a reference to the given time.Time and assigns it to the BrokeringTime field.
func (o *ConnectionLog) SetBrokeringTime(v time.Time) {
	o.BrokeringTime = &v
}

// GetBrokeringUserName returns the BrokeringUserName field value if set, zero value otherwise.
func (o *ConnectionLog) GetBrokeringUserName() string {
	if o == nil || IsNil(o.BrokeringUserName) {
		var ret string
		return ret
	}
	return *o.BrokeringUserName
}

// GetBrokeringUserNameOk returns a tuple with the BrokeringUserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionLog) GetBrokeringUserNameOk() (*string, bool) {
	if o == nil || IsNil(o.BrokeringUserName) {
		return nil, false
	}
	return o.BrokeringUserName, true
}

// SetBrokeringUserName gets a reference to the given string and assigns it to the BrokeringUserName field.
func (o *ConnectionLog) SetBrokeringUserName(v string) {
	o.BrokeringUserName = &v
}

// GetBrokeringUserUPN returns the BrokeringUserUPN field value if set, zero value otherwise.
func (o *ConnectionLog) GetBrokeringUserUPN() string {
	if o == nil || IsNil(o.BrokeringUserUPN) {
		var ret string
		return ret
	}
	return *o.BrokeringUserUPN
}

// GetBrokeringUserUPNOk returns a tuple with the BrokeringUserUPN field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionLog) GetBrokeringUserUPNOk() (*string, bool) {
	if o == nil || IsNil(o.BrokeringUserUPN) {
		return nil, false
	}
	return o.BrokeringUserUPN, true
}

// SetBrokeringUserUPN gets a reference to the given string and assigns it to the BrokeringUserUPN field.
func (o *ConnectionLog) SetBrokeringUserUPN(v string) {
	o.BrokeringUserUPN = &v
}

// GetConnectionFailureReason returns the ConnectionFailureReason field value if set, zero value otherwise.
func (o *ConnectionLog) GetConnectionFailureReason() ConnectionLogConnectionFailureReason {
	if o == nil || IsNil(o.ConnectionFailureReason) {
		var ret ConnectionLogConnectionFailureReason
		return ret
	}
	return *o.ConnectionFailureReason
}

// GetConnectionFailureReasonOk returns a tuple with the ConnectionFailureReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionLog) GetConnectionFailureReasonOk() (*ConnectionLogConnectionFailureReason, bool) {
	if o == nil || IsNil(o.ConnectionFailureReason) {
		return nil, false
	}
	return o.ConnectionFailureReason, true
}

// SetConnectionFailureReason gets a reference to the given ConnectionLogConnectionFailureReason and assigns it to the ConnectionFailureReason field.
func (o *ConnectionLog) SetConnectionFailureReason(v ConnectionLogConnectionFailureReason) {
	o.ConnectionFailureReason = &v
}

// GetDisconnected returns the Disconnected field value if set, zero value otherwise.
func (o *ConnectionLog) GetDisconnected() bool {
	if o == nil || IsNil(o.Disconnected) {
		var ret bool
		return ret
	}
	return *o.Disconnected
}

// GetDisconnectedOk returns a tuple with the Disconnected field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionLog) GetDisconnectedOk() (*bool, bool) {
	if o == nil || IsNil(o.Disconnected) {
		return nil, false
	}
	return o.Disconnected, true
}

// SetDisconnected gets a reference to the given bool and assigns it to the Disconnected field.
func (o *ConnectionLog) SetDisconnected(v bool) {
	o.Disconnected = &v
}

// GetEndTime returns the EndTime field value if set, zero value otherwise.
func (o *ConnectionLog) GetEndTime() time.Time {
	if o == nil || IsNil(o.EndTime) {
		var ret time.Time
		return ret
	}
	return *o.EndTime
}

// GetEndTimeOk returns a tuple with the EndTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionLog) GetEndTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EndTime) {
		return nil, false
	}
	return o.EndTime, true
}

// SetEndTime gets a reference to the given time.Time and assigns it to the EndTime field.
func (o *ConnectionLog) SetEndTime(v time.Time) {
	o.EndTime = &v
}

// GetEstablishmentTime returns the EstablishmentTime field value if set, zero value otherwise.
func (o *ConnectionLog) GetEstablishmentTime() time.Time {
	if o == nil || IsNil(o.EstablishmentTime) {
		var ret time.Time
		return ret
	}
	return *o.EstablishmentTime
}

// GetEstablishmentTimeOk returns a tuple with the EstablishmentTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionLog) GetEstablishmentTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EstablishmentTime) {
		return nil, false
	}
	return o.EstablishmentTime, true
}

// SetEstablishmentTime gets a reference to the given time.Time and assigns it to the EstablishmentTime field.
func (o *ConnectionLog) SetEstablishmentTime(v time.Time) {
	o.EstablishmentTime = &v
}

// GetMachineDNSName returns the MachineDNSName field value if set, zero value otherwise.
func (o *ConnectionLog) GetMachineDNSName() string {
	if o == nil || IsNil(o.MachineDNSName) {
		var ret string
		return ret
	}
	return *o.MachineDNSName
}

// GetMachineDNSNameOk returns a tuple with the MachineDNSName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionLog) GetMachineDNSNameOk() (*string, bool) {
	if o == nil || IsNil(o.MachineDNSName) {
		return nil, false
	}
	return o.MachineDNSName, true
}

// SetMachineDNSName gets a reference to the given string and assigns it to the MachineDNSName field.
func (o *ConnectionLog) SetMachineDNSName(v string) {
	o.MachineDNSName = &v
}

// GetMachineName returns the MachineName field value if set, zero value otherwise.
func (o *ConnectionLog) GetMachineName() string {
	if o == nil || IsNil(o.MachineName) {
		var ret string
		return ret
	}
	return *o.MachineName
}

// GetMachineNameOk returns a tuple with the MachineName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionLog) GetMachineNameOk() (*string, bool) {
	if o == nil || IsNil(o.MachineName) {
		return nil, false
	}
	return o.MachineName, true
}

// SetMachineName gets a reference to the given string and assigns it to the MachineName field.
func (o *ConnectionLog) SetMachineName(v string) {
	o.MachineName = &v
}

// GetMachineUid returns the MachineUid field value if set, zero value otherwise.
func (o *ConnectionLog) GetMachineUid() int32 {
	if o == nil || IsNil(o.MachineUid) {
		var ret int32
		return ret
	}
	return *o.MachineUid
}

// GetMachineUidOk returns a tuple with the MachineUid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionLog) GetMachineUidOk() (*int32, bool) {
	if o == nil || IsNil(o.MachineUid) {
		return nil, false
	}
	return o.MachineUid, true
}

// SetMachineUid gets a reference to the given int32 and assigns it to the MachineUid field.
func (o *ConnectionLog) SetMachineUid(v int32) {
	o.MachineUid = &v
}

// GetUid returns the Uid field value if set, zero value otherwise.
func (o *ConnectionLog) GetUid() int64 {
	if o == nil || IsNil(o.Uid) {
		var ret int64
		return ret
	}
	return *o.Uid
}

// GetUidOk returns a tuple with the Uid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionLog) GetUidOk() (*int64, bool) {
	if o == nil || IsNil(o.Uid) {
		return nil, false
	}
	return o.Uid, true
}

// SetUid gets a reference to the given int64 and assigns it to the Uid field.
func (o *ConnectionLog) SetUid(v int64) {
	o.Uid = &v
}

func (o ConnectionLog) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConnectionLog) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BrokeringTime) {
		toSerialize["brokeringTime"] = o.BrokeringTime
	}
	if !IsNil(o.BrokeringUserName) {
		toSerialize["brokeringUserName"] = o.BrokeringUserName
	}
	if !IsNil(o.BrokeringUserUPN) {
		toSerialize["brokeringUserUPN"] = o.BrokeringUserUPN
	}
	if !IsNil(o.ConnectionFailureReason) {
		toSerialize["connectionFailureReason"] = o.ConnectionFailureReason
	}
	if !IsNil(o.Disconnected) {
		toSerialize["disconnected"] = o.Disconnected
	}
	if !IsNil(o.EndTime) {
		toSerialize["endTime"] = o.EndTime
	}
	if !IsNil(o.EstablishmentTime) {
		toSerialize["establishmentTime"] = o.EstablishmentTime
	}
	if !IsNil(o.MachineDNSName) {
		toSerialize["machineDNSName"] = o.MachineDNSName
	}
	if !IsNil(o.MachineName) {
		toSerialize["machineName"] = o.MachineName
	}
	if !IsNil(o.MachineUid) {
		toSerialize["machineUid"] = o.MachineUid
	}
	if !IsNil(o.Uid) {
		toSerialize["uid"] = o.Uid
	}
	return toSerialize, nil
}

type NullableConnectionLog struct {
	value *ConnectionLog
	isSet bool
}

func (v NullableConnectionLog) Get() *ConnectionLog {
	return v.value
}

func (v *NullableConnectionLog) Set(val *ConnectionLog) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectionLog) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectionLog) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectionLog(val *ConnectionLog) *NullableConnectionLog {
	return &NullableConnectionLog{value: val, isSet: true}
}

func (v NullableConnectionLog) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectionLog) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
