/*
Citrix Virtual App & Desktop Catalog Service 147.0.26651.57932

Catalog Service

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citrixquickdeploy

import (
	"encoding/json"
)

// checks if the PendingUser type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PendingUser{}

// PendingUser struct for PendingUser
type PendingUser struct {
	Upn *string `json:"upn,omitempty"`
}

// NewPendingUserWithDefaults instantiates a new PendingUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPendingUserWithDefaults() *PendingUser {
	this := PendingUser{}
	return &this
}

// GetUpn returns the Upn field value if set, zero value otherwise.
func (o *PendingUser) GetUpn() string {
	if o == nil || IsNil(o.Upn) {
		var ret string
		return ret
	}
	return *o.Upn
}

// GetUpnOk returns a tuple with the Upn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PendingUser) GetUpnOk() (*string, bool) {
	if o == nil || IsNil(o.Upn) {
		return nil, false
	}
	return o.Upn, true
}

// SetUpn gets a reference to the given string and assigns it to the Upn field.
func (o *PendingUser) SetUpn(v string) {
	o.Upn = &v
}

func (o PendingUser) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PendingUser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Upn) {
		toSerialize["upn"] = o.Upn
	}
	return toSerialize, nil
}

type NullablePendingUser struct {
	value *PendingUser
	isSet bool
}

func (v NullablePendingUser) Get() *PendingUser {
	return v.value
}

func (v *NullablePendingUser) Set(val *PendingUser) {
	v.value = val
	v.isSet = true
}

func (v NullablePendingUser) IsSet() bool {
	return v.isSet
}

func (v *NullablePendingUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePendingUser(val *PendingUser) *NullablePendingUser {
	return &NullablePendingUser{value: val, isSet: true}
}

func (v NullablePendingUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePendingUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
